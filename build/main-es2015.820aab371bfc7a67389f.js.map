{"version":3,"mappings":"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cmP,aACdqH,WAAcC,gBACdC,UAAY,EACZuoF,WAAgBqD,kBAChB3rF,YAAY,EACZqnD,kBAAkB,EAClB+jC,QAAgB,EAChB36F,OAAc,UACdyP,MAAc,CAACC,MAAO,UAExB,CACE9W,GAAcmP,iBACdqH,WAAcC,gBACdC,UAAY,EACZuoF,WAAgBqD,kBAChB3rF,YAAY,EACZqnD,kBAAkB,EAClB+jC,QAAgB,EAChB36F,OAAc,UACdwZ,MAAc,UACd/J,MAAc,CAACC,MAAO,UAExB,CACE9W,GAAcmP,oBACdqH,WAAcC,gBACdC,UAAc,EACduoF,WAAgBqD,qBAChB3rF,YAAc,EACdqnD,kBAAkB,EAClB+jC,QAAgB,EAChB36F,OAAc,YACdwZ,MAAc,cACd/J,MAAc,CAACC,MAAO,UAExB,CACE9W,GAAYmP,aACZqH,WAAYC,gBACZC,UAAY,EACZtP,OAAY,cACZyP,MAAY,CAACC,MAAO,UAEtB,CACE9W,GAAYmP,qBACZqH,WAAYC,gBACZC,UAAY,EACZC,YAAY,EACZsoF,WAAgBqD,cAChBtkC,kBAAkB,EAClB+jC,QAAgB,EAChBC,eAAgB,WAChB56F,OAAY,WACZyP,MAAY,CAACC,MAAO,UAEtB,CACE9W,GAAYmP,YACZoH,OAAY,CAACpH,YAAqC,oBAAqB,uBACvEqH,WAAYC,gBACZunD,kBAAkB,EAClBrnD,YAAkB,EAClBD,UAAkB,EAClBtP,OAAY,cACZyP,MAAY,CAACC,MAAO,WAIXjT,EAAmC,CAC9C,KACA,OACA,YACA,UACA,OACA,SACA,iBACA,iBACA,gBACA,UACA,UACA,cACA,cACA,YACA,UACA,cACA,sBACA,eACA,SACA,SACA,2BACA,8BACA,6BACA,0BACA,gCACA,8BACA,2BACA,gCACA,wCACA,qCACA,0BACA,+BACA,6BACA,0BACA,6BACA,4BACA,4BACA,yBACA,+BACA,0BACA,+BACA,kCACA,uCACA,YACA,cACA,uBACA,gBACA,oBACA,aACA,gBACA,qBACA,qBACA,qBACA,sBACA,cACA,YACA,iBACA,cACA,OACA,kBACA,YACA,WAGWqhF,EAAsB,CAAC,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","names":["e","j","ge","environment","ConfigurationService","NA","ALLEGRO_TUTORIAL_BUCKET","UPDATE_SERVER_PATH","BASE_REGEX","URI_REGEX","S3_WITH_BUCKET","GS_WITH_BUCKET","S3_WITH_BUCKET_AND_HOST","GS_WITH_BUCKET_AND_HOST","AZURE_WITH_BUCKET_AND_HOST","NON_AWS_S3","HTTP","FILE","FILE_WITH_FILE_NAME","TASK_TYPES","TRAINING","ANNOTATION","MANUAL_ANNOTATION","TESTING","recentTasksPrefix","RECENT_TASKS_ACTIONS","GET_RECENT_TASKS","SET_RECENT_TASKS","VIEW_PREFIX","MESSAGES_SEVERITY","SUCCESS","ERROR","INFO","WARN","USERS_PREFIX","NAVIGATION_PREFIX","NAVIGATION_ACTIONS","NAVIGATE_TO","NAVIGATION_END","SET_ROUTER_SEGMENT","UPDATATE_CURRENT_URL_WITHOUT_NAVIGATING","NAVIGATION_SKIPPED","url","window","location","origin","test","replace","port","apiBaseUrl","guessAPIServerURL","apiBaseUrlNoVersion","fileBaseUrl","HTTP_PREFIX","API_BASE_URL","API_BASE_URL_NO_VERSION","FILE_BASE_URL","constructor","this","AUTO_REFRESH_INTERVAL","SmApiRequestsService","http","createRequest","request","meta","method","endpoint","params","getParams","body","payload","withCredentials","post","options","pipe","map","res","data","posti","actionParams","HttpParams","Object","keys","forEach","key","append","i0","factory","ApiAuthService","apiRequest","basePath","configuration","HttpHeaders","Configuration","canConsumeForm","consumes","consume","authCreateCredentials","observe","reportProgress","Error","headers","defaultHeaders","async_enable","set","asyncHeader","httpHeaderAcceptSelected","selectHeaderAccept","undefined","httpContentTypeSelected","selectHeaderContentType","authCreateUser","authEditUser","authFixedUsersMode","authGetCredentials","authGetTokenForUser","authLogin","authLogout","authRevokeCredentials","authValidateToken","BASE_PATH","ApiEventsService","eventsAdd","eventsAddBatch","requests","eventsDebugImages","eventsDeleteForTask","eventsDownloadTaskLog","eventsGetDebugImageSample","eventsGetMultiTaskPlots","eventsGetScalarMetricData","eventsGetScalarMetricsAndVariants","eventsGetTaskEvents","eventsGetTaskLatestScalarValues","eventsGetTaskLog","eventsGetTaskMetrics","eventsGetTaskPlots","eventsGetVectorMetricsAndVariants","eventsMultiTaskScalarMetricsIterHistogram","eventsNextDebugImageSample","eventsScalarMetricsIterHistogram","eventsVectorMetricsIterHistogram","eventsScalarMetricsIterRaw","ApiLoginService","loginLogout","loginSupportedModes","ApiModelsService","modelsAddOrUpdateMetadata","modelsArchiveMany","modelsCreate","modelsDelete","modelsDeleteMany","modelsDeleteMetadata","modelsEdit","modelsGetAll","modelsGetAllEx","modelsGetById","modelsGetByIdEx","modelsGetByTaskId","modelsGetFrameworks","modelsMakePrivate","modelsMakePublic","modelsMove","modelsPublishMany","modelsSetReady","modelsUnarchiveMany","modelsUpdate","modelsUpdateForTask","ApiProjectsService","projectsCreate","projectsDelete","projectsGetAll","projectsGetAllEx","projectsGetById","projectsGetHyperParameters","projectsGetHyperparamValues","projectsGetModelTags","projectsGetTaskParents","projectsGetTaskTags","projectsGetUniqueMetricVariants","projectsMakePrivate","projectsMakePublic","projectsMerge","projectsMove","projectsUpdate","projectsValidateDelete","ApiQueuesService","queuesAddOrUpdateMetadata","queuesAddTask","queuesCreate","queuesDelete","queuesDeleteMetadata","queuesGetAll","queuesGetAllEx","queuesGetById","queuesGetDefault","queuesGetNextTask","queuesGetQueueMetrics","queuesMoveTaskBackward","queuesMoveTaskForward","queuesMoveTaskToBack","queuesMoveTaskToFront","queuesRemoveTask","queuesUpdate","ApiTasksService","tasksAddOrUpdateArtifacts","tasksAddOrUpdateModel","tasksArchive","tasksArchiveMany","tasksClone","tasksClose","tasksCompleted","tasksCreate","tasksDelete","tasksDeleteArtifacts","tasksDeleteConfiguration","tasksDeleteHyperParams","tasksDeleteMany","tasksDeleteModels","tasksDequeue","tasksDequeueMany","tasksEdit","tasksEditConfiguration","tasksEditHyperParams","tasksEnqueue","tasksEnqueueMany","tasksFailed","tasksGetAll","tasksGetAllEx","tasksGetById","tasksGetByIdEx","tasksGetConfigurationNames","tasksGetConfigurations","tasksGetHyperParams","tasksGetTypes","tasksMakePrivate","tasksMakePublic","tasksMove","tasksPing","tasksPublish","tasksPublishMany","tasksReset","tasksResetMany","tasksSetRequirements","tasksStarted","tasksStop","tasksStopMany","tasksStopped","tasksUnarchiveMany","tasksUpdate","tasksUpdateBatch","tasksValidate","ApiUsersService","usersCreate","usersDelete","usersGetAll","usersGetAllEx","usersGetById","usersGetCurrentUser","usersGetPreferences","usersSetPreferences","usersUpdate","ApiWorkersService","workersGetActivityReport","workersGetAll","workersGetMetricKeys","workersGetStats","workersRegister","workersStatusReport","workersUnregister","configurationParameters","apiKeys","username","password","accessToken","contentTypes","length","type","find","x","isJsonMime","accepts","mime","jsonMime","RegExp","toLowerCase","ScalarKeyEnum","Iter","Timestamp","IsoTime","ProjectsGetAllExRequest","Active","Archived","TaskStatusEnum","Created","Queued","InProgress","Stopped","Published","Publishing","Closed","Failed","Completed","Unknown","TaskTypeEnum","Training","Testing","Inference","DataProcessing","Application","Monitor","Controller","Optimizer","Service","Qc","Custom","BlModelsService","addHiddenTag","modelTags","includes","concat","removeHiddenTag","filter","tag","BlTasksService","getDefaultQueue","queues","queue","get","previouslyUsedQueue","id","isDefaultQueue","setPreviouslyUsedQueue","system_tags","DEFAULT_QUEUE_TAG","canEnqueue","task","TASKS_STATUS","status","canDequeue","taskTags","updateAnnotatorIndexTag","annotatorIndex","indexOf","findIndex","startsWith","TAGS","push","updateAnnotatedNumberTag","getTaskAnnotorValue","getAnnotatorIndexTag","foundTag","getAnnotatedNumberTag","annotatorTag","parseInt","split","InjectionToken","setCurrentUser","createAction","props","selectHasDataFeature","createSelector","users","usersReducer","createReducer","initUsers","usersReducerFunctions","on","state","action","currentUser","user","activeWorkspace","_a","company","userWorkspaces","v","_b","selectFeatures","selectTermsOfUse","accept_required","selectInvitesPending","ExperimentMenuExtendedComponent","ExperimentMenuComponent","contextMenu","t","selectors","ctx","GET_ALL_QUERY_ANY_FIELDS","getExperimentInfoOnlyFields","hasDataFeature","EXPERIMENT_INFO_ONLY_FIELDS_BASE","ItemFooterModel","entitiesType","super","MenuItems","ICONS","getItemState","disable","_","description","menuItemText","transform","E","available","disableDescription","selectionIsOnlyExamples","enqueue","preventCurrentItem","selectionAllIsArchive","selectionDisabledAbort","selected","dequeue","selectionDisabledAbortAllChildren","SelectHyperParamsForCustomColComponent","EventEmitter","tableCols","metricsCols","toggleParamToDisplay","param","value","selectedHyperParamToShow","emit","addCol","$event","ctx_r4","oxw","ctx_r6","ctx_r7","ctx_r8","ctx_r9","ctx_r11","ctx_r12","ctx_r14","ctx_r15","ExperimentCustomColsMenuComponent","CustomColumnMode","hyperParams","_hyperParams","hasHyperParams","values","some","section","ExperimentHeaderComponent","_tableCols","col","header","onIsArchivedChanged","isArchivedChanged","onRefreshListClicked","refreshListClicked","setCustomColumnMode","mode","selectMetricActive","ExperimentsComponent","BaseEntityPage","store","syncSelector","route","router","dialog","EntityTypeEnum","experimentsActions","addTag","selectSplitSize$","select","selectSplitSize","tableSortFields$","selectTableSortFields","tap","field","sortFields","backdropActive$","selectBackdropActive","noMoreExperiments$","selectNoMoreExperiments","tableFilters$","selectTableFilters","isArchived$","selectIsArchivedMode","showAllSelectedIsActive$","selectShowAllSelectedIsActive","selectedTableExperiment$","selectSelectedTableExperiment","selectedExperimentsDisableAvailable$","selectedExperimentsDisableAvailable","selectedProject$","selectSelectedProject","selectedExperiment$","selectSelectedExperiment","selectedExperiments$","selectSelectedExperiments","selectedExperiments","readOnlySelection","exp","isReadOnly","hiddenTableCols$","selectExperimentsHiddenTableCols","searchQuery$","selectSearchQuery","autoRefreshState$","selectAutoRefresh","isAppVisible$","selectAppVisible","isExperimentInEditMode$","selectIsExperimentInEditMode","isSharedAndNotOwner$","selectIsSharedAndNotOwner","users$","selectExperimentsUsers","parent$","selectExperimentsParents","activeParentsFilter$","selectActiveParentsFilter","types$","selectExperimentsTypes","tags$","selectExperimentsTags","tagsFilterByProject$","selectTagsFilterByProject","projectTags$","selectProjectTags","companyTags$","selectCompanyTags","systemTags$","selectProjectSystemTags","currentUser$","selectCurrentUser","metricTableCols$","selectExperimentsMetricsColsForProject","tableColsOrder$","selectExperimentsTableColsOrder","columns$","selectExperimentsTableCols","metricVariants$","selectMetricVariants","metricLoading$","selectMetricsLoading","hyperParamsOptions$","selectHyperParamsOptions","hyperParams$","selectHyperParamsVariants","groupHyperParams","experiments$","selectExperimentsList","withLatestFrom","experiments","showArchived","filterArchivedExperiments","refreshing","syncAppSearch","parent","snapshot","projectId","ngOnInit","prevQueryParams","createFooterItems","selected$","data$","autoRefreshSub","interval","autoRefreshState","isExperimentInEditMode","isAppVisible","subscribe","refreshList","selectedProjectSubscription","project","dispatchAndLock","filteredTableCols$","combineLatest","metricCols","metric","EXPERIMENTS_TABLE_COL_FIELDS","deep","selectedProject","N","table","resize","tableCols$","distinctUntilChanged","a","b","isEqual","cols","hidden","selectedProjectSubs","selectRouterParams","queryParams","preventUrlUpdate","columns","metrics","allIds","decodeColumns","dispatch","visibleColumns","metricCol","createMetricColumn","createParamColumn","columnsReordered","order","orders","decodeOrder","filters","decodeFilter","setDeep","archive","selectExperimentFromUrl","config","footerState$","createFooterState","footerItems","ShowItemsFooterSelected","CompareFooterItem","DividerFooterItem","ArchiveFooterItem","DeleteFooterItem","EnqueueFooterItem","DequeueFooterItem","ResetFooterItem","AbortFooterItem","AbortAllChildrenFooterItem","PublishFooterItem","SelectedTagsFooterItem","MoveToFooterItem","HasReadOnlyFooterItem","onFooterHandler","emitValue","item","showAllSelected","compareExperiments","contextMenuExtended","restoreArchive","resetPopup","publishPopup","enqueuePopup","dequeuePopup","deleteExperimentPopup","stopPopup","stopAllChildrenPopup","moveToProjectPopup","ngOnDestroy","unsubscribe","experimentFromUrlSub","stopSyncSearch","searchSubs","ResetSearch","InitSearch","skip","query","experimentId","experiment","selectedExperiment","getNextExperiments","experimentsSelectionChanged","experimentSelectionChanged","sortedChanged","event","filterChanged","andFilter","filterMatchMode","navigate","ids","join","isArchived","archiveDialog","open","ConfirmDialogComponent","title","yes","no","iconClass","afterClosed","confirmed","switchArchiveMode","resetProjectSelection","active","closeExperimentPanel","selectedTableColsChanged","columnId","getMetricsToDisplay","selectedMetricToShow","valueType","variantCol","metricHash","variant","metric_hash","variantHash","variant_hash","getter","headerType","ColHeaderTypeEnum","sortable","filterable","isParam","style","width","removeColFromList","colId","sortIndex","columnResized","isAutorefresh","hideLoader","autoRefresh","queryParamsHandling","setTimeout","infoDisabled","setAutoRefresh","clearSelection","fromUrl","refreshTagsList","refreshTypesList","getParamId","clearTableFiltersHandler","tableFilters","setTableFilters","_r1","EXPERIMENT_COMMENT","ExperimentGeneralInfoComponent","FormControl","TIME_FORMAT_STRING","experimentComment","experimentCommentText","experimentCommentOriginal","rebuildCommentControl","ngAfterViewInit","selectCurrentActiveSectionEditSub","selectCurrentActiveSectionEdit","currentActiveSectionEdit","experimentDescriptionSection","editModeChanged","comment","commentControl","commentValueChanged","commentChanged","trim","editExperimentComment","onCancelComment","edit","ActivateEdit","DeactivateEdit","_r0","ctx_r3","ctx_r5","ExperimentInfoEditDescriptionComponent","ctx_r21","ExperimentInfoHeaderComponent","activatedRoute","tagMenu","tagMenuContent","_experiment","viewId","isDev","isDevelopment","systemTags","getSystemTags","shared","selectedDisableAvailable","selectionDisabledPublishExperiments","selectionDisabledReset","selectionDisabledDelete","selectionDisabledMoveTo","selectionDisabledEnqueue","selectionDisabledDequeue","selectionDisabledQueue","selectionDisabledViewWorker","selectionDisabledArchive","onNameChanged","name","experimentNameChanged","openTagMenu","position","clientX","y","clientY","openMenu","focus","removeTag","tagsMenuClosed","clear","editExperimentName","showID","getStatusLabel","EXPERIMENTS_STATUS_LABELS","onDescriptionHandler","relativeTo","_r4","_r3","gt","MAs","ExperimentInfoComponent","faDatabase","faCodeBranch","faFileExcel","faThList","faUpload","editable$","selectIsExperimentEditable","infoData$","selectExperimentInfoData","queryParams$","selectRouterQueryParams","tableSelectedExperiment$","selectedExperimentSubscription","isExample","routerConfigSubscription","selectRouterConfig","routerConfig","paramsSubscription","resultsTab","firstChild","routeConfig","path","debounceTime","commonInfoActions","toMaximize","updateExperimentName","ExperimentDetailsUpdated","changes","addMessage","deselectExperiment","navigateAfterExperimentSelectionChanged","onActivate","scrollContainer","scrollTop","maximize","pathname","resultsPath","_c","navigateByUrl","parts","splice","alert","version_control","response","console","log","dataset_upload","evente","selectedFiles","target","files","file","FormData","HttpEventType","Math","round","loaded","total","weight_upload","comparison","ExperimentExecutionSourceCodeComponent","HELP_TEXTS","sourceTypesEnum","label","formChangesSubscription","sourceCodeForm","form","valueChanges","formValue","editable","formDataChanged","resetOtherScriptParameters","sourceType","controls","setValue","branch","version_num","_r22","_r21","_r28","_r40","_r52","_r64","ne","_r75","ExperimentInfoExecutionComponent","element","minimized","getOr","executionInfo$","selectExperimentExecutionInfoData","showExtraDataSpinner$","selectShowExtraDataSpinner","isInDev$","selectIsSelectedExperimentInDev","saving$","selectIsExperimentSaving","selectedExperimentSubscrition","formDataSubscription","formData","saveSourceData","source","sourceCode","script","repository","entry_point","working_dir","convertScriptType","saveContainerData","container","saveOutputData","output_dest","outputDestination","nativeElement","cancelFormChange","activateEditChanged","sectionName","elementRef","bounding","getBoundingClientRect","containerRect","bottom","innerHeight","top","scroll","offsetTop","behavior","discardDiff","take","diff","editContainerSetupShellScript","smEditableSection","openEditJsonDialog","textData","setup_shell_script","bool","isUndefined","cancelClickedEvent","editInstallPackages","EditJsonComponent","requirements","pip","readOnly","typeJson","requirementsSection","editDiff","diffSection","clearInstalledPackages","clearConfirmDialog","clearSetupShellScript","charAt","toUpperCase","slice","editableSectionComponent","editJsonComponent","scriptType","showSection","selection","currentLink","ActiveSectionEnum","ExperimentArtifactsNavbarComponent","artifacts","dataAuditArtifacts","artifact","DATA_AUDIT_TABLE","otherArtifacts","trackByFn","index","ngOnChanges","noItemsMode","outputModels","inputModels","Pe","_d","ExperimentInfoArtifactsComponent","modelInfo$","selectExperimentModelInfoData","ExperimentInfo$","routerConfig$","selectedRouterConfigSubs","rc","activeSection","selectedId$","experimentKey$","artifactSubscription","selectedId","modelInfo","experimentKey","experimentInfo","onOutputModel","mt","outputModel","onInputModel","dn","Qt","selectedArtifact","selectedInputModel","input","model","selectedOutputModel","output","resetSelection","navigateToTarget","previousTarget","_e","_f","SELECT_MODEL_PREFIX","ADD_MANY_MODELS","GET_NEXT_MODELS","SET_MODELS","SET_NO_MORE_MODELS","RESET_STATE","ALL_PROJECTS_MODE_CHANGED","GLOBAL_FILTER_CHANGED","TABLE_SORT_CHANGED","TABLE_FILTER_CHANGED","tableSortChanged","setTableSort","setCurrentScrollId","selectModelInitState","models","selectedModels","noMoreModels","selectedModelSource","modelToken","viewMode","MODELS_VIEW_MODES","allProjectsMode","tableSortFields","MODELS_TABLE_COL_FIELDS","TABLE_SORT_ORDER","scrollId","globalFilter","actions","ex","matchMode","createFeatureSelector","selectModelsList","selectCurrentScrollId","selectGlobalFilter","selectIsAllProjectsMode","selectViewMode","selectSelectedModels","selectNoMoreModels","SelectModelComponent","dialogRef","MODELS_TABLE_COLS","models$","selectedModels$","viewMode$","searchValue$","noMoreModels$","isAllProjects$","selectModelsUsers","modelsActions","getTags","closeDialog","close","getNextModels","sort","isShift","onSearchValueChanged","modelSelectionChanged","onIsAllProjectsChanged","isAllProjects","BaseClickableArtifactComponent","adminService","artifactFilePathClicked","signUrl","signedUrl","getSignedUrl","disableCache","timestamp","selectSignedUrl","signed","ExperimentModelsFormViewComponent","_model","isLocalFile","uri","chooseModel","maxWidth","selectedModel","modelSelected","removeModel","ExperimentNetworkDesignFormComponent","ExperimentInfoModelComponent","Subject","userKnowledge$","selectExperimentUserKnowledge","routerModelId$","takeUntil","unsubscribe$","modelId","distinctUntilKeyChanged","outputMode","_g","experimentName","hi","ro","_h","_j","design","getModelDesign","ts","_k","inputDesign","modelProjectId","os","ns","_l","_m","next","onModelSelected","modelFoundIndex","m","newModels","cancelModelChange","CancelExperimentEdit","experimentModelForm","ExperimentArtifactItemViewComponent","_artifact","isLinkable","type_data","content_type","linkClicked","document","createElement","href","click","preventDefault","ExperimentInfoArtifactItemComponent","artifactKey$","artifactId","artifactKey","ExperimentHyperParamsNavbarComponent","changeDetection","_legacy","properties","encodeURI","detectChanges","routerParams","selectedHyperParam","hyperParamId","selectedObject","decodeURIComponent","configObject","ExperimentInfoHyperParametersComponent","hyperParamsInfo$","selectExperimentHyperParamsInfoData","configuration$","selectExperimentConfiguration","routerParams$","getExperimentConfigurationNames","getExperimentConfigurationObj","hyperParamsConfigSubscription","selectExperimentHyperParamsSelectedSectionFromRoute","selectExperimentSelectedConfigObjectFromRoute","hyperparams","selectedConfig","min","replaceUrl","SetExperimentFormErrors","ExperimentInfoTaskModelComponent","configInfo$","selectExperimentConfigObj","selectedConfigObj$","errors$","selectExperimentInfoErrors","selectedConfigObjSubscription","confObjName","onFormValuesChanged","onFormErrorsChanged","SetExperimentErrors","errors","saveModelData","saveExperimentConfigObj","editPrototext","prototext","clearPrototext","ExperimentExecutionParametersComponent","formNames","parameter","_formData","cloneDeep","row","uuidV4","formContainersSub","formContainers","list","formContainer","first","clickedRow","scrollToIndex","addRow","viewPort","scrollHeight","removeRow","rowActivated","jumpToResult","counterIndex","matchIndex","searchIndexList","executionParametersTable","firstChange","currentValue","previousValue","resetSearch","searchedText","searchResultsCounter","searchedIndexList","searchCounterChanged","scrollToResultCounterChanged","CdkVirtualScrollViewport","_r2","ExperimentInfoHyperParametersFormContainerComponent","cdr","selectedSectionHyperParams$","selectExperimentHyperParamsSelectedSectionParams","selectedSection$","selectedSectionSubscription","selectedSection","propSection","cancelHyperParametersChange","updateExperimentAtPath","executionParamsForm","sectionSaved","saveHyperParamsSection","deleteHyperParamsSection","searchTable","count","searchResultsCount","scrollIndexCounterChanged","scrollIndexCounter","ExperimentInfoGeneralComponent","experimentInfoData$","BaseExperimentOutputComponent","Subscription","subs","add","ResetExperimentMetrics","infoActions","isVisible","refresh","returnToInfo","minimizeView","part","toggleSettingsBar","toggleSettings","ExperimentOutputComponent","ExperimentOutputScalarsComponent","activeRoute","GroupByCharts","searchTerm$","selectExperimentMetricsSearchTerm","splitSize$","scalars$","selectExperimentInfoHistograms","experimentSettings$","selectSelectedExperimentSettings","settings","selectedScalar","smoothWeight$","selectSelectedSettingsSmoothWeight","xAxisType$","selectSelectedSettingsxAxisType","groupBy$","selectSelectedSettingsGroupBy","selectIsExperimentPendingRunning","selectIsExperimentInProgress","selectedExperimentId$","axis","ExperimentScalarRequested","groupBy","prepareGraphsAndUpdate","scalars","selectShowSettings","show","showSettingsBar","listOfHidden","of","selectSelectedSettingsHiddenScalar","refreshDisabled","selectedGraph","scrollToElement","graphs","resetMetrics","SetExperimentMetricsSearchTerm","searchTerm","splittedScalars","splitScalars","scalarList","prepareScalarList","convertScalars","metricsScalar","reduce","acc","curr","metricSelected","SetExperimentSettings","hiddenListChanged","hiddenList","hiddenMetricsScalar","searchTermChanged","changeSmoothness","smoothWeight","changeXAxisType","xAxisType","changeGroupBy","entries","variantGraph","graph","ExperimentOutputPlotsComponent","plots$","selectExperimentInfoPlots","selectedPlot","selectSelectedSettingsHiddenPlot","plotsSubscription","metricsPlots","groupedPlots","groupIterations","plotsList","preparePlotsList","convertPlots","plots","settingsSubscription","routerParamsSubscription","sortedList","sortMetricsList","hiddenMetricsPlot","experimentPlotsRequested","ExperimentLogInfoComponent","convert","Convert","hasAnsi","logInView","shouldFocusLog","hasFilter","regex","getRegexFromString","orgLogs","calcLines","prevLocation","prevLine","lines","prevLineOffset","fetchPrev","fetching","scrolling","logContainer","elm","offsetHeight","initial","canRefresh","scrollSubscription","elementScrolled","indexSubscription","scrolledIndexChange","itemsInView","ceil","getViewportSize","beginningOfLog","fetchMore","direction","from","i","observer","IntersectionObserver","isIntersecting","threshold","flags","match","pattern","msg","logItem","converted","toHtml","entry","separator","trackByTimestampFn","line","reset","getLast","ExperimentOutputLogComponent","log$","selectExperimentLog","logBeginning$","selectExperimentBeginningOfLog","filter$","selectLogFilter","logRefs","refs","logRef","creator","worker","disabled","hasLog","started","ResetOutput","getExperimentLog","selectRefreshing","ResetLogFilter","filterLog","SetLogFilter","getLogs","downloadLog","downloadFullLog","routes","component","children","redirectTo","pathMatch","canDeactivate","LeavingBeforeSaveAlertGuard","DebugImagesComponent","search","ExperimentRouterModule","SMSharedModule","RouterModule","actions$","apiModels","ofType","activeLoader","switchMap","oldOrders","addMultipleSortColumns","fetchModels$","mergeMap","MODELS_PAGE_SIZE","scroll_id","deactivateLoader","catchError","error","requestFailed","setServerError","exSelectors","getGetAllQuery","searchQuery","orderFields","userFilter","tagsFilter","systemTagsFilter","MODEL_TAGS","_any_","escapeRegex","fields","size","order_by","encodeOrder","tags","only_fields","ready","framework","scrollId1","gb","getReadyFilter","SelectModelEffects","__decorate","Effect","tt","SelectModelModule","imports","CommonModule","ModelSharedModule","EffectsModule","StoreModule","selectModelReducer","ExperimentOutputEffects","apiTasks","authApi","taskBl","eventsApi","ExperimentsMenuEffects","experimentSyncedKeys","ExperimentsModule","AdminService","SmSyncStateSelectorService","HttpClientModule","AngularFileUploaderModule","FontAwesomeModule","SMMaterialModule","FormsModule","LayoutModule","ReactiveFormsModule","ExperimentsCommonModule","ExperimentSharedModule","ExperimentGraphsModule","DebugImagesModule","ExperimentCompareSharedModule","CommonLayoutModule","MatSidenavModule","MatListModule","AngularSplitModule","EXPERIMENTS_STORE_KEY","experimentsReducers","commonExperimentsInitialState","experimentsViewReducer","commonExperimentsViewReducer","initialCommonExperimentInfoState","experimentLog","infoData","execution","showExtraDataSpinner","activeSectionEdit","saving","infoDataFreeze","userKnowledge","experimentSections","initialState","initialCommonExperimentOutputState","view","info","SET_EXPERIMENT","SET_EXPERIMENT_FORM_ERRORS","EXPERIMENT_DATA_UPDATED","hyperParamsSectionUpdated","EXPERIMENT_SAVE","saveExperimentSection","ACTIVATE_EDIT","DEACTIVATE_EDIT","EXPERIMENT_CANCEL_EDIT","EXPERIMENT_DETAILS_UPDATED","setExperimentSaving","newInfoData","SET_EXPERIMENT_ERRORS","ee","Ce","ae","Ee","R","P","commonExperimentOutputReducer","experimentsView","metricVariants","metricsLoading","experimentOutput","isSharedAndNotOwner","selectSelectedModel","selectExperimentInfoDataFreeze","selectExperimentFormValidity","ExperimentConverterService","MODEL_INPUT","MODEL_SOURCE","MODEL_OUTPUT","MODEL_NETWORK_DESIGN","DIGITS_AFTER_DECIMAL","SELECTED","ID","TYPE","NAME","USER","STARTED","COMPLETED","STATUS","LAST_UPDATE","LAST_ITERATION","COMMENT","ACTIVE_DURATION","PROJECT","METRIC","HYPER_PARAM","PARENT","EXPERIMENTS_TAGS","EXPERIMENTS_TAGS_TOOLTIP","entity","sysTags","commonExperimentConverterService","convertExperiment","experimentInfoBeforeChange","convertedExperiment","convertCommonExperiment","executionInfoNoOutputDest","destination","executionInfoNoOutputDestBeforeChange","convertExecution","commonConvertExecution","ExperimentReverterService","commonExperimentReverterService","revertExperiment","commonRevertExperiment","ModelMenuComponent","BaseContextMenuComponent","eRef","rt","modelSignedUri","S3BucketCredentials","selectS3BucketCredentials","me","isArchive","we","subscription","archiveClicked","selectedFiltered","restoreSelectedModels","selectedEntities","skipUndo","archivedSelectedModels","selectionDisabledPublishModels","htmlTextShorte","publishModel","publishModelClicked","currentProjects","Array","Set","Be","p","ChangeProjectDialogComponent","defaultProject","reference","Ge","moveToProjectClicked","changeProjectRequested","deleteModelPopup","CommonDeleteDialogComponent","numSelected","entityType","useCurrentEntity","showButton","disableClose","setSelectedModels","Ke","fetchModelsRequested","CancelModelEdit","ModelMenuExtendedComponent","FeatureModelsModule","ProjectCardMenuExtendedComponent","ProjectCardMenuComponent","readyForDeletion","unarchived","statsSubset","ctx_r13","ProjectsListComponent","pageSize","ctx_r1","ProjectsHeaderComponent","sortByField","sortByTitle","stats","status_count","queued","in_progress","published","total_runtime","closed","projectsOrderBy$","selectProjectsOrderBy","projectsSortOrder$","selectProjectsSortOrder","noMoreProjects$","selectNoMoreProjects","selectedProjectId$","projectReadyForDeletion$","selectProjectReadyForDeletion","readyForDeletionFilter","projectsList$","selectProjectsData","projectsList","selectedProjectId","regExp","Re","fe","sub_projects","pageProjectsList","ALL_EXPERIMENTS_CARD","calculateAllExperimentsProjectStats","GetAllProjectsPageProjects","selectedProjectIdSub","ResetProjectsSearchQuery","selectedProjectSub","showOnlyUserWorkSub$","selectShowOnlyUserWork","projectReadyForDeletionSub","isDeletableProject","showDeleteDialog","showConfirmDialog","getDeletePopupEntitiesList","getDeleteProjectPopupStatsBreakdown","ResetReadyToDelete","projectStats","resetDeleteState","ResetProjects","projectCardClicked","W","setSelectedProjectId","example","setProjectsSearchQuery","orderByChanged","sortByFieldName","SetProjectsOrderBy","projectNameChanged","updatedProject","ProjectUpdated","deleteProject","CheckProjectForDeletion","loadMore","openProjectDialog","projectDialog","ProjectDialogComponent","projectHasBeenUpdated","coreProjectsActions","CommonProjectsPageComponent","ProjectRouterModule","projectSyncedKeys","ProjectsModule","CommonProjectsModule","projectsReducer","projectsInitState","commonProjectsInitState","projectReadyForDeletion","PROJECTS_ACTIONS","commonProjectsReducer","selectShowHidden","projects","ProjectsSharedModule","ProfileNameComponent","getAllCredentials","nameChange","updatedUserName","updateCurrentUser","de","S3AccessComponent","formBuilder","s3bucketCredentials","formChangeSubscription","buildS3Form","S3Form","saveCredentials","getRawValue","disableTutorialBucket","BUCKET_CREDENTIALS","addBucket","Key","Secret","Region","Bucket","Endpoint","bucketCredentials","group","endsWith","removeBucket","removeAt","S3Credentials","array","bucket","s3bucketCredentialsChanged","tutorialBucketIndex","cre","toString","ProfileKeyStorageComponent","onS3BucketCredentialsChanged","resetS3Services","updateS3Credential","s3BucketCredentials","WebappConfigurationComponent","UserDataComponent","AdminCredentialTableBaseDirective","confirmPopUp","credential","access_key","credentialRevoked","inputs","AdminCredentialTableComponent","UserCredentialsComponent","credentials$","selectCredentials","newCredentialSub","selectNewCredential","creatingCredentials","createCredential","workspace","openCredentialsPopup","onCredentialRevoked","accessKey","workspaceId","WorkspaceConfigurationComponent","AdminFooterActionsComponent","AdminFooterComponent","selectServerVersions","version","getApiVersion","SettingsComponent","SettingsRoutingModule","SettingsModule","SharedModule","MatExpansionModule","selectBreadcrumbsStringsBase","selectSelectedTableModel","selectRootProjects","prepareNames","prepareLinkData","subProjects","subProjectsNames","r","C","currentName","foundProject","proj","subProjectsLinks","subProject","Q","substring","lastIndexOf","subCrumbs","overview","formatStaticCrumb","accountAdministration","general","scalar","debugImages","CircleTypeEnum","CheckPermissionDirective","templateRef","viewContainer","userDataSubscription","setUpView","permission","blocked","elseTemplateRef","allowed","role","g","createEmbeddedView","LoginService","BaseLoginService","httpClient","loginApi","configService","userPreferences","signup","signupInfo","EMPTY","getInviteInfo","inviteId","ssoLogin","ssoFlow","resolve","isFileserverUrl","convertToReverseProxy","COMMON_SEARCH_PREFIX","COMMON_SEARCH_ACTIONS","SET_IS_SEARCHING","RESET_SEARCH","INIT_SEARCH","SET_SEARCH_QUERY","SET_SEARCH_PLACEHOLDER","SET_SEARCH_ACTIVE","setSearchQuery","CommonSearchModule","commonSearchReducer","commonSearchInitState","isSearching","placeholder","selectCommonSearch","selectIsSearching","selectPlaceholder","selectActiveSearch","ALERT","CREATED","MINUS","CHART","QUEUED","ENQUEUE","DEQUEUE","IN_PROGRESS","STOPPED","STOPPED_ALL","RESUME","CLOSED","FAILED","FALSE","PUBLISHED","PUBLISHING","TRUE","DATASET","TASK","MODEL","SHOW","ARCHIVE","RESTORE","COMPARE","HIDE","ABORTED","UNKNOWN","IMPORT","ANNOTATION_MANUAL","ADMIN","DATASET_IMPORT","WARNING","OUTPUT","EXECUTION","LIST","REMOVE","MOVE_TO","PLUGIN","ADD","TREE","TABLE","FOCUS","LOG","METRICS","TOKEN","EDIT","EDITABLE","RESET","CLONE","EXTEND","DOWNLOAD","WORKER","TAG","SHARE","ARROW_DOWN","ARROW_UP","PALLET","blue25","blue50","blue100","blue200","blue250","blue280","blue300","blue400","blue450","blue480","blue500","blue550","blue570","blue600","blue650","blue700","blue800","blue900","blue950","AUTH_PREFIX","addCredential","resetCredential","removeCredential","saveS3Credentials","cancelS3Credentials","resetDontShowAgainForBucketEndpoint","showS3PopUp","getTutorialBucketCredentials","showLocalFilePopUp","updateAllCredentials","setSignedUrl","err","omit","setCompareAutoRefresh","serverError","contextSubCode","customMessage","aggregateSimilar","setNotificationDialog","resetLoader","setBackdrop","visibilityChanged","severity","userActions","suppressNextMessages","removeMessage","setServerUpdatesAvailable","setScaleFactor","firstLogin","neverShowPopupAgain","plotlyReady","aceReady","openAppsAwarenessDialog","PROJECTS_PREFIX","SET_PROJECTS","RESET_PROJECTS","SET_LAST_UPDATE","UPDATE_PROJECT","getAllSystemProjects","updateProject","setAllProjects","resetProjects","setLastUpdate","updateProjectCompleted","setSelectedProject","resetSelectedProject","setArchive","getCompanyTags","setTagsFilterByProject","setTags","setCompanyTags","openTagColorsMenu","setTagColors","openMoreInfoPopup","setMetricVariant","fetchGraphData","setGraphData","setURLParams","fetchCurrentUser","setCurrentUserName","termsOfUseAccepted","logout","logoutSuccess","setPreferences","setActiveWorkspace","setSelectedWorkspaceTab","setFilterByUser","setUserWorkspacesFromUser","setApiVersion","initAuth","showLocalFilePopup","localFilesPopupURLs","revokeSucceed","credentials","newCredential","dontShowAgainForBucketEndpoint","signedUrls","selectAuth","auth","selectRevokeSucceed","selectS3BucketCredentialsBucketCredentials","I","selectDontShowAgainForBucketEndpoint","getSignedUrlOrOrigin$","L","timeoutWith","commonAuthReducer","dontAskAgainForBucketName","credIndex","creds","k","fromEntries","inBucket","cred","extra","expires","initRootProjects","projectTags","companyTags","tagsColors","tagsFilterByProject","graphVariant","graphData","lastUpdate","rootProjects","selectSelectedProjectId","$","selectIsDeepMode","selectTagsColors","selectLastUpdate","selectTagColors","selectSelectedProjectsMetricVariant","selectSelectedMetricVariant","projectsVariant","selectSelectedMetricVariantForCurrProject","selectGraphData","projectsActions","newProjects","updating","stateProject","oe","colors","payLoad","initRouter","skipNextNavigation","selectRouter","selectRouterUrl","selectedWorkspaceTab","workspaces","showOnlyUserWork","serverVersions","selectActiveWorkspace","initViewState","loading","notification","loggedOut","backdropActive","compareAutoRefresh","applicationVisible","scaleFactor","firstLoginAt","u","localStorage","getItem","preferencesReady","views","selectLoading","selectNotification","selectLoggedOut","selectCompareAutoRefresh","selectScaleFactor","selectFirstLogin","selectPlotlyReady","selectNeverShowPopups","viewReducers","isLoggedOut","layoutActions","visible","scale","Date","getTime","popups","popupId","viewReducer","selectSync","selector","o","searchSetTerm","SEARCH_ACTIONS","searchStart","searchProjects","searchExperiments","searchModels","SEARCH_PREFIX","SEARCH_PAGE_SIZE","SET_TERM","SEARCH_START","SEARCH_PROJECTS","SEARCH_EXPERIMENTS","SEARCH_MODELS","SEARCH_COMPLETE","SEARCH_ERROR","SEARCH_CLEAR","SET_EXPERIMENTS","ACTIVATE","DEACTIVATE","EXPERIMENT_SEARCH_ONLY_FIELDS","WelcomeMessageComponent","code","subNote","beforeClosed","doNotShowAgain","step","z","gettingStartedContext","getStaticEnvironment","docsLink","steps","ORPHANED_QUEUE_STEPS","GETTING_STARTED_STEPS","install","configure","host","protocol","hostname","workspacesSub","community","communityServer","secretKey","secret_key","nextSteps","createCredentials","G","B","doNotShowThisAgain","MAT_DIALOG_DATA","ctx_r10","ctx_r17","DebugImageSnippetComponent","ThemeEnum","frame","source$","IsVideoPipe","IsAudioPipe","isHtmlPage","isTextFileURL","isFailed","te","_frame","openInNewTab","loadedMedia","isLoading","video","videoHeight","poster","copyToClipboardSuccess","success","DEBUG_IMAGES_PREFIX","resetDebugImages","setDebugImages","getDebugImagesMetrics","refreshDebugImagesMetrics","fetchExperiments","setExperimentsNames","setMetrics","setSelectedMetric","refreshMetric","getNextBatch","getPreviousBatch","setTimeIsNow","setBeginningOfTime","getDebugImageSample","getNextDebugImageSample","setCurrentDebugImage","setDebugImageViewerScrollId","setDebugImageIterations","setDisplayerEndOfTime","setDisplayerBeginningOfTime","resetDisplayer","ALL_IMAGES","removeAllImagesFromPayload","DebugImagesEffects","createEffect","debugActions","selectDebugImages","iters","navigate_earlier","actionsToShoot","setRefreshing","iterations","timeIsNow","beginningOfTime","refreshExperiments","tasks","event_type","selectImageViewerScrollId","iteration","min_iteration","max_iteration","navigateEarlier","endOfTime","settingsList","optionalMetrics","imageDisplayerScrollId","imageDisplayerBeginningOfTime","imageDisplayerEndOfTime","noMore","selectedMetric","minMaxIterations","currentImageViewerDebugImage","selectTaskNames","selectNoMore","selectOptionalMetrics","selectTimeIsNow","selectBeginningOfTime","selectMinMaxIterations","selectCurrentImageViewerDebugImage","selectDisplayerEndOfTime","selectDisplayerBeginningOfTime","debugSamplesReducer","DebugImagesViewComponent","iter","_iterations","iterationEvents","events","imageUrlError","urlError","elRef","tasks$","optionalMetrics$","noMoreData$","timeIsNow$","beginningOfTime$","debugImagesSubscription","val","variantAndMetric","selectedMetrics","markForCheck","mergeIterations","multipleExperiments","multiple","currentExperiment","beginningOfTimeSubscription","timeIsNowSubscription","experimentIds","taskNamesSubscription","Ne","isTaskRunning","experimentNames","modifiedExperimentsNames","substr","refreshingSubscription","optionalMetricsSubscription","optionalMetricsDic","experimentMetrics","optionalMetric","je","imageClicked","frames","iterationSnippets","sources","img","ImageDisplayerComponent","imageSources","snippetsMetaData","panelClass","height","maxHeight","trackExperiment","experimentID","selectMetric","change","nextBatch","taskMetric","previousBatch","backToNow","thereAreNoMetrics","thereAreNoDebugImages","shouldShowNoImagesForExperiment","UiComponentsModule","ScrollingModule","MatSliderModule","EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_","GET_SELECTED_EXPERIMENTS_FOR_COMPARE","REFETCH_EXPERIMENT_REQUESTED","setHideIdenticalFields","setExperimentsUpdateTime","refreshIfNeeded","toggleShowScalarOptions","setSearchExperimentsForCompareResults","setShowSearchExperimentsForCompare","resetSelectCompareHeader","getSelectedExperimentsForCompareAddDialog","compareAddDialogTableSortChanged","compareAddTableFilterChanged","compareAddTableFilterInit","compareAddTableClearAllFilters","compareAddDialogSetTableSort","refetchExperimentRequested","setNavigationPreferences","EXPERIMENTS_COMPARE_METRICS_CHARTS_","SET_SELECTED_EXPERIMENTS","SET_EXPERIMENT_METRICS_SEARCH_TERM","SET_EXPERIMENT_HISTOGRAM","SET_EXPERIMENT_PLOTS","GET_MULTI_SCALAR_CHARTS","GET_MULTI_PLOT_CHARTS","UPDATE_EXPERIMENT_SETTINGS","RESET_EXPERIMENT_METRICS","axisType","setAxisCache","resetState","setExperiments","experimentListUpdated","EXPERIMENTS_COMPARE_METRICS_VALUES_","GET_COMPARED_EXPERIMENTS_METRICS_VALUES","SET_COMPARED_EXPERIMENTS","SET_METRIC_VALUES_SORT_BY","keyOrValue","keyOrder","getExperimentsHyperParams","EXPERIMENTS_COMPARE_SCALARS_GRAPH","setMetricsList","setTasks","setvalueType","setHyperParamsList","setShowIdenticalHyperParams","allowAddExperiment$","selectRouterParams$","compareLimitations","SelectExperimentsForCompareComponent","changedDetectRef","BehaviorSubject","_resizedCols","resizedCols$","experimentsResults$","selectSelectedExperimentsForCompareAdd","unionBy","selectExperimentsForCompareSearchTerm","projects$","selectCompareAddTableSortFields","resizedCols","Xe","searchableFilter","term","closeSearch","syncSelectedExperiments","selectedExperimentsIds","tasksIds","originalSelectedExperiments","resetExperiments","resetGlobalFilter","reachedCompareLimit","clearTableFilters","applyChanges","resizeCol","widthPx","ExperimentCompareHeaderComponent","selectHideIdenticalFields$","selectHideIdenticalFields","selectRefreshing$","autorRefreshSub","routerSubscription","currentPage","queryParamsSubscription","queryParamsViewMode","c","showMenuSub","isAutoRefresh","changeView","queryParam","page","navigationPreferences","openAddExperimentSearch","selectionChanged","hideIdenticalFieldsToggled","checked","menuClosed","ExperimentsCompareComponent","navigationPreferences$","selectNavigationPreferences","updateUrl","treeBuilderService","buildTreeFromJson","obj","transformer","metaTransformer","transformerExtraParams","metaData","buildTreeFromJsonRec","classStyle","level","accumulator","_path","node","RENAME_MAP","network_design","uncommitted_changes","installed_packages","augmentation","filtering","labels_enumeration","mapping","COMPARE_DETAILS_ONLY_FIELDS_BASE","allExperiments","allIsOne","every","isArray","objValue","srcValue","isArrayOrderNotImportant","mutedArray","amount","compare","baseCompare","base","compared","added","removed","Diff","setLengthsAndChanges","baseLength","comparedLength","max","_values","newValue","pop","compareValues","_changes","pe","mutedValues","compareValuesFromBaseToRest","compareValuesBetweenTheRest","isNotLastIndex","diffArrays","removeDuplicated","removeUndefinedFromBackwardUtilValue","counter","newPath","installedPackages","networkDesign","currKey","M","O","a_hash_","padStart","confParams","originConfParams","paramName","has","alternativeConvertedExperiment","isObject","newKey","convertExperimentsArrays","hashedObj","currentIndex","convertedItemHash","originItem","flat","parentKey","orderedObj","abSort","localeCompare","sortObject","firstKey","jsons","json","mergeWith","customMergeStrategyForArrays","ExperimentCompareBase","buildExperimentTree","baseExperiment","mergedExperiment","buildSectionTree","extraParams","originExperiment","comparedExperiment","fullPath","fullPathJoined","originData","comparedData","existOnOrigin","existOnCompared","isEquals","isEmptyObject","isEmpty","isPrimitive","tooltip","allPaths","setPathDif","allPathsDiffs","compareTabPage","hypeParamObject","originalExperiments","isValueEqualToOrigin","selectedPath","hasDataFeature$","taskIds$","taskIds","getExperimentIdsParams","onInit","hideIdenticalFieldsSub","hide","hideIdenticalFields","experimentsDataControl","dataSource","treeControl","expandedPaths","expansionModel","experimentsDataSources","expandedDataNodes","dataNodes","hasChildren","searchText","hasData","detailsActions","paramsActions","experimentsSubscription","calculateTree","calculatingTree","experimentTrees","buildCompareTree","tree","clearRemovedExperiment","treeFlattener","MatTreeFlattener","nodeTransformer","getNodeLevel","getIsNodeExpandable","getNodeChildren","expandedsPaths","getExpandedPath","sectionTree","root","rootOnlyDiffs","filterTreeDiffs","FlatTreeControl","MatTreeFlatDataSource","connect","viewChange","Observable","nodes","all","onlyDiffs","setExpandedPaths","exapndAndScrollToPath","destroyed","onlyDiffsPaths","syncScrollSubscription","findAllOccurrences","foundIndex","foundPaths","findPrev","findNext","expandedDatanodes","toggleNode","n","n1","n2","toggle","expIds","expId","sub","virtualScrollRef","kk","originalScrolledElement","clearTimeout","timeoutIndex","scrollTo","left","scrollLeft","goToNextDiff","selectedPathIndex","openPaths","pathPartial","pathPart","nodeGotExpanded","previousOpenPaths","nodesToOpen","currentPath","isExpanded","flatNodes","scrollToInPixels","findRealIndex","vs","text","foundPathsPerExp","foundPathsPerExpTemp","keyWithoutHash","JSON","stringify","found","dataTransformer","metaDataTransformer","undefinedOriginFirstRun","syncUrl","newParams","extractTags","F","S","experimentTags","selectedPathClicked","keyClicked","checkIfIdenticalRow","copyIdToClipboard","resetComponentState","viewQuery","CompareCardBodyDirective","CompareCardExtraHeaderDirective","CompareCardHeaderDirective","DrawerComponent","renderer","ref","toggleDrawer","removeStyle","closedLabel","removeClass","setStyle","drawerContainer","clientHeight","addClass","toggled","CardComponent2","CompareCardListComponent","experimentRemoved","experimentListChanged","setAsBase","detailsContainer","reorderExperiments","prevIndex","newExperiments","moveItemInArray","drop","previousIndex","changeHovered","hovered","TemplateRef","PortalComponent","cfr","appRef","injector","DomPortalOutlet","getElementById","outletId","attach","portal","detach","DOCUMENT","CdkPortal","ExperimentCompareGeneralDataComponent","copyToClipboard","copyIdClicked","buildUrl","ExperimentCompareDetailsComponent","selectExperimentsDetails","afterResize","nativeWidth","treeCardBody","V","experimentData","compareArrayOfStrings","addValuesToNetworkDesign","modelNetworkDesignData","inputModelNetworkDesignValues","hasOwnProperty","inputModelKeys","outputModelKeys","General","treeCardBodies","getAllKeysEmptyObject","cur","toggleEllipsis","showEllipsis","SyncScrollService","setScroll","scrollSubject","getScroll","asObservable","updateOriginalTarget","originalTarget","clearInterval","timer","SyncScrollDirective","el","syncScrollService","scrollData","setProperty","onScroll","TableDiffComponent","sortByClicked","sortBy","sortByChanged","toggleSortOrder","sortConfig","keyValueArray","GetKeyValueArrayPipePipe","metricNode","allKeysEmptyObject","keyOrderSortConfig","valueKey","args","keyValueObj","variantObj","pure","VALUE_MODES","min_values","max_values","ExperimentCompareMetricValuesComponent","comparedObject","comparedTasks$","selectCompareMetricsValuesExperiments","sortOrder$","selectCompareMetricsValuesSortConfig","valuesMode","convertExperimentsToNodes","last_metrics","metricsValuesActions","comparedTasksSubscription","experimentsLastMetrics","comparedTasks","AllKeysObject","originObject","metaTransformerFunction","originPath","originPartial","comparedPartial","realIsNodeOpen","paths","collapsedToggled","metricSortChanged","nodeData","orderedKeys","sortByKeyOrValue","keyValue","urlParams","ExperimentCompareScalarChartsComponent","showSettingsBar$","selectShowScalarsOptions","selectCompareSelectedSettingsSmoothWeight","selectCompareSelectedSettingsxAxisType","selectCompareSelectedSettingsGroupBy","metrics$","selectCompareTasksScalarCharts","xAxisSub","GetMultiScalarCharts","cached","groupBySub","metricsSubscription","metricsWrapped","SetSelectedExperiments","merged","mergeMultiMetricsGroupedVariant","mergeMultiMetrics","graphList","buildNestedListWithoutChildren","ExperimentComparePlotsComponent","selectCompareTasksPlotCharts","prepareMultiPlots","prepareList","newGraphs","convertMultiPlots","GetMultiPlotCharts","ParallelCoordinatesGraphComponent","PlotlyGraphBase","colorHash","redrawChart","drawChart","metricValueType","_metricValueType","prepareGraph","_metric","parameters","_parameters","experimentsCopy","experimentsNames","duplicateName","filteredExperiments","_experiments","initColorSubscription","forceRedraw","colorSub","getColorsObservable","colorObj","toggleHideExperiment","getStringColor","colorArr","initColor","getExperimentNameForColor","getColorsArray","experimentsColors","trace","dimensions","allValuesIncludingNull","allValues","textVal","ticktext","naturalCompare","uniq","tickvals","constraintrange","ye","Me","parallelGraph","currDimention","d","Yt","range","color","colorscale","naVal","getNAValue","bt","parseFloat","dimensionsOrder","sortCol","valuesMax","valuesMin","Plotly","react","margin","l","offsetWidth","displaylogo","displayModeBar","modeBarButtonsToRemove","postRenderingGraphManipulation","graphWidth","selectAll","each","attr","wrap","tick","parentNode","lastChild","removeChild","appendChild","short","myArray","collator","Intl","Collator","numeric","sensitivity","aFloat","bFloat","Number","isNaN","highlightExperiment","highlighted","removeHighlightExperiment","_filter","opt","filterValue","ExperimentCompareHyperParamsGraphComponent","selectScalarsGraphMetrics","selectScalarsGraphHyperParams","selectedHyperParams$","selectSelectedSettigsHyperParams","selectedMetric$","selectSelectedSettigsMetric","selectShowIdenticalHyperParams$","selectScalarsGraphShowIdenticalHyperParams","selectScalarsGraphTasks","metricValueType$","selectMetricValueType","selectedItemsListMapper","clickOut","initView","listOpen","selectMetricSubscription","metricSubscription","metricsOptions","variants","hyperParamsSubscription","selectedParams","allParams","filterActive","showIdentical","showIdenticalParamsActive","sectionKey","acc2","paramKey","selectedHyperParams","selectedParam","experimentsIds","searchMetricRef","_filterGroup","metricName","updateServer","selectedParamsChanged","newSelectedParamsList","showIdenticalParamsToggled","updateMetricsList","clearMetricSearchAndSelected","clearMetricSearch","openList","trackMetricByFn","trackVariantByFn","valueTypeChange","RouterHelperGuard","canActivate","defaultViewMode","selectExperimentsParams","isParamsConverted","experimentList","originHyperParams","result","ExperimentCompareParamsComponent","ExperimentsCompareRoutingModule","ExperimentDetailsReverterService","experimentReverter","revertExperiments","last_iteration","last_update","completed","revertExecution","revertArtifacts","revertconfiguration","sortObjectByKey","orderedLabels","revertModels","revertArtifact","revertAuditLog","content_size","hash","display_data","restArtifact","Ft","preview","crc32","data_hash","pair","revertModel","revertModelInput","revertNetworkDesign","revertExecutionSource","image","arguments","binary","script_path","commit_id","tag_name","COMPARE_PARAMS_ONLY_FIELDS","ExperimentsCompareDetailsEffects","tasksApi","experimentDetailsReverter","selectExperimentIdsDetails","oldExperimentIds","newExperimentIds","fetchExperimentDetails$","oldExperiments","EXPERIMENTS_COMPARE_DEBUG_IMAGES_","ExperimentsCompareDebugImagesEffects","chartActions","selectCompareHistogramCacheAxisType","prevAxisType","no_scroll","ExperimentsCompareChartsEffects","tasksApiService","ExperimentsCompareMetricsValuesEffects","experimentsApi","selectExperimentsUpdateTime","experimentsUpdateTime","updatedExperimentsUpdateTime","experimentsWhereUpdated","shouldUpdate","EmptyAction","selectExperimentsMetricsCols","colIds","MINIMUM_ONLY_FIELDS","flatten","SelectCompareHeaderEffects","TableDiffModule","CardModule","DrawerModule","metricsList","getMetricOptions","paramsHasDiffs","getParametersHasDiffs","variantName","numberOfTasks","paramsValues","paramsObj","paramObj","paramsValuesHasDiff","ExperimentsCompareScalarsGraphEffects","ExperimentParamsReverterService","experimentParamsReverter","selectExperimentIdsParams","fetchExperimentParams$","ExperimentsCompareParamsEffects","compareSyncedKeys","ExperimentsCompareModule","DragDropModule","CommonExperimentSharedModule","experimentsCompareReducers","MatRadioModule","_experimentsCompareDetailsReducer","metricsMultiScalarsCharts","metricsHistogramCharts","cachedAxisType","metricsPlotsCharts","metricSortBy","bla","searchResultsExperiments","showSearch","hideIdenticalRows","showScalarOptions","projectColumnsSortOrder","projectColumnFilters","_compareHeader","_scalarsGraphReducer","showIdenticalHyperParams","_experimentsCompareParamsReducer","details","metricsValues","charts","newSettings","setting","compareHeader","scalarsGraph","experimentsCompare","experimentsDetails","experimentsParams","selectCompareHeader","selectIsCompare","Oe","yt","selectCompareAddTableFilters","compareMetricsValues","compareCharts","currentExperiments","selectScalarsGraph","$e","metricAcc","groupAcc","groupName","graphAcc","graphName","EXPERIMENTS_OUTPUT_PREFIX","GET_EXPERIMENT_LOG","SET_EXPERIMENT_LOG","RESET_OUTPUT","EXPERIMENT_PLOTS_REQUESTED","EXPERIMENT_SCALAR_REQUESTED","CHANGE_PROJECT_REQUESTED","SET_LOG_FILTER","RESET_LOG_FILTER","getGraphDisplayFullDetailsScalars","setXtypeGraphDisplayFullDetailsScalars","setGraphDisplayFullDetailsScalars","setGraphDisplayFullDetailsScalarsIsOpen","mergeGraphDisplayFullDetailsScalars","setExperimentLog","filterString","EXPERIMENTS_INFO_PREFIX","GET_EXPERIMENT_INFO","AUTO_REFRESH_EXPERIMENT_INFO","EXPERIMENT_UPDATED_SUCCESSFULLY","SET_EXPERIMENT_INFO_DATA","RESET_EXPERIMENT_INFO","UPDATE_EXPERIMENT_INFO_DATA","EXPERIMENT_SAVE_SECTION","getExperiment","getExperimentUncommittedChanges","setExperimentUncommittedChanges","CLONE_EXPERIMENT_CLICKED","publishClicked","stopClicked","dequeueClicked","getAllTasksChildren","setAllTasksChildren","shareSelectedExperiments","navigateToQueue","resetClicked","enqueueClicked","archiveSelectedExperiments","restoreSelectedExperiments","EXPERIMENTS_PREFIX","getExperiments","getExperimentsWithPageSize","setExperimentInPlace","setNoMoreExperiments","addExperiments","removeExperiments","updateExperiment","updateManyExperiment","setSelectedExperiments","setSelectedExperiment","selectAllExperiments","toggleColHidden","setHiddenColumns","setUsers","setParents","setActiveParentsFilter","getUsers","getParents","getFilteredUsers","tableFilterChanged","setProjectsTypes","getProjectTypes","showOnlySelected","globalFilterChanged","getCustomMetrics","getCustomHyperParams","setCustomMetrics","setCustomHyperParams","setExtraColumns","addColumn","removeCol","setColumnWidth","setColsOrderForProject","clearHyperParamsCols","resetSortOrder","afterSetArchive","setSplitSize","hyperParamSelectedInfoExperiments","hyperParamSelectedExperiments","setSelectedExperimentsDisableAvailable","CommonExperimentsInfoEffects","reverter","converter","selectSelectedExperimentFromRouter","selectedConfiguration","configurations","Ht","names","ut","configObj","configurationObj","tableSelected","currentSelected","previousSelectedId","At","previousSelectedLastUpdate","listed","rn","last_change","it","Ue","updateTime","We","convertStopToComplete","revertReadOnly","valid","infoFreeze","shareReplay","replace_hyperparams","CommonExperimentOutputEffects","outputActions","ft","batch_size","LOG_BATCH_SIZE","from_timestamp","selectFullScreenChart","selectFullScreenChartXtype","fullScreenData","chartType","count_total","selectFullScreenChartIsOpen","isOpen","returned","expand","returnedTillNow","plotsLength","allPlots","download","CommonExperimentsMenuEffects","projectApi","menuActions","selectedEntity","validate_tasks","updateExperimentsSuccess","updateExperimentFailed","new_task_project","cloneData","new_task_comment","new_task_name","new_project_name","newProjectName","viewActions","nt","new_project","selectedExp","project_name","project_id","setExperimentIfSelected","selectedExperimentInfo","experimentsFromState","experimentFromState","Dt","isSelectedExpInCheckedExps","allFailed","failed","undoAction","getNotificationAction","failedIds","fail","successExperiments","MoreMenuItems","operationName","changeList","succeeded","Lt","AutoRefreshExperimentInfo","actionType","kt","ExperimentTableCardComponent","experimentDuration","created","createdDate","completedDate","ExperimentOutputLogModule","MatProgressSpinnerModule","SharedPipesModule","NoUnderscorePipe","TitleCasePipe","CommonDeleteDialogModule","CommonExperimentsViewEffects","ExperimentTypeIconLabelComponent","GetVariantWithoutRoundPipe","GetParamMetricValuePipe","roundedMetricValue","getHyperParam","xe","getVariant","ve","noRound","getVariantRound","getRoundedNumber","HyperParamMetricColumnComponent","expandColToggle","stopPropagation","expandClicked","parentElement","clientWidth","ExperimentsTableComponent","BaseTableView","changeDetector","noUnderscorePipe","titleCasePipe","FILTERED_EXPERIMENTS_STATUS_OPTIONS","INITIAL_EXPERIMENT_TABLE_COLS","entitiesKey","selectedEntitiesKey","tableCol","roundedMetricValues","contextExperiment","filtersOptions","re","sortOptionalUsersList","hyperParamsOptions","parents","parentsAndActiveFilter","activeParentsFilter","He","sortOptionalParentsList","_selectedExperiments","updateSelectionState","_selectedExperiment","contextMenuActive","focusSelected","tagsAndActiveFilter","uniqueFilterValueAndExcluded","filtersValues","sortOptionalTagsList","types","typesAndActiveFilter","filtersMatch","filtersSubValues","sortOptionalProjectsList","createFiltersFromStore","assign","onRowSelectionChanged","sortByArr","selectedTags","excludedKey","tagsWithNull","scrollTableToTop","onLoadMoreClicked","loadMoreExperiments","onSortChanged","rowSelectedChanged","addList","getSelectionRange","emitSelection","searchValueChanged","searchValues","_selected","onContextMenu","rowData","prevSelected","navigateToParent","columnsWidthChanged","colIndex","delta","updateColumnsWidth","columnFilterOpened","tagsMenuOpened","columnFilterClosed","filtered","minMaxIterations$","endOfTime$","currentDebugImage$","currentDebugImage","onKeyDown","previous","calculateNewScale","canGoNext","canGoBack","scaleUp","scaleStep","changeScale","imageHeight","floor","debugImage","naturalHeight","imageWidth","naturalWidth","resetScale","resetDrag","changeCords","xCord","offsetX","yCord","offsetY","imageLoaded","closeImageDisplayer","fitToScreen","imageContainer","autoFitScale","imageTranslateY","imageTranslateX","dragImage","dragging","movementX","movementY","resetCords","disableNativeDrag","setDragging","wheelZoom","deltaY","downloadImage","src","URL","searchParams","last","changeIteration","currentDebugImageSubscription","isPlayer","begOfTimeSub","beg","endOfTimeSub","end","showImage","ctx_r2","SelectMetricForCustomColComponent","changeDetectorRef","metricTree","metricVar","toggleAllMetricsToDisplay","toggleMetricToDisplay","multiSelect","searchQ","ProjectsGetTaskParentsRequest","_tableFilters","removeEmptyValues","returnTableFilters","currentFilterName","hasValue","projectsApi","usersApi","exActions","auditTime","fetchExperiments$","EXPERIMENTS_PAGE_SIZE","hiddenCols","currentScrollId","GetExperimentInfo","addTasksAction","shouldFilterFilters","filteredTableFilters","Ot","qe","filterType","active_in_projects","userFiltersValue","resIds","shouldGetFilteredUsersNames","tasks_state","Fe","filteredParentIds","missingParentsIds","parentId","parentsTasks","isDeep","include_subprojects","page_size","decodeHyperParam","setProjectArchive","archived","globalSearch","showHidden","colsOrder","encodeColumns","filterColumns","selectionDisabledTags","experimentProject","activeChild","activeChildUrl","getRouteFullUrl","baseUrl","refreshScroll","selectedIds","isCompare","typeFilter","statusFilter","Ze","tagsFilterAnd","Ve","parentFilter","ze","It","colsFilters","metricColsFilters","refresh_scroll","be","addExcludeFilters","search_hidden","showAllSelectedIsActive","static","bodyStyleClass","headerStyleClass","disableDrag","disablePointerEvents","excludeFilter","columnExplain","ColHeaderFilterTypeEnum","Metric","None","fullScreenDetailedChart","fullScreenXtype","fetchingFullScreenData","isFullScreenOpen","totalLogLines","logFilter","showSettings","reverse","currLog","atStart","hiddenTableCols","active_duration","hiddenProjectTableCols","tempFilters","tableOrders","projectColumnsWidth","noMoreExperiment","selectedExperimentSource","experimentToken","splitSize","allRunningChildrenForAbortChildrenDialog","setExperimentsAndUpdateSelectedExperiments","T","modelsInitialState","currExp","newExp","f","remainingColsWidth","selectExperimentsTableColsWidth","xt","ht","selectRawExperimentsTableCols","colWidth","compareSortFields","compareFilters","selectAllRunningTasksChildrenForAbort","selectFullScreenChartIsFetching","isFetching","CommonExperimentConverterService","SelectQueueModule","EXECUTION_SOURCE_CODE","EXECUTION_HYPER_PARAMETERS","EXECUTION_OUTPUT","EXPERIMENT_GRAPH_ID_PREFIX","SINGLE_GRAPH_ID_PREFIX","pow","AbortAllChildrenDialogComponent","shouldBeAbortedTasks","isConfirmed","isMulti","readOnlyProjects$","currentProjectInstance","projectsSub","projectList","moveToForm","projectName","filteredProjects","startWith","asyncScheduler","filterText","projectsNames","isNewName","displayFn","setIsAutoCompleteOpen","isAutoCompleteOpen","CloneDialogComponent","defaultProjectId","extend","CLONE_NAME_PREFIX","defaultName","defaultComment","J","cloneForm","clearOnFirstFocus","untouched","_r5","blTaskService","selectionHasExamples","isCommunity","getProjectId","commonMenuActions","se","showConfirmArchiveExperiments","toggleFullScreen","showFullScreen","SelectQueueComponent","neverShowAgainPopups","enqueueExperiment","workers","orphanedQueueDialog","getBody","queueName","GetQueuesForEnqueue","confirmDialogRef","dequeueExperiment","selectQueuesList","qs","q","componentInstance","enqueueDequeueDisabled","devWarning","resetExperiment","stopExperiment","publishPopupBody","publishExperiment","shareExperimentPopup","ShareDialogComponent","link","alreadyShared","Ie","viewWorkerClicked","manageQueueClicked","clonePopup","cloneExperiment","activateFromMenuButton","SetExperiment","showNeverShowAgain","neverShowAgain","setMenuOpenStatus","shouldBeAbortedTasksSub","ExperimentStatusIconLabelComponent","SELECT_QUEUE_PREFIX","GET_QUEUES_FOR_ENQUEUE","GET_TASK_FOR_ENQUEUE","SET_TASK_FOR_ENQUEUE","SET_QUEUES_FOR_ENQUEUE","selectTaskForEnqueue","GetTaskForEnqueue","queuesSub","queues$","selectedQueue","SetTaskForEnqueue","apiQueues","SetQueuesForEnqueue","SelectQueueEffects","selectQueueReducer","selectQueueInitState","docker_cmd","CommonExperimentReverterService","activeWorkSpace$","activeWorkSpaceSubscription","activeWorkSpace","readonly","revertHyperParams","logLevel","revertRequirements","revertExecutionParameters","revertScriptType","modelEx","taskName","s","crumb","supportsExamples","crumbName","preparedName","LayoutReducer","selectBreadcrumbsStrings","ProjectContextNavbarComponent","PROJECT_ROUTES","tabClicked","feature","onBackToProjectClicked","backToProjectClicked","initLogin","terms","crmForm","login","selectInviteId","loginReducers","setTOU","setUserLoginState","MODELS_PREFIX","GET_MODEL_INFO","REFRESH_MODEL_INFO","SET_MODEL","ACTIVATE_MODEL_EDIT","MODEL_CANCEL_EDIT","SET_IS_MODEL_SAVING","MODEL_DETAILS_UPDATED","EDIT_MODEL","updateModelDetails","refreshModels","getNextModelsWithPageSize","setModels","setModelsInPlace","setNoMoreModels","setHiddenCols","setFrameworks","getFrameworks","addModels","removeModels","updateModel","setSelectedModel","selectAllModels","showSelectedOnly","setSelectedModelsDisableAvailable","h","MODELS_STORE_KEY","MODELS_PREFIX_INFO","MODELS_PREFIX_MENU","MODELS_PREFIX_VIEW","ModelCustomColsMenuComponent","ModelHeaderComponent","archivedChanged","onAddModelClicked","addModelClicked","ModelsComponent","modelsSelectors","selectedModel$","selectedModelsDisableAvailable$","activeSectionEdit$","selectModelsTags","frameworks$","selectModelsFrameworks","selectModelTableColumns","St","st","filterArchivedModels","showInfo$","selectedModelSubs","ue","originalTableColumns","selectedModelsSub","selectModelFromUrl","modelFromUrlSub","modelsSelectionChanged","compareModels","closeModelPanel","ModelInfoHeaderComponent","getSysTags","selectedModelsDisableAvailable","modelNameChanged","ActivateModelEdit","ModelInfoComponent","selectedTableModel$","selectedModelSubscription","updateModelName","getReadyStatus","deselectModel","navigateAfterModelSelectionChanged","ModelGeneralInfoComponent","datePipe","kpis","downloadable","canShowModel","onShowModel","showModel","cancelEdit","downloadModelClicked","ModelInfoGeneralComponent","signUrlIfNeeded","createModelLink","ModelViewNetworkComponent","designKey","fieldValueChanged","unsavedValue","activateEdit","inEditMode","activateEditClicked","saveClicked","saveFormData","cancelClicked","prototextSection","ModelInfoNetworkComponent","selectIsModelSaving","changedModel","SetIsModelSaving","EditModel","ModelInfoLabelsViewComponent","class","revertParameters","labels","convertParameters","labelA","labelB","ModelInfoLabelsComponent","ModelRouterModule","ModelsViewEffects","modelBl","frameworks","resActions","RefreshModelInfo","GetModelInfo","modelsList","addModelsAction","pt","Ye","wt","Tt","Zt","frameworkFilter","Nt","ke","MODELS_ONLY_FIELDS","Le","Qe","he","setModelsUrlParams","modelProject","isSelectedModelInCheckedModels","checkedModels","ModelsInfoEffects","MODELS_INFO_ONLY_FIELDS","ModelsMenuEffects","matDialog","updateModelsSuccess","publishModelFailedText","errorMessage","selectedInfoModel","selectedModelInfo","modelsFromState","modelFromState","mod","update","successModels","modelIds","SmFormBuilderService","create","updateOn","arr","FormArray","FormGroup","getFormErrors","control","recursive","formGroup","addControl","modelSyncedKeys","ModelsModule","DatePipe","reducers","modelsViewReducer","newSelectedModel","modelsView","selectModelsTableColsOrder","selectModelsTableColsWidth","selectModelsHiddenTableCols","selectActiveSectionEdit","selectIsModelInEditMode","newState","currModel","newModel","ModelsTableComponent","MODELS_FRAMEWORK_LABELS","MODELS_READY_LABELS","MODELS_READY_OPTIONS","_models","contextModel","enableMultiSelect","only","enable","_enableMultiSelect","_selectedModels","ratio","_selectedModel","ie","sortOptionsList","frameworksAndActiveFilter","clickHandler","button","menuOpen","loadMoreModels","getColName","openContextMenu","observers","TableComponent","FRAMEWORK","READY","Caffe","TensorFlow","PyTorch","Keras","true","false","HIDDEN","SelectModelHeaderComponent","onAllProjectsChanged","isAllProjectsChanged","onSearchFocusOut","updatedData","getAllFilter","orderBy","subHeader","RESET_SEARCH_QUERY","SET_PROJECT_READY_FOR_DELETION","SET_ORDER_BY","SET_PROJECT_BY_ID","PROJECT_UPDATED","GET_PROJECTS","PROJECTS_SUCCESS","CHECK_PROJECT_FOR_DELETION","RESET_READY_TO_DELETE","SELECT_PROJECT","SELECT_ALL_PROJECTS","DELETE_PROJECT_SUCCESS","CREATE_PROJECT","CREATE_PROJECT_SUCCESS","CREATE_PROJECT_SUCCESS_OPTIMISTIC","SELECT_PROJECT_INDEX","GET_PROJECTS_NON_FILTERED_LIST","SET_PROJECTS_NON_FILTERED_LIST","UPDATE_ONE_PROJECT","SET_NO_MORE_PROJECTS","SET_NEXT_PAGE","ADD_TO_PROJECTS_LIST","ProjectsEffects","modelsApi","projectsValidateDeleteResponse","SetProjectReadyForDeletion","non_archived_tasks","non_archived_models","CommonProjectsEffects","parentProject","effectedRootProjects","UpdateProjectPartial","selectProjectsSearchQuery","selectProjectsScrollId","sortOrder","routerProjectId","forkJoin","stats_for_state","include_stats","shallow_search","active_users","stats_with_children","check_own_contents","projectsRes","currentProjectRes","newScrollId","isNotEmptyExampleProject","isRoot","AddToProjectsList","SetNoMoreProjects","own_models","own_tasks","ProjectDialogModule","projectsNonFilteredList","noMoreProjects","getCorrectSortingOrder","currentSortOrder","currentOrderField","nextOrderField","selectedProjectIndex","projectListInst","selectProjectForDelete","ENDPOINT_PATTERN","parse","matches","prefix","isPathStyle","region","FOUR_DAYS","HTTP_REGEX","replaceAll","baseString","toReplace","replaceWith","ignore","getBucketAndKeyFromSrc","srcArr","w","amazon","AmazonS3URI","urlBucket","urlEndpoint","BaseAdminService","confService","onRevokeSucceed","previouslySignedUrls","getEnvironment","conf","deleteS3FilesSubject","skipLocalFile","skipFileServer","addTenant","addS3TimeStamp","useFilesProxy","MAX_VALUE","checkLocalServerRunning","redirectToLocalServer","isGoogleCloudUrl","signGoogleCloudUrl","isAzureUrl","azureBucket","signAzureUrl","bucketKeyEndpoint","azure","s3","findOrInitBucketS3","command","GetObjectCommand","fromPromise","client","__awaiter","s3Presigner","S3RequestPresigner","middlewareName","presigned","middlewareStack","addRelativeTo","context","HttpRequest","$metadata","httpStatusCode","presign","signingRegion","signing_region","signingService","signing_service","relation","toMiddleware","override","send","remove","formatUrl","expiresIn","unhoistableHeaders","unsignableHeaders","findS3CredentialsInStore","s3Service","s3Services","createS3Service","accessKeyId","secretAccessKey","forcePathStyle","tls","S3Client","localServerWorking","fetch","sas","sasQueryString","deleteS3Files","skipSubjectReturn","DeleteObjectsCommand","Delete","Quiet","Objects","then","Errors","parsed","contains","trigger","closeMenu","menuOpened","tagMenuOpened","tagMenuClosed","MatMenuTrigger","COLOR_SCHEME","LineChartComponent","zone","right","_yLabel","initDone","lineChart","yAxisLabel","initLineChart","dataByTopic","topic","dates","chartData","xAxisCustomFormat","getXAxisFormatter","isAnimated","updateChart","updateLegend","legendChart","legend","legendContainer","legendRef","lineTooltip","lineChartContainer","chartRef","bind","initLegend","rect","legendWidth","colorSchema","numberFormat","isHorizontal","runOutsideAngular","topicName","datum","call","containerWidth","tooltipThreshold","lineMargin","lineCurve","grid","lineGradient","xAxisLabel","xTicks","yAxisLabelPadding","xAxisFormat","axisTimeCombinations","CUSTOM","lineTooltipContainer","valueLabel","dateFormat","dateCustomFormat","tooltipOffset","tooltipVerticalOffset","yTickFormatter","valueFormatter","firstDate","date","dateTimeSpan","onResize","ViewContainerRef","ClearFiltersButtonComponent","isTableFiltered","CustomColumnsListComponent","ExperimentSettingsComponent","RefreshButtonComponent","ScrollTextareaComponent","lastSearchIndex","pos","SectionHeaderComponent","ShowOnlyUserWorkComponent","showOnlyUserWork$","userFilterChanged","userFiltered","userFilterMenuOpened","isUserMenuOpened","isExampleProject","splitInitialSize","showInfoSub","minimizedView","getVisibleAreaSizes","setSplitSizeAction","dragSub","dragProgress$","throttleTime","progress","sizes","destroy$","complete","splitSizeChange","disableInfoPanel","clickOnSplit","tagSelected","_selectionAllHasExample","selectionAllHasExample","_selectionHasExample","selectionHasExample","_selectionExamplesCount","selectionExamplesCount","DELETE_PREFIX","deleteEntities","setNumberOfSourcesToDelete","addFailedDeletedFile","addFailedDeletedFiles","deleteFileServerSources","deleteS3Sources","setFailedDeletedEntities","filesNumber$","selectNumberOfSourcesToDelete","failedFiles$","selectFilesFailedToDelete","failedEntities$","selectEntitiesFailedToDelete","isOpenEntities","entityName","bodyMessage","getMessageByEntity","filesNumber","firstTime","noFilesToDelete","totalFilesNumber","progressPercent","showFinishMessage","failedFiles","isInteger","delete","inProgress","openToggle","openToggleEntities","entitiesBreakDown","DeleteDialogEffectsBase","getEntitySelector","entities","deleteEntityApi","urlsToDelete","parseErrors","getUrlsPerProvider","urlsPerSource","pauseAutorefresh","numberOfFiles","failedEntities","fs","filePaths","misc","Je","error_data","signResponse","fromFetch","filePath","filesPerBucket","fileSrc","return_file_urls","force","deletedExperiment","urls","artifact_urls","event_urls","model_urls","delete_contents","commutativeUrls","getSourceType","gc","failedEntity","message","DeleteDialogEffects","commonDeleteDialogReducer","MatProgressBarModule","deleteEntityInitState","numberOfSourcesToDelete","failedDelete","failedEntitiesDelete","selectDeleteEntityDialog","ctx_r18","ctx_r29","EntityFooterComponent","trackByIndex","icon","className","GenericFooterItem","MenuItemTextPipe","selectionTags","countAvailableAndIsDisable","selectedElements","_selectedTags","notificationActions","totalNum","verb","abort","restore","publish","parentAction","ExperimentGraphsComponent","layout","plotlyReady$","prepareRedraw","graphInView","visibleEntries","graphsPerRow","allGraphs","allMetricGroups","calculateGraphsLayout","_hiddenList","smooth","_smoothWeight","_xAxisType","graphGroups","noGraphs","graphsData","sortGraphsData","images","allMetrics","rootMargin","observeGraphs","takeRecords","graphElements","querySelectorAll","shouldRefresh","maintainVisibleEntries","intersectionRatio","graphComponent","graphComp","identifier","alreadyDrawn","drawGraph","visEntry","isWidthBigEnough","breakPoint","minWidth","isGroupGraphs","singleGraph","metricGroup","sizeChanged","activeResizeElement","edges","rectangle","graphsNumberLimit","resizeStarted","resizeTextElement","querySelector","onResizing","SingleGraphComponent","ResizableModule","GraphDisplayerComponent","chart$","isFetchingData$","chart","isFullDetailsMode","darkTheme","modalContainer","xtypeSub","xType","chartSub","closeGraphDisplayer","xAxisTypeChanged","changeWeight","GraphSettingsBarComponent","groupByChanged","scaleSub","scaleExists","_reColorTrace","newColor","marker","colorString","isSmooth","isSmoothed","colorHSL","rgbToHsl","lighterColor","hslToRgb","_getTraceColor","addIdToDuplicateExperiments","taskId","namesHash","extractColorKey","html","div","innerHTML","getAttribute","DARK_THEME_GRAPH_LINES_COLOR","DARK_THEME_GRAPH_TICK_COLOR","originalChart","_chart","smoothnessTimeout","showLoaderOnDraw","singleGraphContainer","graphEl","drawPlotly","skipReact","previousOffsetWidth","relayout","subscribeColorButtons","chartElm","classList","formatChartLines","addParametersIfDarkTheme","font","family","plot_bgcolor","modebar","activecolor","bgcolor","hideTitle","addIterationString","isDarkTheme","xaxis","gridcolor","zerolinecolor","tickfont","yaxis","uirevision","traceorder","xanchor","yanchor","moveLegendToTitle","borderwidth","bordercolor","orientation","valign","legendConfiguration","showlegend","prototype","pad","autoexpand","align","fill","cells","xref","scatterLayoutConfig","spikecolor","showspikes","spikemode","spikesnap","spikethickness","spikedash","rangeslider","fixedrange","yaxisType","hovermode","modBarButtonsToAdd","getLogButtonTitle","getLogIcon","gd","ev","svg","tagName","attributes","getHideButtonTitle","getToggleLegendIcon","pathElement","getIcon","downloadGraphAsJson","isMaximized","maximizeButton","getMaximizeIcon","maximizeGraph","modeBarButtonsToAdd","smoothLines","timeUnit","chooseTimeUnit","escape","zeroTime","time","colorKey","generateColorKey","wrappedText","noTextWrap","wordWrap","legendStringLength","legendgroup","hoverinfo","resmoothDataset","setAxisText","newLine","smoothed","NaN","hovertext","isFinite","changed","oldColor","newColorArr","redraw","graphTitle","endOfTitlePosition","getClientRects","traces","textEl","createElementNS","textContent","layers","parentEl","attachColorChooser","getAxisText","exportName","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","ascent","descent","onOrOff","str","validateResize","object","graphsNumber","ExperimentInfoHeaderStatusIconLabelComponent","ExperimentInfoHeaderStatusProgressBarComponent","GeneralLeavingBeforeSaveAlertGuard","isDirty","inEditMode$","inEditModes","currentRoute","currentState","nextState","unGuard","MatDividerModule","MatSelectModule","MatDialogModule","MatTooltipModule","MatMenuModule","MatFormFieldModule","MatInputModule","MatCheckboxModule","MatSlideToggleModule","MatAutocompleteModule","MatChipsModule","AdvancedFilterPipe","BreadcrumbsEllipsisPipe","DurationPipe","units","calcSeconds","days","hours","minutes","seconds","FilterInternalPipe","FilterPipe","FilterLast","items","itemsCopy","FilterOutPipe","HideHashTitlePipe","HideHashPipe","HighlightSearchTextPipe","originalTerm","IdToObjectsArrayPipe","InitialsPipe","audioExtensions","videoExtensions","numberOfItems","itemName","isMultiple","MsToHoursPipe","MsToSecPipe","NAPipe","NumberToKPipe","number","showFloat","power","toFixed","ProjectLocationPipe","lastSeparator","ReplaceViaMapPipe","replaceMap","SafePipe","sanitizer","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustResourceUrl","safeAngularUrlParameterPipe","CamelToTitlePipe","words","capitalize","word","FilenameFromPath","FloorPipe","decimalDigits","magicNum","JoinPipe","defaultSeparator","KeyvalPipe","UniqueByPipe","uniqBy","KeyValuePipe","ToExponentialPipe","toExponential","TimeTillNowPipe","now","startDate","HasExampleItemPipe","SelectOptionValueToLabelPipe","option","LabelValuePipe","FilterByIdPipe","mapTo","ToPropertyArrayPipe","property","UuidPipe","uuid","IsEmptyPipe","pipes","SortPipe","HighlightSearchPipe","TimeAgoPipe","ToPercentagePipe","SimpleFilterPipe","ShortProjectNamePipe","StringIncludedInArrayPipe","formChanged","collapsibleTitleTemplate","nameValueMap","variables","matchAll","variableArr","TemplateInjectorPipe","groupedApplicationForm","conditional","groupIndex","conditions","vt","ent","fieldVal","op","con","TestConditionalPipe","formValueChanged","invalid","GroupHasErrorsPipe","required","FormgroupHasRequiredFieldPipe","shortName","indexOfA","indexOfB","SortHumanizePipe","stingsArr","ngZone","removeTimer","abs","timeToUpdate","getSecondsUntilUpdate","run","months","years","hr","convertUTCDateToLocalDate","newDate","getTimezoneOffset","offset","getHours","setHours","SMPortalModule","PortalModule","CREATE_PROJECT_DIALOG_PREFIX","CREATE_PROJECT_ACTIONS","CREATE_NEW_PROJECT","SET_CREATION_STATUS","NAVIGATE_TO_NEW_PROJECT","creationStatus","moveProject","CreateNewProjectFormComponent","default_output_destination","_projects","projectCreated","baseProjectId","clearLocation","locationSelected","_r8","_r9","ProjectMoveToFormComponent","dismissDialog","matDialogRef","move","createProjectSelectors","createNewProjectActions","creationStatusSubscription","CREATION_STATUS","createProject","projectForm","convertFormToProject","new_location","projectsApiService","shortProjectName","projectLocation","ProjectDialogEffects","projectDialogReducer","createProjectInitState","selectCreateProjectDialog","selectProjects","selectCreationStatus","DOT_PLACEHOLDER","ColorHashService","selectColorPreferences","preferenceColors","batchUpdateColorCache","getColorCache","_colorCache","setColorCache","colorCache","getValue","red","green","blue","hexRgb","stc","setColorForString","newColorCache","filteredCache","cleanKey","updateColorCache","savePreference","cleanString","addUpdateColorPreferences","hex","rgb","RGB2HEX","getRgbString","opacity","getMonochromaticHarmony","isDarkBg","hexToRgb","originalHsl","hsl","contrast","getHslContrast","rgbArray","hslArray","hue2rgb","hsl1","hsl2","rgb1","rgb2","l1","getLuminanace","l2","base16","normalizeColorToString","openParenthisis","closingParenthisis","rgba","bigint","rgbaToValues","invertRgb","initConfigurationService","setEnv","retryWhen","throwError","env","globalEnvironment","globalEnvironmentObservable","ErrorService","template","strings","getErrorMsg","codes","result_code","result_subcode","resultMsg","result_msg","warn","LoginModeEnum","simple","ssoOnly","signupMode","clone","_guestUser","_sso","_authenticated","initCredentials","fromEnv","userKey","userSecret","companyID","getLoginMode","openServerError","getHeaders","btoa","_loginMode","getLoginSupportedModes","server_errors","shouldOpenServerError","openEs7MessageDialog","authenticated","basic","enabled","sso_providers","guest","additionalState","stateUrl","callback_url_prefix","auth0","provider","auth0Url","displayName","display_name","sso","passwordLogin","userId","headerPrefix","createUser","email","uuidV1","given_name","family_name","autoLogin","callback","serverErrors","missed_es_upgrade","es_connection_error","imgElement","Image","branding","logo","reload","serverDownMessage","centerText","clearLoginCache","afterLogin","loadPreferences","loginFlow","skipInvite","currentURL","redirectToLogin","redirectUrl","guestUser","targetUrl","history","replaceState","TagColorService","getColor","tagColor","calcColor","sum","chr","charCodeAt","predefined","setColor","background","foreground","TableModule","ClipboardModule","MatButtonToggleModule","MatSnackBarModule","NgxFilesizeModule","ChipsModule","ChooseColorModule","LoadingButtonComponent","ToggleArchiveComponent","CodeComponent","nunjucks","web","useCache","async","copied","render","CODE_TEMPLATES_PATH","codeTemplateFileName","codeResult","rerenderCode","textCopied","hack","PR","prettyPrint","item_r3","GroupedCheckedFilterListComponent","itemsList","selectedItemsList","selectedItemsListPrefix","compareByFieldFunc","_selectedItemsList","itemsObjectList","getItemsObjectList","selectionLimitReached","limitSelection","_itemsList","selectedItems","onClearSelection","toggleExpand","expanded","LabeledRowComponent","SelectableFilterListComponent","filteredList","filterList","_searchTerm","_list","onSearchTermChanged","toggleHide","newHiddenList","checkedList","hiddenChanged","toggleHideAll","SelectableGroupedFilterListComponent","hideChildrenForHiddenParent","subFiltered","subKey","apply","child","pathString","AreAllChildrenHidden","itemKey","toggleHideGroup","keyItemKey","longKey","SelectableListComponent","showList","SimpleTableComponent2","FormsTrackBy","trackById","rowsData","isRowToggleable","rowIndex","rowsConfig","collapsible","toggleRow","entryDropped","TableCardComponent","rowNumber","odd","_get","getValueFromRow","_tableSortFields","tableSortFieldsObject","sortField","tables","comps","afterTableInit","selectionState","allItemsAreSelected","headerCheckboxClicked","selectionUnion","isRowSelected","setContextMenuStatus","menuStatus","shiftKey","index1","index2","tableAllFiltersChanged","ctx_r35","TableCardFilterTemplateComponent","_value","onFilterChanged","newValues","addOrRemoveFromArray","itemValue","filterMatch","emitFilterChangedCheckBox","onSubFilterChanged","subValue","subFilterChanged","isFiltered","isOptionFiltered","setSearchTerm","searchTerms","clearSearch","toggleCombination","getColumnByOption","emptyDuration","TableDurationSortBase","updateValue","greaterThan","lessThan","isFirstTimeUpdate","_updateValue","dataInputOutputHelper","decodeFromServerData","parseServerDataFunction","shouldValidate","setCheckBox","checkBoxName","validateAfterChanges","timeStampChanged","valueName","checkIfSameValues","isValidAfterChanges","hasTimeError","onHasError","updateState","resetValues","encodeToServerData","prepareDataToServerFunction","positions","useOldValues","getValueOrDefault","MY_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","TableFilterDurationDateTimeComponent","hasGreaterThanValue","_greaterThan","isFakeNowCheckbox","_lessThan","myDate","isNil","toISOString","lessThanValue","greaterThanValue","lessThanDate","greaterThanDate","mutedDateToNoHourMinutesSeconds","greaterThanTime","getTimeInSecondsFromDate","onDateHandler","MINIMUM_TIME_DISPLAY","onTimeHandler","privateParameters","combineDateAndTimeAndEmitValue","timeInSeconds","timeObject","parameterName","onResetToDateInput","onResetHandler","privateParam","onAutoFillCurrentTimeHandler","currentTime","timeInSecondsFromDate","onFakeNowCheckbox","provide","MAT_DATE_LOCALE","useValue","MAT_DATE_FORMATS","_date","setSeconds","setMinutes","getSeconds","getMinutes","TableFilterDurationErrorComponent","TableFilterDurationNumericComponent","greaterThan$","iterationsForm","lessThan$","merge","getDurationValue","TableFilterDurationComponent","ctx_r30","ctx_r31","TableFilterSortTemplateComponent","enableSort","enableFilter","enableSearch","supportAndFilter","supportExcludeFilter","formControl","switchSortOrder","sortOrderChanged","sortedClass","isSorted","emitFilterChanged","lazy","onLazyLoad","createLazyLoadMetadata","filteredValue","localMatch","globalMatch","filterMeta","filterField","dataFieldValue","resolveFieldData","filterConstraints","excludeGlobalFilter","paginator","totalRecords","updateDataToRender","onFilter","sortColumn","preventSortPropagation","sortFunction","data1","data2","value1","value2","ResizableColumnDirective","ResizableColumn","resizer","fromEvent","calcWidth","dt","onColumnResizeBegin","onColumnResize","pageX","onColumnResizeEnd","column","cellIndex","rows","getElementsByTagName","dummyContainer","cloneItemIntoDummy","eCell","eDummyContainer","eCellClone","cloneNode","eCloneParent","ctx_r50","loadMoreDebouncer","loadMoreSubscription","loadMoreClicked","tableData","rowsNumber","_tableData","columnsOrder","_columnsOrder","orderColumns","_columns","minView","delay","updateFilter","_filters","firstChanged","resizeTimer","updateLoadButton","resizableColumns","totalWidth","scrollableBody","getElementsByClassName","resizeColumnElement","resizeTableCells","tableViewChild","keyDownHandler","keyboardControl","incrementIndex","scrollIntoView","block","inline","gotTable","onscroll","waiting","tableComp","loadButtons","loadButton","ngAfterContentInit","templates","getType","bodyTemplate","headerTemplate","sortTemplate","cardTemplate","sortFilterTemplate","checkboxTemplate","cardHeaderTemplate","footerTemplate","menu","sortChanged","onRowSelected","rowSelectionChanged","originalEvent","onRowDeselected","scrollToVirtualIndex","onFirstChanged","openContext","onRowRightClick","contextMenuSelection","trackByFunction","locateInTable","selectedTask","getBodyData","getCurrentIndex","noMoreData","nextSelected","onColReorder","columnsList","colReordered","checkedItems","buttonLeft","custumFilterFunc","sortSingle","custumSortSingle","colResize","newWidth","sortItemClick","getOrder","PrimeTemplate","Table","ASC","DESC","VerticalLabeledRowComponent","CHOOSE_COLOR_PREFIX","showColorPicker","ChooseColorDirective","colorTopOffset","defaultColor","_defaultColor","defaultColorString","onMouseDown","onClick","colorButtonClass","colorButtonRef","openColorPicker","pageY","colorPickerHeight","documentElement","colorPickerWidth","innerWidth","theme","cacheKey","stringToColor","alpha","colorPickerWithAlpha","buttonElement","withAlpha","directive","ElementRef","listener","removeEventListener","addEventListener","colorSyncedKeys","ColorPickerModule","colorPreferenceReducer","colorsPreference","colorPreferences","selectColorPickerProps","pickerProps","reducer","ClickStopPropagationDirective","EllipsisMiddleDirective","txt","innerText","scrollWidth","cropTextToFit","timeoutSubscription","HesitateDirective","cancel","hesitateStatus","handleTimerThreshold","runGuarded","hesitateEvents","listeners","listen","handleMouseenter","handleMousedown","handleMouseleave","KeydownStopPropagationDirective","OverflowsDirective","_host","isEllipsisWithTimeDelay","onDestroySubscription$","isEllipsis","hasOverflow","lastResult","onOverflows","ImmutableFormField","formDataUpdated","checkValidity","errorsChanged","fieldName","hasErrors","getCurrentError","showErrors","errorMessages","activeErrors","validators","validatorFn","CheckboxControlComponent","inputClassName","isReadonly","special","isString","CircleCounterComponent","CircleStatusComponent","CopyClipboardComponent","DividerComponent","setCssVar","valueInPx","SnippetErrorComponent","content","_copyContent","baseFile","TagComponent","TooltipDirective","MatTooltip","HELP","VALIDATION","tooltipClass","tooltipType","customClass","MAT_TOOLTIP_DEFAULT_OPTIONS","ButtonToggleComponent","valueChangesSubs","valueChanged","ColorPickerWrapperComponent","colorHashService","propsSub","selectColor","DurationInputBase","TemplateFormSectionBase","ms","valueFromInherit","ngModelValue","_val","returnFactor","onEditing","msToHMSMS","H","convertedMs","toThreeDigits","toTwoDigits","currentTimeInMs","hasTimes","onChangePartial","onChange","onDurationChanged","checkChars","isNumbers","focusOutInput","_r6","maxLengthMapper","maxLength","DurationInputListComponent","DurationInput","trackBy","durationValue","setValues","setNextInputFocus","elReference","setPreviousInputFocus","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","InlineEditComponent","inlineCanceled","inlineValue","originalText","inlineActiveStateChanged","inlineSaved","inlineInput","textChanged","inlineActivated","templateWidth","cancelClick","shouldSave","stopProp","SearchComponent","searchBarInput","value$","empty","debounce","minimumChars","jump","searchCounterIndex","updateActive","expandOnHover","focusInput","focused","AlertDialogComponent","alertMessage","alertSubMessage","moreInfo","okMessage","resultMessage","_moreInfo","moreInfoEntities","_resultMessage","isAnnotationTask","iconData","codeSnippet","DialogTemplateComponent","onXPressed","closeOnX","xClicked","jsonPipe","validateJson","placeHolder","_readOnly","ctrlKey","initAceEditor","aceEditor","ace","aceEditorElement","setOptions","showLineNumbers","showGutter","fontSize","highlightActiveLine","highlightSelectedWord","showPrintMargin","setScrollMargin","setPadding","session","setMode","setTheme","getSession","JsonPipe","useClass","decls","OperationErrorDialogComponent","failedList","getName","OverlayComponent","sharedSubtitle","privateSubtitle","createLink","share","SpinnerComponent","loading$","spinnerSubscribe","loaders","showSpinner","navEndSubscription","NavigationStart","UpdateNotifierComponent","availableUpdates","areAvailableUpdates","newer_available","newVersionUrl","newVersionName","_availableUpdates","dismissedVersion","notifierActive","dismiss","versionDismissed","CardComponent","setShowSecondTab","showSecondTab","setSecondTabHover","isHovered","secondTabIsHovered","setHighlightFirstTab","highlight","highlightFirstTab","CheckboxState","CheckboxThreeStateListComponent","exclude","currentFilter","_checkedList","indeterminateState","excludeList","_excludeList","checkIndeterminateStateAndEmit","getExcludedValues","Boolean","_exclude","CompareFooterComponent","EditableSectionComponent","_saving","openDialogs","disableSave","saveSection","editMode","listenScrollEvent","unsubscribeToEventListener","D","scrollSub","getEdges","initHeight","initBottom","factor","scroll$","passive","currentBottom","isDownDirection","isTopEdge","isBottomEdge","scrolledMoreThanHeight","ExperimentCardComponent","experimentClicked","experimentCardClicked","MenuItemComponent","itemClickedEvent","itemClicked","buttonClickedEvent","selectable","removeItem","removeItemClicked","MenuComponent","movePosition","_position","isMenuOpen","showOverlay","openOnInit","searchValue","ModelCardComponent","modelClicked","modelCardClicked","numberOfLabels","NavbarItemComponent","PlusCardComponent","plusCardClicked","plusCardClick","ProjectCardComponent","_project","computeTime","convertSecToDaysHrsMinsSec","secs","dayInSec","projectClicked","projectNameActive","projectNameEditActiveChanged","subProjectClicked","prepareProjectNameForChange","TagListComponent","colorService","tagsList","caption","colorObservable","disableRemove","trackFn","TagsMenuComponent","openTagColors","nameInput","projectTagsFilterToggle","UserTagComponent","onRemoveClicked","InvalidPrefixValidatorDirective","validate","invalidPrefix","NG_VALIDATORS","onTouch","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","UniqueNameValidatorDirective","existingNames","forbiddenPrefix","valuePrefix","forbidden","uniqueName","UniquePathValidatorDirective","existingPaths","uniquePath","GroupedSelectableListComponent","isFlatList","toggleExpandedAll","buildingNestedList","isHideAllMode","groupCheck","onGroupCheck","selectedItem","panelH","onItemSelect","_toggle","ContextMenuModule","MatDatepickerModule","MatNativeDateModule","lengthChanged","previousLength","fallbackValue","CRC_TABLE","ext","uriArray","selectedItemsIds","arrItem","getCssTheme","nodeType","String","initialValue","finalXORValue","crc","RangeError","limit","getScaleFactor","isMac","navigator","platform","isWin","screenHeight","dimensionRatio","check","userAgent","vendor","opera","chrome","safari","screen","currentSortField","newField","getValueTypeName","encodeFilters","A","arr1","arr2","returnArray","mainCols","headerParts","colParts","ANNOTATOR_INDEX_TAG_PREFIX","ANNOTATED_NUMBER_TAG_PREFIX","ARTIFACTS_TYPES","AUDIT_LOG","Model","_mergeVariants","modelDesc","modelDes","desKeys","plot_str","graphGroup","plot","existingGraph","plotParsed","basePlotParsed","toMerge","graphsMap","multiPlots","isMultipleVarients","graphsPerVariant","mixedPlot","duplicateNamesObject","shortExpId","multiplotsAddChartToGroup","allowedTypes","fullName","isMultipleTasks","barmode","newLineStr","done","_testWhite","white","timesConst","timeStringPlural","lastIndex","UserPreferences","userService","removeFromLocalStorage","preferences","pref","checkIfFirstTimeLoginAndSaveData","cleanPreferencesInPreferences","prefsString","prefs","replaceDots","saveToServer","getPreferences","isReady","firstLoginTime","setItem","partialPreferences","loadUserAndPreferences","loginService","Promise","providerName","production","productName","demo","versionConf","loginNotice","loginBanner","whiteLabelLogo","whiteLabelLink","whiteLabelLoginTitle","whiteLabelLoginSubtitle","whiteLabelSlogan","communityContext","GTM_ID","hideUpdateNotice","showSurvey","legal","TOULink","plotlyURL","slackLink","logoSmall","ApiServerService","serverConfig","serverEndpoints","serverGetStats","serverInfo","serverReportStatsOption","ApiOrganizationService","organizationGetTags","organizationGetUserCompanies","BusinessLogicModule","ServerUpdatesService","serverService","resetUpdateState","checkServerForUpdate","serverPath","nextUpdateCheckTime","infoRes","uid","server_uuid","versions","updateRes","timeGap","checkForUpdates","initialized","setInterval","setDismissedVersion","dismissSurvey","commonInitState","selectAvailableUpdates","selectUserSettingsNotificationPath","UiUpdateDialogComponent","UiUpdatesService","checkForUiUpdate","checkForUpdate","onlineVersionFile","updateDialog","setUsageStats","updateUsageStats","currVersion","allowedVersion","_statsReducer","selectSendStats","userStatsFeatureKey","selectAllowed","selectCurrentVersion","selectAllowedVersion","selectPromptUser","currentVer","allowedVer","UsageStatsService","prompt","TipOfTheDayModalComponent","tips","hideDontShow","visitedIndex","tipIndex","saveIndexInLocalstorage","prev","TipsService","global","initTipsService","showAllTips","nextTimeToShowTips","tipsConfig","features","tipsFiltered","onboarding","tip","neverShowAgainSub","tos","urlConfig","allTips","isTimeHavePassed","showTipsModal","modalRef","neveShowAgain","ServerNotificationDialogContainerComponent","notificationSubscription","NotifierQueueService","actionStream","actionQueue","isActionInProgress","tryToRunNextAction","continue","shift","NotifierConfigToken","NotifierService","notifierQueueService","queueService","getConfig","notificationOptions","subject","notificationId","hideNewest","hideOldest","hideAll","notify","fade","to","slide","getShift","horizontal","distance","horizontalPosition","vertical","NotifierAnimationService","animationPresets","getAnimationData","keyframes","duration","easing","animations","preset","speed","NotifierTimerService","remaining","start","finishPromiseResolver","pause","timerId","finish","stop","NotifierNotificationComponent","notifierService","notifierTimerService","notifierAnimationService","timerService","animationService","elementShift","setup","elementHeight","elementWidth","getHeight","getWidth","animationData","animatedProperties","animate","onfinish","startAutoHideTimer","stopAutoHideTimer","actionsClicked","shiftToMakePlace","newElementShift","gap","onActionClick","userAction","onClickDismiss","onNotificationMouseover","behaviour","onMouseover","pauseAutoHideTimer","onNotificationMouseout","continueAutoHideTimer","onNotificationClick","getAutoHide","autoHide","default","shouldAutoHide","NotifierContainerComponent","notifications","queueServiceSubscription","handleAction","identifyNotification","onNotificationDismiss","onNotificationReady","notificationComponent","currentNotification","continueHandleShowAction","handleShowAction","handleHideAction","handleHideOldestAction","handleHideNewestAction","handleHideAllAction","tempPromiseResolver","addNotificationToList","NotifierNotification","numberOfNotifications","implicitStackingLimit","stacking","removeNotificationFromList","stepPromises","oldNotifications","overlap","shiftNotifications","findNotificationById","notificationIndex","findNotificationIndexById","removeAllNotificationsFromList","toMakePlace","notificationPromises","SideNavComponent","faCoffee","faBug","faHatWizard","faFlushed","faBalanceScaleLeft","SearchDeactivate","_r26","BreadcrumbsComponent","cd","isDeep$","confSub","isDeepSub","breadcrumbsSubscription","breadcrumbsStrings","previousProjectNames","refreshBreadcrumbs","workspaceNeutral","breadcrumbs","getRouteName","getRouteId","isProject","rootCrumb","openShareModal","currentUrl","checkIfBreadcrumbsInitiated","subProjectsMenuOpened","subProjectsMenuIsOpen","CommonSearchComponent","isSearching$","searchPlaceholder$","NavigationEnd","setSearchActive","queryString","openSearch","closeTimer","searchElem","SetIsSearching","searchActive","toggleRegExp","minChars","HeaderUserMenuActionsComponent","HeaderComponent","tipsService","userNotificationPath","invitesPending$","getRotueData","userFocus","isDashboard","openTip","openWelcome","openAppsAwareness","appsYouTubeIntroLink","AppComponent","titleService","serverUpdatesService","uiUpdatesService","userStats","loggedOut$","updatesAvailable$","selectedCurrentUser$","selectedProjectFromUrl$","gtmService","GoogleTagManagerService","onVisibilityChange","beforeunloadHandler","hideUpdate","pushTag","pageName","routerActions","updateTitle","selectedCurrentUserSubscription","loginTime","urlSubscription","isLoginContext","isWorkersContext","activeFeature","setScale","loadPlotly","nameChanged","changeRoute","backToProjects","crumbs","dynamicCrumb","setTitle","showNotification","onerror","crossOrigin","head","loadChildren","DashboardModule","LoginModule","metVar","parseUrl","ProjectRedirectGuardGuard","ProjectInfoModule","WorkersAndQueuesModule","NotFoundModule","S3AccessDialogComponent","isAzure","secret","saveNewCredentials","formIsSubmitted","S3NGForm","closeSave","closeCancel","S3AccessResolverComponent","s3Credentials","credentialsError","AdminDialogTemplateComponent","contetElement","textContent$","_newCredential","exampleText","CreateCredentialDialogComponent","CommonAuthEffects","credentialsApi","authActions","additional_credentials","signAfterPopup","dontShowAgain","openPopup","emptyCredentials","Et","finalize","customOptions","showDismissButton","NotifierOptionsToken","NotifierConfig","NotifierModule","withConfig","ngModule","providers","deps","useFactory","notifierCustomConfigFactory","notifierDefaultConfigFactory","taskService","modelService","parseError","getAllEntity","alertDialogRef","lastTS","subcode","closeAll","bufferTime","messages","message403","errorData","access","Kt","ct","regexMatch","LayoutEffects","bo","Cn","TagColorMenuComponent","setForeground","setBackground","currTag","ALL_PROJECTS_OBJECT","orgApi","resultsActions","lastUpdateSoFar","include_system","RouterEffects","SetRouterSegments","getRouterUrl","getRouterParams","getRouterConfig","CommonUserEffects","errorService","get_supported_features","redirect_url","server","build","api","api_version","updated","firstRun","syncedKeys","actionsPrefix","timeout","savedState","ap","pick","fetchingExampleExperiment","setLoginError","loginReducer","authReducer","CookiesService","platformId","documentIsAccessible","isPlatformBrowser","getCookieRegExp","cookie","exec","getAll","cookies","currentCookie","domain","secure","sameSite","cookieString","toUTCString","deleteAll","cookieName","escapedName","PLATFORM_ID","UserEffects","cookiesService","authService","current_version","enabled_version","initTasks","routerReducer","recentTasks","viewState","commonViewReducer","ROOT_PROJECTS_PREFIX","localStorageReducer","userPrefMetaFactory","createUserPrefReducer","SMCoreModule","USER_PROVIDED_META_REDUCERS","DEFAULT_CURRENCY_CODE","runtimeChecks","strictStateImmutability","strictActionImmutability","strictStateSerializability","strictActionSerializability","CommonProjectsEffect","StoreDevtoolsModule","maxAge","WebappInterceptor","intercept","setHeaders","handle","errorHandler","terms_of_use","redirect","CustomReuseStrategy","calcKey","pathFromRoot","shouldDetach","reuse","handlers","shouldAttach","retrieve","shouldReuseRoute","future","compareObjects","baseProperty","AppModule","bootstrap","MAT_FORM_FIELD_DEFAULT_OPTIONS","floatLabel","APP_INITIALIZER","HTTP_INTERCEPTORS","RouteReuseStrategy","BrowserAnimationsModule","BrowserModule","preloadingStrategy","PreloadAllModules","scrollPositionRestoration","onSameUrlNavigation","relativeLinkResolution","enableProdMode","serviceWorker","getRegistrations","registrations","registration","unregister","savedData","savedJson","K","__NgCli_bootstrap_1","bootstrapModule"],"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions:%20%7B%7D|namespace%20object","webpack:///src/app/app.constants.ts","webpack:///src/app/business-logic/api-services/api-requests.service.ts","webpack:///src/app/business-logic/api-services/auth.service.ts","webpack:///src/app/business-logic/api-services/events.service.ts","webpack:///src/app/business-logic/api-services/login.service.ts","webpack:///src/app/business-logic/api-services/models.service.ts","webpack:///src/app/business-logic/api-services/projects.service.ts","webpack:///src/app/business-logic/api-services/queues.service.ts","webpack:///src/app/business-logic/api-services/tasks.service.ts","webpack:///src/app/business-logic/api-services/users.service.ts","webpack:///src/app/business-logic/api-services/workers.service.ts","webpack:///src/app/business-logic/configuration.ts","webpack:///src/app/business-logic/model/events/scalarKeyEnum.ts","webpack:///src/app/business-logic/model/projects/projectsGetAllExRequest.ts","webpack:///src/app/business-logic/model/tasks/taskStatusEnum.ts","webpack:///src/app/business-logic/model/tasks/taskTypeEnum.ts","webpack:///src/app/business-logic/services/models.service.ts","webpack:///src/app/business-logic/services/tasks.service.ts","webpack:///src/app/business-logic/variables.ts","webpack:///src/app/core/actions/users.action.ts","webpack:///src/app/core/reducers/users.reducer.ts","webpack:///src/app/webapp-common/experiments/shared/components/experiment-menu/experiment-menu.component.html","webpack:///src/app/features/experiments/containers/experiment-menu-extended/experiment-menu-extended.component.ts","webpack:///src/app/features/experiments/experiments.consts.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/reset-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/enqueue-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/abort-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/dequeue-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/abort-all-footer-item.ts","webpack:///src/app/webapp-common/experiments/dumb/select-hyper-params-for-custom-col/select-hyper-params-for-custom-col.component.ts","webpack:///src/app/webapp-common/experiments/dumb/select-hyper-params-for-custom-col/select-hyper-params-for-custom-col.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-custom-cols-menu/experiment-custom-cols-menu.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-custom-cols-menu/experiment-custom-cols-menu.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-header/experiment-header.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-header/experiment-header.component.html","webpack:///src/app/webapp-common/experiments/experiments.component.ts","webpack:///src/app/webapp-common/experiments/experiments.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-general-info/experiment-general-info.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-general-info/experiment-general-info.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-info-edit-description/experiment-info-edit-description.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-info-edit-description/experiment-info-edit-description.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-info-header/experiment-info-header.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-info-header/experiment-info-header.component.ts","webpack:///src/app/features/experiments/containers/experiment-info/experiment-info.component.ts","webpack:///src/app/features/experiments/containers/experiment-info/experiment-info.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-execution-source-code/experiment-execution-source-code.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-execution-source-code/experiment-execution-source-code.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-execution/experiment-info-execution.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-execution/experiment-info-execution.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-artifacts-navbar/experiment-artifacts-navbar.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-artifacts-navbar/experiment-artifacts-navbar.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-aritfacts/experiment-info-artifacts.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-aritfacts/experiment-info-artifacts.component.ts","webpack:///src/app/webapp-common/select-model/select-model.actions.ts","webpack:///src/app/webapp-common/select-model/select-model.reducer.ts","webpack:///src/app/webapp-common/select-model/select-model.component.ts","webpack:///src/app/webapp-common/select-model/select-model.component.html","webpack:///src/app/webapp-common/experiments/dumb/base-clickable-artifact.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-models-form-view/experiment-models-form-view.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-models-form-view/experiment-models-form-view.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-network-design-form/experiment-network-design-form.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-network-design-form/experiment-network-design-form.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-model/experiment-info-model.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-model/experiment-info-model.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-artifact-item-view/experiment-artifact-item-view.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-artifact-item-view/experiment-artifact-item-view.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-artifact-item/experiment-info-artifact-item.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-artifact-item/experiment-info-artifact-item.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-hyper-params-navbar/experiment-hyper-params-navbar.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-hyper-params-navbar/experiment-hyper-params-navbar.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-hyper-parameters/experiment-info-hyper-parameters.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-hyper-parameters/experiment-info-hyper-parameters.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-task-model/experiment-info-task-model.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-task-model/experiment-info-task-model.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-execution-parameters/experiment-execution-parameters.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-execution-parameters/experiment-execution-parameters.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-hyper-parameters-form-container/experiment-info-hyper-parameters-form-container.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-info-hyper-parameters-form-container/experiment-info-hyper-parameters-form-container.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-general/experiment-info-general.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-info-general/experiment-info-general.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-ouptut/base-experiment-output.component.ts","webpack:///src/app/features/experiments/containers/experiment-ouptut/experiment-output.component.html","webpack:///src/app/features/experiments/containers/experiment-ouptut/experiment-output.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-output-scalars/experiment-output-scalars.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-output-scalars/experiment-output-scalars.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-output-plots/experiment-output-plots.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-output-plots/experiment-output-plots.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-log-info/experiment-log-info.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-log-info/experiment-log-info.component.ts","webpack:///src/app/webapp-common/experiments/containers/experiment-output-log/experiment-output-log.component.html","webpack:///src/app/webapp-common/experiments/containers/experiment-output-log/experiment-output-log.component.ts","webpack:///src/app/features/experiments/experiments-routing.module.ts","webpack:///src/app/webapp-common/experiments/experiment-routes.ts","webpack:///src/app/webapp-common/select-model/select-model.effects.ts","webpack:///src/app/webapp-common/select-model/select-model.module.ts","webpack:///src/app/features/experiments/effects/experiment-output.effects.ts","webpack:///src/app/features/experiments/effects/experiments-menu.effects.ts","webpack:///src/app/features/experiments/experiments.module.ts","webpack:///src/app/features/experiments/reducers/experiments-view.reducer.ts","webpack:///src/app/webapp-common/experiments/reducers/common-experiment-info.reducer.ts","webpack:///src/app/features/experiments/reducers/experiment-info.reducer.ts","webpack:///src/app/features/experiments/reducers/experiment-output.reducer.ts","webpack:///src/app/features/experiments/reducers/index.ts","webpack:///src/app/features/experiments/shared/experiment-execution.model.ts","webpack:///src/app/features/experiments/shared/experiment-shared.module.ts","webpack:///src/app/features/experiments/shared/experiments.const.ts","webpack:///src/app/features/experiments/shared/experiments.utils.ts","webpack:///src/app/features/experiments/shared/services/experiment-converter.service.ts","webpack:///src/app/features/experiments/shared/services/experiment-reverter.service.ts","webpack:///src/app/webapp-common/models/containers/model-menu/model-menu.component.html","webpack:///src/app/webapp-common/models/containers/model-menu/model-menu.component.ts","webpack:///src/app/features/models/containers/model-menu-extended/model-menu-extended.component.ts","webpack:///src/app/features/models/feature-models.module.ts","webpack:///src/app/features/projects/containers/project-card-menu-extended/project-card-menu-extended.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/project-card-menu/project-card-menu.component.html","webpack:///src/app/features/projects/projects-page.utils.ts","webpack:///src/app/webapp-common/projects/dumb/projects-list/projects-list.component.html","webpack:///src/app/webapp-common/projects/dumb/projects-list/projects-list.component.ts","webpack:///src/app/webapp-common/projects/dumb/projects-header/projects-header.component.html","webpack:///src/app/webapp-common/projects/dumb/projects-header/projects-header.component.ts","webpack:///src/app/features/projects/projects-routing.module.ts","webpack:///src/app/webapp-common/projects/containers/projects-page/common-projects-page.component.ts","webpack:///src/app/webapp-common/projects/containers/projects-page/common-projects-page.component.html","webpack:///src/app/features/projects/projects.module.ts","webpack:///src/app/features/projects/projects.reducer.ts","webpack:///src/app/features/projects/shared/projects-shared.module.ts","webpack:///src/app/webapp-common/settings/admin/profile-name/profile-name.component.html","webpack:///src/app/webapp-common/settings/admin/profile-name/profile-name.component.ts","webpack:///src/app/webapp-common/settings/admin/s3-access/s3-access.component.html","webpack:///src/app/webapp-common/settings/admin/s3-access/s3-access.component.ts","webpack:///src/app/webapp-common/settings/admin/profile-key-storage/profile-key-storage.component.ts","webpack:///src/app/webapp-common/settings/admin/profile-key-storage/profile-key-storage.component.html","webpack:///src/app/webapp-common/settings/webapp-configuration/webapp-configuration.component.ts","webpack:///src/app/webapp-common/settings/webapp-configuration/webapp-configuration.component.html","webpack:///src/app/features/settings/containers/admin/user-data/user-data.component.ts","webpack:///src/app/webapp-common/settings/admin/admin-credential-table.base.ts","webpack:///src/app/webapp-common/settings/admin/admin-credential-table/admin-credential-table.component.html","webpack:///src/app/webapp-common/settings/admin/admin-credential-table/admin-credential-table.component.ts","webpack:///src/app/features/settings/containers/admin/user-credentials/user-credentials.component.html","webpack:///src/app/features/settings/containers/admin/user-credentials/user-credentials.component.ts","webpack:///src/app/webapp-common/settings/workspace-configuration/workspace-configuration.component.ts","webpack:///src/app/webapp-common/settings/workspace-configuration/workspace-configuration.component.html","webpack:///src/app/features/settings/containers/admin/admin-footer-actions/admin-footer-actions.component.ts","webpack:///src/app/webapp-common/settings/admin/admin-footer/admin-footer.component.html","webpack:///src/app/webapp-common/settings/admin/admin-footer/admin-footer.component.ts","webpack:///src/app/features/settings/settings-routing.module.ts","webpack:///src/app/features/settings/settings.component.ts","webpack:///src/app/features/settings/settings.component.html","webpack:///src/app/features/settings/settings.module.ts","webpack:///src/app/layout/breadcrumbs/breadcrumbs.utils.ts","webpack:///src/app/layout/layout.module.ts","webpack:///src/app/shared/constants/non-common-consts.ts","webpack:///src/app/shared/directives/check-permission.directive.ts","webpack:///src/app/shared/services/login.service.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/utils/url.ts","webpack:///src/app/webapp-common/common-search/common-search.actions.ts","webpack:///src/app/webapp-common/common-search/common-search.module.ts","webpack:///src/app/webapp-common/common-search/common-search.reducer.ts","webpack:///src/app/webapp-common/constants.ts","webpack:///src/app/webapp-common/core/actions/common-auth.actions.ts","webpack:///src/app/webapp-common/core/actions/http.actions.ts","webpack:///src/app/webapp-common/core/actions/layout.actions.ts","webpack:///src/app/webapp-common/core/actions/projects.actions.ts","webpack:///src/app/webapp-common/core/actions/router.actions.ts","webpack:///src/app/webapp-common/core/actions/users.actions.ts","webpack:///src/app/webapp-common/core/reducers/common-auth-reducer.ts","webpack:///src/app/webapp-common/core/reducers/projects.reducer.ts","webpack:///src/app/webapp-common/core/reducers/router-reducer.ts","webpack:///src/app/webapp-common/core/reducers/users-reducer.ts","webpack:///src/app/webapp-common/core/reducers/view.reducer.ts","webpack:///src/app/webapp-common/core/services/sync-state-selector.service.ts","webpack:///src/app/webapp-common/dashboard-search/dashboard-search.actions.ts","webpack:///src/app/webapp-common/dashboard-search/dashboard-search.consts.ts","webpack:///src/app/webapp-common/dashboard/dumb/welcome-message/welcome-message.component.html","webpack:///src/app/webapp-common/dashboard/dumb/welcome-message/welcome-message.component.ts","webpack:///src/app/webapp-common/debug-images/debug-image-snippet/debug-image-snippet.component.html","webpack:///src/app/webapp-common/debug-images/debug-image-snippet/debug-image-snippet.component.ts","webpack:///src/app/webapp-common/debug-images/debug-images-actions.ts","webpack:///src/app/webapp-common/debug-images/debug-images-effects.ts","webpack:///src/app/webapp-common/debug-images/debug-images-reducer.ts","webpack:///src/app/webapp-common/debug-images/debug-images-view/debug-images-view.component.html","webpack:///src/app/webapp-common/debug-images/debug-images-view/debug-images-view.component.ts","webpack:///src/app/webapp-common/debug-images/debug-images.component.html","webpack:///src/app/webapp-common/debug-images/debug-images.component.ts","webpack:///src/app/webapp-common/debug-images/debug-images.module.ts","webpack:///src/app/webapp-common/experiments-compare/actions/compare-header.actions.ts","webpack:///src/app/webapp-common/experiments-compare/actions/experiments-compare-charts.actions.ts","webpack:///src/app/webapp-common/experiments-compare/actions/experiments-compare-details.actions.ts","webpack:///src/app/webapp-common/experiments-compare/actions/experiments-compare-metrics-values.actions.ts","webpack:///src/app/webapp-common/experiments-compare/actions/experiments-compare-params.actions.ts","webpack:///src/app/webapp-common/experiments-compare/actions/experiments-compare-scalars-graph.actions.ts","webpack:///src/app/webapp-common/experiments-compare/containers/select-experiments-for-compare/select-experiments-for-compare.component.ts","webpack:///src/app/webapp-common/experiments-compare/containers/select-experiments-for-compare/select-experiments-for-compare.component.html","webpack:///src/app/webapp-common/experiments-compare/dumbs/experiment-compare-header/experiment-compare-header.component.html","webpack:///src/app/webapp-common/experiments-compare/dumbs/experiment-compare-header/experiment-compare-header.component.ts","webpack:///src/app/webapp-common/experiments-compare/experiments-compare.component.ts","webpack:///src/app/webapp-common/experiments-compare/experiments-compare.component.html","webpack:///src/app/webapp-common/experiments-compare/services/tree-builder.service.ts","webpack:///src/app/webapp-common/experiments-compare/experiments-compare.constants.ts","webpack:///src/app/webapp-common/experiments-compare/jsonToDiffConvertor.ts","webpack:///src/app/features/experiments-compare/experiment-compare-utils.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-base.ts","webpack:///src/app/features/experiments-compare/experiments-compare-details.base.ts","webpack:///src/app/webapp-common/experiments-compare/dumbs/compare-card-body.directive.ts","webpack:///src/app/webapp-common/experiments-compare/dumbs/compare-card-extra-header.directive.ts","webpack:///src/app/webapp-common/experiments-compare/dumbs/compare-card-header.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/drawer/drawer.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/drawer/drawer.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/card2/card-component2.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/card2/card-component2.component.ts","webpack:///src/app/webapp-common/experiments-compare/dumbs/compare-card-list/compare-card-list.component.html","webpack:///src/app/webapp-common/experiments-compare/dumbs/compare-card-list/compare-card-list.component.ts","webpack:///src/app/webapp-common/shared/portal/portal.component.html","webpack:///src/app/webapp-common/shared/portal/portal.component.ts","webpack:///src/app/webapp-common/experiments-compare/dumbs/experiment-compare-general-data/experiment-compare-general-data.component.ts","webpack:///src/app/webapp-common/experiments-compare/dumbs/experiment-compare-general-data/experiment-compare-general-data.component.html","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-details/experiment-compare-details.component.html","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-details/experiment-compare-details.component.ts","webpack:///src/app/webapp-common/shared/services/sync-scroll.service.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/sync-scroll.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table-diff/table-diff.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table-diff/table-diff.component.ts","webpack:///src/app/webapp-common/experiments-compare/get-key-value-array-pipe.pipe.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-metric-values/experiment-compare-metric-values.component.html","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-metric-values/experiment-compare-metric-values.component.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-metric-charts/experiment-compare-scalar-charts.component.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-metric-charts/experiment-compare-scalar-charts.component.html","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-plots/experiment-compare-plots.component.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-plots/experiment-compare-plots.component.html","webpack:///src/app/webapp-common/experiments-compare/dumbs/parallel-coordinates-graph/parallel-coordinates-graph.component.html","webpack:///src/app/webapp-common/experiments-compare/dumbs/parallel-coordinates-graph/parallel-coordinates-graph.component.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-hyper-params-graph/experiment-compare-hyper-params-graph.component.html","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-hyper-params-graph/experiment-compare-hyper-params-graph.component.ts","webpack:///src/app/webapp-common/experiments-compare/experiment-compare-router-helper.guard.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-params/experiment-compare-params.component.html","webpack:///src/app/webapp-common/experiments-compare/experiments-compare-routing.module.ts","webpack:///src/app/webapp-common/experiments-compare/containers/experiment-compare-params/experiment-compare-params.component.ts","webpack:///src/app/webapp-common/experiments-compare/services/experiment-details-reverter.service.ts","webpack:///src/app/features/experiments-compare/experiment-details-reverter-service.base.ts","webpack:///src/app/features/experiments-compare/experiments-compare-consts.ts","webpack:///src/app/webapp-common/experiments-compare/effects/experiments-compare-details.effects.ts","webpack:///src/app/webapp-common/experiments-compare/effects/experiments-compare-debug-images.effects.ts","webpack:///src/app/webapp-common/experiments-compare/actions/experiments-compare-debug-images.actions.ts","webpack:///src/app/webapp-common/experiments-compare/effects/experiments-compare-charts.effects.ts","webpack:///src/app/webapp-common/experiments-compare/effects/experiments-compare-metrics-values.effects.ts","webpack:///src/app/webapp-common/experiments-compare/effects/select-experiment-for-compare-effects.service.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table-diff/table-diff.module.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/card2/card.module.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/drawer/drawer.module.ts","webpack:///src/app/webapp-common/experiments-compare/effects/experiments-compare-scalars-graph.effects.ts","webpack:///src/app/webapp-common/experiments-compare/services/experiment-params-reverter.service.ts","webpack:///src/app/webapp-common/experiments-compare/effects/experiments-compare-params.effects.ts","webpack:///src/app/webapp-common/experiments-compare/experiments-compare.module.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/experiments-compare-details.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/experiments-compare-charts.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/experiments-compare-metrics-values.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/experiments-compare-debug-images.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/compare-header.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/experiments-compare-scalars-graph.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/experiments-compare-params.reducer.ts","webpack:///src/app/webapp-common/experiments-compare/reducers/index.ts","webpack:///src/app/webapp-common/experiments-compare/shared/experiment-compare-shared.module.ts","webpack:///src/app/webapp-common/experiments/actions/common-experiment-output.actions.ts","webpack:///src/app/webapp-common/experiments/actions/common-experiments-info.actions.ts","webpack:///src/app/webapp-common/experiments/actions/common-experiments-menu.actions.ts","webpack:///src/app/webapp-common/experiments/actions/common-experiments-view.actions.ts","webpack:///src/app/webapp-common/experiments/effects/common-experiments-info.effects.ts","webpack:///src/app/business-logic/model/tasks/replaceHyperparamsEnum.ts","webpack:///src/app/webapp-common/experiments/effects/common-experiment-output.effects.ts","webpack:///src/app/webapp-common/experiments/effects/common-experiments-menu.effects.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-table-card/experiment-table-card.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-table-card/experiment-table-card.component.ts","webpack:///src/app/webapp-common/experiments/shared/experiment-output-log/experiment-output-log.module.ts","webpack:///src/app/webapp-common/experiments/common-experiments.module.ts","webpack:///src/app/webapp-common/experiments/dumb/experiment-type-icon-label/experiment-type-icon-label.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiment-type-icon-label/experiment-type-icon-label.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiments-table/hyper-param-metric-column/get-variant-without-round.pipe.ts","webpack:///src/app/webapp-common/experiments/dumb/experiments-table/hyper-param-metric-column/get-param-metric-value.pipe.ts","webpack:///src/app/webapp-common/experiments/dumb/experiments-table/hyper-param-metric-column/hyper-param-metric-column.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiments-table/hyper-param-metric-column/hyper-param-metric-column.component.ts","webpack:///src/app/webapp-common/experiments/dumb/experiments-table/experiments-table.component.html","webpack:///src/app/webapp-common/experiments/dumb/experiments-table/experiments-table.component.ts","webpack:///src/app/webapp-common/experiments/dumb/image-displayer/image-displayer.component.html","webpack:///src/app/webapp-common/experiments/dumb/image-displayer/image-displayer.component.ts","webpack:///src/app/webapp-common/experiments/dumb/select-metric-for-custom-col/select-metric-for-custom-col.component.html","webpack:///src/app/webapp-common/experiments/dumb/select-metric-for-custom-col/select-metric-for-custom-col.component.ts","webpack:///src/app/business-logic/model/projects/projectsGetTaskParentsRequest.ts","webpack:///src/app/webapp-common/experiments/effects/common-experiments-view.effects.ts","webpack:///src/app/webapp-common/experiments/experiment.consts.ts","webpack:///src/app/webapp-common/experiments/reducers/common-experiment-output.reducer.ts","webpack:///src/app/webapp-common/experiments/reducers/common-experiments-view.reducer.ts","webpack:///src/app/webapp-common/experiments/reducers/index.ts","webpack:///src/app/webapp-common/experiments/shared/common-experiment-shared.module.ts","webpack:///src/app/webapp-common/experiments/shared/common-experiments.const.ts","webpack:///src/app/webapp-common/experiments/shared/common-experiments.utils.ts","webpack:///src/app/webapp-common/experiments/shared/components/abort-all-children-dialog/abort-all-children-dialog.component.html","webpack:///src/app/webapp-common/experiments/shared/components/abort-all-children-dialog/abort-all-children-dialog.component.ts","webpack:///src/app/webapp-common/experiments/shared/components/change-project-dialog/change-project-dialog.component.html","webpack:///src/app/webapp-common/experiments/shared/components/change-project-dialog/change-project-dialog.component.ts","webpack:///src/app/webapp-common/experiments/shared/components/clone-dialog/clone-dialog.component.html","webpack:///src/app/webapp-common/experiments/shared/components/clone-dialog/clone-dialog.component.ts","webpack:///src/app/webapp-common/experiments/shared/components/experiment-menu/experiment-menu.component.ts","webpack:///src/app/webapp-common/experiments/shared/components/experiment-status-icon-label/experiment-status-icon-label.component.html","webpack:///src/app/webapp-common/experiments/shared/components/experiment-status-icon-label/experiment-status-icon-label.component.ts","webpack:///src/app/webapp-common/experiments/shared/components/select-queue/select-queue.actions.ts","webpack:///src/app/webapp-common/experiments/shared/components/select-queue/select-queue.component.html","webpack:///src/app/webapp-common/experiments/shared/components/select-queue/select-queue.component.ts","webpack:///src/app/webapp-common/experiments/shared/components/select-queue/select-queue.effects.ts","webpack:///src/app/webapp-common/experiments/shared/components/select-queue/select-queue.module.ts","webpack:///src/app/webapp-common/experiments/shared/components/select-queue/select-queue.reducer.ts","webpack:///src/app/webapp-common/experiments/shared/services/common-experiment-converter.service.ts","webpack:///src/app/webapp-common/experiments/shared/services/common-experiment-reverter.service.ts","webpack:///src/app/webapp-common/layout/breadcrumbs/breadcrumbs-common.utils.ts","webpack:///src/app/webapp-common/layout/layout.module.ts","webpack:///src/app/webapp-common/layout/layout.reducer.ts","webpack:///src/app/webapp-common/layout/project-context-navbar/project-context-navbar.component.html","webpack:///src/app/webapp-common/layout/project-context-navbar/project-context-navbar.component.ts","webpack:///src/app/webapp-common/login/login-reducer.ts","webpack:///src/app/webapp-common/login/login.actions.ts","webpack:///src/app/webapp-common/models/actions/models-info.actions.ts","webpack:///src/app/webapp-common/models/actions/models-menu.actions.ts","webpack:///src/app/webapp-common/models/actions/models-view.actions.ts","webpack:///src/app/webapp-common/models/model.utils.ts","webpack:///src/app/webapp-common/models/models.consts.ts","webpack:///src/app/webapp-common/models/dumbs/model-custom-cols-menu/model-custom-cols-menu.component.ts","webpack:///src/app/webapp-common/models/dumbs/model-custom-cols-menu/model-custom-cols-menu.component.html","webpack:///src/app/features/models/dumb/model-header/model-header.component.html","webpack:///src/app/features/models/dumb/model-header/model-header.component.ts","webpack:///src/app/webapp-common/models/models.component.ts","webpack:///src/app/webapp-common/models/models.component.html","webpack:///src/app/webapp-common/models/dumbs/model-info-header/model-info-header.component.html","webpack:///src/app/webapp-common/models/dumbs/model-info-header/model-info-header.component.ts","webpack:///src/app/webapp-common/models/containers/model-info/model-info.component.ts","webpack:///src/app/webapp-common/models/containers/model-info/model-info.component.html","webpack:///src/app/webapp-common/models/dumbs/model-general-info/model-general-info.component.html","webpack:///src/app/webapp-common/models/dumbs/model-general-info/model-general-info.component.ts","webpack:///src/app/webapp-common/models/containers/model-info-general/model-info-general.component.ts","webpack:///src/app/webapp-common/models/containers/model-info-general/model-info-general.component.html","webpack:///src/app/webapp-common/models/dumbs/model-view-network/model-view-network.component.html","webpack:///src/app/webapp-common/models/dumbs/model-view-network/model-view-network.component.ts","webpack:///src/app/webapp-common/models/containers/model-info-network/model-info-network.component.ts","webpack:///src/app/webapp-common/models/containers/model-info-network/model-info-network.component.html","webpack:///src/app/webapp-common/models/dumbs/model-info-labels-view/model-info-labels-view.component.html","webpack:///src/app/webapp-common/models/dumbs/model-info-labels-view/model-info-labels-view.component.ts","webpack:///src/app/webapp-common/models/containers/model-info-labels/model-info-labels.component.ts","webpack:///src/app/webapp-common/models/containers/model-info-labels/model-info-labels.component.html","webpack:///src/app/webapp-common/models/models-routing.module.ts","webpack:///src/app/webapp-common/models/effects/models-view.effects.ts","webpack:///src/app/webapp-common/models/effects/models-info.effects.ts","webpack:///src/app/webapp-common/models/effects/models-menu.effects.ts","webpack:///src/app/webapp-common/core/services/sm-form-builder.service.ts","webpack:///src/app/webapp-common/models/models.module.ts","webpack:///src/app/webapp-common/models/reducers/model-info.reducer.ts","webpack:///src/app/webapp-common/models/reducers/index.ts","webpack:///src/app/webapp-common/models/reducers/models-view.reducer.ts","webpack:///src/app/webapp-common/models/shared/model-shared.module.ts","webpack:///src/app/webapp-common/models/shared/models-table/models-table.component.html","webpack:///src/app/webapp-common/models/shared/models-table/models-table.component.ts","webpack:///src/app/webapp-common/models/shared/models.const.ts","webpack:///src/app/webapp-common/models/shared/select-model-header/select-model-header.component.html","webpack:///src/app/webapp-common/models/shared/select-model-header/select-model-header.component.ts","webpack:///src/app/webapp-common/projects/common-projects.actions.ts","webpack:///src/app/webapp-common/projects/common-projects.consts.ts","webpack:///src/app/features/projects/projects.effect.ts","webpack:///src/app/webapp-common/projects/common-projects.effects.ts","webpack:///src/app/webapp-common/projects/common-projects.module.ts","webpack:///src/app/webapp-common/projects/common-projects.reducer.ts","webpack:///src/app/webapp-common/shared/utils/amazon-s3-uri.ts","webpack:///src/app/webapp-common/settings/admin/base-admin.service.ts","webpack:///src/app/webapp-common/shared/components/base-context-menu/base-context-menu.component.ts","webpack:///src/app/webapp-common/shared/components/charts/line-chart/line-chart.component.ts","webpack:///src/app/webapp-common/shared/components/charts/line-chart/line-chart.component.html","webpack:///src/app/webapp-common/shared/components/clear-filters-button/clear-filters-button.component.ts","webpack:///src/app/webapp-common/shared/components/clear-filters-button/clear-filters-button.component.html","webpack:///src/app/webapp-common/shared/components/custom-columns-list/custom-columns-list.component.html","webpack:///src/app/webapp-common/shared/components/custom-columns-list/custom-columns-list.component.ts","webpack:///src/app/webapp-common/shared/components/experiment-settings/experiment-settings.html","webpack:///src/app/webapp-common/shared/components/experiment-settings/experiment-settings.ts","webpack:///src/app/webapp-common/shared/components/refresh-button/refresh-button.component.html","webpack:///src/app/webapp-common/shared/components/refresh-button/refresh-button.component.ts","webpack:///src/app/webapp-common/shared/components/scroll-textarea/scroll-textarea.component.html","webpack:///src/app/webapp-common/shared/components/scroll-textarea/scroll-textarea.component.ts","webpack:///src/app/webapp-common/shared/components/section-header/section-header.component.html","webpack:///src/app/webapp-common/shared/components/section-header/section-header.component.ts","webpack:///src/app/webapp-common/shared/components/show-only-user-work/show-only-user-work.component.ts","webpack:///src/app/webapp-common/shared/components/show-only-user-work/show-only-user-work.component.html","webpack:///src/app/webapp-common/shared/entity-page/base-entity-page.ts","webpack:///src/app/webapp-common/shared/entity-page/entity-delete/common-delete-dialog.actions.ts","webpack:///src/app/webapp-common/shared/entity-page/entity-delete/common-delete-dialog.component.html","webpack:///src/app/webapp-common/shared/entity-page/entity-delete/common-delete-dialog.component.ts","webpack:///src/app/webapp-common/shared/entity-page/entity-delete/base-delete-dialog.effects.ts","webpack:///src/app/features/delete-entity/delete-dialog.effects.ts","webpack:///src/app/webapp-common/shared/entity-page/entity-delete/common-delete-dialog.module.ts","webpack:///src/app/webapp-common/shared/entity-page/entity-delete/common-delete-dialog.reducer.ts","webpack:///src/app/webapp-common/shared/entity-page/entity-footer/entity-footer.component.html","webpack:///src/app/webapp-common/shared/entity-page/entity-footer/entity-footer.component.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/archive-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/compare-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/delete-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/generic-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/divider-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/footer-items.models.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/has-read-only-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/move-to-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/publish-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/selected-tags-footer-item.ts","webpack:///src/app/webapp-common/shared/entity-page/footer-items/show-items-footer-selected.ts","webpack:///src/app/webapp-common/shared/entity-page/items.utils.ts","webpack:///src/app/webapp-common/shared/experiment-graphs/experiment-graphs.component.html","webpack:///src/app/webapp-common/shared/experiment-graphs/experiment-graphs.component.ts","webpack:///src/app/webapp-common/shared/experiment-graphs/experiment-graphs.module.ts","webpack:///src/app/webapp-common/shared/experiment-graphs/graph-displayer/graph-displayer.component.html","webpack:///src/app/webapp-common/shared/experiment-graphs/graph-displayer/graph-displayer.component.ts","webpack:///src/app/webapp-common/shared/experiment-graphs/graph-settings-bar/graph-settings-bar.component.html","webpack:///src/app/webapp-common/shared/experiment-graphs/graph-settings-bar/graph-settings-bar.component.ts","webpack:///src/app/webapp-common/shared/experiment-graphs/single-graph/plotly-graph-base.ts","webpack:///src/app/webapp-common/shared/experiment-graphs/single-graph/single-graph.component.html","webpack:///src/app/webapp-common/shared/experiment-graphs/single-graph/single-graph.component.ts","webpack:///src/app/webapp-common/shared/experiment-info-header-status-icon-label/experiment-info-header-status-icon-label.component.html","webpack:///src/app/webapp-common/shared/experiment-info-header-status-icon-label/experiment-info-header-status-icon-label.component.ts","webpack:///src/app/webapp-common/shared/experiment-info-header-status-progress-bar/experiment-info-header-status-progress-bar.component.ts","webpack:///src/app/webapp-common/shared/experiment-info-header-status-progress-bar/experiment-info-header-status-progress-bar.component.html","webpack:///src/app/webapp-common/shared/guards/general-leaving-before-save-alert.guard.ts","webpack:///src/app/webapp-common/shared/guards/leaving-before-save-alert.guard.ts","webpack:///src/app/shared/guards/guard-base.ts","webpack:///src/app/webapp-common/shared/material/material.module.ts","webpack:///src/app/webapp-common/shared/pipes/advanced-filter.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/breadcrumbs-ellipsis.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/duration.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/filter-internal.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/filter.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/filterLast.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/filterOut.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/hide-hash-title.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/hide-hash.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/highlight-search-text.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/idToObjectsArray.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/initials.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/is-audio.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/is-video.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/menu-item-text.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/ms-to-hours.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/ms-to-sec.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/na.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/no-underscore.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/number-to-k.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/project-location.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/replaceViaMap.ts","webpack:///src/app/webapp-common/shared/pipes/safe.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/safeAngularUrlParameter.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/camel-to-title.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/filename-from-path.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/floor.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/join.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/keyval.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/unique-by.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/key-value.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/to-exponential.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/time-till-now.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/has-example-item.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/selectOptionValueToLabel.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/label-value.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/filterById.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/toPropertyArray.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/uuid.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/is-empty.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/shared-pipes.module.ts","webpack:///src/app/webapp-common/shared/pipes/highlight-search.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/template-injector.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/test-conditional.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/group-has-errors.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/formgroup-has-required-field.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/short-project-name.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/show-selected-first.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/simple-filter.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/sort.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/string-included-in-array.pipe.ts","webpack:///src/app/webapp-common/shared/pipes/timeAgo.ts","webpack:///src/app/webapp-common/shared/pipes/to-precentage.pipe.ts","webpack:///src/app/webapp-common/shared/portal/portal.module.ts","webpack:///src/app/webapp-common/shared/project-dialog/project-dialog.actions.ts","webpack:///src/app/webapp-common/shared/project-dialog/create-new-project-form/create-new-project-form.component.html","webpack:///src/app/webapp-common/shared/project-dialog/create-new-project-form/create-new-project-form.component.ts","webpack:///src/app/webapp-common/shared/project-dialog/project-move-to-form/project-move-to-form.component.html","webpack:///src/app/webapp-common/shared/project-dialog/project-move-to-form/project-move-to-form.component.ts","webpack:///src/app/webapp-common/shared/project-dialog/project-dialog.component.html","webpack:///src/app/webapp-common/shared/project-dialog/project-dialog.component.ts","webpack:///src/app/webapp-common/shared/project-dialog/project-dialog.effects.ts","webpack:///src/app/webapp-common/shared/project-dialog/project-dialog.module.ts","webpack:///src/app/webapp-common/shared/project-dialog/project-dialog.reducer.ts","webpack:///src/app/webapp-common/shared/services/color-hash/color-hash.service.ts","webpack:///src/app/webapp-common/shared/services/color-hash/color-hash.utils.ts","webpack:///src/app/webapp-common/shared/services/configuration.service.ts","webpack:///src/app/webapp-common/shared/services/error.service.ts","webpack:///src/app/webapp-common/shared/services/login.service.ts","webpack:///src/app/webapp-common/shared/services/tag-color.service.ts","webpack:///src/app/webapp-common/shared/shared.module.ts","webpack:///src/app/webapp-common/shared/ui-components/buttons/chips/chips.module.ts","webpack:///src/app/webapp-common/shared/ui-components/buttons/loading-button/loading-button.component.ts","webpack:///src/app/webapp-common/shared/ui-components/buttons/loading-button/loading-button.component.html","webpack:///src/app/webapp-common/shared/ui-components/buttons/toggle-archive/toggle-archive.component.ts","webpack:///src/app/webapp-common/shared/ui-components/buttons/toggle-archive/toggle-archive.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/code/code.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/code/code.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/grouped-checked-filter-list/grouped-checked-filter-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/grouped-checked-filter-list/grouped-checked-filter-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/labeled-row/labeled-row.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/labeled-row/labeled-row.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/selectable-filter-list/selectable-filter-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/selectable-filter-list/selectable-filter-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/selectable-grouped-filter-list/selectable-grouped-filter-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/selectable-grouped-filter-list/selectable-grouped-filter-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/selectable-list/selectable-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/selectable-list/selectable-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/simple-table/simple-table.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/simple-table/simple-table.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table-card/table-card.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table-card/table-card.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/base-table-view.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-card-filter-template/table-card-filter-template.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-card-filter-template/table-card-filter-template.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-duration-sort.base.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration-date-time/table-filter-duration-date-time.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration-date-time/table-filter-duration-date-time.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration-error/table-filter-duration-error.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration-error/table-filter-duration-error.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration-numeric/table-filter-duration-numeric.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration-numeric/table-filter-duration-numeric.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration/table-filter-duration.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-duration-sort-template/table-filter-duration/table-filter-duration.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-filter-sort-template/table-filter-sort-template.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table-filter-sort-template/table-filter-sort-template.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/overrideFilterFunc.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/resizable-column.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/table/table.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/table/table.consts.ts","webpack:///src/app/webapp-common/shared/ui-components/data/veritical-labeled-row/vertical-labeled-row.component.ts","webpack:///src/app/webapp-common/shared/ui-components/data/veritical-labeled-row/vertical-labeled-row.component.html","webpack:///src/app/webapp-common/shared/ui-components/directives/choose-color/choose-color.actions.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/choose-color/choose-color.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/choose-color/choose-color.module.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/choose-color/choose-color.reducer.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/click-stop-propagation.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/ellipsis-middle.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/hesitate.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/keydown-stop-propagation.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/directives/overflows.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/forms/immutableFormField.ts","webpack:///src/app/webapp-common/shared/ui-components/forms/checkbox-control/checkbox-control.component.html","webpack:///src/app/webapp-common/shared/ui-components/forms/checkbox-control/checkbox-control.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/circle-counter/circle-counter.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/circle-counter/circle-counter.component.html","webpack:///src/app/webapp-common/shared/ui-components/indicators/circle-status/circle-status.component.html","webpack:///src/app/webapp-common/shared/ui-components/indicators/circle-status/circle-status.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/copy-clipboard/copy-clipboard.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/copy-clipboard/copy-clipboard.component.html","webpack:///src/app/webapp-common/shared/ui-components/indicators/divider/divider.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/snippet-error/snippet-error.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/snippet-error/snippet-error.component.html","webpack:///src/app/webapp-common/shared/ui-components/indicators/tag/tag.component.ts","webpack:///src/app/webapp-common/shared/ui-components/indicators/tag/tag.component.html","webpack:///src/app/webapp-common/shared/ui-components/indicators/tooltip/tooltip.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/inputs/button-toggle/button-toggle.component.html","webpack:///src/app/webapp-common/shared/ui-components/inputs/button-toggle/button-toggle.component.ts","webpack:///src/app/webapp-common/shared/ui-components/inputs/color-picker/color-picker-wrapper.component.html","webpack:///src/app/webapp-common/shared/ui-components/inputs/color-picker/color-picker-wrapper.component.ts","webpack:///src/app/webapp-common/shared/ui-components/inputs/duration-input/duration-input.base.ts","webpack:///src/app/webapp-common/shared/ui-components/inputs/duraion-input-list/duration-input-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/inputs/duraion-input-list/duration-input-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/inputs/inline-edit/inline-edit.component.html","webpack:///src/app/webapp-common/shared/ui-components/inputs/inline-edit/inline-edit.component.ts","webpack:///src/app/webapp-common/shared/ui-components/inputs/search/search.component.html","webpack:///src/app/webapp-common/shared/ui-components/inputs/search/search.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/alert-dialog/alert-dialog.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/alert-dialog/alert-dialog.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/confirm-dialog/confirm-dialog.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/confirm-dialog/confirm-dialog.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/dialog-template/dialog-template.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/dialog-template/dialog-template.component.ts","webpack:///src/app/webapp-common/shared/utils/validation-utils.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/edit-json/edit-json.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/edit-json/edit-json.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/operation-error-dialog/operation-error-dialog.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/operation-error-dialog/operation-error-dialog.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/overlay/overlay.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/overlay/overlay.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/share-dialog/share-dialog.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/share-dialog/share-dialog.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/spinner/spinner.component.ts","webpack:///src/app/webapp-common/shared/ui-components/overlay/update-notifier/update-notifier.component.html","webpack:///src/app/webapp-common/shared/ui-components/overlay/update-notifier/update-notifier.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/card/card.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/card/card.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/checkbox-three-state-list/checkbox-three-state-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/checkbox-three-state-list/checkbox-three-state-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/compare-footer/compare-footer.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/compare-footer/compare-footer.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/editable-section/editable-section.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/editable-section/editable-section.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/experiment-card/experiment-card.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/experiment-card/experiment-card.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/menu-item/menu-item.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/menu-item/menu-item.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/menu/menu.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/menu/menu.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/model-card/model-card.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/model-card/model-card.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/navbar-item/navbar-item.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/navbar-item/navbar-item.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/plus-card/plus-card.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/plus-card/plus-card.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/project-card-menu/project-card-menu.component.ts","webpack:///src/app/webapp-common/shared/ui-components/panel/project-card/project-card.component.html","webpack:///src/app/webapp-common/shared/ui-components/panel/project-card/project-card.component.ts","webpack:///src/app/webapp-common/shared/ui-components/tags/tag-list/tag-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/tags/tag-list/tag-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/tags/tags-menu/tags-menu.component.html","webpack:///src/app/webapp-common/shared/ui-components/tags/tags-menu/tags-menu.component.ts","webpack:///src/app/webapp-common/shared/ui-components/tags/user-tag/user-tag.component.html","webpack:///src/app/webapp-common/shared/ui-components/tags/user-tag/user-tag.component.ts","webpack:///src/app/webapp-common/shared/ui-components/template-forms-ui/invalid-prefix-validator.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/template-forms-ui/templateFormSectionBase.ts","webpack:///src/app/webapp-common/shared/ui-components/template-forms-ui/unique-name-validator.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/template-forms-ui/unique-path-validator.directive.ts","webpack:///src/app/webapp-common/shared/ui-components/data/grouped-selectable-list/grouped-selectable-list.component.html","webpack:///src/app/webapp-common/shared/ui-components/data/grouped-selectable-list/grouped-selectable-list.component.ts","webpack:///src/app/webapp-common/shared/ui-components/ui-components.module.ts","webpack:///src/app/webapp-common/shared/utils/forms-track-by.ts","webpack:///src/app/webapp-common/shared/utils/helpers.util.ts","webpack:///src/app/webapp-common/shared/utils/shared-utils.ts","webpack:///src/app/webapp-common/shared/utils/mobile.ts","webpack:///src/app/webapp-common/shared/utils/tableParamEncode.ts","webpack:///src/app/webapp-common/tasks/tasks.constants.ts","webpack:///src/app/webapp-common/tasks/tasks.utils.ts","webpack:///src/app/webapp-common/user-preferences.ts","webpack:///src/environments/base.ts","webpack:///src/environments/environment.prod.ts","webpack:///src/app/business-logic/api-services/server.service.ts","webpack:///src/app/business-logic/api-services/organization.service.ts","webpack:///src/app/business-logic/business-logic.module.ts","webpack:///src/app/webapp-common/shared/services/server-updates.service.ts","webpack:///src/app/core/actions/layout.actions.ts","webpack:///src/app/core/reducers/view.reducer.ts","webpack:///src/app/webapp-common/layout/ui-update-dialog/ui-update-dialog.component.ts","webpack:///src/app/webapp-common/layout/ui-update-dialog/ui-update-dialog.component.html","webpack:///src/app/webapp-common/shared/services/ui-updates.service.ts","webpack:///src/app/core/actions/usage-stats.actions.ts","webpack:///src/app/core/reducers/usage-stats.reducer.ts","webpack:///src/app/core/services/usage-stats.service.ts","webpack:///src/app/webapp-common/layout/tip-of-the-day-modal/tip-of-the-day-modal.component.html","webpack:///src/app/webapp-common/layout/tip-of-the-day-modal/tip-of-the-day-modal.component.ts","webpack:///src/app/webapp-common/shared/services/tips.service.ts","webpack:///src/app/webapp-common/layout/server-notification-dialog-container/server-notification-dialog-container.component.ts","webpack:///src/app/webapp-common/angular-notifier/src/models/notifier-notification.model.ts","webpack:///src/app/webapp-common/angular-notifier/src/services/notifier-queue.service.ts","webpack:///src/app/webapp-common/angular-notifier/src/services/notifier.service.ts","webpack:///src/app/webapp-common/angular-notifier/src/animation-presets/fade.animation-preset.ts","webpack:///src/app/webapp-common/angular-notifier/src/animation-presets/slide.animation-preset.ts","webpack:///src/app/webapp-common/angular-notifier/src/services/notifier-animation.service.ts","webpack:///src/app/webapp-common/angular-notifier/src/services/notifier-timer.service.ts","webpack:///src/app/webapp-common/angular-notifier/src/components/notifier-notification.component.html","webpack:///src/app/webapp-common/angular-notifier/src/components/notifier-notification.component.ts","webpack:///src/app/webapp-common/angular-notifier/src/components/notifier-container.component.html","webpack:///src/app/webapp-common/angular-notifier/src/components/notifier-container.component.ts","webpack:///src/app/layout/side-nav/side-nav.component.html","webpack:///src/app/layout/side-nav/side-nav.component.ts","webpack:///src/app/webapp-common/layout/breadcrumbs/breadcrumbs.component.html","webpack:///src/app/webapp-common/layout/breadcrumbs/breadcrumbs.component.ts","webpack:///src/app/webapp-common/common-search/containers/common-search/common-search.component.html","webpack:///src/app/webapp-common/common-search/containers/common-search/common-search.component.ts","webpack:///src/app/layout/header/header-user-menu-actions/header-user-menu-actions.component.ts","webpack:///src/app/webapp-common/layout/header/header.component.html","webpack:///src/app/webapp-common/layout/header/header.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.routes.ts","webpack:///src/app/webapp-common/shared/guards/project-redirect.guard.ts","webpack:///src/app/webapp-common/layout/s3-access-dialog/s3-access-dialog.component.html","webpack:///src/app/webapp-common/layout/s3-access-dialog/s3-access-dialog.component.ts","webpack:///src/app/webapp-common/layout/s3-access-resolver/s3-access-resolver.component.ts","webpack:///src/app/webapp-common/layout/s3-access-resolver/s3-access-resolver.component.html","webpack:///src/app/webapp-common/settings/admin/admin-dialog-template/admin-dialog-template.component.html","webpack:///src/app/webapp-common/settings/admin/admin-dialog-template/admin-dialog-template.component.ts","webpack:///src/app/features/settings/containers/admin/create-credential-dialog/create-credential-dialog.component.ts","webpack:///src/app/features/settings/containers/admin/create-credential-dialog/create-credential-dialog.component.html","webpack:///src/app/webapp-common/core/effects/common-auth.effects.ts","webpack:///src/app/webapp-common/angular-notifier/src/models/notifier-config.model.ts","webpack:///src/app/webapp-common/angular-notifier/src/notifier.module.ts","webpack:///src/app/webapp-common/core/effects/layout.effects.ts","webpack:///src/app/webapp-common/shared/ui-components/tags/tag-color-menu/tag-color-menu.component.html","webpack:///src/app/webapp-common/shared/ui-components/tags/tag-color-menu/tag-color-menu.component.ts","webpack:///src/app/webapp-common/core/effects/projects.effects.ts","webpack:///src/app/webapp-common/core/effects/router.effects.ts","webpack:///src/app/webapp-common/core/effects/users.effects.ts","webpack:///src/app/webapp-common/core/meta-reducers/user-pref-reducer.ts","webpack:///src/app/webapp-common/core/reducers/messages-reducer.ts","webpack:///src/app/core/effects/projects.effects.ts","webpack:///src/app/features/login/login.actions.ts","webpack:///src/app/features/login/login.reducer.ts","webpack:///src/app/features/settings/containers/admin/auth.reducers.ts","webpack:///src/app/shared/cookies.service.ts","webpack:///src/app/core/effects/users.effects.ts","webpack:///src/app/core/reducers/recent-tasks-reducer.ts","webpack:///src/app/core/core.module.ts","webpack:///src/app/core/reducers/sources-reducer.ts","webpack:///src/app/webapp-common/core/interceptors/webapp-interceptor.ts","webpack:///src/app/webapp-common/core/router-reuse-strategy.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import {Action} from '@ngrx/store';\nimport {ConfigurationService} from './webapp-common/shared/services/configuration.service';\nconst environment = ConfigurationService.globalEnvironment;\n\nexport const NA                      = 'N/A';\nexport const ALLEGRO_TUTORIAL_BUCKET = 'allegro-tutorials';\nexport const UPDATE_SERVER_PATH      = 'https://updates.clear.ml/updates';\n\nexport const BASE_REGEX = {\n  DOMAIN           : '([A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?\\\\.)+([A-Za-z]{2,6}\\\\.?|[A-Za-z0-9-]{1,}[A-Za-z0-9]\\\\.?)',\n  PATH             : '(\\\\/?|[\\\\/?]\\\\S+)',\n  IPV4             : '\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}',\n  IPV6             : '\\\\[?[A-F0-9]*:[A-F0-9:]+\\\\]?',\n  FILE_PROTOCOL    : '[fF][iI][lL][eE]:\\\\/\\\\/',\n  S3_PROTOCOL      : '[sS]3:\\\\/\\\\/',\n  GS_PROTOCOL      : '[gG][sS]:\\\\/\\\\/',\n  AZURE_PROTOCOL   : 'azure:\\\\/\\\\/',\n  SCHEME           : '^[hH][tT][tT][pP][sS]?:\\\\/\\\\/',\n  FILE_SUFFIX      : '\\\\/\\\\S*[^\\\\/ ]+$',\n  FOLDER           : '\\\\/\\\\S*[^\\\\/ ]',\n  S3_BUCKET_NAME   : '(\\\\w[A-Za-z0-9\\\\-]+\\\\w\\\\.)*\\\\w[A-Za-z0-9\\\\-]+\\\\w',\n  GS_BUCKET_NAME   : '(\\\\w[A-Za-z0-9\\\\-_]+\\\\w\\\\.)*\\\\w[A-Za-z0-9\\\\-_]+\\\\w',\n  AZURE_BUCKET_NAME: '(\\\\w[A-Za-z0-9\\\\-_]+\\\\w\\\\.)*\\\\w[A-Za-z0-9\\\\-_]+\\\\w'\n};\n\nexport const URI_REGEX = {\n  S3_WITH_BUCKET            : BASE_REGEX.S3_PROTOCOL + BASE_REGEX.S3_BUCKET_NAME + BASE_REGEX.PATH,\n  GS_WITH_BUCKET            : BASE_REGEX.GS_PROTOCOL + BASE_REGEX.GS_BUCKET_NAME + BASE_REGEX.PATH,\n  S3_WITH_BUCKET_AND_HOST   : BASE_REGEX.S3_PROTOCOL + BASE_REGEX.S3_BUCKET_NAME + BASE_REGEX.DOMAIN + BASE_REGEX.PATH,\n  GS_WITH_BUCKET_AND_HOST   : BASE_REGEX.GS_PROTOCOL + BASE_REGEX.GS_BUCKET_NAME + BASE_REGEX.DOMAIN + BASE_REGEX.PATH,\n  AZURE_WITH_BUCKET_AND_HOST: BASE_REGEX.AZURE_PROTOCOL + BASE_REGEX.AZURE_BUCKET_NAME + BASE_REGEX.DOMAIN + BASE_REGEX.PATH,\n  NON_AWS_S3                : BASE_REGEX.S3_PROTOCOL + '(' + BASE_REGEX.DOMAIN + '|' +\n    '(localhost|LOCALHOST)' +\n    BASE_REGEX.IPV4 + '|' +\n    BASE_REGEX.IPV6 + ')' +\n    '(:\\\\d+)?\\\\/' + // optional port.\n    BASE_REGEX.S3_BUCKET_NAME +\n    BASE_REGEX.PATH,\n  HTTP                      : BASE_REGEX.SCHEME + '(' + BASE_REGEX.DOMAIN + '|' +\n    '(localhost|LOCALHOST)|' +\n    BASE_REGEX.IPV4 + '|' +\n    BASE_REGEX.IPV6 + ')' +\n    '(:\\\\d+)?',\n  FILE                      : BASE_REGEX.FILE_PROTOCOL + BASE_REGEX.FOLDER,\n  FILE_WITH_FILE_NAME       : BASE_REGEX.FILE_PROTOCOL + '(' + BASE_REGEX.FOLDER + ')?' + BASE_REGEX.FILE_SUFFIX\n};\n\n\nexport const TASK_TYPES = {\n  TRAINING         : 'training',\n  ANNOTATION       : 'annotation',\n  MANUAL_ANNOTATION: 'annotation_manual',\n  TESTING          : 'testing',\n};\n\nconst recentTasksPrefix = 'RECENT_TASKS';\n\nexport const RECENT_TASKS_ACTIONS = {\n  GET_RECENT_TASKS: recentTasksPrefix + 'GET_RECENT_TASKS',\n  SET_RECENT_TASKS: recentTasksPrefix + 'SET_RECENT_TASKS'\n};\n\nexport const VIEW_PREFIX  = 'VIEW_';\n\nexport type MediaContentTypeEnum = 'image/bmp' | 'image/jpeg' | 'image/png' | 'video/mp4' | 'image/jpeg';\n\nexport const MEDIA_VIDEO_EXTENSIONS = ['flv', 'avi', 'mp4', 'mov', 'mpg', 'wmv', '3gp', 'mkv'];\n\nexport type MessageSeverityEnum = 'success' | 'error' | 'info' | 'warn';\n\nexport const MESSAGES_SEVERITY = {\n  SUCCESS: 'success' as MessageSeverityEnum,\n  ERROR  : 'error' as MessageSeverityEnum,\n  INFO   : 'info' as MessageSeverityEnum,\n  WARN   : 'warn' as MessageSeverityEnum\n};\n\nexport const USERS_PREFIX  = 'USERS_';\nexport const USERS_ACTIONS = {\n  FETCH_CURRENT_USER: USERS_PREFIX + 'FETCH_USER',\n  SET_CURRENT_USER  : USERS_PREFIX + 'SET_CURRENT_USER',\n  LOGOUT_SUCCESS    : USERS_PREFIX + 'LOGOUT_SUCCESS',\n  LOGOUT            : USERS_PREFIX + 'LOGOUT',\n  SET_PREF          : USERS_PREFIX + 'SET_PREF'\n};\n\nexport const NAVIGATION_PREFIX  = 'NAVIGATION_';\nexport const NAVIGATION_ACTIONS = {\n  NAVIGATE_TO                            : NAVIGATION_PREFIX + 'NAVIGATE_TO',\n  NAVIGATION_END                         : NAVIGATION_PREFIX + 'NAVIGATION_END',\n  SET_ROUTER_SEGMENT                     : NAVIGATION_PREFIX + 'SET_ROUTER_SEGMENT',\n  UPDATATE_CURRENT_URL_WITHOUT_NAVIGATING: NAVIGATION_PREFIX + 'UPDATATE_CURRENT_URL_WITHOUT_NAVIGATING',\n  NAVIGATION_SKIPPED                     : NAVIGATION_PREFIX + 'NAVIGATION_SKIPPED',\n};\n\n\nexport function guessAPIServerURL() {\n  const url = window.location.origin;\n  if (/https?:\\/\\/(demo|)app\\./.test(url)) {\n    return url.replace(/(https?):\\/\\/(demo|)app/, '$1://$2api');\n  } else if (window.location.port === '30080') {\n    return url.replace(/:\\d+/, '') + ':30008';\n  }\n  return url.replace(/:\\d+/, '') + ':8008';\n}\n\nexport const ENVIRONMENT = {API_VERSION: '/v999.0'};\nconst url                = window.location.origin;\nlet apiBaseUrl: string;\nif (environment.apiBaseUrl) {\n  apiBaseUrl = environment.apiBaseUrl;\n} else {\n  apiBaseUrl = guessAPIServerURL();\n}\nconst apiBaseUrlNoVersion = apiBaseUrl;\n\nlet fileBaseUrl;\nif (environment.fileBaseUrl) {\n  fileBaseUrl = environment.fileBaseUrl;\n} else if (/https?:\\/\\/(demo|)app\\./.test(url)) {\n  fileBaseUrl = url.replace(/(https?):\\/\\/(demo|)app/, '$1://$2files');\n} else if (window.location.port === '30080') {\n  fileBaseUrl = url.replace(/:\\d+/, '') + ':30081';\n} else if (window.location.port === '8080') {\n  fileBaseUrl = url.replace(/:\\d+/, '') + ':8081';\n}\n\napiBaseUrl += ENVIRONMENT.API_VERSION;\n\nexport const HTTP_PREFIX         = 'HTTP_';\n\nexport const HTTP = {\n  API_BASE_URL           : apiBaseUrl,  // <-- DIRECT CALL DOESN'T WORK\n  API_BASE_URL_NO_VERSION: apiBaseUrlNoVersion,\n  FILE_BASE_URL: fileBaseUrl,\n};\n\nexport class EmptyAction implements Action {\n  readonly type = 'EMPTY_ACTION';\n}\n\nexport const AUTO_REFRESH_INTERVAL = 10 * 1000;\n","import {Injectable} from '@angular/core';\nimport {HTTP} from '../../app.constants';\nimport {Observable} from 'rxjs';\nimport {IApiRequest, SmHttpResponse} from '../model/api-request';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {HttpHeaders} from '@angular/common/http';\nimport {map} from 'rxjs/operators';\n\n@Injectable()\nexport class SmApiRequestsService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  createRequest(request: IApiRequest): Observable<any> {\n\n    return this.http.request(\n      request.meta.method,\n      request.meta.endpoint[0] === '/' ? request.meta.endpoint : `${HTTP.API_BASE_URL}/${request.meta.endpoint}`,\n      {\n        params         : this.getParams(request.params),\n        body           : request.payload,\n        withCredentials: true\n      });\n  }\n\n  post<T>(url: string, body: any | null, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<T> {\n    options.withCredentials = true;\n    return this.http.post<SmHttpResponse>(url, body, options).pipe(map(res => res.data));\n  }\n\n  posti(url: string, body: any | null, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<SmHttpResponse> {\n    options.withCredentials = true;\n    return this.http.post<SmHttpResponse>(url, body, options);\n  }\n\n  private getParams(actionParams) {\n    let params: HttpParams = new HttpParams();\n\n    if (actionParams) {\n      Object.keys(actionParams)\n        .forEach(key => params = params.append(key, actionParams[key]));\n    }\n\n    return params;\n  }\n\n}\n","/**\n * auth\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { AuthCreateCredentialsResponse } from '../model/auth/authCreateCredentialsResponse';\nimport { AuthCreateUserRequest } from '../model/auth/authCreateUserRequest';\nimport { AuthCreateUserResponse } from '../model/auth/authCreateUserResponse';\nimport { AuthEditUserRequest } from '../model/auth/authEditUserRequest';\nimport { AuthEditUserResponse } from '../model/auth/authEditUserResponse';\nimport { AuthFixedUsersModeResponse } from '../model/auth/authFixedUsersModeResponse';\nimport { AuthGetCredentialsResponse } from '../model/auth/authGetCredentialsResponse';\nimport { AuthGetTokenForUserRequest } from '../model/auth/authGetTokenForUserRequest';\nimport { AuthGetTokenForUserResponse } from '../model/auth/authGetTokenForUserResponse';\nimport { AuthLoginRequest } from '../model/auth/authLoginRequest';\nimport { AuthLoginResponse } from '../model/auth/authLoginResponse';\nimport { AuthRevokeCredentialsRequest } from '../model/auth/authRevokeCredentialsRequest';\nimport { AuthRevokeCredentialsResponse } from '../model/auth/authRevokeCredentialsResponse';\nimport { AuthValidateTokenRequest } from '../model/auth/authValidateTokenRequest';\nimport { AuthValidateTokenResponse } from '../model/auth/authValidateTokenResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiAuthService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Internal. Creates a new set of credentials for the authenticated user. New   key/secret is returned. Note: Secret will never be returned in any other API   call. If a secret is lost or compromised, the key should be revoked and a new   set of credentials can be created.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authCreateCredentials(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authCreateCredentials.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthCreateCredentialsResponse>(`${this.basePath}/auth.create_credentials`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Creates a new user auth entry. Intended for internal use.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authCreateUser(request: AuthCreateUserRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authCreateUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthCreateUserResponse>(`${this.basePath}/auth.create_user`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Edit a users\\&#39; auth data properties\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authEditUser(request: AuthEditUserRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authEditUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthEditUserResponse>(`${this.basePath}/auth.edit_user`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Return fixed users mode status\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authFixedUsersMode(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authFixedUsersMode.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthFixedUsersModeResponse>(`${this.basePath}/auth.fixed_users_mode`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Returns all existing credential keys for the authenticated user.   Note: Only credential keys are returned.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authGetCredentials(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authGetCredentials.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthGetCredentialsResponse>(`${this.basePath}/auth.get_credentials`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get a token for the specified user. Intended for internal use.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authGetTokenForUser(request: AuthGetTokenForUserRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authGetTokenForUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthGetTokenForUserResponse>(`${this.basePath}/auth.get_token_for_user`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get a token based on supplied credentials (key/secret). Intended for   use by users with key/secret credentials that wish to obtain a token for use   with other services.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authLogin(request: AuthLoginRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authLogin.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthLoginResponse>(`${this.basePath}/auth.login`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Removes the authentication cookie from the current session\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authLogout(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authLogout.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/auth.logout`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Revokes (and deletes) a set (key, secret) of credentials for the   authenticated user.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authRevokeCredentials(request: AuthRevokeCredentialsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authRevokeCredentials.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthRevokeCredentialsResponse>(`${this.basePath}/auth.revoke_credentials`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Validate a token and return user identity if valid. Intended for   internal use.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authValidateToken(request: AuthValidateTokenRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling authValidateToken.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<AuthValidateTokenResponse>(`${this.basePath}/auth.validate_token`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * events\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { DebugImageSampleReposnse } from '../model/events/debugImageSampleReposnse';\nimport { EventsAddBatchResponse } from '../model/events/eventsAddBatchResponse';\nimport { EventsDebugImagesRequest } from '../model/events/eventsDebugImagesRequest';\nimport { EventsDebugImagesResponse } from '../model/events/eventsDebugImagesResponse';\nimport { EventsDeleteForTaskRequest } from '../model/events/eventsDeleteForTaskRequest';\nimport { EventsDeleteForTaskResponse } from '../model/events/eventsDeleteForTaskResponse';\nimport { EventsDownloadTaskLogRequest } from '../model/events/eventsDownloadTaskLogRequest';\nimport { EventsGetDebugImageSampleRequest } from '../model/events/eventsGetDebugImageSampleRequest';\nimport { EventsGetMultiTaskPlotsRequest } from '../model/events/eventsGetMultiTaskPlotsRequest';\nimport { EventsGetMultiTaskPlotsResponse } from '../model/events/eventsGetMultiTaskPlotsResponse';\nimport { EventsGetScalarMetricDataRequest } from '../model/events/eventsGetScalarMetricDataRequest';\nimport { EventsGetScalarMetricDataResponse } from '../model/events/eventsGetScalarMetricDataResponse';\nimport { EventsGetScalarMetricsAndVariantsRequest } from '../model/events/eventsGetScalarMetricsAndVariantsRequest';\nimport { EventsGetScalarMetricsAndVariantsResponse } from '../model/events/eventsGetScalarMetricsAndVariantsResponse';\nimport { EventsGetTaskEventsRequest } from '../model/events/eventsGetTaskEventsRequest';\nimport { EventsGetTaskEventsResponse } from '../model/events/eventsGetTaskEventsResponse';\nimport { EventsGetTaskLatestScalarValuesRequest } from '../model/events/eventsGetTaskLatestScalarValuesRequest';\nimport { EventsGetTaskLatestScalarValuesResponse } from '../model/events/eventsGetTaskLatestScalarValuesResponse';\nimport { EventsGetTaskLogRequest } from '../model/events/eventsGetTaskLogRequest';\nimport { EventsGetTaskLogResponse } from '../model/events/eventsGetTaskLogResponse';\nimport { EventsGetTaskMetricsRequest } from '../model/events/eventsGetTaskMetricsRequest';\nimport { EventsGetTaskMetricsResponse } from '../model/events/eventsGetTaskMetricsResponse';\nimport { EventsGetTaskPlotsRequest } from '../model/events/eventsGetTaskPlotsRequest';\nimport { EventsGetTaskPlotsResponse } from '../model/events/eventsGetTaskPlotsResponse';\nimport { EventsGetVectorMetricsAndVariantsRequest } from '../model/events/eventsGetVectorMetricsAndVariantsRequest';\nimport { EventsGetVectorMetricsAndVariantsResponse } from '../model/events/eventsGetVectorMetricsAndVariantsResponse';\nimport { EventsMultiTaskScalarMetricsIterHistogramRequest } from '../model/events/eventsMultiTaskScalarMetricsIterHistogramRequest';\nimport { EventsNextDebugImageSampleRequest } from '../model/events/eventsNextDebugImageSampleRequest';\nimport { EventsScalarMetricsIterHistogramRequest } from '../model/events/eventsScalarMetricsIterHistogramRequest';\nimport { EventsScalarMetricsIterHistogramResponse } from '../model/events/eventsScalarMetricsIterHistogramResponse';\nimport { EventsVectorMetricsIterHistogramRequest } from '../model/events/eventsVectorMetricsIterHistogramRequest';\nimport { EventsVectorMetricsIterHistogramResponse } from '../model/events/eventsVectorMetricsIterHistogramResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {EventsScalarMetricsIterRawRequest} from \"~/business-logic/model/events/eventsScalarMetricsIterRawRequest\";\nimport {EventsScalarMetricsIterRawResponse} from \"~/business-logic/model/events/eventsScalarMetricsIterRawResponse\";\n\n\n@Injectable()\nexport class ApiEventsService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     *\n     * Adds a single event\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsAdd(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsAdd.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/events.add`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Adds a batch of events in a single call (json-lines format, stream-friendly)\n     * @param requests Json encoded newline-terminated lines, each representing an event in the batch and uses the same parameters used for events.add\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsAddBatch(requests: Array<object>, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (requests === null || requests === undefined) {\n            throw new Error('Required parameter requests was null or undefined when calling eventsAddBatch.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsAddBatchResponse>(`${this.basePath}/events.add_batch`,\n            requests,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get the debug image events for the requested amount of iterations per each task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsDebugImages(request: EventsDebugImagesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsDebugImages.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsDebugImagesResponse>(`${this.basePath}/events.debug_images`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Delete all task event. *This cannot be undone!*\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsDeleteForTask(request: EventsDeleteForTaskRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsDeleteForTask.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsDeleteForTaskResponse>(`${this.basePath}/events.delete_for_task`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get an attachment containing the task\\&#39;s log\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsDownloadTaskLog(request: EventsDownloadTaskLogRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsDownloadTaskLog.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<string>(`${this.basePath}/events.download_task_log`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Return the debug image per metric and variant for the provided iteration\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetDebugImageSample(request: EventsGetDebugImageSampleRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetDebugImageSample.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<DebugImageSampleReposnse>(`${this.basePath}/events.get_debug_image_sample`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get \\&#39;plot\\&#39; events for the given tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetMultiTaskPlots(request: EventsGetMultiTaskPlotsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetMultiTaskPlots.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetMultiTaskPlotsResponse>(`${this.basePath}/events.get_multi_task_plots`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * get scalar metric data for task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetScalarMetricData(request: EventsGetScalarMetricDataRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetScalarMetricData.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetScalarMetricDataResponse>(`${this.basePath}/events.get_scalar_metric_data`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * get task scalar metrics and variants\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetScalarMetricsAndVariants(request: EventsGetScalarMetricsAndVariantsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetScalarMetricsAndVariants.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetScalarMetricsAndVariantsResponse>(`${this.basePath}/events.get_scalar_metrics_and_variants`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Scroll through task events, sorted by timestamp\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetTaskEvents(request: EventsGetTaskEventsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetTaskEvents.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetTaskEventsResponse>(`${this.basePath}/events.get_task_events`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get the tasks\\&#39;s latest scalar values\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetTaskLatestScalarValues(request: EventsGetTaskLatestScalarValuesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetTaskLatestScalarValues.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetTaskLatestScalarValuesResponse>(`${this.basePath}/events.get_task_latest_scalar_values`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get \\&#39;log\\&#39; events for this task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetTaskLog(request: EventsGetTaskLogRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetTaskLog.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetTaskLogResponse>(`${this.basePath}/events.get_task_log`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * For each task, get a list of metrics for which the requested event type was   reported\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetTaskMetrics(request: EventsGetTaskMetricsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetTaskMetrics.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetTaskMetricsResponse>(`${this.basePath}/events.get_task_metrics`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get all \\&#39;plot\\&#39; events for this task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetTaskPlots(request: EventsGetTaskPlotsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetTaskPlots.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetTaskPlotsResponse>(`${this.basePath}/events.get_task_plots`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     *\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsGetVectorMetricsAndVariants(request: EventsGetVectorMetricsAndVariantsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsGetVectorMetricsAndVariants.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsGetVectorMetricsAndVariantsResponse>(`${this.basePath}/events.get_vector_metrics_and_variants`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Used to compare scalar stats histogram of multiple tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsMultiTaskScalarMetricsIterHistogram(request: EventsMultiTaskScalarMetricsIterHistogramRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsMultiTaskScalarMetricsIterHistogram.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/events.multi_task_scalar_metrics_iter_histogram`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get the image for the next variant for the same iteration or for the next   iteration\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsNextDebugImageSample(request: EventsNextDebugImageSampleRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsNextDebugImageSample.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<DebugImageSampleReposnse>(`${this.basePath}/events.next_debug_image_sample`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get histogram data of all the vector metrics and variants in the task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsScalarMetricsIterHistogram(request: EventsScalarMetricsIterHistogramRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsScalarMetricsIterHistogram.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsScalarMetricsIterHistogramResponse>(`${this.basePath}/events.scalar_metrics_iter_histogram`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     *\n     * Get histogram data of all the scalar metrics and variants in the task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public eventsVectorMetricsIterHistogram(request: EventsVectorMetricsIterHistogramRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling eventsVectorMetricsIterHistogram.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<EventsVectorMetricsIterHistogramResponse>(`${this.basePath}/events.vector_metrics_iter_histogram`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n  /**\n   *\n   * Get raw data for a specific metric variants in the task\n   * @param request request body\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public eventsScalarMetricsIterRaw(request: EventsScalarMetricsIterRawRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n    if (request === null || request === undefined) {\n      throw new Error('Required parameter request was null or undefined when calling eventsScalarMetricsIterRaw.');\n    }\n\n    let headers = this.defaultHeaders;\n    if (options && options.async_enable) {\n      headers = headers.set(this.configuration.asyncHeader, '1');\n    }\n\n    // to determine the Accept header\n    const httpHeaderAccepts: string[] = [\n      'application/json'\n    ];\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [\n    ];\n    const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n    }\n\n    return this.apiRequest.post<EventsScalarMetricsIterRawResponse>(`${this.basePath}/events.scalar_metrics_iter_raw`,\n      request,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n}\n","/**\n * login\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LoginSupportedModesRequest } from '../model/login/loginSupportedModesRequest';\nimport { LoginSupportedModesResponse } from '../model/login/loginSupportedModesResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiLoginService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Logout (including SSO, if used))\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginLogout(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling loginLogout.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/login.logout`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Return supported login modes.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginSupportedModes(request: LoginSupportedModesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling loginSupportedModes.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<LoginSupportedModesResponse>(`${this.basePath}/login.supported_modes`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * models\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ModelsAddOrUpdateMetadataRequest } from '../model/models/modelsAddOrUpdateMetadataRequest';\nimport { ModelsAddOrUpdateMetadataResponse } from '../model/models/modelsAddOrUpdateMetadataResponse';\nimport { ModelsArchiveManyRequest } from '../model/models/modelsArchiveManyRequest';\nimport { ModelsArchiveManyResponse } from '../model/models/modelsArchiveManyResponse';\nimport { ModelsCreateRequest } from '../model/models/modelsCreateRequest';\nimport { ModelsCreateResponse } from '../model/models/modelsCreateResponse';\nimport { ModelsDeleteManyRequest } from '../model/models/modelsDeleteManyRequest';\nimport { ModelsDeleteManyResponse } from '../model/models/modelsDeleteManyResponse';\nimport { ModelsDeleteMetadataRequest } from '../model/models/modelsDeleteMetadataRequest';\nimport { ModelsDeleteMetadataResponse } from '../model/models/modelsDeleteMetadataResponse';\nimport { ModelsDeleteRequest } from '../model/models/modelsDeleteRequest';\nimport { ModelsDeleteResponse } from '../model/models/modelsDeleteResponse';\nimport { ModelsEditRequest } from '../model/models/modelsEditRequest';\nimport { ModelsEditResponse } from '../model/models/modelsEditResponse';\nimport { ModelsGetAllExRequest } from '../model/models/modelsGetAllExRequest';\nimport { ModelsGetAllExResponse } from '../model/models/modelsGetAllExResponse';\nimport { ModelsGetAllRequest } from '../model/models/modelsGetAllRequest';\nimport { ModelsGetAllResponse } from '../model/models/modelsGetAllResponse';\nimport { ModelsGetByIdExRequest } from '../model/models/modelsGetByIdExRequest';\nimport { ModelsGetByIdExResponse } from '../model/models/modelsGetByIdExResponse';\nimport { ModelsGetByIdRequest } from '../model/models/modelsGetByIdRequest';\nimport { ModelsGetByIdResponse } from '../model/models/modelsGetByIdResponse';\nimport { ModelsGetByTaskIdRequest } from '../model/models/modelsGetByTaskIdRequest';\nimport { ModelsGetByTaskIdResponse } from '../model/models/modelsGetByTaskIdResponse';\nimport { ModelsGetFrameworksRequest } from '../model/models/modelsGetFrameworksRequest';\nimport { ModelsGetFrameworksResponse } from '../model/models/modelsGetFrameworksResponse';\nimport { ModelsMakePrivateRequest } from '../model/models/modelsMakePrivateRequest';\nimport { ModelsMakePrivateResponse } from '../model/models/modelsMakePrivateResponse';\nimport { ModelsMakePublicRequest } from '../model/models/modelsMakePublicRequest';\nimport { ModelsMakePublicResponse } from '../model/models/modelsMakePublicResponse';\nimport { ModelsMoveRequest } from '../model/models/modelsMoveRequest';\nimport { ModelsPublishManyRequest } from '../model/models/modelsPublishManyRequest';\nimport { ModelsPublishManyResponse } from '../model/models/modelsPublishManyResponse';\nimport { ModelsSetReadyRequest } from '../model/models/modelsSetReadyRequest';\nimport { ModelsSetReadyResponse } from '../model/models/modelsSetReadyResponse';\nimport { ModelsUnarchiveManyRequest } from '../model/models/modelsUnarchiveManyRequest';\nimport { ModelsUnarchiveManyResponse } from '../model/models/modelsUnarchiveManyResponse';\nimport { ModelsUpdateForTaskRequest } from '../model/models/modelsUpdateForTaskRequest';\nimport { ModelsUpdateForTaskResponse } from '../model/models/modelsUpdateForTaskResponse';\nimport { ModelsUpdateRequest } from '../model/models/modelsUpdateRequest';\nimport { ModelsUpdateResponse } from '../model/models/modelsUpdateResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiModelsService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Add or update model metadata\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsAddOrUpdateMetadata(request: ModelsAddOrUpdateMetadataRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsAddOrUpdateMetadata.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsAddOrUpdateMetadataResponse>(`${this.basePath}/models.add_or_update_metadata`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Archive models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsArchiveMany(request: ModelsArchiveManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsArchiveMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsArchiveManyResponse>(`${this.basePath}/models.archive_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new model not associated with a task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsCreate(request: ModelsCreateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsCreateResponse>(`${this.basePath}/models.create`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a model.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsDelete(request: ModelsDeleteRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsDeleteResponse>(`${this.basePath}/models.delete`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsDeleteMany(request: ModelsDeleteManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsDeleteMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsDeleteManyResponse>(`${this.basePath}/models.delete_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete metadata from model\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsDeleteMetadata(request: ModelsDeleteMetadataRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsDeleteMetadata.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsDeleteMetadataResponse>(`${this.basePath}/models.delete_metadata`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Edit an existing model\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsEdit(request: ModelsEditRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsEdit.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsEditResponse>(`${this.basePath}/models.edit`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsGetAll(request: ModelsGetAllRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsGetAll.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsGetAllResponse>(`${this.basePath}/models.get_all`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsGetAllEx(request: ModelsGetAllExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsGetAllEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsGetAllExResponse>(`${this.basePath}/models.get_all_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Gets model information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsGetById(request: ModelsGetByIdRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsGetById.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsGetByIdResponse>(`${this.basePath}/models.get_by_id`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsGetByIdEx(request: ModelsGetByIdExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsGetByIdEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsGetByIdExResponse>(`${this.basePath}/models.get_by_id_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Gets model information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsGetByTaskId(request: ModelsGetByTaskIdRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsGetByTaskId.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsGetByTaskIdResponse>(`${this.basePath}/models.get_by_task_id`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of frameworks used in the company models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsGetFrameworks(request: ModelsGetFrameworksRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsGetFrameworks.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsGetFrameworksResponse>(`${this.basePath}/models.get_frameworks`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Convert public models to private\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsMakePrivate(request: ModelsMakePrivateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsMakePrivate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsMakePrivateResponse>(`${this.basePath}/models.make_private`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Convert company models to public\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsMakePublic(request: ModelsMakePublicRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsMakePublic.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsMakePublicResponse>(`${this.basePath}/models.make_public`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Move models to a project\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsMove(request: ModelsMoveRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsMove.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/models.move`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Publish models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsPublishMany(request: ModelsPublishManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsPublishMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsPublishManyResponse>(`${this.basePath}/models.publish_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Set the model ready flag to True. If the model is an output model of a task   then try to publish the task.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsSetReady(request: ModelsSetReadyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsSetReady.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsSetReadyResponse>(`${this.basePath}/models.set_ready`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Unarchive models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsUnarchiveMany(request: ModelsUnarchiveManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsUnarchiveMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsUnarchiveManyResponse>(`${this.basePath}/models.unarchive_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update a model\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsUpdate(request: ModelsUpdateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsUpdateResponse>(`${this.basePath}/models.update`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create or update a new model for a task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modelsUpdateForTask(request: ModelsUpdateForTaskRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling modelsUpdateForTask.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ModelsUpdateForTaskResponse>(`${this.basePath}/models.update_for_task`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * projects\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ProjectsCreateRequest } from '../model/projects/projectsCreateRequest';\nimport { ProjectsCreateResponse } from '../model/projects/projectsCreateResponse';\nimport { ProjectsDeleteRequest } from '../model/projects/projectsDeleteRequest';\nimport { ProjectsDeleteResponse } from '../model/projects/projectsDeleteResponse';\nimport { ProjectsGetAllExRequest } from '../model/projects/projectsGetAllExRequest';\nimport { ProjectsGetAllExResponse } from '../model/projects/projectsGetAllExResponse';\nimport { ProjectsGetAllRequest } from '../model/projects/projectsGetAllRequest';\nimport { ProjectsGetAllResponse } from '../model/projects/projectsGetAllResponse';\nimport { ProjectsGetByIdRequest } from '../model/projects/projectsGetByIdRequest';\nimport { ProjectsGetByIdResponse } from '../model/projects/projectsGetByIdResponse';\nimport { ProjectsGetHyperParametersRequest } from '../model/projects/projectsGetHyperParametersRequest';\nimport { ProjectsGetHyperParametersResponse } from '../model/projects/projectsGetHyperParametersResponse';\nimport { ProjectsGetHyperparamValuesRequest } from '../model/projects/projectsGetHyperparamValuesRequest';\nimport { ProjectsGetHyperparamValuesResponse } from '../model/projects/projectsGetHyperparamValuesResponse';\nimport { ProjectsGetModelTagsRequest } from '../model/projects/projectsGetModelTagsRequest';\nimport { ProjectsGetModelTagsResponse } from '../model/projects/projectsGetModelTagsResponse';\nimport { ProjectsGetTaskParentsRequest } from '../model/projects/projectsGetTaskParentsRequest';\nimport { ProjectsGetTaskParentsResponse } from '../model/projects/projectsGetTaskParentsResponse';\nimport { ProjectsGetTaskTagsRequest } from '../model/projects/projectsGetTaskTagsRequest';\nimport { ProjectsGetTaskTagsResponse } from '../model/projects/projectsGetTaskTagsResponse';\nimport { ProjectsGetUniqueMetricVariantsRequest } from '../model/projects/projectsGetUniqueMetricVariantsRequest';\nimport { ProjectsGetUniqueMetricVariantsResponse } from '../model/projects/projectsGetUniqueMetricVariantsResponse';\nimport { ProjectsMakePrivateRequest } from '../model/projects/projectsMakePrivateRequest';\nimport { ProjectsMakePrivateResponse } from '../model/projects/projectsMakePrivateResponse';\nimport { ProjectsMakePublicRequest } from '../model/projects/projectsMakePublicRequest';\nimport { ProjectsMakePublicResponse } from '../model/projects/projectsMakePublicResponse';\nimport { ProjectsMergeRequest } from '../model/projects/projectsMergeRequest';\nimport { ProjectsMergeResponse } from '../model/projects/projectsMergeResponse';\nimport { ProjectsMoveRequest } from '../model/projects/projectsMoveRequest';\nimport { ProjectsMoveResponse } from '../model/projects/projectsMoveResponse';\nimport { ProjectsUpdateRequest } from '../model/projects/projectsUpdateRequest';\nimport { ProjectsUpdateResponse } from '../model/projects/projectsUpdateResponse';\nimport { ProjectsValidateDeleteRequest } from '../model/projects/projectsValidateDeleteRequest';\nimport { ProjectsValidateDeleteResponse } from '../model/projects/projectsValidateDeleteResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiProjectsService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new project\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsCreate(request: ProjectsCreateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsCreateResponse>(`${this.basePath}/projects.create`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Deletes a project\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsDelete(request: ProjectsDeleteRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsDeleteResponse>(`${this.basePath}/projects.delete`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all the company\\&#39;s projects and all public projects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetAll(request: ProjectsGetAllRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetAll.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetAllResponse>(`${this.basePath}/projects.get_all`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all the company\\&#39;s projects and all public projects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetAllEx(request: ProjectsGetAllExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetAllEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetAllExResponse>(`${this.basePath}/projects.get_all_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetById(request: ProjectsGetByIdRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetById.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetByIdResponse>(`${this.basePath}/projects.get_by_id`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a list of all hyper parameter sections and names used in tasks within the   given project.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetHyperParameters(request: ProjectsGetHyperParametersRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetHyperParameters.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetHyperParametersResponse>(`${this.basePath}/projects.get_hyper_parameters`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a list of distinct values for the chosen hyperparameter\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetHyperparamValues(request: ProjectsGetHyperparamValuesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetHyperparamValues.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetHyperparamValuesResponse>(`${this.basePath}/projects.get_hyperparam_values`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get user and system tags used for the models under the specified projects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetModelTags(request: ProjectsGetModelTagsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetModelTags.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetModelTagsResponse>(`${this.basePath}/projects.get_model_tags`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get unique parent tasks for the tasks in the specified projects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetTaskParents(request: ProjectsGetTaskParentsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetTaskParents.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetTaskParentsResponse>(`${this.basePath}/projects.get_task_parents`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get user and system tags used for the tasks under the specified projects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetTaskTags(request: ProjectsGetTaskTagsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetTaskTags.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetTaskTagsResponse>(`${this.basePath}/projects.get_task_tags`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all metric/variant pairs reported for tasks in a specific project. If no   project is specified, metrics/variant paris reported for all tasks will be   returned. If the project does not exist, an empty list will be returned.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsGetUniqueMetricVariants(request: ProjectsGetUniqueMetricVariantsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsGetUniqueMetricVariants.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsGetUniqueMetricVariantsResponse>(`${this.basePath}/projects.get_unique_metric_variants`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Convert public projects to private\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsMakePrivate(request: ProjectsMakePrivateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsMakePrivate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsMakePrivateResponse>(`${this.basePath}/projects.make_private`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Convert company projects to public\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsMakePublic(request: ProjectsMakePublicRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsMakePublic.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsMakePublicResponse>(`${this.basePath}/projects.make_public`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Moves all the source project\\&#39;s contents to the destination project and remove   the source project\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsMerge(request: ProjectsMergeRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsMerge.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsMergeResponse>(`${this.basePath}/projects.merge`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Moves a project and all of its subprojects under the different location\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsMove(request: ProjectsMoveRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsMove.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsMoveResponse>(`${this.basePath}/projects.move`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update project information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsUpdate(request: ProjectsUpdateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsUpdateResponse>(`${this.basePath}/projects.update`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Validates that the project existis and can be deleted\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectsValidateDelete(request: ProjectsValidateDeleteRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling projectsValidateDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ProjectsValidateDeleteResponse>(`${this.basePath}/projects.validate_delete`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * queues\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { QueuesAddOrUpdateMetadataRequest } from '../model/queues/queuesAddOrUpdateMetadataRequest';\nimport { QueuesAddOrUpdateMetadataResponse } from '../model/queues/queuesAddOrUpdateMetadataResponse';\nimport { QueuesAddTaskRequest } from '../model/queues/queuesAddTaskRequest';\nimport { QueuesAddTaskResponse } from '../model/queues/queuesAddTaskResponse';\nimport { QueuesCreateRequest } from '../model/queues/queuesCreateRequest';\nimport { QueuesCreateResponse } from '../model/queues/queuesCreateResponse';\nimport { QueuesDeleteMetadataRequest } from '../model/queues/queuesDeleteMetadataRequest';\nimport { QueuesDeleteMetadataResponse } from '../model/queues/queuesDeleteMetadataResponse';\nimport { QueuesDeleteRequest } from '../model/queues/queuesDeleteRequest';\nimport { QueuesDeleteResponse } from '../model/queues/queuesDeleteResponse';\nimport { QueuesGetAllExRequest } from '../model/queues/queuesGetAllExRequest';\nimport { QueuesGetAllExResponse } from '../model/queues/queuesGetAllExResponse';\nimport { QueuesGetAllRequest } from '../model/queues/queuesGetAllRequest';\nimport { QueuesGetAllResponse } from '../model/queues/queuesGetAllResponse';\nimport { QueuesGetByIdRequest } from '../model/queues/queuesGetByIdRequest';\nimport { QueuesGetByIdResponse } from '../model/queues/queuesGetByIdResponse';\nimport { QueuesGetDefaultResponse } from '../model/queues/queuesGetDefaultResponse';\nimport { QueuesGetNextTaskRequest } from '../model/queues/queuesGetNextTaskRequest';\nimport { QueuesGetNextTaskResponse } from '../model/queues/queuesGetNextTaskResponse';\nimport { QueuesGetQueueMetricsRequest } from '../model/queues/queuesGetQueueMetricsRequest';\nimport { QueuesGetQueueMetricsResponse } from '../model/queues/queuesGetQueueMetricsResponse';\nimport { QueuesMoveTaskBackwardRequest } from '../model/queues/queuesMoveTaskBackwardRequest';\nimport { QueuesMoveTaskBackwardResponse } from '../model/queues/queuesMoveTaskBackwardResponse';\nimport { QueuesMoveTaskForwardRequest } from '../model/queues/queuesMoveTaskForwardRequest';\nimport { QueuesMoveTaskForwardResponse } from '../model/queues/queuesMoveTaskForwardResponse';\nimport { QueuesMoveTaskToBackRequest } from '../model/queues/queuesMoveTaskToBackRequest';\nimport { QueuesMoveTaskToBackResponse } from '../model/queues/queuesMoveTaskToBackResponse';\nimport { QueuesMoveTaskToFrontRequest } from '../model/queues/queuesMoveTaskToFrontRequest';\nimport { QueuesMoveTaskToFrontResponse } from '../model/queues/queuesMoveTaskToFrontResponse';\nimport { QueuesRemoveTaskRequest } from '../model/queues/queuesRemoveTaskRequest';\nimport { QueuesRemoveTaskResponse } from '../model/queues/queuesRemoveTaskResponse';\nimport { QueuesUpdateRequest } from '../model/queues/queuesUpdateRequest';\nimport { QueuesUpdateResponse } from '../model/queues/queuesUpdateResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiQueuesService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Add or update queue metadata\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesAddOrUpdateMetadata(request: QueuesAddOrUpdateMetadataRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesAddOrUpdateMetadata.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesAddOrUpdateMetadataResponse>(`${this.basePath}/queues.add_or_update_metadata`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Adds a task entry to the queue.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesAddTask(request: QueuesAddTaskRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesAddTask.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesAddTaskResponse>(`${this.basePath}/queues.add_task`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new queue\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesCreate(request: QueuesCreateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesCreateResponse>(`${this.basePath}/queues.create`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Deletes a queue. If the queue is not empty and force is not set to true, queue   will not be deleted.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesDelete(request: QueuesDeleteRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesDeleteResponse>(`${this.basePath}/queues.delete`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete metadata from queue\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesDeleteMetadata(request: QueuesDeleteMetadataRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesDeleteMetadata.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesDeleteMetadataResponse>(`${this.basePath}/queues.delete_metadata`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all queues\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesGetAll(request: QueuesGetAllRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesGetAll.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesGetAllResponse>(`${this.basePath}/queues.get_all`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all queues\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesGetAllEx(request: QueuesGetAllExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesGetAllEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesGetAllExResponse>(`${this.basePath}/queues.get_all_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Gets queue information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesGetById(request: QueuesGetByIdRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesGetById.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesGetByIdResponse>(`${this.basePath}/queues.get_by_id`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesGetDefault(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesGetDefault.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesGetDefaultResponse>(`${this.basePath}/queues.get_default`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Gets the next task from the top of the queue (FIFO). The task entry is removed   from the queue.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesGetNextTask(request: QueuesGetNextTaskRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesGetNextTask.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesGetNextTaskResponse>(`${this.basePath}/queues.get_next_task`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Returns metrics of the company queues. The metrics are avaraged in the   specified interval.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesGetQueueMetrics(request: QueuesGetQueueMetricsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesGetQueueMetrics.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesGetQueueMetricsResponse>(`${this.basePath}/queues.get_queue_metrics`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesMoveTaskBackward(request: QueuesMoveTaskBackwardRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesMoveTaskBackward.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesMoveTaskBackwardResponse>(`${this.basePath}/queues.move_task_backward`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Moves a task entry one step forward towards the top of the queue.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesMoveTaskForward(request: QueuesMoveTaskForwardRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesMoveTaskForward.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesMoveTaskForwardResponse>(`${this.basePath}/queues.move_task_forward`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesMoveTaskToBack(request: QueuesMoveTaskToBackRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesMoveTaskToBack.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesMoveTaskToBackResponse>(`${this.basePath}/queues.move_task_to_back`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesMoveTaskToFront(request: QueuesMoveTaskToFrontRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesMoveTaskToFront.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesMoveTaskToFrontResponse>(`${this.basePath}/queues.move_task_to_front`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Removes a task entry from the queue.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesRemoveTask(request: QueuesRemoveTaskRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesRemoveTask.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesRemoveTaskResponse>(`${this.basePath}/queues.remove_task`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update queue information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queuesUpdate(request: QueuesUpdateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling queuesUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<QueuesUpdateResponse>(`${this.basePath}/queues.update`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * tasks\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { TasksAddOrUpdateArtifactsRequest } from '../model/tasks/tasksAddOrUpdateArtifactsRequest';\nimport { TasksAddOrUpdateArtifactsResponse } from '../model/tasks/tasksAddOrUpdateArtifactsResponse';\nimport { TasksAddOrUpdateModelRequest } from '../model/tasks/tasksAddOrUpdateModelRequest';\nimport { TasksAddOrUpdateModelResponse } from '../model/tasks/tasksAddOrUpdateModelResponse';\nimport { TasksArchiveManyRequest } from '../model/tasks/tasksArchiveManyRequest';\nimport { TasksArchiveManyResponse } from '../model/tasks/tasksArchiveManyResponse';\nimport { TasksArchiveRequest } from '../model/tasks/tasksArchiveRequest';\nimport { TasksArchiveResponse } from '../model/tasks/tasksArchiveResponse';\nimport { TasksCloneRequest } from '../model/tasks/tasksCloneRequest';\nimport { TasksCloneResponse } from '../model/tasks/tasksCloneResponse';\nimport { TasksCloseRequest } from '../model/tasks/tasksCloseRequest';\nimport { TasksCloseResponse } from '../model/tasks/tasksCloseResponse';\nimport { TasksCompletedRequest } from '../model/tasks/tasksCompletedRequest';\nimport { TasksCompletedResponse } from '../model/tasks/tasksCompletedResponse';\nimport { TasksCreateRequest } from '../model/tasks/tasksCreateRequest';\nimport { TasksCreateResponse } from '../model/tasks/tasksCreateResponse';\nimport { TasksDeleteArtifactsRequest } from '../model/tasks/tasksDeleteArtifactsRequest';\nimport { TasksDeleteArtifactsResponse } from '../model/tasks/tasksDeleteArtifactsResponse';\nimport { TasksDeleteConfigurationRequest } from '../model/tasks/tasksDeleteConfigurationRequest';\nimport { TasksDeleteConfigurationResponse } from '../model/tasks/tasksDeleteConfigurationResponse';\nimport { TasksDeleteHyperParamsRequest } from '../model/tasks/tasksDeleteHyperParamsRequest';\nimport { TasksDeleteHyperParamsResponse } from '../model/tasks/tasksDeleteHyperParamsResponse';\nimport { TasksDeleteManyRequest } from '../model/tasks/tasksDeleteManyRequest';\nimport { TasksDeleteManyResponse } from '../model/tasks/tasksDeleteManyResponse';\nimport { TasksDeleteModelsRequest } from '../model/tasks/tasksDeleteModelsRequest';\nimport { TasksDeleteModelsResponse } from '../model/tasks/tasksDeleteModelsResponse';\nimport { TasksDeleteRequest } from '../model/tasks/tasksDeleteRequest';\nimport { TasksDeleteResponse } from '../model/tasks/tasksDeleteResponse';\nimport { TasksDequeueManyRequest } from '../model/tasks/tasksDequeueManyRequest';\nimport { TasksDequeueManyResponse } from '../model/tasks/tasksDequeueManyResponse';\nimport { TasksDequeueRequest } from '../model/tasks/tasksDequeueRequest';\nimport { TasksDequeueResponse } from '../model/tasks/tasksDequeueResponse';\nimport { TasksEditConfigurationRequest } from '../model/tasks/tasksEditConfigurationRequest';\nimport { TasksEditConfigurationResponse } from '../model/tasks/tasksEditConfigurationResponse';\nimport { TasksEditHyperParamsRequest } from '../model/tasks/tasksEditHyperParamsRequest';\nimport { TasksEditHyperParamsResponse } from '../model/tasks/tasksEditHyperParamsResponse';\nimport { TasksEditRequest } from '../model/tasks/tasksEditRequest';\nimport { TasksEditResponse } from '../model/tasks/tasksEditResponse';\nimport { TasksEnqueueManyRequest } from '../model/tasks/tasksEnqueueManyRequest';\nimport { TasksEnqueueManyResponse } from '../model/tasks/tasksEnqueueManyResponse';\nimport { TasksEnqueueRequest } from '../model/tasks/tasksEnqueueRequest';\nimport { TasksEnqueueResponse } from '../model/tasks/tasksEnqueueResponse';\nimport { TasksFailedRequest } from '../model/tasks/tasksFailedRequest';\nimport { TasksFailedResponse } from '../model/tasks/tasksFailedResponse';\nimport { TasksGetAllExRequest } from '../model/tasks/tasksGetAllExRequest';\nimport { TasksGetAllExResponse } from '../model/tasks/tasksGetAllExResponse';\nimport { TasksGetAllRequest } from '../model/tasks/tasksGetAllRequest';\nimport { TasksGetAllResponse } from '../model/tasks/tasksGetAllResponse';\nimport { TasksGetByIdExRequest } from '../model/tasks/tasksGetByIdExRequest';\nimport { TasksGetByIdExResponse } from '../model/tasks/tasksGetByIdExResponse';\nimport { TasksGetByIdRequest } from '../model/tasks/tasksGetByIdRequest';\nimport { TasksGetByIdResponse } from '../model/tasks/tasksGetByIdResponse';\nimport { TasksGetConfigurationNamesRequest } from '../model/tasks/tasksGetConfigurationNamesRequest';\nimport { TasksGetConfigurationNamesResponse } from '../model/tasks/tasksGetConfigurationNamesResponse';\nimport { TasksGetConfigurationsRequest } from '../model/tasks/tasksGetConfigurationsRequest';\nimport { TasksGetConfigurationsResponse } from '../model/tasks/tasksGetConfigurationsResponse';\nimport { TasksGetHyperParamsRequest } from '../model/tasks/tasksGetHyperParamsRequest';\nimport { TasksGetHyperParamsResponse } from '../model/tasks/tasksGetHyperParamsResponse';\nimport { TasksGetTypesRequest } from '../model/tasks/tasksGetTypesRequest';\nimport { TasksGetTypesResponse } from '../model/tasks/tasksGetTypesResponse';\nimport { TasksMakePrivateRequest } from '../model/tasks/tasksMakePrivateRequest';\nimport { TasksMakePrivateResponse } from '../model/tasks/tasksMakePrivateResponse';\nimport { TasksMakePublicRequest } from '../model/tasks/tasksMakePublicRequest';\nimport { TasksMakePublicResponse } from '../model/tasks/tasksMakePublicResponse';\nimport { TasksMoveRequest } from '../model/tasks/tasksMoveRequest';\nimport { TasksPingRequest } from '../model/tasks/tasksPingRequest';\nimport { TasksPublishManyRequest } from '../model/tasks/tasksPublishManyRequest';\nimport { TasksPublishManyResponse } from '../model/tasks/tasksPublishManyResponse';\nimport { TasksPublishRequest } from '../model/tasks/tasksPublishRequest';\nimport { TasksPublishResponse } from '../model/tasks/tasksPublishResponse';\nimport { TasksResetManyRequest } from '../model/tasks/tasksResetManyRequest';\nimport { TasksResetManyResponse } from '../model/tasks/tasksResetManyResponse';\nimport { TasksResetRequest } from '../model/tasks/tasksResetRequest';\nimport { TasksResetResponse } from '../model/tasks/tasksResetResponse';\nimport { TasksSetRequirementsRequest } from '../model/tasks/tasksSetRequirementsRequest';\nimport { TasksSetRequirementsResponse } from '../model/tasks/tasksSetRequirementsResponse';\nimport { TasksStartedRequest } from '../model/tasks/tasksStartedRequest';\nimport { TasksStartedResponse } from '../model/tasks/tasksStartedResponse';\nimport { TasksStopManyRequest } from '../model/tasks/tasksStopManyRequest';\nimport { TasksStopManyResponse } from '../model/tasks/tasksStopManyResponse';\nimport { TasksStopRequest } from '../model/tasks/tasksStopRequest';\nimport { TasksStopResponse } from '../model/tasks/tasksStopResponse';\nimport { TasksStoppedRequest } from '../model/tasks/tasksStoppedRequest';\nimport { TasksStoppedResponse } from '../model/tasks/tasksStoppedResponse';\nimport { TasksUnarchiveManyRequest } from '../model/tasks/tasksUnarchiveManyRequest';\nimport { TasksUnarchiveManyResponse } from '../model/tasks/tasksUnarchiveManyResponse';\nimport { TasksUpdateBatchResponse } from '../model/tasks/tasksUpdateBatchResponse';\nimport { TasksUpdateRequest } from '../model/tasks/tasksUpdateRequest';\nimport { TasksUpdateResponse } from '../model/tasks/tasksUpdateResponse';\nimport { TasksValidateRequest } from '../model/tasks/tasksValidateRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiTasksService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Update existing artifacts (search by key/mode) and add new ones\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksAddOrUpdateArtifacts(request: TasksAddOrUpdateArtifactsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksAddOrUpdateArtifacts.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksAddOrUpdateArtifactsResponse>(`${this.basePath}/tasks.add_or_update_artifacts`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Add or update task model\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksAddOrUpdateModel(request: TasksAddOrUpdateModelRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksAddOrUpdateModel.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksAddOrUpdateModelResponse>(`${this.basePath}/tasks.add_or_update_model`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Archive tasks. If a task is queued it will first be dequeued and then archived.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksArchive(request: TasksArchiveRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksArchive.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksArchiveResponse>(`${this.basePath}/tasks.archive`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Archive tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksArchiveMany(request: TasksArchiveManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksArchiveMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksArchiveManyResponse>(`${this.basePath}/tasks.archive_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Clone an existing task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksClone(request: TasksCloneRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksClone.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksCloneResponse>(`${this.basePath}/tasks.clone`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Indicates that task is closed\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksClose(request: TasksCloseRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksClose.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksCloseResponse>(`${this.basePath}/tasks.close`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Signal a task has completed\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksCompleted(request: TasksCompletedRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksCompleted.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksCompletedResponse>(`${this.basePath}/tasks.completed`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksCreate(request: TasksCreateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksCreateResponse>(`${this.basePath}/tasks.create`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a task along with any information stored for it (statistics, frame   updates etc.) Unless Force flag is provided, operation will fail if task has   objects associated with it - i.e. children tasks and projects. Models that   refer to the deleted task will be updated with a task ID indicating a deleted   task.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDelete(request: TasksDeleteRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDeleteResponse>(`${this.basePath}/tasks.delete`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete existing artifacts (search by key/mode)\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDeleteArtifacts(request: TasksDeleteArtifactsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDeleteArtifacts.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDeleteArtifactsResponse>(`${this.basePath}/tasks.delete_artifacts`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete task configuration items\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDeleteConfiguration(request: TasksDeleteConfigurationRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDeleteConfiguration.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDeleteConfigurationResponse>(`${this.basePath}/tasks.delete_configuration`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete task hyper parameters\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDeleteHyperParams(request: TasksDeleteHyperParamsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDeleteHyperParams.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDeleteHyperParamsResponse>(`${this.basePath}/tasks.delete_hyper_params`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDeleteMany(request: TasksDeleteManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDeleteMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDeleteManyResponse>(`${this.basePath}/tasks.delete_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete models from task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDeleteModels(request: TasksDeleteModelsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDeleteModels.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDeleteModelsResponse>(`${this.basePath}/tasks.delete_models`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Remove a task from its queue. Fails if task status is not queued.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDequeue(request: TasksDequeueRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDequeue.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDequeueResponse>(`${this.basePath}/tasks.dequeue`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Dequeue tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksDequeueMany(request: TasksDequeueManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksDequeueMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksDequeueManyResponse>(`${this.basePath}/tasks.dequeue_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Edit task\\&#39;s details.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksEdit(request: TasksEditRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksEdit.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksEditResponse>(`${this.basePath}/tasks.edit`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Add or update task configuration\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksEditConfiguration(request: TasksEditConfigurationRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksEditConfiguration.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksEditConfigurationResponse>(`${this.basePath}/tasks.edit_configuration`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Add or update task hyper parameters\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksEditHyperParams(request: TasksEditHyperParamsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksEditHyperParams.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksEditHyperParamsResponse>(`${this.basePath}/tasks.edit_hyper_params`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Adds a task into a queue.   Fails if task state is not \\&#39;created\\&#39;.   Fails if the following parameters in the task were not filled:   * execution.script.repository   * execution.script.entrypoint\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksEnqueue(request: TasksEnqueueRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksEnqueue.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksEnqueueResponse>(`${this.basePath}/tasks.enqueue`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Enqueue tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksEnqueueMany(request: TasksEnqueueManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksEnqueueMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksEnqueueManyResponse>(`${this.basePath}/tasks.enqueue_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Indicates that task has failed\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksFailed(request: TasksFailedRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksFailed.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksFailedResponse>(`${this.basePath}/tasks.failed`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all the company\\&#39;s tasks and all public tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetAll(request: TasksGetAllRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetAll.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetAllResponse>(`${this.basePath}/tasks.get_all`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all the company\\&#39;s tasks and all public tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetAllEx(request: TasksGetAllExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetAllEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetAllExResponse>(`${this.basePath}/tasks.get_all_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Gets task information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetById(request: TasksGetByIdRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetById.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetByIdResponse>(`${this.basePath}/tasks.get_by_id`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get all the company\\&#39;s tasks and all public tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetByIdEx(request: TasksGetByIdExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetByIdEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetByIdExResponse>(`${this.basePath}/tasks.get_by_id_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of task configuration items names\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetConfigurationNames(request: TasksGetConfigurationNamesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetConfigurationNames.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetConfigurationNamesResponse>(`${this.basePath}/tasks.get_configuration_names`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of task configurations\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetConfigurations(request: TasksGetConfigurationsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetConfigurations.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetConfigurationsResponse>(`${this.basePath}/tasks.get_configurations`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of task hyper parameters\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetHyperParams(request: TasksGetHyperParamsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetHyperParams.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetHyperParamsResponse>(`${this.basePath}/tasks.get_hyper_params`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of task types used in the specified projects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksGetTypes(request: TasksGetTypesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksGetTypes.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksGetTypesResponse>(`${this.basePath}/tasks.get_types`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Convert public tasks to private\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksMakePrivate(request: TasksMakePrivateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksMakePrivate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksMakePrivateResponse>(`${this.basePath}/tasks.make_private`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Convert company tasks to public\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksMakePublic(request: TasksMakePublicRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksMakePublic.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksMakePublicResponse>(`${this.basePath}/tasks.make_public`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Move tasks to a project\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksMove(request: TasksMoveRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksMove.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/tasks.move`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Refresh the task\\&#39;s last update time\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksPing(request: TasksPingRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksPing.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/tasks.ping`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Mark a task status as published.           For Annotation tasks - if any changes were committed by this task, a   new version in the dataset together with an output view are created.           For Training tasks - if a model was created, it should be set to ready.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksPublish(request: TasksPublishRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksPublish.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksPublishResponse>(`${this.basePath}/tasks.publish`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Publish tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksPublishMany(request: TasksPublishManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksPublishMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksPublishManyResponse>(`${this.basePath}/tasks.publish_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Reset a task to its initial state, along with any information stored for it   (statistics, frame updates etc.).\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksReset(request: TasksResetRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksReset.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksResetResponse>(`${this.basePath}/tasks.reset`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Reset tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksResetMany(request: TasksResetManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksResetMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksResetManyResponse>(`${this.basePath}/tasks.reset_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Set the script requirements for a task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksSetRequirements(request: TasksSetRequirementsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksSetRequirements.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksSetRequirementsResponse>(`${this.basePath}/tasks.set_requirements`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Mark a task status as in_progress. Optionally allows to set the task\\&#39;s   execution progress.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksStarted(request: TasksStartedRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksStarted.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksStartedResponse>(`${this.basePath}/tasks.started`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Request to stop a running task\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksStop(request: TasksStopRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksStop.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksStopResponse>(`${this.basePath}/tasks.stop`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Request to stop running tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksStopMany(request: TasksStopManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksStopMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksStopManyResponse>(`${this.basePath}/tasks.stop_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Signal a task has stopped\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksStopped(request: TasksStoppedRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksStopped.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksStoppedResponse>(`${this.basePath}/tasks.stopped`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Unarchive tasks\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksUnarchiveMany(request: TasksUnarchiveManyRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksUnarchiveMany.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksUnarchiveManyResponse>(`${this.basePath}/tasks.unarchive_many`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update task\\&#39;s runtime parameters\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksUpdate(request: TasksUpdateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksUpdateResponse>(`${this.basePath}/tasks.update`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Updates a batch of tasks. Headers Content type should be \\&#39;application/json-   lines\\&#39;.\n     * @param requests Json encoded newline-terminated lines, each representing an event in the batch and uses the same parameters used for tasks.update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksUpdateBatch(requests: Array<object>, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (requests === null || requests === undefined) {\n            throw new Error('Required parameter requests was null or undefined when calling tasksUpdateBatch.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<TasksUpdateBatchResponse>(`${this.basePath}/tasks.update_batch`,\n            requests,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Validate task properties (before create)\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tasksValidate(request: TasksValidateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling tasksValidate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/tasks.validate`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * users\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { UsersCreateRequest } from '../model/users/usersCreateRequest';\nimport { UsersDeleteRequest } from '../model/users/usersDeleteRequest';\nimport { UsersGetAllExRequest } from '../model/users/usersGetAllExRequest';\nimport { UsersGetAllExResponse } from '../model/users/usersGetAllExResponse';\nimport { UsersGetAllRequest } from '../model/users/usersGetAllRequest';\nimport { UsersGetAllResponse } from '../model/users/usersGetAllResponse';\nimport { UsersGetByIdRequest } from '../model/users/usersGetByIdRequest';\nimport { UsersGetByIdResponse } from '../model/users/usersGetByIdResponse';\nimport { UsersGetCurrentUserResponse } from '../model/users/usersGetCurrentUserResponse';\nimport { UsersGetPreferencesResponse } from '../model/users/usersGetPreferencesResponse';\nimport { UsersSetPreferencesRequest } from '../model/users/usersSetPreferencesRequest';\nimport { UsersSetPreferencesResponse } from '../model/users/usersSetPreferencesResponse';\nimport { UsersUpdateRequest } from '../model/users/usersUpdateRequest';\nimport { UsersUpdateResponse } from '../model/users/usersUpdateResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiUsersService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Internal. Create a new user object. Reserved for internal use.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersCreate(request: UsersCreateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/users.create`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Delete a user\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersDelete(request: UsersDeleteRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/users.delete`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get all user objects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersGetAll(request: UsersGetAllRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersGetAll.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersGetAllResponse>(`${this.basePath}/users.get_all`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get all user objects\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersGetAllEx(request: UsersGetAllExRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersGetAllEx.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersGetAllExResponse>(`${this.basePath}/users.get_all_ex`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Gets user information\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersGetById(request: UsersGetByIdRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersGetById.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersGetByIdResponse>(`${this.basePath}/users.get_by_id`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Gets current user information, based on the authenticated user making   the call.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersGetCurrentUser(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersGetCurrentUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersGetCurrentUserResponse>(`${this.basePath}/users.get_current_user`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get user preferences\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersGetPreferences(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersGetPreferences.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersGetPreferencesResponse>(`${this.basePath}/users.get_preferences`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Set user preferences\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersSetPreferences(request: UsersSetPreferencesRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersSetPreferences.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersSetPreferencesResponse>(`${this.basePath}/users.set_preferences`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Update a user object\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public usersUpdate(request: UsersUpdateRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling usersUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<UsersUpdateResponse>(`${this.basePath}/users.update`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * workers\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { WorkersGetActivityReportRequest } from '../model/workers/workersGetActivityReportRequest';\nimport { WorkersGetActivityReportResponse } from '../model/workers/workersGetActivityReportResponse';\nimport { WorkersGetAllRequest } from '../model/workers/workersGetAllRequest';\nimport { WorkersGetAllResponse } from '../model/workers/workersGetAllResponse';\nimport { WorkersGetMetricKeysRequest } from '../model/workers/workersGetMetricKeysRequest';\nimport { WorkersGetMetricKeysResponse } from '../model/workers/workersGetMetricKeysResponse';\nimport { WorkersGetStatsRequest } from '../model/workers/workersGetStatsRequest';\nimport { WorkersGetStatsResponse } from '../model/workers/workersGetStatsResponse';\nimport { WorkersRegisterRequest } from '../model/workers/workersRegisterRequest';\nimport { WorkersStatusReportRequest } from '../model/workers/workersStatusReportRequest';\nimport { WorkersUnregisterRequest } from '../model/workers/workersUnregisterRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiWorkersService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Returns count of active company workers in the selected time range.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersGetActivityReport(request: WorkersGetActivityReportRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersGetActivityReport.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<WorkersGetActivityReportResponse>(`${this.basePath}/workers.get_activity_report`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Returns information on all registered workers.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersGetAll(request: WorkersGetAllRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersGetAll.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<WorkersGetAllResponse>(`${this.basePath}/workers.get_all`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Returns worker statistics metric keys grouped by categories.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersGetMetricKeys(request: WorkersGetMetricKeysRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersGetMetricKeys.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<WorkersGetMetricKeysResponse>(`${this.basePath}/workers.get_metric_keys`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Returns statistics for the selected workers and time range aggregated by date   intervals.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersGetStats(request: WorkersGetStatsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersGetStats.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<WorkersGetStatsResponse>(`${this.basePath}/workers.get_stats`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Register a worker in the system. Called by the Worker Daemon.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersRegister(request: WorkersRegisterRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersRegister.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/workers.register`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Called periodically by the worker daemon to report machine status\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersStatusReport(request: WorkersStatusReportRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersStatusReport.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/workers.status_report`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Unregister a worker in the system. Called by the Worker Daemon.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public workersUnregister(request: WorkersUnregisterRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling workersUnregister.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/workers.unregister`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    asyncHeader?: string;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    asyncHeader?: string;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = true; //configurationParameters.withCredentials;\n        this.asyncHeader = 'X-Clearml-Async'; //configurationParameters.asyncHeader;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} contentTypes - the array of content types that are available for selection\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} accepts - the array of content types that are available for selection.\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param {string} mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return {boolean} True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * events\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\n\nexport type ScalarKeyEnum = 'iter' | 'timestamp' | 'iso_time';\n\nexport const ScalarKeyEnum = {\n    Iter: 'iter' as ScalarKeyEnum,\n    Timestamp: 'timestamp' as ScalarKeyEnum,\n    IsoTime: 'iso_time' as ScalarKeyEnum\n}\n","/**\n * projects\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport { MultiFieldPatternData } from '././multiFieldPatternData';\n\n\nexport interface ProjectsGetAllExRequest {\n    /**\n     * List of IDs to filter by\n     */\n    id?: Array<string>;\n    /**\n     * Get only projects whose name matches this pattern (python regular expression   syntax)\n     */\n    name?: string;\n    /**\n     * Get only projects whose description matches this pattern (python regular   expression syntax)\n     */\n    description?: string;\n    /**\n     * User-defined tags list used to filter results. Prepend \\'-\\' to tag name to   indicate exclusion\n     */\n    tags?: Array<string>;\n    /**\n     * System tags list used to filter results. Prepend \\'-\\' to system tag name to   indicate exclusion\n     */\n    system_tags?: Array<string>;\n    /**\n     * List of field names to order by. When search_text is used, \\'@text_score\\' can be   used as a field representing the text score of returned documents. Use \\'-\\'   prefix to specify descending order. Optional, recommended when using page\n     */\n    order_by?: Array<string>;\n    /**\n     * Page number, returns a specific page out of the resulting list of projects\n     */\n    page?: number;\n    /**\n     * Page size, specifies the number of results returned in each page (last page may   contain fewer results)\n     */\n    page_size?: number;\n    /**\n     * Free text search query\n     */\n    search_text?: string;\n    /**\n     * List of document\\'s field names (nesting is supported using \\'.\\', e.g.   execution.model_labels). If provided, this list defines the query\\'s projection   (only these fields will be returned for each result entry)\n     */\n    only_fields?: Array<string>;\n    _all_?: MultiFieldPatternData;\n    _any_?: MultiFieldPatternData;\n    /**\n     * If true, include project statistic in response.\n     */\n    include_stats?: boolean;\n    /**\n     * Report stats include only statistics for tasks in the specified state. If Null   is provided, stats for all task states will be returned.\n     */\n    stats_for_state?: ProjectsGetAllExRequest.StatsForStateEnum;\n    /**\n     * Return only non-public projects\n     */\n    non_public?: boolean;\n    active_users?: Array<string>;\n    /**\n     * If set to \\'true\\' then the search with the specified criteria is performed among top level projects only (or if parents specified, among the direct children of the these parents). Otherwise the search is performed among all the company projects (or among all of the descendants of the specified parents).\n     */\n    shallow_search?: boolean;\n    /**\n     * If set to \\'true\\' and project ids are passed to the query then for these projects their own tasks and models are counted\n     */\n    check_own_contents?: boolean;\n    /**\n     * If set to \\'true\\' then hidden projects are included in the search results\n     */\n    search_hidden?: boolean;\n    /**\n     * Scroll ID returned from the previos calls to get_all\n     */\n    scroll_id?: string;\n    /**\n     * If set then all the data received with this scroll will be requeried\n     */\n    refresh_scroll?: boolean;\n    /**\n     * The number of projects to retrieve\n     */\n    size?: number;\n  stats_with_children?: boolean;\n}\nexport namespace ProjectsGetAllExRequest {\n    export type StatsForStateEnum = 'active' | 'archived';\n    export const StatsForStateEnum = {\n        Active: 'active' as StatsForStateEnum,\n        Archived: 'archived' as StatsForStateEnum\n    }\n}\n","/**\n * tasks\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\n\nexport type TaskStatusEnum = 'created' | 'queued' | 'in_progress' | 'stopped' | 'published' | 'publishing' | 'closed' | 'failed' | 'completed' | 'unknown';\n\nexport const TaskStatusEnum = {\n    Created: 'created' as TaskStatusEnum,\n    Queued: 'queued' as TaskStatusEnum,\n    InProgress: 'in_progress' as TaskStatusEnum,\n    Stopped: 'stopped' as TaskStatusEnum,\n    Published: 'published' as TaskStatusEnum,\n    Publishing: 'publishing' as TaskStatusEnum,\n    Closed: 'closed' as TaskStatusEnum,\n    Failed: 'failed' as TaskStatusEnum,\n    Completed: 'completed' as TaskStatusEnum,\n    Unknown: 'unknown' as TaskStatusEnum\n}\n","/**\n * tasks\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\n\nexport type TaskTypeEnum = 'training' | 'testing' | 'inference' | 'data_processing' | 'application' | 'monitor' | 'controller' | 'optimizer' | 'service' | 'qc' | 'custom';\n\nexport const TaskTypeEnum = {\n    Training: 'training' as TaskTypeEnum,\n    Testing: 'testing' as TaskTypeEnum,\n    Inference: 'inference' as TaskTypeEnum,\n    DataProcessing: 'data_processing' as TaskTypeEnum,\n    Application: 'application' as TaskTypeEnum,\n    Monitor: 'monitor' as TaskTypeEnum,\n    Controller: 'controller' as TaskTypeEnum,\n    Optimizer: 'optimizer' as TaskTypeEnum,\n    Service: 'service' as TaskTypeEnum,\n    Qc: 'qc' as TaskTypeEnum,\n    Custom: 'custom' as TaskTypeEnum\n}\n","import {Injectable} from '@angular/core';\nimport {Model} from '../model/models/model';\nimport {get} from 'lodash/fp';\n\n@Injectable()\nexport class BlModelsService {\n\n  constructor() {\n  }\n\n  addHiddenTag(modelTags: Model['system_tags']): Model['system_tags'] {\n    if (modelTags) {\n      if (modelTags.includes('archived')) {\n        return modelTags;\n      } else {\n        return modelTags.concat(['archived']);\n      }\n    } else {\n      return ['archived'];\n    }\n  }\n\n  removeHiddenTag(modelTags: Model['system_tags']): Model['system_tags'] {\n    if (modelTags.includes('archived')) {\n      return modelTags.filter(tag => tag !== 'archived');\n    }\n    return modelTags;\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {TASK_TYPES} from '../../app.constants';\nimport {TAGS, TASKS_STATUS} from '../../webapp-common/tasks/tasks.constants';\nimport {Task} from '../model/tasks/task';\nimport {get} from 'lodash/fp';\nimport {DEFAULT_QUEUE_TAG} from '../variables';\n\n@Injectable()\nexport class BlTasksService {\n\n  constructor() {\n  }\n\n  private previouslyUsedQueue;\n\n  getDefaultQueue(queues) {\n    return queues.find(queue => get('id', this.previouslyUsedQueue) === queue.id) || queues.find(queue => this.isDefaultQueue(queue));\n  }\n\n  setPreviouslyUsedQueue(queue) {\n    this.previouslyUsedQueue = queue;\n  }\n\n  isDefaultQueue(queue) {\n    return queue.system_tags && queue.system_tags.includes(DEFAULT_QUEUE_TAG);\n  }\n\n  canEnqueue(task: Task): boolean {\n    return !!(task && (TASKS_STATUS.CREATED === task.status || TASKS_STATUS.STOPPED === task.status) && task.type !== TASK_TYPES.MANUAL_ANNOTATION);\n  }\n\n  canDequeue(task: Task): boolean {\n    return !!(task && TASKS_STATUS.QUEUED === task.status);\n  }\n\n  addHiddenTag(taskTags: Task['system_tags']): Task['system_tags'] {\n    if (taskTags) {\n      if (taskTags.includes('archived')) {\n        return taskTags;\n      } else {\n        return taskTags.concat(['archived']);\n      }\n    } else {\n      return ['archived'];\n    }\n  }\n\n  removeHiddenTag(taskTags: Task['system_tags']): Task['system_tags'] {\n    if (taskTags.includes('archived')) {\n      return taskTags.filter(tag => tag !== 'archived');\n    }\n    return taskTags;\n  }\n\n  updateAnnotatorIndexTag(taskTags: Task['system_tags'], annotatorIndex: number): Task['system_tags'] {\n    const indexOf = taskTags.findIndex(tag => tag.startsWith(TAGS.ANNOTATOR_INDEX_TAG_PREFIX));\n    if (indexOf === -1) {\n      taskTags.push(`${TAGS.ANNOTATOR_INDEX_TAG_PREFIX}:${annotatorIndex || '1'}`);\n    } else {\n      taskTags[indexOf] = `${TAGS.ANNOTATOR_INDEX_TAG_PREFIX}:${annotatorIndex}`;\n    }\n    return taskTags;\n  }\n\n  updateAnnotatedNumberTag(taskTags: Task['system_tags']): Task['system_tags'] {\n    const indexOf = taskTags.findIndex(tag => tag.startsWith(TAGS.ANNOTATED_NUMBER_TAG_PREFIX));\n    if (indexOf === -1) {\n      taskTags.push(`${TAGS.ANNOTATED_NUMBER_TAG_PREFIX}:1`);\n    } else {\n      taskTags[indexOf] = `${TAGS.ANNOTATED_NUMBER_TAG_PREFIX}:${this.getTaskAnnotorValue(taskTags[indexOf]) + 1}`;\n    }\n    return taskTags;\n  }\n\n  getAnnotatorIndexTag(taskTags: Task['system_tags']): number {\n    const foundTag = taskTags.find(tag => tag.startsWith(TAGS.ANNOTATOR_INDEX_TAG_PREFIX));\n    return foundTag ? this.getTaskAnnotorValue(foundTag) : 0;\n  }\n\n  getAnnotatedNumberTag(taskTags: Task['system_tags']): number {\n    const foundTag = taskTags.find(tag => tag.startsWith(TAGS.ANNOTATED_NUMBER_TAG_PREFIX));\n    return foundTag ? this.getTaskAnnotorValue(foundTag) : 0;\n  }\n\n  getTaskAnnotorValue(annotatorTag: string): number {\n    return parseInt(annotatorTag.split(':')[1], 10);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n\nexport const DEFAULT_QUEUE_TAG = 'default';\n\n","import {createAction, props} from '@ngrx/store';\nimport {USERS_PREFIX} from '../../app.constants';\nimport {GetCurrentUserResponseUserObject} from '../../business-logic/model/users/getCurrentUserResponseUserObject';\n\nexport const setCurrentUser = createAction(USERS_PREFIX + 'SET_CURRENT_USER',\n  props<{user: GetCurrentUserResponseUserObject; terms_of_use?: any}>()\n);\n","import {createReducer, createSelector, on} from '@ngrx/store';\n\nimport {initUsers, users, usersReducerFunctions, UsersState} from '@common/core/reducers/users-reducer';\nimport {setCurrentUser} from '../actions/users.action';\n\nexport const selectHasDataFeature = createSelector(users, () => false);\nexport const selectHasUserManagement = createSelector(users, () => false);\n\nexport const usersReducer = createReducer<UsersState>(initUsers,\n  ...usersReducerFunctions,\n  on(setCurrentUser, (state, action) => ({\n    ...state,\n    currentUser: action.user,\n    activeWorkspace: action.user?.company,\n    userWorkspaces: [action.user?.company],\n  }))\n);\n\nexport const selectFeatures = createSelector(users, () => []);\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const selectTermsOfUse = createSelector(users, () => ({accept_required: null}));\nexport const selectInvitesPending = createSelector(users, () => []);\n","<div *ngIf=\"activateFromMenuButton\" mat-button [matMenuTriggerFor]=\"experimentMenu\"\n     class=\"p-0 cell menu-button al-icon sm-md al-color light-grey-blue al-ico-bars-menu\"\n></div>\n<div *ngIf=\"!activateFromMenuButton\" #contextTrigger\n     style=\"visibility: hidden; position: fixed\"\n     [style.left.px]=\"position.x\"\n     [style.top.px]=\"position.y\"\n     [matMenuTriggerFor]=\"experimentMenu\">\n</div>\n<mat-menu #experimentMenu=\"matMenu\" [hasBackdrop]=\"false\">\n  <ng-container *ngIf=\"selectedDisableAvailable[menuItems.queue]\">\n    <button mat-menu-item (click)=\"toggleFullScreen(minimizedView)\" [disabled]=\"isSharedAndNotOwner\">\n      <i [class]=\"'al-icon '+ ICONS.CHART + ' sm-md'\"></i>\n      {{minimizedView ? 'View Full Screen' : 'View in Experiment Table'}}\n    </button>\n\n    <button mat-menu-item (click)=\"manageQueueClicked()\"\n            [disabled]=\"selectedDisableAvailable[menuItems.queue].disable\">\n      <i [class]=\"'al-icon '+ ICONS.QUEUED + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.queue]?.available | menuItemText : 'Manage Queue' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <button mat-menu-item (click)=\"viewWorkerClicked()\"\n            [disabled]=\"selectedDisableAvailable[menuItems.viewWorker].disable\">\n      <i [class]=\"'al-icon '+ ICONS.WORKER + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.viewWorker]?.available | menuItemText : 'View Worker' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <hr>\n\n    <button mat-menu-item (click)=\"shareExperimentPopup()\" *ngIf=\"isCommunity\"\n            [disabled]=\"isExample || numSelected > 1  || isArchive\">\n      <i [class]=\"'al-icon '  + ICONS.SHARE + ' sm-md'\"></i>Share\n    </button>\n\n    <button mat-menu-item (click)=\"deleteExperimentPopup()\"\n            [disabled]=\"selectedDisableAvailable[menuItems.delete].disable\" *ngIf=\"isArchive\">\n      <i [class]=\"'al-icon ' + ICONS.REMOVE + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.delete].available | menuItemText : 'Delete' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <button mat-menu-item (click)=\"restoreArchive()\"\n            [disabled]=\"selectedDisableAvailable[menuItems.archive].disable\">\n      <i class=\"al-icon sm-md\" [class]=\"isArchive ? ICONS.RESTORE : ICONS.ARCHIVE\"></i>\n      {{selectedDisableAvailable[menuItems.archive].available | menuItemText : isArchive ? 'Restore from Archive' : 'Archive' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <button mat-menu-item (click)=\"enqueuePopup()\"\n            *ngIf=\"!selectedDisableAvailable[menuItems.enqueue].disable && !isArchive\"\n            [disabled]=\"selectedDisableAvailable[menuItems.enqueue].disable\">\n      <i [class]=\"'al-icon ' + ICONS.ENQUEUE + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.enqueue]?.available | menuItemText : 'Enqueue' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <button mat-menu-item (click)=\"dequeuePopup()\"\n            *ngIf=\"!selectedDisableAvailable[menuItems.dequeue].disable\"\n            [disabled]=\"selectedDisableAvailable[menuItems.dequeue]?.disable\">\n      <i [class]=\"'al-icon ' + ICONS.DEQUEUE + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.dequeue]?.available | menuItemText : 'Dequeue' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <button mat-menu-item (click)=\"resetPopup()\" [disabled]=\"selectedDisableAvailable[menuItems.reset].disable\">\n      <i [class]=\"'al-icon ' + ICONS.RESET + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.reset].available | menuItemText : 'Reset' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n    <button mat-menu-item (click)=\"stopPopup()\" [disabled]=\"selectedDisableAvailable[menuItems.abort].disable\">\n      <i [class]=\"'al-icon ' + ICONS.STOPPED + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.abort].available | menuItemText : 'Abort' : selectedDisableAvailableIsMultiple }}\n    </button>\n\n    <button mat-menu-item (click)=\"stopAllChildrenPopup()\" *ngIf=\"!selectedDisableAvailable[menuItems.abortAllChildren]?.disable\">\n      <i [class]=\"'al-icon ' + ICONS.STOPPED_ALL + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.abortAllChildren]?.available | menuItemText : 'Abort All Children' : selectedDisableAvailableIsMultiple }}\n    </button>\n    <button\n      mat-menu-item\n      (click)=\"publishPopup()\"\n      [disabled]=\"selectedDisableAvailable[menuItems.publish].disable\">\n      <i [class]=\"'al-icon ' + ICONS.PUBLISHED + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.publish].available | menuItemText : 'Publish' : selectedDisableAvailableIsMultiple }}\n    </button>\n    <hr>\n    <button mat-menu-item\n            [matMenuTriggerFor]=\"tagMenu\"\n            [disabled]=\"selectedDisableAvailable[menuItems.tags]?.disable\"\n            (menuOpened)=\"tagMenuOpened()\"\n            (menuClosed)=\"tagMenuClosed()\">\n      <i [class]=\"'al-icon ' + ICONS.TAG + ' sm-md'\">\n      </i><span>{{selectedDisableAvailable[menuItems.tags]?.available | menuItemText : 'Add Tag' : selectedDisableAvailableIsMultiple }}</span>\n    </button>\n    <hr>\n    <button mat-menu-item (click)=\"clonePopup()\">\n      <i [class]=\"'al-icon ' + ICONS.CLONE + ' sm-md'\"></i>Clone\n    </button>\n    <button mat-menu-item (click)=\"moveToProjectPopup()\"\n            [disabled]=\"selectedDisableAvailable[menuItems.moveTo].disable\">\n      <i [class]=\"'al-icon ' + ICONS.MOVE_TO + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.moveTo].available | menuItemText : 'Move to Project' : selectedDisableAvailableIsMultiple}}\n    </button>\n    <ng-content select=\"[extended]\"></ng-content>\n\n\n\n    </ng-container>\n</mat-menu>\n\n<mat-menu #tagMenu=\"matMenu\">\n  <sm-tags-menu\n    #tagMenuContent\n    class=\"light-theme\"\n    [tags]=\"experiment?.tags\"\n    [tagsFilterByProject]=\"tagsFilterByProject\"\n    [projectTags]=\"projectTags\"\n    [companyTags]=\"companyTags\"\n    (tagSelected)=\"tagSelected.emit($event)\">\n  </sm-tags-menu>\n</mat-menu>\n","import { Component} from '@angular/core';\nimport {ExperimentMenuComponent} from '@common/experiments/shared/components/experiment-menu/experiment-menu.component';\n\n@Component({\n  selector: 'sm-experiment-menu-extended',\n  templateUrl: '../../../../webapp-common/experiments/shared/components/experiment-menu/experiment-menu.component.html',\n  styleUrls: ['../../../../webapp-common/experiments/shared/components/experiment-menu/experiment-menu.component.scss']\n})\nexport class ExperimentMenuExtendedComponent extends ExperimentMenuComponent{\n\n  set contextMenu(data) {}\n  get contextMenu() {\n    return this;\n  }\n}\n","import {EXPERIMENT_INFO_ONLY_FIELDS_BASE} from '@common/experiments/experiment.consts';\nexport {INITIAL_EXPERIMENT_TABLE_COLS} from '../../webapp-common/experiments/experiment.consts';\n\nexport const GET_ALL_QUERY_ANY_FIELDS = ['id', 'name', 'comment', 'system_tags', 'models.output.model', 'models.input.model'];\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getExperimentInfoOnlyFields = (hasDataFeature: boolean) => EXPERIMENT_INFO_ONLY_FIELDS_BASE;\n\nexport const DEFAULT_EXPERIMENT_TAB = 'execution';\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {TaskStatusEnum} from '../../../../business-logic/model/tasks/taskStatusEnum';\nimport {MenuItems} from '../items.utils';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\n\nexport class ResetFooterItem<T extends {status: TaskStatusEnum}> extends ItemFooterModel {\n  id = MenuItems.reset;\n  emit = true;\n  icon = ICONS.RESET as Partial<IconNames>;\n\n  constructor(public entitiesType: EntityTypeEnum) {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {\n      disable: state.data[this.id]?.disable,\n      description: this.menuItemText.transform(state.data[this.id]?.available, 'Reset'),\n      disableDescription: state.selectionIsOnlyExamples ? 'Reset' : `You can only reset non-draft, non-published ${this.entitiesType}s`\n    };\n  }\n}\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems} from '../items.utils';\n\nexport class EnqueueFooterItem extends ItemFooterModel {\n  id = MenuItems.enqueue;\n  emit = true;\n  icon = ICONS.ENQUEUE as Partial<IconNames>;\n\n  constructor() {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    const enqueue = state.data[this.id];\n\n    return {\n      disable: enqueue.disable,\n      preventCurrentItem: state.selectionAllIsArchive,\n      description: this.menuItemText.transform(enqueue.available, 'Enqueue'),\n      disableDescription: state.selectionIsOnlyExamples ? 'Enqueue' : `You can only enqueue experiments with ‘Draft’/'Aborted' status`\n\n    };\n  }\n}\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems, selectionDisabledAbort} from '../items.utils';\n\nexport class AbortFooterItem extends ItemFooterModel {\n  id = MenuItems.abort;\n  emit = true;\n  icon = ICONS.STOPPED as Partial<IconNames>;\n\n  constructor() {\n    super();\n  }\n  getItemState(state: IFooterState<any>) {\n    const {available, disable} = selectionDisabledAbort(state.selected);\n    return {\n      disable,\n      description: `Abort (${available} items)`,\n      disableDescription: state.selectionIsOnlyExamples ? 'Abort' : `You can only abort experiments with ‘Running’ status`\n    };\n  }\n}\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems} from '../items.utils';\n\nexport class DequeueFooterItem extends ItemFooterModel {\n  id = MenuItems.dequeue;\n  emit = true;\n  icon = ICONS.DEQUEUE as Partial<IconNames>;\n\n  constructor() {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    const dequeue = state.data[this.id];\n    return {\n      preventCurrentItem: dequeue.disable,\n      disable:  dequeue.disable,\n      description: this.menuItemText.transform(dequeue.available, 'Dequeue'),\n      disableDescription: state.selectionIsOnlyExamples ? 'Dequeue' : `You can only dequeue experiments with ‘Pending’ status`\n    };\n  }\n}\n","import {IFooterState, ItemFooterModel} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems, selectionDisabledAbortAllChildren} from '../items.utils';\n\nexport class AbortAllChildrenFooterItem extends ItemFooterModel {\n  id = MenuItems.abortAllChildren;\n  emit = true;\n  icon = ICONS.STOPPED_ALL as Partial<IconNames>;\n\n  constructor() {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    const {available, disable} = selectionDisabledAbortAllChildren(state.selected);\n    return {\n      disable,\n      description: `Abort all children for (${available} items)`,\n      disableDescription: state.selectionIsOnlyExamples ? 'Abort all children' : `You can only abort all children of experiments with Type Controller or Optimizer `\n    };\n  }\n\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-select-hyper-params-for-custom-col',\n  templateUrl: './select-hyper-params-for-custom-col.component.html',\n  styleUrls  : ['./select-hyper-params-for-custom-col.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectHyperParamsForCustomColComponent {\n\n  public metricsCols: string[];\n\n  @Input() hyperParams: {[section: string]: any[]};\n  @Output() getMetricsToDisplay      = new EventEmitter();\n  @Output() selectedHyperParamToShow = new EventEmitter<{param: string; addCol: boolean}>();\n  @Output() goBack                   = new EventEmitter();\n  @Output() clearSelection           = new EventEmitter();\n\n  @Input() set tableCols(tableCols) {\n    this.metricsCols = tableCols;\n  }\n\n\n  public toggleParamToDisplay({param, value}) {\n\n    this.selectedHyperParamToShow.emit({param: `hyperparams.${param}`, addCol: !value});\n  }\n\n}\n","<div smClickStopPropagation class=\"d-flex justify-content-between hyper-params-container\">\n  <i (click)=\"goBack.emit()\" class=\"al-icon sm-md al-ico-back pointer\" smClickStopPropagation></i>\n  <div class=\"hyper-param-header\">SELECT HYPER PARAMETERS TO DISPLAY\n  </div>\n</div>\n<hr style=\"margin: 0\">\n<sm-grouped-checked-filter-list\n  smClickStopPropagation\n  [itemsList]=\"hyperParams\"\n  [selectedItemsList]=\"metricsCols\"\n  (selectedItems)=\"toggleParamToDisplay($event)\"\n  (clearSelection)=\"clearSelection.emit()\"\n>\n</sm-grouped-checked-filter-list>\n","<sm-menu\n  [iconClass]=\"'al-icon al-ico-settings al-color pointer create-new-icon ' + (disabled ? 'blue-570' : 'blue-400')\"\n  smMenuClass=\"light-theme custom-columns\"\n  buttonTooltip=\"Customize table\"\n  [showButton]=\"false\"\n  (click)=\"getMetricsToDisplay.emit()\"\n  (onMenuClosed)=\"selectMetricActiveChanged.emit(null)\"\n  [style.pointer-events]=\"disabled ? 'none' : 'initial'\"\n>\n  <div *ngIf=\"!customColumnMode\" (click)=\"$event.stopPropagation()\">\n    <sm-custom-columns-list\n      [tableCols]=\"tableCols\"\n      [isLoading]=\"isLoading\"\n      (removeColFromList)=\"removeColFromList.emit($event)\"\n      (selectedTableColsChanged)=\"selectedTableColsChanged.emit($event)\"\n    >\n    </sm-custom-columns-list>\n\n    <div [ngClass]=\"{loading: isLoading, loaded: !isLoading}\">\n      <div class=\"sm-menu-header\">ADD CUSTOM COLUMN</div>\n      <div class=\"custom-column-buttons\">\n        <div class=\"add-button metrics-button\"\n             smClickStopPropagation\n             [ngClass]=\"{disabled: !metricVariants.length}\"\n             (click)=\"metricVariants.length && selectMetricActiveChanged.emit(CustomColumnMode.Metrics); $event.stopPropagation()\"\n        ><i class=\"fas fa-plus pr-1\"></i> METRIC\n        </div>\n        <div class=\"add-button\"\n             smClickStopPropagation\n             [ngClass]=\"{disabled: !hasHyperParams}\"\n             (click)=\"hasHyperParams && selectMetricActiveChanged.emit(CustomColumnMode.HyperParams); $event.stopPropagation()\"\n        ><i class=\"fas fa-plus pr-1\"></i> HYPER PARAMETERS\n        </div>\n      </div>\n    </div>\n  </div>\n  <sm-select-metric-for-custom-col *ngIf=\"customColumnMode === CustomColumnMode.Metrics\"\n                                   [tableCols]=\"tableCols\"\n                                   [metricVariants]=\"metricVariants\"\n                                   (goBack)=\"selectMetricActiveChanged.emit(null)\"\n                                   (selectedMetricToShow)=\"selectedMetricToShow.emit($event)\">\n  </sm-select-metric-for-custom-col>\n  <sm-select-hyper-params-for-custom-col *ngIf=\"customColumnMode === CustomColumnMode.HyperParams\"\n                                         [tableCols]=\"tableCols\"\n                                         [hyperParams]=\"hyperParams\"\n                                         (goBack)=\"selectMetricActiveChanged.emit(null)\"\n                                         (selectedHyperParamToShow)=\"selectedHyperParamToShow.emit($event)\"\n                                         (clearSelection)=\"clearSelection.emit()\">\n  </sm-select-hyper-params-for-custom-col>\n</sm-menu>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {CustomColumnMode} from '../../shared/common-experiments.const';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {MetricVariantResult} from '../../../../business-logic/model/projects/metricVariantResult';\nimport {MetricValueType} from '../../../experiments-compare/reducers/experiments-compare-charts.reducer';\n\n@Component({\n  selector: 'sm-experiment-custom-cols-menu',\n  templateUrl: './experiment-custom-cols-menu.component.html',\n  styleUrls: ['./experiment-custom-cols-menu.component.scss']\n})\nexport class ExperimentCustomColsMenuComponent {\n\n\n  public hasHyperParams: boolean;\n  private _hyperParams: { [section: string]: any[] };\n\n  @Input() metricVariants;\n  @Input() customColumnMode: CustomColumnMode;\n  @Input() tableCols;\n  @Input() disabled: boolean;\n\n  @Input() set hyperParams(hyperParams: { [section: string]: any[] }) {\n    this._hyperParams = hyperParams;\n    this.hasHyperParams = Object.values(hyperParams).some(section =>  Object.keys(section).length > 0);\n  }\n  get hyperParams() {\n    return this._hyperParams;\n  }\n\n  @Input() isLoading: boolean;\n\n  @Output() selectMetricActiveChanged = new EventEmitter<CustomColumnMode>();\n  @Output() getMetricsToDisplay = new EventEmitter();\n  @Output() removeColFromList = new EventEmitter<ISmCol['id']>();\n  @Output() selectedTableColsChanged = new EventEmitter<ISmCol>();\n  @Output() selectedMetricToShow = new EventEmitter<{\n    variant: MetricVariantResult;\n    addCol: boolean;\n    valueType: MetricValueType;\n  }>();\n  @Output() selectedHyperParamToShow = new EventEmitter<{param: string; addCol: boolean}>();\n  @Output() clearSelection = new EventEmitter();\n\n  public CustomColumnMode = CustomColumnMode;\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {MetricVariantResult} from '~/business-logic/model/projects/metricVariantResult';\nimport {CustomColumnMode} from '../../shared/common-experiments.const';\nimport {ISmCol} from '@common/shared/ui-components/data/table/table.consts';\nimport {MetricValueType} from '@common/experiments-compare/reducers/experiments-compare-charts.reducer';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\n\n@Component({\n  selector   : 'sm-experiment-header',\n  templateUrl: './experiment-header.component.html',\n  styleUrls  : ['./experiment-header.component.scss']\n})\nexport class ExperimentHeaderComponent {\n  public selectMetricActive: CustomColumnMode;\n  private _tableCols: any;\n\n\n  @Input() isArchived: boolean;\n  @Input() metricVariants: Array<MetricVariantResult>;\n  @Input() hyperParams: { [section: string]: any[] };\n  @Input() minimizedView: boolean;\n  @Input() isMetricsLoading: boolean;\n  @Input() autoRefreshState: boolean;\n  @Input() tableFilters: { [s: string]: FilterMetadata };\n  @Input() sharedView: boolean;\n\n  @Input() set tableCols(tableCols) {\n    this._tableCols = tableCols.filter(col => col.header !== '');\n  }\n\n  get tableCols() {\n    return this._tableCols;\n  }\n\n  @Output() isArchivedChanged        = new EventEmitter<boolean>();\n  @Output() selectedTableColsChanged = new EventEmitter<ISmCol>();\n  @Output() removeColFromList        = new EventEmitter<ISmCol['id']>();\n  @Output() getMetricsToDisplay      = new EventEmitter();\n  @Output() selectedMetricToShow     = new EventEmitter<{\n    variant: MetricVariantResult;\n    addCol: boolean;\n    valueType: MetricValueType;\n  }>();\n  @Output() selectedHyperParamToShow = new EventEmitter<{param: string; addCol: boolean}>();\n  @Output() refreshListClicked       = new EventEmitter<boolean>();\n  @Output() setAutoRefresh           = new EventEmitter<boolean>();\n  @Output() clearSelection           = new EventEmitter();\n  @Output() clearTableFilters        = new EventEmitter<{ [s: string]: FilterMetadata }>();\n\n\n  onIsArchivedChanged(value: boolean) {\n    this.isArchivedChanged.emit(value);\n  }\n\n  onRefreshListClicked() {\n    this.refreshListClicked.emit(false);\n  }\n\n  setCustomColumnMode(mode: CustomColumnMode) {\n    this.selectMetricActive = mode;\n  }\n\n}\n","<div class=\"d-flex justify-content-between header-container align-items-center\"\n     [ngClass]=\"{'archive-mode': isArchived}\">\n  <sm-toggle-archive\n    [class.hide-item]=\"sharedView\"\n    [showArchived]=\"isArchived\"\n    (toggleArchived)=\"onIsArchivedChanged($event)\"\n  ></sm-toggle-archive>\n\n  <sm-project-context-navbar\n    [class.hide-item]=\"sharedView\"\n    [activeFeature]=\"'experiments'\"\n    [archivedMode]=\"isArchived\"\n  ></sm-project-context-navbar>\n\n\n  <div class=\"d-flex justify-content-end align-items-center right-buttons\">\n    <sm-clear-filters-button\n      [tableFilters]=\"tableFilters\"\n      (clearTableFilters)=\"clearTableFilters.emit(tableFilters)\"\n    ></sm-clear-filters-button>\n    <sm-experiment-custom-cols-menu\n      [disabled]=\"minimizedView\"\n      [metricVariants]=\"metricVariants\"\n      [hyperParams]=\"hyperParams\"\n      [tableCols]=\"tableCols\"\n      [customColumnMode]=\"selectMetricActive\"\n      [isLoading]=\"isMetricsLoading\"\n      (selectedMetricToShow)=\"selectedMetricToShow.emit($event)\"\n      (selectedHyperParamToShow)=\"selectedHyperParamToShow.emit($event)\"\n      (selectedTableColsChanged)=\"selectedTableColsChanged.emit($event)\"\n      (getMetricsToDisplay)=\"getMetricsToDisplay.emit($event)\"\n      (removeColFromList)=\"removeColFromList.emit($event)\"\n      (selectMetricActiveChanged)=\"setCustomColumnMode($event)\"\n      (clearSelection)=\"clearSelection.emit()\"\n    ></sm-experiment-custom-cols-menu>\n    <sm-refresh-button\n      [autoRefreshState]=\"autoRefreshState\"\n      [allowAutoRefresh]=\"true\"\n      (refreshList)=\"refreshListClicked.emit($event)\"\n      (setAutoRefresh)=\"setAutoRefresh.emit($event)\"\n    >\n    </sm-refresh-button>\n  </div>\n</div>\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewChild,} from '@angular/core';\nimport {\n  selectActiveParentsFilter,\n  selectedExperimentsDisableAvailable,\n  selectExperimentsHiddenTableCols,\n  selectExperimentsList,\n  selectExperimentsMetricsColsForProject,\n  selectExperimentsParents,\n  selectExperimentsTableCols,\n  selectExperimentsTableColsOrder,\n  selectExperimentsTags,\n  selectExperimentsTypes,\n  selectExperimentsUsers,\n  selectHyperParamsOptions,\n  selectHyperParamsVariants,\n  selectIsExperimentInEditMode,\n  selectNoMoreExperiments,\n  selectSelectedExperiments,\n  selectSelectedTableExperiment,\n  selectShowAllSelectedIsActive,\n  selectSplitSize,\n  selectTableFilters,\n  selectTableSortFields\n} from './reducers';\nimport {\n  selectCompanyTags,\n  selectIsArchivedMode,\n  selectProjectSystemTags,\n  selectProjectTags,\n  selectSelectedProject,\n  selectTagsFilterByProject\n} from '../core/reducers/projects.reducer';\nimport {Store} from '@ngrx/store';\nimport {ColHeaderTypeEnum, ISmCol, TableSortOrderEnum} from '../shared/ui-components/data/table/table.consts';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {get, isEqual} from 'lodash/fp';\nimport {selectRouterParams} from '../core/reducers/router-reducer';\nimport {debounceTime, distinctUntilChanged, filter, map, skip, tap, throttleTime, withLatestFrom} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {combineLatest, interval, Observable, Subscription} from 'rxjs';\nimport {ConfirmDialogComponent} from '../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {selectAppVisible, selectAutoRefresh, selectBackdropActive} from '../core/reducers/view.reducer';\nimport {InitSearch, ResetSearch} from '../common-search/common-search.actions';\nimport {ICommonSearchState, selectSearchQuery} from '../common-search/common-search.reducer';\nimport {ITableExperiment} from './shared/common-experiment-model.model';\nimport {IExperimentsViewState} from '../../features/experiments/reducers/experiments-view.reducer';\nimport {\n  selectIsSharedAndNotOwner,\n  selectMetricsLoading,\n  selectMetricVariants,\n  selectSelectedExperiment\n} from '../../features/experiments/reducers';\nimport {EXPERIMENTS_TABLE_COL_FIELDS} from '../../features/experiments/shared/experiments.const';\nimport * as experimentsActions from './actions/common-experiments-view.actions';\nimport {setTableFilters} from './actions/common-experiments-view.actions';\nimport {MetricVariantResult} from '../../business-logic/model/projects/metricVariantResult';\nimport {AUTO_REFRESH_INTERVAL} from '../../app.constants';\nimport {setAutoRefresh} from '../core/actions/layout.actions';\nimport {resetProjectSelection, setDeep} from '../core/actions/projects.actions';\nimport {createMetricColumn, decodeColumns, decodeFilter, decodeOrder,} from '../shared/utils/tableParamEncode';\nimport {BaseEntityPage} from '../shared/entity-page/base-entity-page';\nimport {User} from '../../business-logic/model/users/user';\nimport {groupHyperParams, isReadOnly} from '../shared/utils/shared-utils';\nimport {selectCurrentUser} from '../core/reducers/users-reducer';\nimport {GetCurrentUserResponseUserObject} from '../../business-logic/model/users/getCurrentUserResponseUserObject';\nimport {IExperimentInfo} from '../../features/experiments/shared/experiment-info.model';\nimport {SmSyncStateSelectorService} from '../core/services/sync-state-selector.service';\nimport {ProjectsGetTaskParentsResponseParents} from '../../business-logic/model/projects/projectsGetTaskParentsResponseParents';\nimport {SortMeta} from 'primeng/api';\nimport {EntityTypeEnum} from '../../shared/constants/non-common-consts';\nimport {ShowItemsFooterSelected} from '../shared/entity-page/footer-items/show-items-footer-selected';\nimport {CompareFooterItem} from '../shared/entity-page/footer-items/compare-footer-item';\nimport {DividerFooterItem} from '../shared/entity-page/footer-items/divider-footer-item';\nimport {ArchiveFooterItem} from '../shared/entity-page/footer-items/archive-footer-item';\nimport {SelectedTagsFooterItem} from '../shared/entity-page/footer-items/selected-tags-footer-item';\nimport {DeleteFooterItem} from '../shared/entity-page/footer-items/delete-footer-item';\nimport {ResetFooterItem} from '../shared/entity-page/footer-items/reset-footer-item';\nimport {PublishFooterItem} from '../shared/entity-page/footer-items/publish-footer-item';\nimport {MoveToFooterItem} from '../shared/entity-page/footer-items/move-to-footer-item';\nimport {EnqueueFooterItem} from '../shared/entity-page/footer-items/enqueue-footer-item';\nimport {AbortFooterItem} from '../shared/entity-page/footer-items/abort-footer-item';\nimport {addTag} from './actions/common-experiments-menu.actions';\nimport {CountAvailableAndIsDisableSelectedFiltered, MenuItems} from '../shared/entity-page/items.utils';\nimport {ExperimentsTableComponent} from './dumb/experiments-table/experiments-table.component';\nimport {DequeueFooterItem} from '../shared/entity-page/footer-items/dequeue-footer-item';\nimport {HasReadOnlyFooterItem} from '../shared/entity-page/footer-items/has-read-only-footer-item';\nimport {MetricValueType} from '../experiments-compare/reducers/experiments-compare-charts.reducer';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {filterArchivedExperiments} from './shared/common-experiments.utils';\nimport {AbortAllChildrenFooterItem} from '../shared/entity-page/footer-items/abort-all-footer-item';\n\n@Component({\n  selector: 'sm-common-experiments',\n  templateUrl: './experiments.component.html',\n  styleUrls: ['./experiments.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentsComponent extends BaseEntityPage implements OnInit, OnDestroy {\n\n  public entityTypeEnum = EntityTypeEnum;\n  public experiments$: Observable<Array<ITableExperiment>>;\n  public noMoreExperiments$: Observable<boolean>;\n  public tableSortFields$: Observable<SortMeta[]>;\n  public tableSortOrder$: Observable<TableSortOrderEnum>;\n  public selectedExperiments$: Observable<Array<any>>;\n  public isArchived$: Observable<boolean>;\n  public tableFilters$: Observable<any>;\n  private selectedProjectSubs: Subscription;\n  public showAllSelectedIsActive$: Observable<boolean>;\n  public columns$: Observable<any>;\n  public filteredTableCols$: Observable<ISmCol[]>;\n  public tableCols$: Observable<ISmCol[]>;\n  public metricVariants$: Observable<any>;\n  public hyperParams$: Observable<{ [section: string]: any[] }>;\n  public hyperParamsOptions$: Observable<Record<ISmCol['id'], string[]>>;\n  private hiddenTableCols$: Observable<any>;\n  private metricTableCols$: Observable<any>;\n  private searchSubs: Subscription;\n  public selectedTableExperiment$: Observable<ITableExperiment>;\n  public selectedExperimentsDisableAvailable$: Observable<Record<string, CountAvailableAndIsDisableSelectedFiltered>>;\n  private experimentFromUrlSub: Subscription;\n  private refreshing: boolean;\n  public backdropActive$: Observable<any>;\n  private searchQuery$: Observable<ICommonSearchState['searchQuery']>;\n  public metricLoading$: Observable<boolean>;\n  private autoRefreshSub: Subscription;\n  public autoRefreshState$: Observable<boolean>;\n  private isExperimentInEditMode$: Observable<boolean>;\n  private sortFields: SortMeta[];\n  public tableColsOrder$: Observable<string[]>;\n  public users$: Observable<Array<User>>;\n  public parent$: Observable<ProjectsGetTaskParentsResponseParents[]>;\n  public activeParentsFilter$: Observable<ProjectsGetTaskParentsResponseParents[]>;\n  public tags$: Observable<string[]>;\n  public companyTags$: Observable<string[]>;\n  public projectTags$: Observable<string[]>;\n  public tagsFilterByProject$: Observable<boolean>;\n  public systemTags$: Observable<string[]>;\n  public types$: Observable<Array<any>>;\n  protected setSplitSizeAction = experimentsActions.setSplitSize;\n  public currentUser$: Observable<GetCurrentUserResponseUserObject>;\n  public selectedExperiment$: Observable<IExperimentInfo>;\n  public isSharedAndNotOwner$: Observable<boolean>;\n  public readOnlySelection: boolean;\n  private isAppVisible$: Observable<boolean>;\n  protected addTag = addTag;\n  @ViewChild('experimentsTable') private table: ExperimentsTableComponent;\n  private selectedProjectSubscription: Subscription;\n  private deep: boolean;\n\n  get selectedProject() {\n    return this.route.parent.snapshot.params.projectId;\n  }\n\n  constructor(\n    protected store: Store<IExperimentsViewState>,\n    protected syncSelector: SmSyncStateSelectorService,\n    private route: ActivatedRoute,\n    private router: Router, private dialog: MatDialog\n  ) {\n    super(store);\n    this.selectSplitSize$ = this.store.select(selectSplitSize);\n\n    this.tableSortFields$ = this.store.select(selectTableSortFields).pipe(tap(field => this.sortFields = field));\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n    this.noMoreExperiments$ = this.store.select(selectNoMoreExperiments);\n    this.tableFilters$ = this.store.select(selectTableFilters);\n    this.isArchived$ = this.store.select(selectIsArchivedMode);\n    this.showAllSelectedIsActive$ = this.store.select(selectShowAllSelectedIsActive);\n    this.selectedTableExperiment$ = this.store.select(selectSelectedTableExperiment);\n    this.selectedExperimentsDisableAvailable$ = this.store.select(selectedExperimentsDisableAvailable);\n    this.selectedProject$ = this.store.select(selectSelectedProject);\n    this.selectedExperiment$ = this.store.select(selectSelectedExperiment);\n    this.selectedExperiments$ = this.store.select(selectSelectedExperiments)\n      .pipe(tap(selectedExperiments => {\n        this.selectedExperiments = selectedExperiments;\n        this.readOnlySelection = this.selectedExperiments.some(exp => isReadOnly(exp));\n      }));\n    this.hiddenTableCols$ = this.store.select(selectExperimentsHiddenTableCols);\n    this.searchQuery$ = this.store.select(selectSearchQuery);\n    this.autoRefreshState$ = this.store.select(selectAutoRefresh);\n    this.isAppVisible$ = this.store.select(selectAppVisible);\n    this.isExperimentInEditMode$ = this.store.select(selectIsExperimentInEditMode);\n    this.isSharedAndNotOwner$ = this.store.select(selectIsSharedAndNotOwner);\n    this.users$ = this.store.select(selectExperimentsUsers);\n    this.parent$ = this.store.select(selectExperimentsParents);\n    this.activeParentsFilter$ = this.store.select(selectActiveParentsFilter);\n    this.types$ = this.store.select(selectExperimentsTypes);\n    this.tags$ = this.store.select(selectExperimentsTags);\n    this.tagsFilterByProject$ = this.store.select(selectTagsFilterByProject);\n    this.projectTags$ = this.store.select(selectProjectTags);\n    this.companyTags$ = this.store.select(selectCompanyTags);\n    this.systemTags$ = this.store.select(selectProjectSystemTags);\n    this.currentUser$ = this.store.select(selectCurrentUser);\n    this.metricTableCols$ = this.store.select(selectExperimentsMetricsColsForProject);\n    this.tableColsOrder$ = this.store.select(selectExperimentsTableColsOrder);\n    this.columns$ = this.store.select(selectExperimentsTableCols);\n    this.metricVariants$ = this.store.select(selectMetricVariants);\n    this.metricLoading$ = this.store.select(selectMetricsLoading);\n    this.hyperParamsOptions$ = this.store.select(selectHyperParamsOptions);\n    this.hyperParams$ = this.store.select(selectHyperParamsVariants).pipe(\n      map(hyperParams => groupHyperParams(hyperParams))\n    );\n    this.experiments$ = this.store.select(selectExperimentsList).pipe(\n      withLatestFrom(this.isArchived$),\n      // lil hack for hiding archived task after they been archived from task info or footer...\n      map(([experiments, showArchived]) => filterArchivedExperiments(experiments, showArchived)),\n      tap(() => this.refreshing = false)\n    );\n    this.syncAppSearch();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.createFooterItems({\n      entitiesType: EntityTypeEnum.experiment,\n      showAllSelectedIsActive$: this.showAllSelectedIsActive$,\n      selected$: this.selectedExperiments$,\n      data$: this.selectedExperimentsDisableAvailable$,\n      tags$: this.tags$,\n      companyTags$: this.companyTags$,\n      projectTags$: this.projectTags$,\n      tagsFilterByProject$: this.tagsFilterByProject$\n    });\n    this.autoRefreshSub = interval(AUTO_REFRESH_INTERVAL).pipe(\n      withLatestFrom(this.autoRefreshState$, this.isExperimentInEditMode$, this.isAppVisible$),\n      filter(([, autoRefreshState, isExperimentInEditMode, isAppVisible]) => autoRefreshState && !isExperimentInEditMode && isAppVisible)\n    ).subscribe(() => {\n      this.refreshList(true);\n    });\n    this.selectedProjectSubscription = this.selectedProject$.pipe(filter(project => !!project)).subscribe(() => {\n      this.dispatchAndLock(experimentsActions.getExperiments());\n    });\n\n    this.filteredTableCols$ = combineLatest([this.columns$, this.metricTableCols$])\n      .pipe(\n        filter(([tableCols, metricCols]) => !!tableCols && !!metricCols),\n        map(([tableCols, metricCols]) =>\n          tableCols.concat(metricCols.map(col => ({...col, metric: true})))\n            // Only show project col on \"all projects\"\n            .filter(col => (col.id !== EXPERIMENTS_TABLE_COL_FIELDS.PROJECT || this.deep || this.selectedProject === '*'))\n        ),\n        tap(() => this.table?.table?.resize(100))\n        );\n\n    this.tableCols$ = this.filteredTableCols$.pipe(\n      distinctUntilChanged((a, b) => isEqual(a, b)),\n      map(cols => cols.filter(col => !col.hidden))\n    );\n    let prevQueryParams: Params;\n\n    this.selectedProjectSubs = combineLatest([\n      this.store.select(selectRouterParams),\n      this.route.queryParams\n    ]).pipe(\n      map(([params, queryParams]) => [get('projectId', params), queryParams]),\n      filter(([projectId, queryParams]) => {\n        const equal = projectId === this.projectId && isEqual(queryParams, prevQueryParams);\n        if (!equal && !this.preventUrlUpdate) {\n          prevQueryParams = queryParams;\n          this.projectId = projectId;\n          return true;\n        }\n        prevQueryParams = queryParams;\n        this.preventUrlUpdate = false;\n        return false;\n      })\n    ).subscribe(([projectId, queryParams]) => {\n      if (queryParams.columns) {\n        const [cols, metrics, hyperParams, allIds] = decodeColumns(queryParams.columns);\n        this.store.dispatch(experimentsActions.setHiddenColumns({visibleColumns: cols, projectId: this.projectId}));\n        this.store.dispatch(experimentsActions.setExtraColumns({\n          projectId: this.selectedProject,\n          columns: metrics.map(metricCol => createMetricColumn(metricCol, projectId))\n            .concat(hyperParams.map(param => this.createParamColumn(param)))\n        }));\n        this.columnsReordered(allIds, true);\n      }\n      if (queryParams.order) {\n        const orders = decodeOrder(queryParams.order);\n        this.store.dispatch(experimentsActions.setTableSort({orders, projectId}));\n      }\n      if (queryParams.filter) {\n        const filters = decodeFilter(queryParams.filter);\n        this.store.dispatch(experimentsActions.setTableFilters({filters, projectId}));\n      } else {\n        if (queryParams.order) {\n          this.store.dispatch(experimentsActions.setTableFilters({filters: [], projectId}));\n        }\n      }\n      if (queryParams.deep) {\n        this.deep = true;\n        this.store.dispatch(setDeep({deep: true}));\n      }\n\n      if (queryParams.archive) {\n        this.store.dispatch(experimentsActions.setArchive({archive: true}));\n      }\n      this.store.dispatch(experimentsActions.getUsers());\n      this.store.dispatch(experimentsActions.getParents());\n      this.store.dispatch(experimentsActions.getTags());\n      this.store.dispatch(experimentsActions.getProjectTypes());\n    });\n\n    this.selectExperimentFromUrl();\n  }\n\n  createFooterItems(config: {\n    entitiesType: EntityTypeEnum;\n    selected$: Observable<Array<any>>;\n    showAllSelectedIsActive$: Observable<boolean>;\n    data$?: Observable<Record<string, CountAvailableAndIsDisableSelectedFiltered>>;\n    tags$: Observable<string[]>;\n    companyTags$: Observable<string[]>;\n    projectTags$: Observable<string[]>;\n    tagsFilterByProject$: Observable<boolean>;\n  }) {\n    this.footerState$ = this.createFooterState(\n      config.selected$,\n      config.data$,\n      config.showAllSelectedIsActive$,\n      config.companyTags$,\n      config.projectTags$,\n      config.tagsFilterByProject$\n      )\n\n    this.footerItems = [\n      new ShowItemsFooterSelected(config.entitiesType),\n      new CompareFooterItem(config.entitiesType),\n      new DividerFooterItem(),\n      new ArchiveFooterItem(config.entitiesType),\n      new DeleteFooterItem(),\n      new DividerFooterItem(),\n\n      new EnqueueFooterItem(),\n      new DequeueFooterItem(),\n      new ResetFooterItem(config.entitiesType),\n      new AbortFooterItem(),\n      new AbortAllChildrenFooterItem(),\n      new PublishFooterItem(EntityTypeEnum.experiment),\n      new DividerFooterItem(),\n\n      new SelectedTagsFooterItem(EntityTypeEnum.experiment),\n      new DividerFooterItem(),\n\n      new MoveToFooterItem(),\n      new HasReadOnlyFooterItem()\n    ];\n  }\n\n  onFooterHandler({emitValue, item}) {\n    switch (item.id) {\n      case MenuItems.showAllItems:\n        this.showAllSelected(!emitValue);\n        break;\n      case MenuItems.compare:\n        this.compareExperiments();\n        break;\n      case MenuItems.archive:\n        this.table.contextMenuExtended.contextMenu.restoreArchive();\n        break;\n      case MenuItems.reset:\n        this.table.contextMenuExtended.contextMenu.resetPopup();\n        break;\n      case MenuItems.publish:\n        this.table.contextMenuExtended.contextMenu.publishPopup();\n        break;\n      case MenuItems.enqueue:\n        this.table.contextMenuExtended.contextMenu.enqueuePopup();\n        break;\n      case MenuItems.dequeue:\n        this.table.contextMenuExtended.contextMenu.dequeuePopup();\n        break;\n      case MenuItems.delete:\n        this.table.contextMenuExtended.contextMenu.deleteExperimentPopup();\n        break;\n      case MenuItems.abort:\n        this.table.contextMenuExtended.contextMenu.stopPopup();\n        break;\n      case MenuItems.abortAllChildren:\n        this.table.contextMenuExtended.contextMenu.stopAllChildrenPopup();\n        break;\n      case MenuItems.moveTo:\n        this.table.contextMenuExtended.contextMenu.moveToProjectPopup();\n        break;\n    }\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.selectedProjectSubs.unsubscribe();\n    this.selectedProjectSubscription.unsubscribe();\n    this.experimentFromUrlSub.unsubscribe();\n    this.store.dispatch(experimentsActions.resetExperiments());\n    this.stopSyncSearch();\n    this.autoRefreshSub.unsubscribe();\n    this.table = undefined;\n  }\n\n  stopSyncSearch() {\n    this.searchSubs.unsubscribe();\n    this.store.dispatch(new ResetSearch());\n    this.store.dispatch(experimentsActions.resetGlobalFilter());\n  }\n\n  syncAppSearch() {\n    this.store.dispatch(new InitSearch('Search for experiments'));\n\n    this.searchSubs = this.searchQuery$.pipe(skip(1)).subscribe(query => {\n      this.dispatchAndLock(experimentsActions.globalFilterChanged(query));\n    });\n  }\n\n  selectExperimentFromUrl() {\n    this.experimentFromUrlSub = combineLatest([\n      this.store.select(selectRouterParams)\n        .pipe(map(params => get('experimentId', params))),\n      this.experiments$\n    ]).pipe(\n      map(([experimentId, experiments]) => experiments.find(experiment => experiment.id === experimentId)),\n      distinctUntilChanged()\n    ).subscribe((selectedExperiment) => {\n      this.store.dispatch(experimentsActions.setSelectedExperiment({experiment: selectedExperiment}));\n    });\n  }\n\n  getNextExperiments() {\n    this.dispatchAndLock(experimentsActions.getNextExperiments());\n  }\n\n\n\n  experimentsSelectionChanged(experiments: Array<ITableExperiment>) {\n    this.store.dispatch(experimentsActions.setSelectedExperiments({experiments}));\n  }\n\n  experimentSelectionChanged(experiment: ITableExperiment) {\n    this.store.dispatch(experimentsActions.experimentSelectionChanged({\n      experiment,\n      project: this.selectedProject\n    }));\n  }\n\n  sortedChanged(event: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.dispatchAndLock(experimentsActions.tableSortChanged(event));\n  }\n\n  filterChanged({col, value, andFilter}: { col: ISmCol; value: any; andFilter?: boolean }) {\n    this.dispatchAndLock(experimentsActions.tableFilterChanged({\n      filter: {\n        col: col.id,\n        value,\n        filterMatchMode: col.filterMatchMode || andFilter ? 'AND' : undefined\n      }, projectId: this.projectId\n    }));\n  }\n\n  compareExperiments() {\n    // TODO: temporary until the compare component will be under experiment module...\n    this.router.navigate(\n      [\n        `projects/${this.projectId}/compare-experiments/`,\n        {ids: this.selectedExperiments.map(experiment => experiment.id).join(',')}\n      ]);\n  }\n\n  onIsArchivedChanged(isArchived: boolean) {\n    if (this.selectedExperiments.length > 0) {\n      const archiveDialog: MatDialogRef<any> = this.dialog.open(ConfirmDialogComponent, {\n        data: {\n          title: 'Are you sure?',\n          body: 'Navigating between \"Live\" and \"Archive\" will deselect your selected experiments.',\n          yes: 'Proceed',\n          no: 'Back',\n          iconClass: ''\n        }\n      });\n\n      archiveDialog.afterClosed().subscribe((confirmed) => {\n        if (confirmed) {\n          this.switchArchiveMode(isArchived);\n        }\n      });\n    } else {\n      this.switchArchiveMode(isArchived);\n    }\n  }\n\n  switchArchiveMode(isArchived) {\n    this.store.dispatch(resetProjectSelection());\n    this.store.dispatch(experimentsActions.showOnlySelected({active: false, projectId: this.projectId}));\n    this.dispatchAndLock(experimentsActions.setArchive({archive: isArchived}));\n    this.closeExperimentPanel();\n  }\n\n\n  showAllSelected(active: boolean) {\n    this.dispatchAndLock(experimentsActions.showOnlySelected({active, projectId: this.projectId}));\n  }\n\n  selectedTableColsChanged(col: ISmCol) {\n    this.dispatchAndLock(experimentsActions.toggleColHidden({columnId: col.id, projectId: this.projectId}));\n  }\n\n  getMetricsToDisplay() {\n    this.store.dispatch(experimentsActions.getCustomMetrics());\n    this.store.dispatch(experimentsActions.getCustomHyperParams());\n  }\n\n  selectedMetricToShow(event: { variant: MetricVariantResult; addCol: boolean; valueType: MetricValueType }) {\n    if (!event.valueType) {\n      return;\n    }\n    const variantCol = createMetricColumn({\n      metricHash: event.variant.metric_hash,\n      variantHash: event.variant.variant_hash,\n      valueType: event.valueType,\n      metric: event.variant.metric,\n      variant: event.variant.variant\n    }, this.projectId);\n    if (event.addCol) {\n      this.store.dispatch(experimentsActions.addColumn({col: variantCol}));\n    } else {\n      this.store.dispatch(experimentsActions.removeCol({id: variantCol.id, projectId: variantCol.projectId}));\n    }\n  }\n\n  createParamColumn(param: string): ISmCol {\n    return {\n      id: param,\n      getter: param + '.value',\n      headerType: ColHeaderTypeEnum.sortFilter,\n      sortable: true,\n      filterable: true,\n      header: param.replace('hyperparams.', ''),\n      hidden: false,\n      projectId: this.projectId,\n      isParam: true,\n      style: {width: '200px'},\n    };\n  }\n\n  selectedHyperParamToShow(event: { param: string; addCol: boolean }) {\n    const variantCol = this.createParamColumn(event.param);\n    if (event.addCol) {\n      this.store.dispatch(experimentsActions.addColumn({col: variantCol}));\n    } else {\n      this.store.dispatch(experimentsActions.removeCol({id: variantCol.id, projectId: variantCol.projectId}));\n    }\n  }\n\n  removeColFromList(colId: string) {\n    const sortIndex = this.sortFields.findIndex(field => field.field === colId);\n    if (sortIndex > -1) {\n      this.store.dispatch(experimentsActions.resetSortOrder({sortIndex, projectId: this.projectId}));\n    }\n    this.store.dispatch(experimentsActions.removeCol({id: colId, projectId: this.projectId}));\n  }\n\n  columnResized(event: { columnId: string; widthPx: number }) {\n    this.store.dispatch(experimentsActions.setColumnWidth({\n      ...event,\n      projectId: this.projectId,\n    }));\n  }\n\n  refreshList(isAutorefresh: boolean) {\n    if (this.refreshing) {\n      return;\n    }\n    if (!isAutorefresh) {\n      this.refreshing = true;\n    }\n\n    this.dispatchAndLock(experimentsActions.refreshExperiments({\n      hideLoader: isAutorefresh,\n      autoRefresh: isAutorefresh\n    }));\n  }\n\n  closeExperimentPanel() {\n    this.router.navigate([`projects/${this.projectId}/experiments`], {queryParamsHandling: 'merge'});\n    window.setTimeout(() => this.infoDisabled = false);\n  }\n\n  setAutoRefresh($event: boolean) {\n    this.store.dispatch(setAutoRefresh({autoRefresh: $event}));\n  }\n\n  clearSelection() {\n    this.store.dispatch(experimentsActions.clearHyperParamsCols({projectId: this.projectId}));\n  }\n\n  columnsReordered(cols: string[], fromUrl = false) {\n    this.store.dispatch(experimentsActions.setColsOrderForProject({cols, project: this.projectId, fromUrl}));\n  }\n\n  refreshTagsList() {\n    this.store.dispatch(experimentsActions.getTags());\n  }\n\n  refreshTypesList() {\n    this.store.dispatch(experimentsActions.getProjectTypes());\n  }\n\n  protected getParamId(params) {\n    return params?.experimentId;\n  }\n\n  clearTableFiltersHandler(tableFilters: { [s: string]: FilterMetadata }) {\n    const filters = Object.keys(tableFilters).map(col => ({col, value: []}));\n    this.store.dispatch(setTableFilters({filters, projectId: this.selectedProject}));\n  }\n}\n\n","<sm-overlay [backdropActive]=\"backdropActive$|async\"></sm-overlay>\n<sm-experiment-header\n  [tableCols]=\"filteredTableCols$| async\"\n  [isArchived]=\"isArchived$ | async\"\n  [metricVariants]=\"metricVariants$ | async\"\n  [hyperParams]=\"hyperParams$ | async\"\n  [minimizedView]=\"minimizedView\"\n  [isMetricsLoading]=\"metricLoading$ | async\"\n  [autoRefreshState]=\"autoRefreshState$ | async\"\n  [tableFilters]=\"tableFilters$ | async\"\n  (isArchivedChanged)=\"onIsArchivedChanged($event)\"\n  (selectedTableColsChanged)=\"selectedTableColsChanged($event)\"\n  (refreshListClicked)=\"refreshList($event)\"\n  (getMetricsToDisplay)=\"getMetricsToDisplay()\"\n  (selectedMetricToShow)=\"selectedMetricToShow($event)\"\n  (selectedHyperParamToShow)=\"selectedHyperParamToShow($event)\"\n  (removeColFromList)=\"removeColFromList($event)\"\n  (setAutoRefresh)=\"setAutoRefresh($event)\"\n  (clearSelection)=\"clearSelection()\"\n  (clearTableFilters)=\"clearTableFiltersHandler($event)\"\n></sm-experiment-header>\n<div class=\"experiment-body\"\n     [class.footer-visible]=\"((selectedExperiments$ | async) && (selectedExperiments$ | async)?.length > 1) || (showAllSelectedIsActive$ |async)\">\n  <as-split #split\n            [useTransition]=\"true\"\n            [gutterDblClickDuration]=\"400\"\n            (gutterClick)=\"clickOnSplit()\"\n            (gutterDblClick)=\"closeExperimentPanel()\"\n            (dragEnd)=\"splitSizeChange($event)\"\n            (dragStart)=\"disableInfoPanel()\"\n            (transitionEnd)=\"experimentsTable.table?.resize(); experimentsTable.afterTableInit()\"\n  >\n    <as-split-area [size]=\"100 - (splitInitialSize)\"\n                   [order]=\"1\">\n      <sm-experiments-table\n        #experimentsTable\n        class=\"align-self-stretch\"\n        selectionMode=\"single\"\n        [colsOrder]=\"(tableColsOrder$ | async)\"\n        [tableCols]=\"tableCols$| async\"\n        [experiments]=\"experiments$ | async\"\n        [users]=\"users$ | async\"\n        [hyperParamsOptions]=\"hyperParamsOptions$ | async\"\n        [activeParentsFilter]=\"activeParentsFilter$ | async\"\n        [parents]=\"parent$ | async\"\n        [experimentTypes]=\"types$ | async\"\n        [tags]=\"tags$ | async\"\n        [systemTags]=\"systemTags$ | async\"\n        [tableSortFields]=\"(tableSortFields$ | async)\"\n        [tableSortOrder]=\"(tableSortOrder$ | async)\"\n        [tableFilters]=\"(tableFilters$ | async)\"\n        [selectedExperiments]=\"selectedExperiments$ | async\"\n        [selectedExperimentsDisableAvailable]=\"selectedExperimentsDisableAvailable$ | async\"\n        [selectedExperiment]=\"selectedTableExperiment$ |async\"\n        [minimizedView]=\"minimizedView\"\n        [noMoreExperiments]=\"noMoreExperiments$ | async\"\n        [split]=\"selectSplitSize$ | async\"\n        (experimentSelectionChanged)=\"experimentSelectionChanged($event)\"\n        (experimentsSelectionChanged)=\"experimentsSelectionChanged($event)\"\n        (sortedChanged)=\"sortedChanged($event)\"\n        (filterChanged)=\"filterChanged($event)\"\n        (tagsMenuOpened)=\"refreshTagsList()\"\n        (typesMenuOpened)=\"refreshTypesList()\"\n        (loadMoreExperiments)=\"getNextExperiments()\"\n        (columnsReordered)=\"columnsReordered($event)\"\n        (columnResized)=\"columnResized($event)\"\n      >\n      </sm-experiments-table>\n    </as-split-area>\n    <as-split-area [size]=\"splitInitialSize\" class=\"light-theme\" [class.info-disabled]=\"infoDisabled\"\n                   [visible]=\"minimizedView\" [order]=\"2\">\n      <router-outlet></router-outlet>\n    </as-split-area>\n  </as-split>\n</div>\n\n<sm-entity-footer\n  [footerState]=\"footerState$ | async\"\n  [footerItems]=\"footerItems\"\n  (footerItemClick)=\"onFooterHandler($event)\"\n  (tagSelected)=\"tagSelected($event, 'experiments')\"\n></sm-entity-footer>\n","<sm-editable-section #experimentDescriptionSection\n                     class=\"grow\"\n                     [editable]=\"!isExample\"\n                     [disableEditable]=\"isExample\"\n                     (saveClicked)=\"commentValueChanged(experimentCommentText); experimentDescriptionSection.editModeChanged(false);\"\n                     (cancelClicked)=\"onCancelComment() \"\n>\n  <sm-section-header label=\"DESCRIPTION:\"></sm-section-header>\n  <textarea rows=\"4\"\n            class=\"mb-2\"\n            [(ngModel)]=\"experimentCommentText\" [readOnly]=\"!experimentDescriptionSection.inEditMode\"></textarea>\n</sm-editable-section>\n\n<div class=\"general-info\">\n  <sm-labeled-row label=\"ARCHIVED:\">\n    <div style=\"width: 93px\">{{experiment?.system_tags?.includes('archived') ? 'Yes' : 'No'}}</div>\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"CHANGED AT:\">\n    {{(experiment?.status_changed | date : TIME_FORMAT_STRING) | NA}}\n  </sm-labeled-row>\n\n  <sm-labeled-row label=\"LAST ITERATION:\">\n    {{(experiment?.last_iteration) | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"STATUS MESSAGE:\">\n    {{experiment?.status_message | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"STATUS REASON:\">\n    {{experiment?.status_reason | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"CREATED AT:\">\n    {{(experiment?.created | date : TIME_FORMAT_STRING) | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"STARTED AT:\">\n    {{(experiment?.started | date : TIME_FORMAT_STRING) | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"LAST UPDATED AT:\">\n    {{(experiment?.last_update | date:'MMM d yyyy H:mm') | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"COMPLETED AT:\">\n    {{(experiment?.completed | date : TIME_FORMAT_STRING) | NA}}\n  </sm-labeled-row>\n\n  <sm-labeled-row label=\"RUN TIME:\">\n    {{(experiment?.active_duration | duration) | NA}}\n  </sm-labeled-row>\n\n  <sm-labeled-row label=\"QUEUE:\">\n    <a [routerLink]=\"'/workers-and-queues/queues'\" [queryParams]=\"{id: experiment?.execution?.queue?.id}\">\n      {{experiment?.execution?.queue?.name | NA}}\n    </a>\n  </sm-labeled-row>\n\n  <sm-labeled-row label=\"WORKER:\">\n    <a [routerLink]=\"'/workers-and-queues/workers'\" [queryParams]=\"{id: experiment?.last_worker}\">\n      {{experiment?.last_worker | NA}}\n    </a>\n  </sm-labeled-row>\n\n  <sm-labeled-row label=\"CREATED BY:\">\n    {{experiment?.user?.name | NA}}\n  </sm-labeled-row>\n\n\n  <sm-labeled-row label=\"PARENT TASK:\">\n    <div *ngIf=\"experiment?.parent; else nA\">\n      <a [href]=\"'projects/*/experiments/'+ experiment?.parent?.id\"\n         target=\"_blank\">{{experiment?.parent?.name}}</a>\n      <sm-copy-clipboard [clipboardText]=\"experiment?.parent?.id\"\n                         [hideBackground]=\"true\"\n                         [label]=\"''\"\n                         [tooltipText]=\"'Copy parent task ID to clipboard'\" class=\"copy-btn\"></sm-copy-clipboard>\n    </div>\n    <ng-template #nA>{{null| NA}}</ng-template>\n  </sm-labeled-row>\n\n  <sm-labeled-row label=\"PROJECT:\">\n    {{experiment?.project?.name | NA}}\n  </sm-labeled-row>\n  <ng-container *ngFor=\"let runtimeItem of $any(experiment?.runtime) | keyvalue | filterInternal \">\n    <sm-labeled-row [label]=\"runtimeItem.key\">\n      {{runtimeItem.value}}\n    </sm-labeled-row>\n  </ng-container>\n\n</div>\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {TIME_FORMAT_STRING} from '../../../constants';\nimport {Store} from '@ngrx/store';\nimport {ActivateEdit, DeactivateEdit} from '../../actions/common-experiments-info.actions';\nimport {selectCurrentActiveSectionEdit} from '../../reducers';\nimport {filter} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {EditableSectionComponent} from '../../../shared/ui-components/panel/editable-section/editable-section.component';\n\nexport const EXPERIMENT_COMMENT = 'ExperimentComment';\n\n@Component({\n  selector: 'sm-experiment-general-info',\n  templateUrl: './experiment-general-info.component.html',\n  styleUrls: ['./experiment-general-info.component.scss']\n})\nexport class ExperimentGeneralInfoComponent implements AfterViewInit, OnDestroy {\n  constructor(private store: Store<any>) {\n  }\n\n  commentControl = new FormControl();\n  experimentCommentText: string;\n  experimentCommentOriginal: string;\n  private selectCurrentActiveSectionEditSub: Subscription;\n  @ViewChild('experimentDescriptionSection') private experimentDescriptionSection: EditableSectionComponent;\n  @Input() experiment: IExperimentInfo;\n  @Input() editable: boolean;\n  @Input() isExample: boolean;\n\n  // TODO: remove ISelectedExperiment and use the form object...\n  @Input() set experimentComment(experimentComment: string) {\n    this.experimentCommentText = experimentComment;\n    this.experimentCommentOriginal = experimentComment;\n    this.rebuildCommentControl(experimentComment);\n  }\n\n  @Output() commentChanged = new EventEmitter<string>();\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n\n  ngAfterViewInit() {\n    this.selectCurrentActiveSectionEditSub = this.store.select(selectCurrentActiveSectionEdit)\n      .pipe(filter(currentActiveSectionEdit => currentActiveSectionEdit === EXPERIMENT_COMMENT))\n      .subscribe(() => {\n        this.experimentDescriptionSection.editModeChanged(true);\n      });\n  }\n\n  rebuildCommentControl(comment) {\n    this.commentControl = new FormControl(comment);\n  }\n\n  commentValueChanged(value) {\n    this.commentChanged.emit(value?.trim() ?? null);\n    this.editExperimentComment(false);\n  }\n\n  onCancelComment() {\n    this.experimentCommentText = this.experimentCommentOriginal;\n    this.editExperimentComment(false);\n  }\n\n  editExperimentComment(edit) {\n    if (edit) {\n      this.store.dispatch(new ActivateEdit(EXPERIMENT_COMMENT));\n    } else {\n      this.store.dispatch(new DeactivateEdit());\n    }\n  }\n\n  ngOnDestroy() {\n    this.selectCurrentActiveSectionEditSub?.unsubscribe();\n  }\n\n}\n","<div class=\"description-tooltip\">\n  <ng-container *ngIf=\"selectedExperiment?.comment; else noDescription\">\n    <p>{{selectedExperiment?.comment}}</p>\n    <div class=\"edit-description pointer\" (click)=\"onDescription.emit()\">Edit description</div>\n  </ng-container>\n  <ng-template #noDescription>\n    <div (click)=\"onDescription.emit()\" class=\"pointer add-description\">Add description</div>\n  </ng-template>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\n\n@Component({\n  selector: 'sm-experiment-info-edit-description',\n  templateUrl: './experiment-info-edit-description.component.html',\n  styleUrls: ['./experiment-info-edit-description.component.scss']\n})\nexport class ExperimentInfoEditDescriptionComponent implements OnInit {\n  @Input() selectedExperiment: IExperimentInfo;\n  @Output() onDescription = new EventEmitter<null>();\n\n  public isEntered = false;\n  public isOpen = false;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n","<small class=\"alert-warning\" *ngIf=\"editName.active && isDev\">Renaming a DEV experiment without changing the\n  code to reflect the rename, will create a new experiment the next time the code is executed.\n</small>\n<div class=\"d-flex\">\n  <sm-experiment-type-icon-label class=\"experiment-icon\" [showLabel]=\"false\" [type]=\"experiment?.type\" iconClass=\"xl\" >\n  </sm-experiment-type-icon-label>\n  <div class=\"middle-col\">\n    <div class=\"d-flex align-items-center\">\n      <sm-inline-edit\n        #editName\n        class=\"edit-name\"\n        [originalText]=\"infoData?.name || experiment?.name\"\n        [editable]=\"editable\"\n        [minWidth]=\"250\"\n        (textChanged)=\"onNameChanged($event)\"\n        (inlineActiveStateChanged)=\"editExperimentName($event)\"\n      >\n        <div class=\"experiment-name\">\n          <span>{{experiment?.name}}</span>\n        </div>\n      </sm-inline-edit>\n      <div class=\"shared\"\n           *ngIf=\"showMinimize && shared\"\n      ><i class=\"fas fa-link p-1\"></i></div>\n      <span class=\"comment\"\n            smHesitate [delay]=\"1000\" [action]=\"'leave'\"\n            (smHesitate)=\"menuHesitate.hesitateStatus && menu.closed.emit()\">\n        <i class=\"al-icon  pointer\"\n           #commentElement\n           [ngClass]=\"infoData?.comment ? 'al-ico-task-desc' : 'al-ico-task-desc-outline'\"\n           [matMenuTriggerFor]=\"menu\"\n           smHesitate\n           [delay]=\"500\"\n           [action]=\"'enter'\"\n           (smHesitate)=\"commentElement.click(); menuHesitate.hesitateStatus = true\"\n           (click)=\"false\"\n        ></i>\n      </span>\n\n\n      <mat-menu #menu=\"matMenu\" backdropClass=\"hello\" [hasBackdrop]=\"false\">\n        <sm-experiment-info-edit-description\n          smHesitate\n          #menuHesitate=\"hesitate\"\n          [delay]=\"1000\"\n          [action]=\"'leave'\"\n          (smHesitate)=\"menu.closed.emit();\"\n          [selectedExperiment]=\"infoData\"\n          (onDescription)=\"onDescriptionHandler()\"\n        ></sm-experiment-info-edit-description>\n      </mat-menu>\n      <i class=\"al-icon al-ico-id pointer\" (click)=\"showID()\" *ngIf=\"!viewId\"></i>\n      <span class=\"experiment-id\" *ngIf=\"viewId\">{{experiment.id}}</span>\n      <div class=\"status\"\n           [class]=\"experiment?.status\"\n           *ngIf=\"showMinimize && getStatusLabel()\"\n      >{{getStatusLabel()}}</div>\n    </div>\n    <div class=\"d-flex align-items-center\">\n      <span class=\"experiment-type\">{{ experiment?.type | noUnderscore | titlecase }}</span>\n      <sm-tag-list\n        *ngIf=\"editable; else readOnlyTags\"\n        class=\"w-100\"\n        [class.menu-open]=\"!!tagMenu && tagMenu.trigger.menuOpen\"\n        [sysTags]=\"systemTags\"\n        [tags]=\"experiment?.tags\"\n        (add)=\"openTagMenu($event)\"\n        (remove)=\"removeTag($event)\"></sm-tag-list>\n      <ng-template #readOnlyTags>\n        <sm-tag-list\n          class=\"w-100\"\n          [sysTags]=\"systemTags\"\n          [tags]=\"experiment?.tags\"></sm-tag-list>\n      </ng-template>\n      <sm-menu\n        #tagMenu\n        [showCart]=\"false\"\n        [showButton]=\"false\"\n        [showOverlay]=\"false\"\n        (menuClosed)=\"tagsMenuClosed()\"\n      >\n        <sm-tags-menu\n          class=\"light-theme\"\n          #tagsMenuContent\n          [tags]=\"experiment?.tags\"\n          [tagsFilterByProject]=\"tagsFilterByProject$ | async\"\n          [projectTags]=\"projectTags$ | async\"\n          [companyTags]=\"companyTags$ | async\"\n          (tagSelected)=\"addTag($event)\"\n        ></sm-tags-menu>\n      </sm-menu>\n    </div>\n  </div>\n  <div class=\"light-theme right-buttons\">\n    <button class=\"btn btn-icon\" (click)=\"minimizeClicked.emit()\" *ngIf=\"showMinimize && !isSharedAndNotOwner\"\n            smTooltip=\"View in experiment table\" matTooltipPosition=\"left\">\n      <i class=\"al-icon al-ico-info-min al-color light-grey-blue\"></i>\n    </button>\n    <sm-experiment-menu-extended\n      *ngIf=\"showMenu && experiment\"\n      [experiment]=\"experiment\"\n      [selectedExperiment]=\"experiment\"\n      [tagsFilterByProject]=\"tagsFilterByProject$ | async\"\n      [selectedDisableAvailable]=\"selectedDisableAvailable\"\n      [selectedDisableAvailableIsMultiple]=\"false\"\n      [projectTags]=\"projectTags$ | async\"\n      [companyTags]=\"companyTags$ | async\"\n      [minimizedView]=\"!showMinimize\"\n      [isSharedAndNotOwner]=\"isSharedAndNotOwner\"\n      [numSelected]=\"1\"\n      (tagSelected)=\"addTag($event)\"\n    ></sm-experiment-menu-extended>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {TaskStatusEnum} from '../../../../business-logic/model/tasks/taskStatusEnum';\nimport {TaskTypeEnum} from '../../../../business-logic/model/tasks/taskTypeEnum';\nimport {getSystemTags, isDevelopment} from '../../../../features/experiments/shared/experiments.utils';\nimport {Observable} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {selectCompanyTags, selectProjectTags, selectTagsFilterByProject} from '../../../core/reducers/projects.reducer';\nimport {addTag, removeTag} from '../../actions/common-experiments-menu.actions';\nimport {TagsMenuComponent} from '../../../shared/ui-components/tags/tags-menu/tags-menu.component';\nimport {MenuComponent} from '../../../shared/ui-components/panel/menu/menu.component';\nimport {ActivateEdit, DeactivateEdit} from '../../actions/common-experiments-info.actions';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../../features/experiments/shared/experiments.const';\nimport {EXPERIMENT_COMMENT} from '../experiment-general-info/experiment-general-info.component';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {\n  MenuItems,\n  selectionDisabledAbort,\n  selectionDisabledAbortAllChildren,\n  selectionDisabledArchive,\n  selectionDisabledDelete,\n  selectionDisabledDequeue,\n  selectionDisabledEnqueue,\n  selectionDisabledMoveTo,\n  selectionDisabledPublishExperiments,\n  selectionDisabledQueue,\n  selectionDisabledReset,\n  selectionDisabledViewWorker\n} from '../../../shared/entity-page/items.utils';\n\n@Component({\n  selector: 'sm-experiment-info-header',\n  templateUrl: './experiment-info-header.component.html',\n  styleUrls: ['./experiment-info-header.component.scss']\n})\nexport class ExperimentInfoHeaderComponent implements OnDestroy {\n\n  readonly TaskStatusEnum = TaskStatusEnum;\n  readonly TaskTypeEnum = TaskTypeEnum;\n\n  public viewId: boolean;\n  public tagsFilterByProject$: Observable<boolean>;\n  public projectTags$: Observable<string[]>;\n  public companyTags$: Observable<string[]>;\n  public isDev = false;\n  public systemTags = [] as string[];\n  public shared: boolean;\n  selectedDisableAvailable = {};\n\n  @Input() editable: boolean = true;\n  @Input() infoData;\n  @Input() backdropActive = false;\n  @Input() showMenu: boolean;\n  @Input() showMinimize: boolean;\n  @Input() isSharedAndNotOwner: boolean;\n  @Output() experimentNameChanged = new EventEmitter<string>();\n  @Output() minimizeClicked = new EventEmitter();\n  @ViewChild('tagMenu') tagMenu: MenuComponent;\n  @ViewChild('tagsMenuContent') tagMenuContent: TagsMenuComponent;\n\n  constructor(private store: Store<any>, private router: Router, private activatedRoute: ActivatedRoute) {\n    this.tagsFilterByProject$ = this.store.select(selectTagsFilterByProject);\n    this.projectTags$ = this.store.select(selectProjectTags);\n    this.companyTags$ = this.store.select(selectCompanyTags);\n  }\n\n  ngOnDestroy(): void {\n    this.tagMenu = null;\n    this.tagMenuContent = null;\n  }\n\n  private _experiment: any;\n  get experiment() {\n    return this._experiment;\n  }\n\n  @Input() set experiment(experiment) {\n    if (experiment?.id !== this._experiment?.id) {\n      this.viewId = false;\n    }\n    this._experiment = experiment;\n    this.isDev = isDevelopment(experiment);\n    this.systemTags = getSystemTags(experiment);\n    this.shared = experiment?.system_tags?.includes('shared');\n    this.selectedDisableAvailable = {\n      [MenuItems.abort]: selectionDisabledAbort([experiment]),\n      [MenuItems.abortAllChildren]: selectionDisabledAbortAllChildren([experiment]),\n      [MenuItems.publish]: selectionDisabledPublishExperiments([experiment]),\n      [MenuItems.reset]: selectionDisabledReset([experiment]),\n      [MenuItems.delete]: selectionDisabledDelete([experiment]),\n      [MenuItems.moveTo]: selectionDisabledMoveTo([experiment]),\n      [MenuItems.enqueue]: selectionDisabledEnqueue([experiment]),\n      [MenuItems.dequeue]: selectionDisabledDequeue([experiment]),\n      [MenuItems.queue]: selectionDisabledQueue([experiment]),\n      [MenuItems.viewWorker]: selectionDisabledViewWorker([experiment]),\n      [MenuItems.archive]: selectionDisabledArchive([experiment])\n    };\n  }\n\n\n  onNameChanged(name) {\n    this.experimentNameChanged.emit(name);\n  }\n\n  openTagMenu(event: MouseEvent) {\n    if (!this.tagMenu) {\n      return;\n    }\n    window.setTimeout(() => this.store.dispatch(new ActivateEdit('tags')), 200);\n    this.tagMenu.position = {x: event.clientX, y: event.clientY};\n    window.setTimeout(() => {\n      this.tagMenu.openMenu();\n      this.tagMenuContent.focus();\n    });\n  }\n\n  addTag(tag: string) {\n    this.store.dispatch(addTag({tag, experiments: [this.experiment]}));\n  }\n\n  removeTag(tag: string) {\n    this.store.dispatch(removeTag({tag, experiments: [this.experiment]}));\n  }\n\n  tagsMenuClosed() {\n    this.store.dispatch(new DeactivateEdit());\n    this.tagMenuContent.clear();\n  }\n\n  editExperimentName(edit) {\n    if (edit) {\n      this.store.dispatch(new ActivateEdit('ExperimentName'));\n    } else {\n      this.store.dispatch(new DeactivateEdit());\n    }\n  }\n\n  showID() {\n    this.viewId = true;\n  }\n\n  getStatusLabel() {\n    return EXPERIMENTS_STATUS_LABELS[this.experiment?.status] || '';\n  }\n\n  onDescriptionHandler() {\n    this.router.navigate(['general'], {relativeTo: this.activatedRoute});\n    this.store.dispatch(new ActivateEdit(EXPERIMENT_COMMENT));\n  }\n\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {Store} from '@ngrx/store';\nimport {get} from 'lodash/fp';\nimport {Observable, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {MESSAGES_SEVERITY} from '../../../../app.constants';\nimport {IExperimentInfoState} from '../../reducers/experiment-info.reducer';\nimport {selectExperimentInfoData, selectIsExperimentEditable, selectSelectedExperiment} from '../../reducers';\nimport {selectBackdropActive} from '../../../../webapp-common/core/reducers/view.reducer';\nimport {isReadOnly} from '../../../../webapp-common/shared/utils/shared-utils';\nimport {selectRouterConfig, selectRouterParams, selectRouterQueryParams} from '../../../../webapp-common/core/reducers/router-reducer';\nimport * as commonInfoActions from '../../../../webapp-common/experiments/actions/common-experiments-info.actions';\nimport {ExperimentDetailsUpdated} from '../../../../webapp-common/experiments/actions/common-experiments-info.actions';\nimport {addMessage} from '../../../../webapp-common/core/actions/layout.actions';\nimport {IExperimentInfo} from '../../shared/experiment-info.model';\nimport {selectSelectedTableExperiment} from '../../../../webapp-common/experiments/reducers';\nimport {ITableExperiment} from '../../../../webapp-common/experiments/shared/common-experiment-model.model';\n\n// new imports\nimport {faDatabase, faCodeBranch, faFileExcel, faThList, faUpload} from '@fortawesome/free-solid-svg-icons';\nimport { AngularFileUploaderComponent } from \"angular-file-uploader\";\nimport { HttpClient, HttpEventType} from '@angular/common/http';\n\n\n@Component({\n  selector: 'sm-experiment-info',\n  templateUrl: './experiment-info.component.html',\n  styleUrls: ['./experiment-info.component.scss']\n})\nexport class ExperimentInfoComponent implements OnInit, OnDestroy {\n\n  private paramsSubscription: Subscription;\n  public selectedExperiment: IExperimentInfo;\n  private selectedExperimentSubscription: Subscription;\n  public editable$: Observable<boolean>;\n  public infoData$: Observable<IExperimentInfo>;\n  public backdropActive$: Observable<any>;\n  public isExample: boolean;\n  private projectId: string;\n  private experimentId: string;\n  public resultsTab: boolean;\n  public queryParams$: Observable<Params>;\n  public routerConfig: string[];\n  private routerConfigSubscription: Subscription;\n  public tableSelectedExperiment$: Observable<ITableExperiment>;\n  private toMaximize = false;\n\n  constructor(\n    private router: Router,\n    private store: Store<IExperimentInfoState>,\n    private route: ActivatedRoute, \n    private http: HttpClient\n  ) {\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.infoData$ = this.store.select(selectExperimentInfoData);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n    this.queryParams$ = this.store.select(selectRouterQueryParams);\n    this.tableSelectedExperiment$ = this.store.select(selectSelectedTableExperiment);\n  }\n\n  ngOnInit() {\n    this.selectedExperimentSubscription = this.store.select(selectSelectedExperiment)\n      .subscribe(experiment => {\n        this.selectedExperiment = experiment;\n        this.isExample = isReadOnly(experiment);\n      });\n    this.routerConfigSubscription = this.store.select(selectRouterConfig).subscribe(routerConfig => {\n      this.routerConfig = routerConfig;\n    });\n\n    this.paramsSubscription = this.store.select(selectRouterParams)\n      .pipe(\n        tap((params) => {\n          this.projectId = get('projectId', params);\n          this.resultsTab = 'info-output' === this.route.firstChild.routeConfig.path;\n        }),\n        debounceTime(150),\n        map(params => get('experimentId', params)),\n        filter(experimentId => !!experimentId),\n        distinctUntilChanged()\n      )\n      .subscribe(experimentId => {\n        this.experimentId = experimentId;\n\n        // We already have GetExperimentInfo in output (results) component\n        if (!this.resultsTab) {\n          this.store.dispatch(new commonInfoActions.ResetExperimentInfo());\n          this.store.dispatch(new commonInfoActions.GetExperimentInfo(experimentId));\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.paramsSubscription.unsubscribe();\n    this.selectedExperimentSubscription.unsubscribe();\n    this.routerConfigSubscription.unsubscribe();\n    if (!this.toMaximize) {\n      this.store.dispatch(new commonInfoActions.SetExperiment(null));\n      this.store.dispatch(new commonInfoActions.ResetExperimentInfo());\n    }\n  }\n\n  updateExperimentName(name) {\n    if (name.trim().length > 2) {\n      this.store.dispatch(new ExperimentDetailsUpdated({id: this.selectedExperiment.id, changes: {name: name}}));\n    } else {\n      this.store.dispatch(addMessage(MESSAGES_SEVERITY.ERROR, 'Name must be more than three letters long'));\n    }\n  }\n\n  deselectExperiment() {\n    this.navigateAfterExperimentSelectionChanged();\n  }\n\n  navigateAfterExperimentSelectionChanged() {\n    this.router.navigate([`projects/${this.projectId}/experiments`], {queryParamsHandling: 'merge'});\n  }\n\n  onActivate(e, scrollContainer) {\n    scrollContainer.scrollTop = 0;\n  }\n\n  maximize() {\n    if (window.location.pathname.includes('info-output')) {\n      const resultsPath = this.route.firstChild?.firstChild?.routeConfig?.path || this.route.firstChild.routeConfig.path;\n      this.router.navigateByUrl(`projects/${this.projectId}/experiments/${this.experimentId}/output/${resultsPath}`);\n    } else {\n      const parts = window.location.pathname.split('/');\n      parts.splice(5, 0, 'output');\n      this.router.navigateByUrl(parts.join('/'));\n    }\n    this.toMaximize = true;\n  }\n\n  // So.\n  // From here all the code you will find is new.\n\n\n//  here are the \"fontawesome\" icons, if you want to change the icons you will have to \n//  first import them here and declare them in the new imports and then use them in HTML.\n//  don't need to install anything, it's already in package.json\n  faDatabase = faDatabase\n  faCodeBranch = faCodeBranch\n  faFileExcel = faFileExcel\n  faThList = faThList\n  faUpload = faUpload\n\n  //test function made to check if the buttons in the html were being triggered correctly\n  test() {\n    alert(\"ALIVE\")\n    alert(\"experimentId\" + this.experimentId)\n    alert(\"projectId\" + this.projectId)\n  }\n\n  //just leave it here, it is necessary so that the function that uploads files can work\n  selectedFiles: File = null;\n\n  version_control(){\n\n    // has the url variable declared for the current configuration of port 5000 of the new backend module.\n    // still need to finish and define the methods to be used in the backend, the parameters to be sent \n    // will depend on the implementation that will be done.\n    // I particularly think that it will be necessary to create a new view to be able to perform this function properly\n\n    var url = 'http://127.0.0.1:5000/version_control'\n\n    this.http.get(url)\n    .subscribe(response => console.log(response))\n      \n  }\n\n\n  //To more information about this module go to =>  https://blog.angular-university.io/angular-http/\n  async dataset_upload(evente){\n    var url = 'http://127.0.0.1:5000'\n    //var url = window.location.hostname+ ':5000'\n\n    alert(url)\n\n    const my_id : any = {\n      'experimentId' : this.experimentId,\n      'projectId' : this.projectId,\n    }\n    this.http.post(url + '/dataset2artefact', my_id)\n    .subscribe(response => console.log(response))\n\n    this.selectedFiles = <File>evente.target.files\n    console.log(this.selectedFiles)\n\n    const file = new FormData()\n    file.append('file', this.selectedFiles[0],);\n    //const upload: any = await \n\n    this.http.post(url + '/dataset_upload',file, {\n      reportProgress: true,\n      observe:'events'\n    })\n    .subscribe(event => {\n    if (event.type === HttpEventType.UploadProgress){\n      console.log('UploadProgress: ' + Math.round(event.loaded / event.total * 100) + '%')\n    }else if(event.type === HttpEventType.Response){\n      console.log(event)\n    }\n    })\n\n    //.toPromise();\n\n  }\n\n  weight_upload(evente){\n    var url = 'http://127.0.0.1:5000/weight_upload'\n\n    this.selectedFiles = <File>evente.target.files\n    console.log(this.selectedFiles)\n\n    const file = new FormData()\n    file.append('file', this.selectedFiles[0],);\n    console.log(file)\n\n\n    this.http.post(url,file, {\n      reportProgress: true,\n      observe:'events',\n    })\n      .subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress){\n          console.log('UploadProgress: ' + Math.round(event.loaded / event.total * 100) + '%')\n        }else if(event.type === HttpEventType.Response){\n          console.log(event)\n        }\n      })\n  }\n\n  comparison(){\n    var url = 'http://127.0.0.1:5000/comparison'\n\n    this.http.get(url)\n    .subscribe(response => console.log(response))\n  }\n\n  \n\n\n\n}\n","<sm-experiment-info-header-status-progress-bar\n  [status]=\"(tableSelectedExperiment$| async)?.status || selectedExperiment?.status\"\n  [editable]=\"editable$ | async\"\n  [showMaximize]=\"true\"\n  (closeInfoClicked)=\"deselectExperiment()\"\n  (maximizedClicked)=\"maximize()\">\n</sm-experiment-info-header-status-progress-bar>\n\n<div class=\"experiment-info-container light-theme\">\n  <sm-experiment-info-header\n    [experiment]=\"(tableSelectedExperiment$| async) || selectedExperiment\"\n    [infoData]=\"infoData$ | async\"\n    [editable]=\"!isExample\"\n    [showMenu]=\"true\"\n    [backdropActive]=\"backdropActive$|async\"\n    (experimentNameChanged)=\"updateExperimentName($event)\"\n  >\n  </sm-experiment-info-header>\n  <nav>\n    <span routerLink=\"execution\" [routerLinkActive]=\"'disabled'\" queryParamsHandling=\"merge\">\n      <sm-navbar-item header=\"execution\" [active]=\"routerConfig.includes('execution')\"></sm-navbar-item>\n    </span>\n\n    <span [routerLink]=\"['hyper-params/hyper-param/_empty_']\" [class.disabled]=\"routerConfig.includes('hyper-params')\" queryParamsHandling=\"merge\">\n      <sm-navbar-item header=\"configuration\" [active]=\"routerConfig.includes('hyper-params')\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['artifacts']\" [routerLinkActive]=\"'disabled'\" queryParamsHandling=\"preserve\">\n      <sm-navbar-item header=\"artifacts\" [active]=\"routerConfig.includes('artifacts')\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['general']\" [routerLinkActive]=\"'disabled'\" queryParamsHandling=\"preserve\">\n      <sm-navbar-item header=\"info\" [active]=\"routerConfig.includes('general')\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['info-output']\" [routerLinkActive]=\"'disabled'\" queryParamsHandling=\"preserve\">\n      <sm-navbar-item header=\"results\" [active]=\"routerConfig.includes('info-output')\"></sm-navbar-item>\n    </span>\n    \n    \n    <button class=\"icon-button btn-light\" (click)=\"version_control()\">\n      <fa-icon class=\"icon\" [icon]=\"faThList\"></fa-icon>\n    </button>\n    \n    <input \n      style=\"display: none\" \n      type=\"file\" \n      (change)=\"dataset_upload($event)\"\n      #datasetUpload\n    >\n    <button class=\"icon-button btn-light\" (click)=\"datasetUpload.click()\" >\n      <fa-icon class=\"icon\" [icon]=\"faDatabase\"></fa-icon>\n    </button>\n\n    <input \n    style=\"display: none\" \n    type=\"file\" \n    (change)=\"weight_upload($event)\"\n    #weightUpload\n    >\n    <button class=\"icon-button btn-light\" (click)=\"weightUpload.click()\">\n      <fa-icon class=\"icon\" [icon]=\"faCodeBranch\"></fa-icon>\n    </button>\n\n    <button class=\"icon-button btn-light\" (click)=\"comparison()\">\n      <fa-icon class=\"icon\" [icon]=\"faFileExcel\"></fa-icon>\n    </button>\n\n\n\n<!-- \n    <angular-file-uploader\n      [config]=\"afuConfig\">\n    </angular-file-uploader> -->\n\n\n  </nav>\n  <div class=\"experiment-info-body\" #scrollContainer>\n    <router-outlet (activate)=\"onActivate($event, scrollContainer)\"></router-outlet>\n  </div>\n</div>\n\n","<ng-form #sourceCodeForm=\"ngForm\">\n  <div [class.source-code-container]=\"editable\">\n    <sm-labeled-row label=\"REPOSITORY\">\n      <div *ngIf=\"!editable\">{{formData?.repository}}</div>\n      <mat-form-field appearance=\"outline\" *ngIf=\"editable\" class=\"col-24\">\n        <input matInput [ngModel]=\"formData?.repository\" name=\"repository\">\n      </mat-form-field>\n    </sm-labeled-row>\n    <sm-labeled-row [label]=\"editable ? 'COMMIT' : (formData?.scriptType| replaceViaMapPipe:flagNameMap)\">\n      <div *ngIf=\"!editable\">\n        <div [ngSwitch]=\"formData?.scriptType\">\n          <div *ngSwitchCase=\"sourceTypesEnum.VersionNum\">\n            {{formData?.version_num}} {{formData?.branch ? ' (in branch ' + formData?.branch + ')' : ''}}\n          </div>\n          <div *ngSwitchCase=\"sourceTypesEnum.Branch\">\n            {{formData?.branch ? 'Latest in branch ' + formData?.branch : '' }}\n          </div>\n          <div *ngSwitchCase=\"sourceTypesEnum.Tag\">\n            {{formData?.version_num ? 'Tag ' + formData?.tag + ' (commit id ' + formData?.version_num + ')' : 'Tag ' + formData?.tag }}\n          </div>\n        </div>\n      </div>\n      <div class=\"d-flex\" *ngIf=\"editable\">\n        <mat-form-field appearance=\"outline\" class=\"col-12\">\n          <mat-label>Type</mat-label>\n          <mat-select #scriptType [ngModel]=\"formData?.scriptType\" panelClass=\"light-theme\" name=\"scriptType\">\n            <mat-option *ngFor=\"let type of scriptTypeOptions\" [value]=\"type.value\">{{type.label}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\"\n                        [class.d-none]=\"scriptType.value !== sourceTypesEnum.VersionNum\" class=\"col-12\">\n          <mat-error>Required</mat-error>\n          <mat-label>Commit ID</mat-label>\n          <input matInput type=\"text\"\n                 name=\"version_num\"\n                 (blur)=\"resetOtherScriptParameters(sourceTypesEnum.VersionNum)\"\n                 [ngModel]=\"formData?.version_num\"\n                 [required]=\"(!!formData?.repository) && scriptType.value == sourceTypesEnum.VersionNum\"\n                 [placeholder]=\"scriptPlaceHolders[sourceTypesEnum.VersionNum]\">\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" [class.d-none]=\"scriptType.value !== sourceTypesEnum.Branch\" class=\"col-12\">\n          <mat-label>Branch</mat-label>\n          <mat-error>Required</mat-error>\n          <input matInput type=\"text\"\n                 name=\"branch\"\n                 (blur)=\"resetOtherScriptParameters(sourceTypesEnum.Branch)\"\n                 [ngModel]=\"formData?.branch\"\n                 [required]=\"(!!formData?.repository) && scriptType.value == sourceTypesEnum.Branch\"\n                 [placeholder]=\"scriptPlaceHolders[sourceTypesEnum.Branch]\">\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" [class.d-none]=\"scriptType.value !== sourceTypesEnum.Tag\" class=\"col-12\">\n          <mat-error>Required</mat-error>\n          <mat-label>Tag</mat-label>\n          <input matInput type=\"text\"\n                 name=\"tag\"\n                 (blur)=\"resetOtherScriptParameters(sourceTypesEnum.Tag)\"\n                 [ngModel]=\"formData?.tag\"\n                 [required]=\"(!!formData?.repository) && scriptType.value == sourceTypesEnum.Tag\"\n                 [placeholder]=\"scriptPlaceHolders[sourceTypesEnum.Tag]\">\n        </mat-form-field>\n\n      </div>\n\n    </sm-labeled-row>\n    <sm-labeled-row label=\"SCRIPT PATH\">\n      <div *ngIf=\"!editable\">{{formData?.entry_point}}</div>\n      <mat-form-field appearance=\"outline\" *ngIf=\"editable\" class=\"col-24\">\n        <input matInput type=\"text\" [ngModel]=\"formData?.entry_point\" name=\"entry_point\">\n      </mat-form-field>\n    </sm-labeled-row>\n    <sm-labeled-row label=\"WORKING DIRECTORY\">\n      <div *ngIf=\"!editable\">{{formData?.working_dir}}</div>\n      <mat-form-field appearance=\"outline\" *ngIf=\"editable\" class=\"col-24\">\n        <input matInput type=\"text\" [ngModel]=\"formData?.working_dir\" name=\"working_dir\">\n      </mat-form-field>\n    </sm-labeled-row>\n  </div>\n</ng-form>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild} from '@angular/core';\nimport {NgForm} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {IExperimentInfoFormComponent} from '../../../../features/experiments/shared/experiment-info.model';\nimport {IExecutionForm, sourceTypesEnum} from '../../../../features/experiments/shared/experiment-execution.model';\nimport {HELP_TEXTS} from '../../shared/common-experiments.const';\n\n@Component({\n  selector   : 'sm-experiment-execution-source-code',\n  templateUrl: './experiment-execution-source-code.component.html',\n  styleUrls  : ['./experiment-execution-source-code.component.scss'],\n})\nexport class ExperimentExecutionSourceCodeComponent implements OnInit, IExperimentInfoFormComponent, OnDestroy {\n\n  private formChangesSubscription: Subscription;\n  @Input() formData: IExecutionForm['source'];\n  @Input() editable: boolean;\n\n  @Output() formDataChanged = new EventEmitter<{ field: string; value: any }>();\n\n  @ViewChild('sourceCodeForm', { static: true }) sourceCodeForm: NgForm;\n\n  HELP_TEXTS               = HELP_TEXTS;\n  readonly sourceTypesEnum = sourceTypesEnum;\n\n  scriptTypeOptions = [\n    {\n      value: sourceTypesEnum.VersionNum,\n      label: 'Commit Id'\n    },\n    {\n      value: sourceTypesEnum.Tag,\n      label: 'Tag name'\n    },\n    {\n      value: sourceTypesEnum.Branch,\n      label: 'Last Commit In Branch'\n    },\n  ];\n  scriptPlaceHolders = {\n    [sourceTypesEnum.VersionNum]: 'Insert commit id',\n    [sourceTypesEnum.Tag]       : 'Insert tag name',\n    [sourceTypesEnum.Branch]    : 'Insert branch name',\n  };\n  flagNameMap = {\n    [sourceTypesEnum.VersionNum]: 'COMMIT ID',\n    [sourceTypesEnum.Tag]       : 'TAG NAME',\n    [sourceTypesEnum.Branch]    : 'BRANCH NAME'\n  };\n\n\n  ngOnInit(): void {\n    this.formChangesSubscription = this.sourceCodeForm.form.valueChanges.subscribe(formValue => {\n      if (this.editable) {\n        this.formDataChanged.emit({field: 'source', value: formValue});\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.formChangesSubscription?.unsubscribe();\n  }\n\n  resetOtherScriptParameters(sourceType: sourceTypesEnum) {\n    switch (sourceType) {\n      case sourceTypesEnum.VersionNum:\n        this.sourceCodeForm.controls['tag'].setValue('');\n        this.sourceCodeForm.controls['branch'].setValue('');\n        break;\n      case sourceTypesEnum.Tag:\n        this.sourceCodeForm.controls['branch'].setValue('');\n        this.sourceCodeForm.controls['version_num'].setValue('');\n        break;\n      case sourceTypesEnum.Branch:\n        this.sourceCodeForm.controls['version_num'].setValue('');\n        this.sourceCodeForm.controls['tag'].setValue('');\n        break;\n    }\n  }\n}\n","<sm-overlay [backdropActive]=\"backdropActive$|async\"></sm-overlay>\n<mat-sidenav-container *ngIf=\"!minimized; else content\">\n  <mat-sidenav mode=\"side\" opened>\n    <mat-nav-list dense>\n      <a mat-list-item\n         class=\"side-link\"\n         [class.selected]=\"link === currentLink\"\n         (click)=\"showSection(link)\"\n         *ngFor=\"let link of links\">{{ link | uppercase }}</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n<ng-template #content>\n  <ng-template #template\n    let-saving=\"saving\" let-editable=\"editable\" let-showExtraDataSpinner=\"showExtraDataSpinner\" let-isInDev=\"isInDev\"\n    [ngTemplateOutletContext]=\"{ saving: saving$ | async,\n                                 editable: editable$ | async,\n                                 showExtraDataSpinner: showExtraDataSpinner$ | async,\n                                 isInDev: isInDev$ | async\n                               }\" [ngTemplateOutlet]=\"template\">\n    <div class=\"sidenav-content\" [class.maximized]=\"!minimized\" *ngIf=\"formData\">\n    <sm-editable-section #sourceSection\n                         class=\"limit-width\"\n                         *ngIf=\"minimized || currentLink === 'details'\"\n                         [saving]=\"saving\"\n                         [editable]=\"editable\"\n                         (cancelClicked)=\"cancelFormChange()\"\n                         (saveClicked)=\"sourceCode.sourceCodeForm.valid? saveSourceData(): sourceCode.sourceCodeForm.onSubmit(null)\"\n                         (activateEditClicked)=\"activateEditChanged('source', sourceSection)\">\n      <sm-section-header label=\"SOURCE CODE\"></sm-section-header>\n      <sm-experiment-execution-source-code\n        #sourceCode\n        class=\"form-section\"\n        [editable]=\"(editable && !isInDev) && sourceSection.inEditMode\"\n        [formData]=\"formData.source\"\n      ></sm-experiment-execution-source-code>\n    </sm-editable-section>\n\n    <sm-editable-section #diffSection\n                         class=\"grow\"\n                         *ngIf=\"minimized || currentLink === 'uncommitted changes'\"\n                         [saving]=\"saving\"\n                         [editable]=\"editable && !showExtraDataSpinner\"\n                         [hideEditButton]=\"!!formData.diff\"\n                         [disableInEditMode]=\"true\"\n                         (cancelClicked)=\"cancelFormChange()\"\n                         (activateEditClicked)=\"activateEditChanged('diff'); editDiff()\">\n      <sm-section-header *ngIf=\"minimized\" label=\"UNCOMMITTED CHANGES\"></sm-section-header>\n      <sm-scroll-textarea\n        class=\"form-section\"\n        [editable]=\"editable && diffSection.inEditMode\"\n        [isInDev]=\"isInDev\"\n        [formData]=\"formData.diff\"\n        [showSpinner]=\"showExtraDataSpinner\"\n      >\n        <button extra-buttons\n                *ngIf=\"formData.diff && editable && !showExtraDataSpinner\"\n                class=\"btn-dark-fill mr-3 flex-1\"\n                (click)=\"diffSection.editModeChanged(true)\">EDIT</button>\n        <button extra-buttons\n                *ngIf=\"formData.diff && editable && !showExtraDataSpinner\"\n                class=\"btn-dark-fill mr-3 flex-1\"\n                (click)=\"discardDiff()\">\n          <i class=\"p-1 fa fa-trash\"></i>\n          DISCARD DIFFS\n        </button>\n      </sm-scroll-textarea>\n    </sm-editable-section>\n\n    <sm-editable-section #requirementsSection\n                         class=\"grow\"\n                         *ngIf=\"minimized || currentLink === 'installed packages'\"\n                         [saving]=\"saving\"\n                         [editable]=\"editable\"\n                         [disableInEditMode]=\"true\"\n                         [disableSave]=\"false\"\n                         [hideEditButton]=\"!!formData?.requirements?.pip\"\n                         (cancelClicked)=\"cancelFormChange()\"\n                         (activateEditClicked)=\"activateEditChanged('source'); editInstallPackages()\">\n      <sm-section-header *ngIf=\"minimized\" label=\"INSTALLED PACKAGES\"></sm-section-header>\n      <sm-scroll-textarea\n        class=\"form-section\"\n        emptyMessage=\"Packages will be installed from projects requirements file\"\n        [editable]=\"editable && requirementsSection.inEditMode\"\n        [isInDev]=\"isInDev\"\n        [formData]=\"formData.requirements?.pip\">\n        <button extra-buttons\n                *ngIf=\"formData?.requirements?.pip && editable && !showExtraDataSpinner\"\n                class=\"btn-dark-fill mr-3 flex-1\"\n                (click)=\"requirementsSection.editModeChanged(true)\">EDIT</button>\n        <button extra-buttons\n                *ngIf=\"formData.requirements?.pip && editable && !showExtraDataSpinner\"\n                class=\"btn-dark-fill mr-3 flex-1\"\n                (click)=\"clearInstalledPackages()\">\n          <i class=\"p-1 fa fa-trash\"></i>\n          CLEAR\n        </button>\n      </sm-scroll-textarea>\n    </sm-editable-section>\n    <sm-editable-section #containerSection\n                         class=\"limit-width edit-in-section\"\n                         [style.margin-bottom.px]=\"containerSection.inEditMode ? 30 : null\"\n                         *ngIf=\"minimized || currentLink === 'container'\"\n                         [saving]=\"saving\"\n                         [editable]=\"editable\"\n                         (cancelClicked)=\"cancelFormChange()\"\n                         (saveClicked)=\"saveContainerData({image: containerImage.nativeElement.value, arguments: containerArguments.nativeElement.value})\"\n                         (activateEditClicked)=\"activateEditChanged('orchestration', containerSection)\">\n      <sm-section-header label=\"CONTAINER\"></sm-section-header>\n      <sm-labeled-row label=\"IMAGE\" [class.mb-3]=\"editable\">\n        <div *ngIf=\"!((editable && !isInDev) && containerSection.inEditMode)\">{{formData.container?.image}}</div>\n        <mat-form-field appearance=\"outline\" *ngIf=\"(editable && !isInDev) && containerSection.inEditMode\" class=\"col-24\">\n          <input #containerImage matInput [ngModel]=\"formData.container?.image\" name=\"image\">\n        </mat-form-field>\n      </sm-labeled-row>\n      <sm-labeled-row label=\"ARGUMENTS\" [class.mb-3]=\"editable\" [labelClass]=\"'this-is-myclass'\">\n        <div *ngIf=\"!((editable && !isInDev) && containerSection.inEditMode)\">{{formData.container?.arguments}}</div>\n        <mat-form-field appearance=\"outline\" *ngIf=\"(editable && !isInDev) && containerSection.inEditMode\" class=\"col-24\">\n          <input #containerArguments matInput [ngModel]=\"formData.container?.arguments\" name=\"image\">\n        </mat-form-field>\n      </sm-labeled-row>\n\n    </sm-editable-section>\n        <sm-editable-section #containerSetupShellSection\n                             class=\"grow setup-shell-script\"\n                             [class.maximised]=\"!minimized\"\n                             [class.mb-3]=\"editable\"\n                             *ngIf=\"minimized || currentLink === 'container'\"\n                             [saving]=\"saving\"\n                             [editable]=\"editable && (!(formData?.container?.setup_shell_script) || containerSetupShellSection.inEditMode)\"\n                             [disableInEditMode]=\"true\"\n                             [disableSave]=\"false\"\n                             (cancelClicked)=\"cancelFormChange()\"\n                             (activateEditClicked)=\"activateEditChanged('container'); editContainerSetupShellScript(containerSetupShellSection)\">\n          <sm-section-header  label=\"SETUP SHELL SCRIPT\"></sm-section-header>\n          <sm-scroll-textarea\n            class=\"form-section\"\n            [editable]=\"editable && containerSetupShellSection.inEditMode\"\n            [isInDev]=\"isInDev\"\n            [formData]=\"formData?.container?.setup_shell_script\">\n            <button extra-buttons\n                    *ngIf=\"formData?.container?.setup_shell_script && editable && !showExtraDataSpinner\"\n                    class=\"btn-dark-fill mr-3 flex-1\"\n                    (click)=\"containerSetupShellSection.editModeChanged(true)\">EDIT</button>\n            <button extra-buttons\n                    *ngIf=\"formData.container?.setup_shell_script && editable && !showExtraDataSpinner\"\n                    class=\"btn-dark-fill mr-3 flex-1\"\n                    (click)=\"clearSetupShellScript()\">\n              <i class=\"p-1 fa fa-trash\"></i>\n              CLEAR\n            </button>\n          </sm-scroll-textarea>\n        </sm-editable-section>\n\n    <sm-editable-section #outputSection\n                         class=\"limit-width\"\n                         *ngIf=\"minimized || currentLink === 'details'\"\n                         [saving]=\"saving\"\n                         [editable]=\"editable\"\n                         (cancelClicked)=\"cancelFormChange()\"\n                         (saveClicked)=\"saveOutputData()\"\n                         (activateEditClicked)=\"activateEditChanged('output', outputSection)\">\n      <sm-section-header label=\"OUTPUT\"></sm-section-header>\n      <sm-labeled-row label=\"DESTINATION\">\n        <div *ngIf=\"!((editable && !isInDev) && outputSection.inEditMode)\">{{formData.output?.destination}}</div>\n        <mat-form-field appearance=\"outline\" *ngIf=\"editable && outputSection.inEditMode\" class=\"col-24\">\n          <input #outputDestination matInput [ngModel]=\"formData.output?.destination\" name=\"output_destination\">\n        </mat-form-field>\n      </sm-labeled-row>\n      <!--      Can we remove this non existing input?-->\n      <sm-labeled-row label=\"LOG LEVEL\" [class.mb-3]=\"editable\">\n        <div *ngIf=\"!((editable && !isInDev) && outputSection.inEditMode)\">{{formData.output?.logLevel}}</div>\n        <mat-form-field appearance=\"outline\" *ngIf=\"editable && outputSection.inEditMode\" class=\"col-24\">\n          <input #outputLogLevel matInput [ngModel]=\"formData.output?.logLevel\" name=\"output_destination\">\n        </mat-form-field>\n      </sm-labeled-row>\n    </sm-editable-section>\n  </div>\n  </ng-template>\n</ng-template>\n","import {Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Observable, Subscription} from 'rxjs';\nimport {IExecutionForm, sourceTypesEnum} from '../../../../features/experiments/shared/experiment-execution.model';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {selectIsExperimentEditable, selectSelectedExperiment, selectShowExtraDataSpinner} from '../../../../features/experiments/reducers';\nimport * as commonInfoActions from '../../actions/common-experiments-info.actions';\nimport {selectExperimentExecutionInfoData, selectIsExperimentSaving, selectIsSelectedExperimentInDev} from '../../reducers';\nimport {selectBackdropActive} from '../../../core/reducers/view.reducer';\nimport {EditJsonComponent} from '../../../shared/ui-components/overlay/edit-json/edit-json.component';\nimport {filter, take} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {EditableSectionComponent} from '../../../shared/ui-components/panel/editable-section/editable-section.component';\nimport {ExperimentExecutionSourceCodeComponent} from '../../dumb/experiment-execution-source-code/experiment-execution-source-code.component';\nimport {getOr} from 'lodash/fp';\nimport {ActivatedRoute} from '@angular/router';\nimport {isUndefined} from 'lodash/fp';\nimport {Container} from '../../../../business-logic/model/tasks/container';\n\n@Component({\n  selector: 'sm-experiment-info-execution',\n  templateUrl: './experiment-info-execution.component.html',\n  styleUrls: ['./experiment-info-execution.component.scss']\n})\nexport class ExperimentInfoExecutionComponent implements OnInit, OnDestroy {\n\n  public executionInfo$: Observable<IExecutionForm>;\n  public showExtraDataSpinner$: Observable<boolean>;\n  public selectedExperimentSubscrition: Subscription;\n  private selectedExperiment: IExperimentInfo;\n  public editable$: Observable<boolean>;\n  public isInDev$: Observable<boolean>;\n  public saving$: Observable<boolean>;\n  public backdropActive$: Observable<boolean>;\n  public formData: IExecutionForm;\n  private formDataSubscription: Subscription;\n  public minimized: boolean;\n\n  @ViewChild('outputDestination') outputDestination: ElementRef;\n  @ViewChild('orchestration') orchestration: ElementRef;\n  @ViewChild('sourceCode') sourceCode: ExperimentExecutionSourceCodeComponent;\n\n  @ViewChild('diffSection') diffSection: EditableSectionComponent;\n  @ViewChild('requirementsSection') requirementsSection: EditableSectionComponent;\n\n  @ViewChild('containerImage') containerImage: ElementRef;\n  @ViewChild('containerArguments') containerArguments: ElementRef;\n  links = ['details', 'uncommitted changes', 'installed packages', 'container'];\n  currentLink = 'details';\n\n  constructor(\n    private store: Store<IExperimentInfoState>,\n    private dialog: MatDialog,\n    private route: ActivatedRoute,\n    private element: ElementRef\n  ) {\n    this.minimized = getOr(false, 'data.minimized', this.route.snapshot.routeConfig);\n    this.executionInfo$ = this.store.select(selectExperimentExecutionInfoData);\n    this.showExtraDataSpinner$ = this.store.select(selectShowExtraDataSpinner);\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.isInDev$ = this.store.select(selectIsSelectedExperimentInDev);\n    this.saving$ = this.store.select(selectIsExperimentSaving);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n  }\n\n  ngOnInit() {\n    this.selectedExperimentSubscrition = this.store.select(selectSelectedExperiment)\n      .subscribe(selectedExperiment => {\n        this.selectedExperiment = selectedExperiment;\n      });\n    this.store.dispatch(new commonInfoActions.SetExperimentFormErrors(null));\n\n    this.formDataSubscription = this.executionInfo$.subscribe(formData => {\n      this.formData = formData;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.selectedExperimentSubscrition.unsubscribe();\n    this.formDataSubscription.unsubscribe();\n  }\n\n  saveSourceData() {\n    const source = this.sourceCode.sourceCodeForm.form.value;\n    this.store.dispatch(commonInfoActions.saveExperimentSection({\n      script: {\n        repository: source.repository,\n        entry_point: source.entry_point,\n        working_dir: source.working_dir,\n        ...this.convertScriptType(source)\n      }\n    }));\n  }\n\n  saveContainerData(container: Container) {\n    this.store.dispatch(commonInfoActions.saveExperimentSection({container: {...this.formData.container, ...container}}));\n  }\n\n  saveOutputData() {\n    const outputDestination = this.outputDestination.nativeElement.value;\n\n    // why BE can't get output.destination as task.edit?\n    this.store.dispatch(commonInfoActions.saveExperimentSection({output_dest: outputDestination} as any));\n  }\n\n  cancelFormChange() {\n    this.store.dispatch(new commonInfoActions.DeactivateEdit());\n  }\n\n  activateEditChanged(sectionName: string, section?: EditableSectionComponent) {\n    const element = section?.elementRef?.nativeElement;\n    if (element) {\n      window.setTimeout(() => {\n        const bounding = element.getBoundingClientRect();\n        const containerRect = this.element.nativeElement.getBoundingClientRect();\n        if (bounding.bottom > window.innerHeight && bounding.top > containerRect.top) {\n          this.element.nativeElement.scroll({top: element.offsetTop, behavior: 'smooth'} as ScrollToOptions);\n        }\n      });\n    }\n    this.store.dispatch(new commonInfoActions.ActivateEdit(sectionName));\n  }\n\n  discardDiff() {\n    const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'Discard diff',\n        body: 'Uncommitted changes will be discarded',\n        yes: 'Discard',\n        no: 'Cancel',\n        iconClass: 'al-icon al-ico-trash al-color blue-300',\n      }\n    });\n\n    confirmDialogRef.afterClosed().pipe(take(1)).subscribe((confirmed) => {\n      if (confirmed) {\n        this.activateEditChanged('diff');\n        this.store.dispatch(commonInfoActions.saveExperimentSection({script: {diff: ''}}));\n      }\n    });\n  }\n\n  editContainerSetupShellScript(smEditableSection?: EditableSectionComponent) {\n    this.openEditJsonDialog({textData: this.formData.container?.setup_shell_script, title: 'EDIT SETUP SHELL SCRIPT'}, smEditableSection)\n      .afterClosed()\n      .pipe(filter( bool =>  !isUndefined(bool)))\n      .subscribe( setup_shell_script => {\n        if (this.formData.container.setup_shell_script !== setup_shell_script) {\n          this.store.dispatch(commonInfoActions.saveExperimentSection({container: {...this.formData.container, setup_shell_script}}));\n        } else {\n          smEditableSection.cancelClickedEvent();\n        }\n      });\n  }\n\n  editInstallPackages() {\n    const editInstallPackagesDialog = this.dialog.open(EditJsonComponent, {\n      data: {textData: this.formData?.requirements?.pip, readOnly: false, title: 'EDIT INSTALLED PACKAGES', typeJson: false}\n    });\n\n    editInstallPackagesDialog.afterClosed().pipe(take(1)).subscribe((data) => {\n      if (data === undefined) {\n        this.requirementsSection.cancelClickedEvent();\n      } else {\n        this.store.dispatch(commonInfoActions.saveExperimentSection({script: {requirements: {...this.formData.requirements, pip: data}}}));\n      }\n    });\n  }\n\n  editDiff() {\n    this.openEditJsonDialog({textData: this.formData?.diff, readOnly: false, title: 'EDIT UNCOMMITTED CHANGES', typeJson: false}, this.diffSection)\n      .afterClosed().pipe(take(1)).subscribe((data) => {\n      if (!isUndefined(data)) {\n        this.store.dispatch(commonInfoActions.saveExperimentSection({script: {diff: data}}));\n      }\n    });\n  }\n\n  clearInstalledPackages() {\n    this.clearConfirmDialog('installed packages').pipe(take(1)).subscribe((confirmed) => {\n      if (confirmed) {\n        this.activateEditChanged('requirements');\n        this.store.dispatch(commonInfoActions.saveExperimentSection({script: {requirements: {}}}));\n      }\n    });\n  }\n\n  clearSetupShellScript() {\n    this.clearConfirmDialog('setup shell script').pipe(take(1)).subscribe((confirmed) => {\n      if (confirmed) {\n        this.store.dispatch(commonInfoActions.saveExperimentSection({container: {...this.formData.container, setup_shell_script: ''}}));\n      }\n    });\n  }\n\n  /**\n   * Open confirm dialog with clear entire text\n   * @param title\n   * @private\n   */\n  private clearConfirmDialog(title: string): Observable<boolean> {\n    return this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: `Clear ${title}`,\n        body: `Are you sure you want to clear the entire contents of ${title.charAt(0).toUpperCase() + title.slice(1)}?`,\n        yes: 'Clear',\n        no: 'Keep',\n        iconClass: 'al-icon al-ico-trash al-color blue-300',\n      }\n    }).afterClosed();\n\n  }\n\n  /**\n   * Open dialog for edit the textarea\n   * If passing the container it will close the popup when needed\n   * @param data\n   * @param editableSectionComponent\n   * @private\n   */\n  private openEditJsonDialog(data: {textData: string; readOnly?: boolean; title?: string; typeJson?: boolean}, editableSectionComponent?: EditableSectionComponent ): MatDialogRef<EditJsonComponent> {\n    const editJsonComponent = this.dialog.open(EditJsonComponent, {\n      data\n    });\n    editJsonComponent.afterClosed().subscribe( res => {\n      if (isUndefined(res) && !isUndefined(editJsonComponent)) {\n        editableSectionComponent.cancelClickedEvent();\n      }\n    });\n    return editJsonComponent;\n  }\n\n  private convertScriptType(source: IExecutionForm['source']) {\n    switch (source.scriptType) {\n      case sourceTypesEnum.Branch:\n        return {[sourceTypesEnum.Branch]: source.branch, [sourceTypesEnum.Tag]: '', [sourceTypesEnum.VersionNum]: ''};\n      case sourceTypesEnum.Tag:\n        return {[sourceTypesEnum.Branch]: source.branch, [sourceTypesEnum.Tag]: source.tag, [sourceTypesEnum.VersionNum]: ''};\n      case sourceTypesEnum.VersionNum:\n        return {[sourceTypesEnum.Branch]: source.branch, [sourceTypesEnum.Tag]: source.tag, [sourceTypesEnum.VersionNum]: source.version_num};\n    }\n  }\n\n  showSection(selection: string) {\n    this.currentLink = selection;\n  }\n}\n","<mat-expansion-panel expanded=\"true\" *ngIf=\"inputModels?.length || editable\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    INPUT MODELS\n  </mat-expansion-panel-header>\n  <div *ngIf=\"noItemsMode; else hasItems\"\n       queryParamsHandling=\"preserve\"\n       class=\"artifact-container pointer\"\n       [routerLink]=\"'input-model/input-model'\"\n       [class.selected]=\"true\"\n  >\n    <i class=\"icon sm al-ico-import\"></i> Input Model\n  </div>\n  <ng-template #hasItems>\n    <div\n      *ngFor=\"let model of inputModels\"\n      queryParamsHandling=\"preserve\"\n      class=\"artifact-container pointer\"\n      [routerLink]=\"'input-model/' + model.id\"\n      [class.selected]=\"model.id === selectedArtifactKey && activeSection === ACTIVE_SECTIONS['input-model']\"\n    >\n      <i class=\"icon sm al-ico-import\"></i>\n      <span class=\"ellipsis\">{{model.taskName}}</span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n\n<mat-expansion-panel expanded=\"true\" *ngIf=\"outputModels?.length\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    OUTPUT MODELS\n  </mat-expansion-panel-header>\n  <div\n    *ngFor=\"let model of outputModels\"\n    queryParamsHandling=\"preserve\"\n    class=\"artifact-container pointer\"\n    [routerLink]=\"'output-model/' + model.id\"\n    [class.selected]=\"model.id === selectedArtifactKey && activeSection === ACTIVE_SECTIONS['output-model']\"\n  >\n    <i class=\"icon sm al-ico-export\"></i>\n    <span class=\"ellipsis\">{{model.taskName}}</span>\n  </div>\n</mat-expansion-panel>\n\n<mat-expansion-panel expanded=\"true\" *ngIf=\"dataAuditArtifacts?.length > 0\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    DATA AUDIT\n  </mat-expansion-panel-header>\n  <div *ngFor=\"let artifact of dataAuditArtifacts; trackBy: trackByFn\"\n       class=\"artifact-container pointer\"\n       queryParamsHandling=\"preserve\"\n       [routerLink]=\"'artifact/' + artifact.key+ '/' + artifact.mode\"\n       [class.selected]=\"selectedArtifactKey === artifact.key && activeSection === ACTIVE_SECTIONS['artifact']\"\n  >\n    <i class=\"sm al-icon al-ico-data-audit al-color\" [class]=\"(selectedArtifactKey === artifact.key ? 'white' : 'blue-400')\"></i>{{artifact.key}}\n  </div>\n</mat-expansion-panel>\n<mat-expansion-panel [expanded]=\"true\" *ngIf=\"otherArtifacts?.length > 0\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    OTHER\n  </mat-expansion-panel-header>\n  <div *ngFor=\"let artifact of otherArtifacts; trackBy: trackByFn\"\n       class=\"artifact-container pointer\"\n       queryParamsHandling=\"preserve\"\n       [routerLink]=\"'other/' + artifact.key+'/' +artifact.mode\"\n       [class.selected]=\"selectedArtifactKey === artifact.key && activeSection === ACTIVE_SECTIONS['other']\"\n  >\n    <i class=\"sm al-icon al-ico-data-audit al-color\" [class]=\"(selectedArtifactKey === artifact.key ? 'white' : 'blue-400')\"></i>\n    <span class=\"ellipsis\">{{artifact.key}}</span>\n  </div>\n</mat-expansion-panel>\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Artifact} from '../../../../business-logic/model/tasks/artifact';\nimport {IModelInfo} from '../../shared/common-experiment-model.model';\n\n enum ActiveSectionEnum {\n   'input-model' = 'input-model',\n   'output-model' = 'output-model',\n   'artifact' = 'artifact',\n   'other' = 'other',\n }\n@Component({\n  selector   : 'sm-experiment-artifacts-navbar',\n  templateUrl: './experiment-artifacts-navbar.component.html',\n  styleUrls  : ['./experiment-artifacts-navbar.component.scss']\n})\nexport class ExperimentArtifactsNavbarComponent implements OnChanges{\n  readonly DATA_AUDIT_TABLE = 'data-audit-table';\n  public dataAuditArtifacts: Artifact[];\n  public otherArtifacts: Artifact[];\n  public ACTIVE_SECTIONS    = ActiveSectionEnum;\n  public noItemsMode: boolean;\n\n  @Input() set artifacts(artifacts: Array<Artifact>) {\n    if (artifacts) {\n      this.dataAuditArtifacts = artifacts.filter(artifact => artifact.type === this.DATA_AUDIT_TABLE);\n      this.otherArtifacts     = artifacts.filter(artifact => artifact.type !== this.DATA_AUDIT_TABLE);\n    }\n  }\n\n  @Input() selectedArtifactKey;\n  @Input() outputModels: IModelInfo[];\n  @Input() inputModels: IModelInfo[];\n  @Input() editable;\n  @Input() activeSection: ActiveSectionEnum;\n  @Input() routerConfig: string[];\n\n  constructor() {\n  }\n\n  trackByFn(index, artifact) {\n    return (artifact.key + artifact.mode);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.noItemsMode = this.outputModels?.length === 0 && this.inputModels?.length === 0 && this.dataAuditArtifacts?.length === 0 && this.otherArtifacts?.length === 0;\n  }\n}\n","<ng-template\n  let-modelInfo=\"modelInfo\"\n  let-editable=\"editable\"\n  [ngTemplateOutletContext]=\"{\n    modelInfo: modelInfo$ | async,\n    editable: editable$ | async\n  }\" [ngTemplateOutlet]=\"selfie\" #selfie>\n  <sm-overlay [backdropActive]=\"backdropActive$|async\"></sm-overlay>\n  <div class=\"h-100 d-flex\" *ngIf=\"(modelInfo?.output?.length) ||\n                                (modelInfo?.input?.length) ||\n                                (modelInfo?.artifacts?.length) ||\n                                editable; else noData\">\n    <sm-experiment-artifacts-navbar\n      [class.minimized]=\"minimized\"\n      [artifacts]=\"modelInfo?.artifacts\"\n      [outputModels]=\"modelInfo?.output\"\n      [inputModels]=\"modelInfo?.input\"\n      [editable]=\"editable\"\n      [activeSection]=\"activeSection\"\n      [routerConfig]=\"routerConfig$ | async\"\n      [selectedArtifactKey]=\"selectedId$ | async\"\n    ></sm-experiment-artifacts-navbar>\n    <div class=\"artifacts-col\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n  <ng-template #noData>\n    <div class=\"d-flex h-100\" *ngIf=\"modelInfo\">\n      <div class=\"no-data\">\n        <i class=\"icon i-no-data-artifacts\"></i>\n        <span>NO ARTIFACTS RECORDED</span>\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n","import {Component, OnDestroy} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectBackdropActive} from '../../../core/reducers/view.reducer';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {selectExperimentModelInfoData} from '../../reducers';\nimport {selectExperimentInfoData, selectIsExperimentEditable} from '../../../../features/experiments/reducers';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {selectRouterConfig, selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {distinctUntilChanged, filter, map} from 'rxjs/operators';\nimport {get, getOr} from 'lodash/fp';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {IExperimentModelInfo} from '../../shared/common-experiment-model.model';\n\n@Component({\n  selector: 'sm-experiment-info-artifacts-model',\n  templateUrl: './experiment-info-artifacts.component.html',\n  styleUrls: ['./experiment-info-aritfacts.component.scss']\n})\nexport class ExperimentInfoArtifactsComponent implements OnDestroy {\n  public backdropActive$: Observable<boolean>;\n  public modelInfo$: Observable<IExperimentModelInfo>;\n  public ExperimentInfo$: Observable<IExperimentInfo>;\n  public activeSection: any;\n  private selectedRouterConfigSubs: Subscription;\n  public selectedId$: Observable<string>;\n  private artifactSubscription: Subscription;\n  private onOutputModel$: Observable<boolean>;\n  private onInputModel$: Observable<boolean>;\n  private experimentKey$: Observable<string>;\n  public routerConfig$: Observable<string[]>;\n  public editable$: Observable<boolean>;\n  public minimized: boolean;\n  private previousTarget: string;\n\n  constructor(private store: Store<IExperimentInfoState>, public router: Router, private route: ActivatedRoute\n  ) {\n    this.minimized = getOr(false, 'data.minimized', this.route.snapshot.routeConfig);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.modelInfo$ = this.store.select(selectExperimentModelInfoData);\n    this.ExperimentInfo$ = this.store.select(selectExperimentInfoData);\n    this.routerConfig$ = this.store.select(selectRouterConfig);\n    this.selectedRouterConfigSubs = this.store.select(selectRouterConfig)\n      .pipe(filter(rc => !!rc))\n      .subscribe((routerConfig: string[]) => {\n        this.activeSection = this.minimized ? routerConfig[5] : routerConfig[6];\n      });\n\n    this.selectedId$ = this.store.select(selectRouterParams)\n      .pipe(\n        map(params => get('artifactId', params) || get('modelId', params)),\n      );\n\n    this.experimentKey$ = this.store.select(selectRouterParams)\n      .pipe(\n        map(params => get('experimentId', params)),\n      );\n    this.artifactSubscription = combineLatest([this.selectedId$, this.modelInfo$, this.experimentKey$, this.ExperimentInfo$])\n      .pipe(\n        distinctUntilChanged(),\n        filter(([selectedId, modelInfo, experimentKey, experimentInfo]) =>\n          !!modelInfo && experimentInfo && experimentKey && experimentInfo.id === experimentKey))\n      .subscribe(([selectedId, modelInfo]) => {\n        const onOutputModel = this.route.snapshot.firstChild?.data?.outputModel;\n        const onInputModel = this.route.snapshot.firstChild?.data?.outputModel === false;\n        if (selectedId) {\n          const selectedArtifact = modelInfo.artifacts.find(artifact => artifact.key === selectedId);\n          const selectedInputModel = modelInfo.input.find(model => model.id === selectedId);\n          const selectedOutputModel = modelInfo.output.find(model => model.id === selectedId);\n          const onArtifact = !onInputModel && !onOutputModel;\n          if ((onOutputModel && !selectedOutputModel) || (onInputModel && !selectedInputModel) || (onArtifact && !selectedArtifact)) {\n            this.resetSelection(modelInfo);\n          }\n        } else {\n          this.resetSelection(modelInfo);\n        }\n      });\n  }\n\n  private navigateToTarget(target: string) {\n    if (target !== this.previousTarget || !this.route.firstChild) {\n      this.router.navigate([target], {relativeTo: this.route, queryParamsHandling: 'preserve'});\n      this.previousTarget = target;\n    }\n  }\n\n  private resetSelection(modelInfo): void {\n    let target: string;\n    if (modelInfo.input?.length > 0) {\n      target = `../artifacts/input-model/${modelInfo.input[0]?.id}`;\n    } else if (modelInfo.output?.length > 0) {\n      target = `../artifacts/output-model/${modelInfo.output[0]?.id}/`;\n    } else if (modelInfo.artifacts.length > 0) {\n      target = `../artifacts/other/${modelInfo.artifacts[0]?.key}/${modelInfo.artifacts[0]?.mode}`;\n    } else {\n      // no items\n      target = '../artifacts/input-model/input-model';\n    }\n    this.navigateToTarget(target);\n  }\n\n  ngOnDestroy(): void {\n    this.selectedRouterConfigSubs.unsubscribe();\n    this.artifactSubscription.unsubscribe();\n  }\n\n}\n","import {Action, createAction, props} from '@ngrx/store';\nimport {TableModel} from '../models/shared/models.model';\nimport {ISmCol} from '../shared/ui-components/data/table/table.consts';\nimport {ModelsViewModesEnum} from '../models/models.consts';\nimport {SortMeta} from 'primeng/api';\n\nconst SELECT_MODEL_PREFIX = 'SELECT_MODEL_';\n\n//COMMANDS:\nexport const ARCHIVE_SELECTED_MODELS = SELECT_MODEL_PREFIX + 'ARCHIVE_SELECTED_MODELS';\nexport const ADD_MANY_MODELS = SELECT_MODEL_PREFIX + 'ADD_MANY_MODELS';\nexport const GET_NEXT_MODELS = SELECT_MODEL_PREFIX + 'GET_NEXT_MODELS';\nexport const SET_MODELS = SELECT_MODEL_PREFIX + 'SET_MODELS';\nexport const SET_NO_MORE_MODELS = SELECT_MODEL_PREFIX + 'SET_NO_MORE_MODELS';\nexport const SET_SELECTED_MODELS = SELECT_MODEL_PREFIX + 'SET_SELECTED_MODELS';\nexport const SET_VIEW_MODE = SELECT_MODEL_PREFIX + 'SET_VIEW_MODE';\nexport const REMOVE_MANY_MODELS = SELECT_MODEL_PREFIX + 'REMOVE_MANY_MODELS';\nexport const UPDATE_ONE_MODELS = SELECT_MODEL_PREFIX + 'UPDATE_ONE_MODELS';\nexport const RESET_STATE = SELECT_MODEL_PREFIX + 'RESET_STATE';\n\n//EVENTS:\nexport const ALL_PROJECTS_MODE_CHANGED = SELECT_MODEL_PREFIX + 'ALL_PROJECTS_MODE_CHANGED';\n\nexport const GLOBAL_FILTER_CHANGED = SELECT_MODEL_PREFIX + 'GLOBAL_FILTER_CHANGED';\nexport const TABLE_SORT_CHANGED = SELECT_MODEL_PREFIX + 'TABLE_SORT_CHANGED';\nexport const SET_TABLE_SORT = SELECT_MODEL_PREFIX + 'SET_TABLE_SORT';\nexport const TABLE_FILTER_CHANGED = SELECT_MODEL_PREFIX + 'TABLE_FILTER_CHANGED';\n\nexport class GetNextModels implements Action {\n  readonly type = GET_NEXT_MODELS;\n}\n\nexport class SetModels implements Action {\n  readonly type = SET_MODELS;\n\n  constructor(public payload: Array<TableModel>) {\n  }\n}\n\nexport class SetNoMoreModels implements Action {\n  readonly type = SET_NO_MORE_MODELS;\n\n  constructor(public payload: boolean) {\n  }\n}\n\nexport class AddModels implements Action {\n  readonly type = ADD_MANY_MODELS;\n\n  constructor(public payload: Array<TableModel>) {\n  }\n}\n\nexport class RemoveModels implements Action {\n  readonly type = REMOVE_MANY_MODELS;\n\n  constructor(public payload: Array<TableModel['id']>) {\n  }\n}\n\nexport class UpdateModel implements Action {\n  readonly type = UPDATE_ONE_MODELS;\n\n  constructor(public payload: { id: TableModel['id'], changes: Partial<TableModel> }) {\n  }\n}\n\nexport class SetSelectedModels implements Action {\n  public type = SET_SELECTED_MODELS;\n\n  constructor(public payload: Array<TableModel>) {\n  }\n}\n\nexport const tableSortChanged = createAction(\n  TABLE_SORT_CHANGED,\n  props<{ isShift: boolean; colId: ISmCol['id'] }>()\n);\n\nexport const setTableSort = createAction(\n  SET_TABLE_SORT,\n  props<{ orders: SortMeta[] }>()\n);\n\nexport class TableFilterChanged implements Action {\n  public type = TABLE_FILTER_CHANGED;\n\n  constructor(public payload: { col: ISmCol; value: any }) {\n  }\n}\n\nexport class GlobalFilterChanged implements Action {\n  public type = GLOBAL_FILTER_CHANGED;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport const setCurrentScrollId = createAction(\n  SELECT_MODEL_PREFIX + ' [set current scrollId]',\n  props<{scrollId: string}>()\n);\n\nexport class ArchivAllProjectsdModeChanged implements Action {\n  public type = ALL_PROJECTS_MODE_CHANGED;\n\n  constructor(public payload: boolean) {\n  }\n}\n\nexport class ArchivedSelectedModels implements Action {\n  public type = ARCHIVE_SELECTED_MODELS;\n}\n\nexport class SetViewMode implements Action {\n  public type = SET_VIEW_MODE;\n  public payload: { viewMode: ModelsViewModesEnum };\n\n  constructor(viewMode: ModelsViewModesEnum) {\n    this.payload = {viewMode};\n  }\n}\n\nexport class ResetState implements Action {\n  readonly type = RESET_STATE;\n\n  constructor() {\n  }\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\n\nimport {MODELS_VIEW_MODES, ModelsViewModesEnum} from '../../webapp-common/models/models.consts';\nimport {TABLE_SORT_ORDER} from '../../webapp-common/shared/ui-components/data/table/table.consts';\nimport {SelectedModel} from '../../webapp-common/models/shared/models.model';\nimport {MODELS_TABLE_COL_FIELDS} from '../../webapp-common/models/shared/models.const';\nimport * as actions from './select-model.actions';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {SortMeta} from 'primeng/api';\nimport {setCurrentScrollId} from './select-model.actions';\n\nexport interface SelectModelState {\n  models: SelectedModel[];\n  selectedModels: SelectedModel[];\n  noMoreModels: boolean;\n  selectedModelSource: string;\n  modelToken: string;\n  viewMode: ModelsViewModesEnum;\n  allProjectsMode: boolean;\n  tableFilters: { [s: string]: FilterMetadata };\n  tableSortFields: SortMeta[];\n  scrollId: string;\n  globalFilter: string;\n}\n\nconst selectModelInitState: SelectModelState = {\n  models: [],\n  selectedModels: [],\n  noMoreModels: false,\n  selectedModelSource: null,\n  modelToken: null,\n  viewMode: MODELS_VIEW_MODES.TABLE,\n  allProjectsMode: true,\n  tableFilters: null,\n  tableSortFields: [{field: MODELS_TABLE_COL_FIELDS.CREATED, order: TABLE_SORT_ORDER.DESC}],\n  scrollId: null,\n  globalFilter: null,\n};\n\n\nexport function selectModelReducer<ActionReducer>(state: SelectModelState = selectModelInitState, action): SelectModelState {\n  switch (action.type) {\n    case actions.RESET_STATE:\n      return {...selectModelInitState};\n    case actions.ADD_MANY_MODELS:\n      return {...state, models: state.models.concat(action.payload)};\n    case actions.REMOVE_MANY_MODELS:\n      return {...state, models: state.models.filter(exp => !action.payload.includes(exp.id))};\n    case actions.UPDATE_ONE_MODELS:\n      return {\n        ...state, models:\n          state.models.map(ex => ex.id === action.payload.id ? {...ex, ...action.payload.changes} : ex)\n      };\n    case actions.SET_MODELS:\n      return {...state, models: action.payload};\n    case actions.SET_NO_MORE_MODELS:\n      return {...state, noMoreModels: action.payload};\n    case actions.setCurrentScrollId.type:\n      return {...state, scrollId: action.scrollId};\n    case actions.SET_SELECTED_MODELS:\n      return {...state, selectedModels: action.payload};\n    case actions.ALL_PROJECTS_MODE_CHANGED:\n      return {...state, allProjectsMode: action.payload};\n    case actions.SET_VIEW_MODE:\n      return {...state, viewMode: action.payload};\n    case actions.GLOBAL_FILTER_CHANGED:\n      return {...state, globalFilter: action.payload};\n    case actions.setTableSort.type:\n      return {...state, tableSortFields: action.orders};\n    case actions.TABLE_FILTER_CHANGED:\n      return {\n        ...state,\n        tableFilters: {\n          ...state.tableFilters,\n          [action.payload.col.id]: {value: action.payload.value, matchMode: action.payload.col.filterMatchMode}\n        }\n      };\n    default:\n      return state;\n  }\n}\n\n\nexport const models = createFeatureSelector<SelectModelState>('selectModel');\nexport const selectModelsList = createSelector(models, (state) => state ? state.models : []);\nexport const selectCurrentScrollId = createSelector(models, (state): string => state.scrollId);\nexport const selectGlobalFilter = createSelector(models, (state): string => state.globalFilter);\nexport const selectTableSortFields = createSelector(models, (state): SortMeta[] => state.tableSortFields);\nexport const selectTableFilters = createSelector(models, state => state.tableFilters);\nexport const selectIsAllProjectsMode = createSelector(models, (state): boolean => state.allProjectsMode);\nexport const selectViewMode = createSelector(models, (state): ModelsViewModesEnum => state.viewMode);\nexport const selectSelectedModels = createSelector(models, (state): Array<any> => state.selectedModels);\nexport const selectNoMoreModels = createSelector(models, (state): boolean => state.noMoreModels);\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport * as actions from './select-model.actions';\nimport {selectModelsList, selectSelectedModels, selectViewMode} from './select-model.reducer';\nimport {Observable} from 'rxjs';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {ISmCol, TableSortOrderEnum} from '../shared/ui-components/data/table/table.consts';\nimport {SelectedModel} from '../models/shared/models.model';\nimport {selectGlobalFilter, selectIsAllProjectsMode, selectNoMoreModels, selectTableFilters, selectTableSortFields} from './select-model.reducer';\nimport {MODELS_TABLE_COLS, ModelsViewModesEnum} from '../models/models.consts';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {selectProjectSystemTags, selectProjectTags} from '../core/reducers/projects.reducer';\nimport {getTags} from '../core/actions/projects.actions';\nimport {selectModelsUsers} from '../models/reducers';\nimport {User} from '../../business-logic/model/users/user';\nimport * as modelsActions from '../models/actions/models-view.actions';\nimport {SortMeta} from 'primeng/api';\n\n@Component({\n  selector   : 'sm-select-model',\n  templateUrl: './select-model.component.html',\n  styleUrls  : ['./select-model.component.scss']\n})\nexport class SelectModelComponent implements OnInit, OnDestroy {\n\n  public models$: Observable<SelectedModel[]>;\n  public tableSortFields$: Observable<SortMeta[]>;\n  public tableSortOrder$: Observable<TableSortOrderEnum>;\n  public noMoreModels$: Observable<boolean>;\n  public isAllProjects$: Observable<boolean>;\n  public tableFilters$: Observable<{[s: string]: FilterMetadata}>;\n  public searchValue$: Observable<string>;\n  public selectedModels$: Observable<Array<any>>;\n  public viewMode$: Observable<ModelsViewModesEnum>;\n  public users$: Observable<Array<User>>;\n  public tags$: Observable<string[]>;\n  public systemTags$: Observable<string[]>;\n  public tableCols = MODELS_TABLE_COLS;\n\n  constructor(private store: Store<any>, public dialogRef: MatDialogRef<ConfirmDialogComponent>) {\n    this.models$         = this.store.select(selectModelsList);\n    this.tableSortFields$ = this.store.select(selectTableSortFields);\n    this.tableFilters$   = this.store.select(selectTableFilters);\n    this.selectedModels$ = this.store.select(selectSelectedModels);\n    this.viewMode$       = this.store.select(selectViewMode);\n    this.searchValue$    = this.store.select(selectGlobalFilter);\n    this.noMoreModels$   = this.store.select(selectNoMoreModels);\n    this.isAllProjects$  = this.store.select(selectIsAllProjectsMode);\n    this.users$ = this.store.select(selectModelsUsers);\n    this.tags$ = this.store.select(selectProjectTags);\n    this.systemTags$ = this.store.select(selectProjectSystemTags);\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new actions.GetNextModels());\n    this.store.dispatch(modelsActions.getUsers());\n    this.store.dispatch(getTags());\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new actions.ResetState());\n  }\n\n  closeDialog(model: SelectedModel) {\n    if (model) {\n      return this.dialogRef.close(model);\n    }\n    return this.dialogRef.close(null);\n  }\n\n  getNextModels() {\n    this.store.dispatch(new actions.GetNextModels());\n  }\n\n  sortedChanged(sort: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.store.dispatch(actions.tableSortChanged({colId: sort.colId, isShift: sort.isShift}));\n  }\n\n  filterChanged(filter: {col: ISmCol; value: any}) {\n    this.store.dispatch(new actions.TableFilterChanged({col: filter.col, value: filter.value}));\n  }\n\n  onSearchValueChanged(value: string) {\n    this.store.dispatch(new actions.GlobalFilterChanged(value));\n  }\n\n  modelSelectionChanged(model: SelectedModel) {\n    this.closeDialog(model);\n  }\n\n  onIsAllProjectsChanged(isAllProjects: boolean) {\n    this.store.dispatch(new actions.ArchivAllProjectsdModeChanged(isAllProjects));\n  }\n\n}\n","<sm-dialog-template header=\"SELECT A PUBLIC MODEL\">\n  <div class=\"model-table-container\">\n    <div class=\"w-100 model-header\">\n      <sm-select-model-header\n        [searchActive]=\"true\"\n        [searchValue]=\"searchValue$ | async\"\n        [isAllProjects]=\"isAllProjects$ | async\"\n        [viewMode]=\"viewMode$ | async\"\n        [hideArchiveToggle]=\"true\"\n        [hideCreateNewButton]=\"true\"\n        [showAllProjectsToggle]=\"true\"\n        (searchValueChanged)=\"onSearchValueChanged($event)\"\n        (isAllProjectsChanged)=\"onIsAllProjectsChanged($event)\"\n      ></sm-select-model-header>\n    </div>\n    <div class=\"space-line\"></div>\n    <sm-models-table\n      class=\"model-info-container align-self-stretch\"\n      selectionMode=\"single\"\n      [enableMultiSelect]=\"false\"\n      [minimizedView]=\"false\"\n      [models]=\"models$ | async\"\n      [tableCols]=\"tableCols\"\n      [noMoreModels]=\"noMoreModels$ | async\"\n      [users]=\"users$ |async\"\n      [tags]=\"tags$ | async\"\n      [systemTags]=\"systemTags$ | async\"\n      [tableSortFields]=\"(tableSortFields$ | async)\"\n      [tableSortOrder]=\"(tableSortOrder$ | async)\"\n      [tableFilters]=\"(tableFilters$ | async)\"\n      [selectedModels]=\"selectedModels$ | async\"\n      [onlyPublished]=\"true\"\n      [colRatio]=\"0.75\"\n      (modelSelectionChanged)=\"modelSelectionChanged($event)\"\n      (sortedChanged)=\"sortedChanged($event)\"\n      (filterChanged)=\"filterChanged($event)\"\n      (loadMoreModels)=\"getNextModels()\"\n    >\n    </sm-models-table>\n  </div>\n</sm-dialog-template>\n","import {Component, OnDestroy} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {filter, map, take} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {selectSignedUrl} from '../../core/reducers/common-auth-reducer';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {getSignedUrl} from '../../core/actions/common-auth.actions';\n\n@Component({\n  selector: 'sm-base-clickable-artifact',\n  template: '<div></div>'\n})\nexport class BaseClickableArtifactComponent {\n  protected timestamp: number;\n\n  constructor(protected adminService: AdminService, protected store: Store<any>) {\n  }\n\n  artifactFilePathClicked(url: string) {\n    this.signUrl(url)\n      .subscribe(signedUrl => window.open(signedUrl, '_blank'));\n  }\n\n  protected signUrl(url: string) {\n    this.store.dispatch(getSignedUrl({url, config: {disableCache: this.timestamp}}));\n    return this.store.select(selectSignedUrl(url))\n      .pipe(\n        map((res => res?.signed)),\n        filter(signedUrl => !!signedUrl),\n        take(1)\n      );\n  }\n}\n","<div class=\"input-model-container\">\n  <sm-labeled-row label=\"MODEL NAME\">\n    <div class=\"d-flex justify-content-between\">\n      <span>\n        <a [href]=\"'projects/' + projectId + '/models/' + model?.id\" target=\"_blank\"><span>{{model?.name}}</span></a>\n        <i *ngIf=\"model?.uri && !isLocalFile\"\n           class=\"pointer fa fa-download ml-2\"\n           (click)=\"artifactFilePathClicked(model.uri)\"\n        ></i>\n        <sm-copy-clipboard *ngIf=\"model?.uri && isLocalFile\"\n                           label=\"\" [clipboardText]=\"model.uri\"\n                           class=\"pl-2 light\"\n                           [hideBackground]=\"true\"\n        ></sm-copy-clipboard>\n      </span>\n      <div *ngIf=\"editable\">\n        <i class=\"al-icon al-ico-edit al-color blue-300 sm-md pointer mr-2\"  smTooltip=\"Select model\" (click)=\"chooseModel()\"></i>\n        <i *ngIf=\"model?.id\" class=\"al-icon al-ico-trash al-color blue-300 sm-md pointer\" smTooltip=\"Remove model\" (click)=\"removeModel()\"></i>\n      </div>\n    </div>\n  </sm-labeled-row>\n  <sm-labeled-row *ngIf=\"showCreatedExperiment\" label=\"CREATING EXPERIMENT\">\n    <a [href]=\"'/projects/'+ ((source?.projectId) ? source?.projectId : '*') + '/experiments/' + (source? source?.experimentId: '')\"\n       target=\"_blank\">\n      {{source?.experimentName}}\n    </a>\n  </sm-labeled-row>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {IModelInfo, IModelInfoSource} from '../../shared/common-experiment-model.model';\nimport {MatDialog} from '@angular/material/dialog';\nimport {filter} from 'rxjs/operators';\nimport {Model} from '~/business-logic/model/models/model';\nimport {SelectModelComponent} from '@common/select-model/select-model.component';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {Store} from '@ngrx/store';\nimport {BaseClickableArtifactComponent} from '../base-clickable-artifact.component';\n\n\n@Component({\n  selector: 'sm-experiment-models-form-view',\n  templateUrl: './experiment-models-form-view.component.html',\n  styleUrls: ['./experiment-models-form-view.component.scss']\n})\nexport class ExperimentModelsFormViewComponent extends BaseClickableArtifactComponent {\n\n  public isLocalFile: boolean;\n  private _model: IModelInfo;\n  @Input() projectId: string;\n  @Input() editable: boolean;\n  @Input() networkDesign: string;\n  @Input() modelLabels: Model['labels'];\n  @Input() source: IModelInfoSource;\n  @Input() experimentName: string;\n  @Input() showCreatedExperiment: boolean = true;\n\n  @Input() set model(model: IModelInfo) {\n    this._model = model;\n    this.isLocalFile = model && model.uri && this.adminService.isLocalFile(model.uri);\n  }\n\n  get model(): IModelInfo {\n    return this._model;\n  }\n\n  @Output() modelSelected = new EventEmitter<Model>();\n\n  constructor(private dialog: MatDialog, protected adminService: AdminService, protected store: Store<any>) {\n    super(adminService, store);\n  }\n\n  public chooseModel() {\n    const chooseModelDialog = this.dialog.open(SelectModelComponent, {maxWidth: '95vw'});\n    chooseModelDialog.afterClosed()\n      .pipe(filter(model => !!model))\n      .subscribe((selectedModel: Model) => this.modelSelected.emit(selectedModel));\n  }\n\n  removeModel() {\n    this.modelSelected.emit({id: null});\n  }\n}\n","<textarea\n  #networkDesign\n  *ngIf=\"editable\"\n  class=\"preview-text resize-none\"\n  [value]=\"(formData || formData === 0) ? formData : ''\"\n></textarea>\n<sm-scroll-textarea\n  *ngIf=\"!editable\"\n  [formData]=\"formData\"\n  [editable]=\"editable\"\n  [showSpinner]=\"formData === null\"\n></sm-scroll-textarea>\n","import {Component, Input, ViewChild} from '@angular/core';\n\n@Component({\n  selector   : 'sm-experiment-network-design-form',\n  templateUrl: './experiment-network-design-form.component.html',\n  styleUrls  : ['./experiment-network-design-form.component.scss'],\n})\nexport class ExperimentNetworkDesignFormComponent {\n\n  @ViewChild('networkDesign', {static: true}) networkDesign: HTMLTextAreaElement;\n\n  @Input() formData: any;\n  @Input() editable: boolean;\n}\n\n\n\n","<ng-template\n  let-saving=\"saving\" let-editable=\"editable\"\n  let-experimentName=\"experimentName\" let-modelLabels=\"modelLabels\"\n  [ngTemplateOutletContext]=\"{ saving: saving$ | async,\n                               editable: editable$ | async,\n                               experimentName: selectedExperiment$ | async,\n                               modelLabels: modelLabels$ | async}\"\n  [ngTemplateOutlet]=\"template\" #template>\n<sm-editable-section #modelSection\n                     *ngIf=\"(model?.id || editable)\"\n                     [saving]=\"saving\"\n                     [editable]=\"editable && !outputMode\"\n                     [hideSaveButton]=\"true\"\n                     (cancelClicked)=\"cancelModelChange()\"\n                     (activateEditClicked)=\"activateEditChanged()\">\n  <sm-experiment-models-form-view\n    #experimentModelForm\n    [editable]=\"editable && modelSection.inEditMode\"\n    [model]=\"model\"\n    [experimentName]=\"experimentName\"\n    [projectId]=\"modelProjectId\"\n    [modelLabels]=\"modelLabels\"\n    [source]=\"source\"\n    [showCreatedExperiment]=\"!outputMode\"\n    (modelSelected)=\"onModelSelected($event)\">\n  </sm-experiment-models-form-view>\n</sm-editable-section>\n<sm-editable-section class=\"editable-design\"\n                     #prototext\n                     [saving]=\"saving\"\n                     [editable]=\"false\"\n                     [disableInEditMode]=\"true\"\n                     containerClass=\"h-100\"\n                     (cancelClicked)=\"cancelModelChange()\">\n  <sm-section-header *ngIf=\"model?.id\" label=\"MODEL CONFIGURATION\"></sm-section-header>\n  <sm-experiment-network-design-form\n    #networkDesignForm\n    *ngIf=\"model?.id\"\n    [editable]=\"false\"\n    [formData]=\"inputDesign\"\n  >\n  </sm-experiment-network-design-form>\n</sm-editable-section>\n\n</ng-template>\n","import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectExperimentModelInfoData, selectExperimentUserKnowledge, selectIsExperimentSaving} from '../../reducers';\nimport {IExperimentModelInfo, IModelInfo, IModelInfoSource} from '../../shared/common-experiment-model.model';\nimport {Model} from '../../../../business-logic/model/models/model';\nimport {combineLatest, Observable, Subject} from 'rxjs';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {experimentSectionsEnum} from '../../../../features/experiments/shared/experiments.const';\nimport {selectIsExperimentEditable, selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport * as commonInfoActions from '../../actions/common-experiments-info.actions';\nimport {ActivateEdit, CancelExperimentEdit, DeactivateEdit} from '../../actions/common-experiments-info.actions';\nimport {ExperimentModelsFormViewComponent} from '../../dumb/experiment-models-form-view/experiment-models-form-view.component';\nimport {getModelDesign} from '../../../tasks/tasks.utils';\nimport {distinctUntilKeyChanged, filter, map, takeUntil} from 'rxjs/operators';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {addMessage} from '../../../core/actions/layout.actions';\n\n\n@Component({\n  selector: 'sm-experiment-info-model',\n  templateUrl: './experiment-info-model.component.html',\n  styleUrls: ['./experiment-info-model.component.scss']\n})\nexport class ExperimentInfoModelComponent implements OnInit, OnDestroy {\n  public modelInfo$: Observable<IExperimentModelInfo>;\n  public editable$: Observable<boolean>;\n  public userKnowledge$: Observable<Map<experimentSectionsEnum, boolean>>;\n  public modelLabels$: Observable<Model['labels']>;\n  public saving$: Observable<boolean>;\n  public modelProjectId: string;\n  public inputDesign: any;\n  private modelId: string;\n  private unsubscribe$: Subject<boolean> = new Subject();\n  public model: IModelInfo | undefined;\n  public source: IModelInfoSource;\n  private models: IModelInfo[];\n  private routerModelId$: Observable<string>;\n  public selectedExperiment$: Observable<IExperimentInfo>;\n  public outputMode: boolean;\n\n  @ViewChild('experimentModelForm') experimentModelForm: ExperimentModelsFormViewComponent;\n\n  constructor(private store: Store<IExperimentInfoState>, private router: Router, private route: ActivatedRoute) {\n    this.modelInfo$ = this.store.select(selectExperimentModelInfoData);\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.userKnowledge$ = this.store.select(selectExperimentUserKnowledge);\n    this.saving$ = this.store.select(selectIsExperimentSaving);\n    this.selectedExperiment$ = this.store.select(selectSelectedExperiment);\n    this.routerModelId$ = this.route.params.pipe(\n      takeUntil(this.unsubscribe$),\n      filter(params => params.modelId),\n      distinctUntilKeyChanged('modelId'),\n      map(params => params.modelId));\n  }\n\n  ngOnInit() {\n\n\n    combineLatest([this.routerModelId$, this.modelInfo$]).pipe(takeUntil(this.unsubscribe$))\n      .subscribe(([modelId, formData]) => {\n        this.modelId = modelId;\n        this.outputMode = this.route.snapshot.data?.outputModel;\n        this.models = this.outputMode ? formData?.output : formData?.input;\n        this.model = this.models?.find(model => model.id === this.modelId);\n        this.source = {\n          experimentId: this.model?.task?.id,\n          projectId: this.model?.task?.project?.id,\n          experimentName: this.model?.task?.name\n        };\n        const design = getModelDesign(this.model?.design);\n        this.inputDesign = (design.value === undefined || design.key === undefined && Object.keys(design.value).length === 0) ? null : design.value;\n        this.modelProjectId = this.model?.project?.id ? this.model.project.id : '*';\n      });\n\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next(true);\n  }\n\n  onModelSelected(selectedModel: Model) {\n    const modelFoundIndex = this.models.findIndex(model => model.id === this.modelId);\n    if (this.models.map(m => m.id).includes(selectedModel.id)) {\n      this.store.dispatch(addMessage('warn', 'Selected model is already an input-model'))\n    } else {\n      let newModels: { model: string; name: string }[];\n      if (modelFoundIndex >= 0) {\n        newModels = this.models.map(model => model.id !== this.modelId ? {model: model.id, name: model.name} : {model: selectedModel.id, name: selectedModel.name})\n          .filter(model => model.model);\n      } else {\n        newModels = [...this.models.map(model => ({model: model.id, name: model.name})), {model: selectedModel.id, name: selectedModel.name}];\n      }\n      this.store.dispatch(new commonInfoActions.SetExperimentInfoData({models: {input: newModels as any}}));\n      this.store.dispatch(commonInfoActions.saveExperimentSection({models: {input: newModels as any}}));\n      this.router.navigate(['..', selectedModel.id || ''], {relativeTo: this.route, queryParamsHandling: 'preserve'});\n    }\n  }\n\n  cancelModelChange() {\n    this.store.dispatch(new DeactivateEdit());\n    this.store.dispatch(new CancelExperimentEdit());\n  }\n\n  activateEditChanged() {\n    this.store.dispatch(new ActivateEdit('model'));\n    !this.model?.id && this.experimentModelForm.chooseModel();\n  }\n}\n","  <sm-editable-section [disableInEditMode]=\"true\" [editable]=\"false\" *ngIf=\"artifact\">\n    <div>\n      <sm-labeled-row label=\"FILE PATH\">\n        <a *ngIf=\"artifact?.uri && !isLocalFile && isLinkable\" (click)=\"linkClicked($event)\" href=\"\">{{artifact?.uri}}</a>\n        <span class=\"uri\" *ngIf=\"!isLinkable\">{{artifact?.uri}}</span>\n        <i *ngIf=\"artifact?.uri && !isLocalFile && !isLinkable\"\n           class=\"pointer fa fa-download ml-2\"\n           (click)=\"artifactFilePathClicked(artifact.uri)\"\n        ></i>\n        <sm-copy-clipboard *ngIf=\"artifact?.uri && isLocalFile\"\n                           label=\"\" [clipboardText]=\"artifact.uri\"\n                           class=\"pl-2\"\n                           [hideBackground]=\"true\"\n        ></sm-copy-clipboard>\n      </sm-labeled-row>\n      <sm-labeled-row label=\"FILE SIZE\">{{artifact?.content_size ? (artifact?.content_size | filesize) : ''}}</sm-labeled-row>\n      <sm-labeled-row label=\"HASH\">{{artifact?.hash}}</sm-labeled-row>\n      <sm-labeled-row *ngFor=\"let data of artifact?.display_data\" [label]=\"data[0]| uppercase\">{{data[1]}}</sm-labeled-row>\n    </div>\n  </sm-editable-section>\n  <sm-editable-section class=\"editable-design\"\n                       [editable]=\"false\"\n                       [disableInEditMode]=\"true\"\n                       containerClass=\"h-100\">\n    <sm-section-header label=\"PREVIEW\"></sm-section-header>\n    <sm-experiment-network-design-form\n      [editable]=\"false\"\n      [formData]=\"artifact?.type_data?.preview\">\n    </sm-experiment-network-design-form>\n  </sm-editable-section>\n\n\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {Artifact} from '../../../../business-logic/model/tasks/artifact';\nimport {Store} from '@ngrx/store';\nimport {BaseClickableArtifactComponent} from '../base-clickable-artifact.component';\n\n@Component({\n  selector: 'sm-experiment-artifact-item-view',\n  templateUrl: './experiment-artifact-item-view.component.html',\n  styleUrls: ['./experiment-artifact-item-view.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentArtifactItemViewComponent extends BaseClickableArtifactComponent{\n\n  public isLocalFile: boolean;\n  private _artifact: Artifact;\n\n  @Input() editable: boolean;\n  public isLinkable: boolean;\n\n  @Input() set artifact(artifact: Artifact) {\n    this._artifact = artifact;\n    if(artifact){\n      this.timestamp = artifact.timestamp;\n      this.isLocalFile = artifact.uri && this.adminService.isLocalFile(artifact.uri);\n      this.isLinkable = artifact.type_data && ['text/html'].includes(artifact.type_data.content_type);\n    }\n  }\n\n  get artifact(): Artifact {\n    return this._artifact;\n  }\n\n  constructor(protected adminService: AdminService, protected store: Store<any>) {\n    super(adminService, store);\n  }\n\n  linkClicked(event: Event) {\n    this.signUrl(this.artifact.uri).subscribe(signed => {\n      const a = document.createElement('a');\n      a.href = signed;\n      a.target = '_blank';\n      a.click();\n    });\n    event.preventDefault();\n  }\n}\n","\n<sm-experiment-artifact-item-view\n  *ngIf=\"modelInfo$ | async\"\n  [artifact]=\"selectedArtifact\"\n  [editable]=\"false\">\n</sm-experiment-artifact-item-view>\n\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectExperimentModelInfoData} from '../../reducers';\nimport {IExperimentModelInfo} from '../../shared/common-experiment-model.model';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {distinctUntilChanged, filter, map} from 'rxjs/operators';\nimport {get} from 'lodash/fp';\nimport {Artifact} from '../../../../business-logic/model/tasks/artifact';\n\n@Component({\n  selector: 'sm-experiment-info-artifact-item',\n  templateUrl: './experiment-info-artifact-item.component.html',\n  styleUrls: ['./experiment-info-artifact-item.component.scss']\n})\nexport class ExperimentInfoArtifactItemComponent implements OnInit, OnDestroy {\n  public modelInfo$: Observable<IExperimentModelInfo>;\n  public editable$: Observable<boolean>;\n  public errors$: Observable<IExperimentInfoState['errors']>;\n  public saving$: Observable<boolean>;\n  private artifactSubscription: Subscription;\n  public selectedArtifact: Artifact;\n  public artifactKey$: Observable<any>;\n\n  constructor(private store: Store<IExperimentInfoState>) {\n    this.modelInfo$ = this.store.select(selectExperimentModelInfoData);\n    this.artifactKey$ = this.store.select(selectRouterParams)\n      .pipe(\n        map(params => {\n          return {key: get('artifactId', params), mode: get('mode', params)};\n        }),\n        filter(artifactId => !!artifactId),\n        distinctUntilChanged()\n      );\n  }\n\n  ngOnInit() {\n    this.artifactSubscription = combineLatest([this.artifactKey$, this.modelInfo$])\n      .pipe(filter(([artifactKey, modelInfo]) => !!(artifactKey && artifactKey.key) && !!modelInfo))\n      .subscribe(([artifactKey, modelInfo]) => {\n        this.selectedArtifact = modelInfo.artifacts.find(artifact => (artifact.key === artifactKey.key && artifact.mode === artifactKey.mode));\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.artifactSubscription) {\n      this.artifactSubscription.unsubscribe();\n    }\n  }\n\n}\n","<mat-expansion-panel [expanded]=\"true\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    USER PROPERTIES\n  </mat-expansion-panel-header>\n  <div\n    queryParamsHandling=\"preserve\"\n    [routerLink]=\"'hyper-param/properties'\"\n    [class.selected]=\"selectedHyperParam === 'properties'\"\n    class=\"hyper-container pointer ellipsis\"\n    routerLink=\"hyper-param\"\n  >\n    <i class='sm al-icon al-ico-data-audit al-color'\n       [class.white]= \"selectedHyperParam === 'properties'\"\n       [class.blue-400]=\"selectedHyperParam !== 'properties'\">\n    </i>Properties\n  </div>\n</mat-expansion-panel>\n<mat-expansion-panel expanded=\"true\" *ngIf=\"((hyperParams | keyvalue)|filterOut:'key':'properties')?.length>0\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    HYPER PARAMETERS\n  </mat-expansion-panel-header>\n  <div\n    *ngFor=\"let hyperParameter of (hyperParams | keyvalue)|filterOut:'key':'properties' | sort:'key'; trackBy: trackByFn\"\n    queryParamsHandling=\"preserve\"\n    [routerLink]=\"'hyper-param/' + (hyperParameter.key | safeUrlParameter)\"\n    [class.selected]=\"selectedHyperParam === (hyperParameter.key | safeUrlParameter)\"\n    class=\"hyper-container pointer ellipsis\"\n    routerLink=\"hyper-param\"\n  >\n    <i\n      class=\"sm al-icon al-ico-data-audit al-color\"\n      [class]=\"(selectedHyperParam === hyperParameter.key ? 'white' : 'blue-400')\"\n    ></i>{{hyperParameter.key | replaceViaMapPipe:sectionReplaceMap}}\n  </div>\n</mat-expansion-panel>\n\n<mat-expansion-panel [expanded]=\"true\" *ngIf=\"(configuration | keyvalue)?.length>0\">\n  <mat-expansion-panel-header collapsedHeight=\"40px\" expandedHeight=\"40px\" class=\"active\">\n    CONFIGURATION OBJECTS\n  </mat-expansion-panel-header>\n  <div\n    *ngFor=\"let confObj of configuration | keyvalue; trackBy: trackByFn\"\n    queryParamsHandling=\"preserve\"\n    [routerLink]=\"'configuration/' + (confObj.key | safeUrlParameter)\"\n    [class.selected]=\"selectedObject === confObj.key\"\n    class=\"hyper-container pointer ellipsis\"\n    routerLink=\"configuration\"\n  >\n    <i class=\"sm al-icon al-ico-data-audit al-color\" [class]=\"(selectedObject === confObj.key ? 'white' : 'blue-400')\"></i>{{confObj.key | replaceViaMapPipe:sectionReplaceMap}}\n  </div>\n\n</mat-expansion-panel>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, TrackByFunction} from '@angular/core';\nimport {Params} from '@angular/router';\n\n@Component({\n  selector   : 'sm-experiment-hyper-params-navbar',\n  templateUrl: './experiment-hyper-params-navbar.component.html',\n  styleUrls  : ['./experiment-hyper-params-navbar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentHyperParamsNavbarComponent {\n  sectionReplaceMap= {\n    _legacy:'General',\n    properties: 'User Properties',\n    design: 'General'\n  };\n  encodeURI = encodeURI;\n  @Input() hyperParams: { [key: string]: any};\n  @Input() configuration: { [key: string]: any};\n  @Input() selectedObject;\n  public activeSection: string;\n\n  @Input() set routerConfig(routerConfig: string) {\n    this.activeSection = routerConfig;\n    this.changeDetection.detectChanges();\n  }\n  @Input() disableAdd = true;\n\n  public selectedHyperParam: string;\n\n  @Input() set routerParams(routerParams: Params) {\n    this.selectedHyperParam = routerParams?.hyperParamId || null;\n    this.selectedObject = decodeURIComponent(routerParams?.configObject);\n    this.changeDetection.detectChanges();\n  };\n\n  @Output() artifactSelected = new EventEmitter();\n\n  constructor(private changeDetection: ChangeDetectorRef,) {\n  }\n\n  trackByFn: TrackByFunction<{key: string; value: any}> = (index: number, item: {key: string; value: any}) => item['key'];\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectExperimentConfiguration, selectExperimentHyperParamsInfoData, selectExperimentHyperParamsSelectedSectionFromRoute, selectExperimentSelectedConfigObjectFromRoute, selectIsExperimentSaving, selectIsSelectedExperimentInDev} from '../../reducers';\nimport {ICommonExperimentInfoState} from '../../reducers/common-experiment-info.reducer';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {selectBackdropActive} from '../../../core/reducers/view.reducer';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {selectIsExperimentEditable, selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {selectRouterConfig, selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {ParamsItem} from '../../../../business-logic/model/tasks/paramsItem';\nimport {debounceTime, filter, tap, withLatestFrom} from 'rxjs/operators';\nimport {ActivateEdit, getExperimentConfigurationNames, getExperimentConfigurationObj, SetExperimentFormErrors} from '../../actions/common-experiments-info.actions';\nimport {getOr, min} from 'lodash/fp';\n\n@Component({\n  selector: 'sm-experiment-info-hyper-parameters',\n  templateUrl: './experiment-info-hyper-parameters.component.html',\n  styleUrls: ['./experiment-info-hyper-parameters.component.scss']\n})\nexport class ExperimentInfoHyperParametersComponent implements OnInit, OnDestroy {\n\n  public selectedExperiment: IExperimentInfo;\n  public editable$: Observable<boolean>;\n  public isInDev$: Observable<boolean>;\n  public saving$: Observable<boolean>;\n  public backdropActive$: Observable<boolean>;\n  private selectedExperimentSubscription: Subscription;\n  public routerConfig$: Observable<string[]>;\n  public routerParams$: Observable<Params>;\n  public hyperParamsInfo$: Observable<{ [p: string]: { [p: string]: ParamsItem } }>;\n  public configuration$: Observable<any>;\n  private hyperParamsConfigSubscription: Subscription;\n  public minimized: boolean;\n\n  constructor(\n    private store: Store<ICommonExperimentInfoState>,\n    protected router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.minimized = getOr(false, 'data.minimized', this.route.snapshot.routeConfig);\n    this.hyperParamsInfo$ = this.store.select(selectExperimentHyperParamsInfoData);\n    this.configuration$ = this.store.select(selectExperimentConfiguration);\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.isInDev$ = this.store.select(selectIsSelectedExperimentInDev);\n    this.saving$ = this.store.select(selectIsExperimentSaving);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n    this.routerConfig$ = this.store.select(selectRouterConfig);\n    this.routerParams$ = this.store.select(selectRouterParams);\n  }\n\n  ngOnInit() {\n    this.selectedExperimentSubscription = this.store.select(selectSelectedExperiment)\n      .pipe(\n        tap((selectedExperiment) => this.selectedExperiment = selectedExperiment),\n        filter((selectedExperiment) => selectedExperiment && !selectedExperiment.configuration)\n      )\n      .subscribe(selectedExperiment => {\n        this.store.dispatch(getExperimentConfigurationNames({experimentId: selectedExperiment.id}));\n        this.store.dispatch(getExperimentConfigurationObj());\n      });\n    this.hyperParamsConfigSubscription = combineLatest([\n      this.hyperParamsInfo$,\n      this.configuration$\n    ]).pipe(\n      debounceTime(0),\n      withLatestFrom(\n        this.store.select(selectExperimentHyperParamsSelectedSectionFromRoute),\n        this.store.select(selectExperimentSelectedConfigObjectFromRoute)\n      )).subscribe(([[hyperparams, configuration], selectedHyperParam, selectedConfig]) => {\n      if ((hyperparams && configuration && !(selectedHyperParam in hyperparams) && !(selectedConfig in configuration))) {\n        this.router.navigate(['hyper-param', min(Object.keys(hyperparams))], {relativeTo: this.route, replaceUrl: true});\n      }\n    });\n    this.store.dispatch(new SetExperimentFormErrors(null));\n  }\n\n  ngOnDestroy(): void {\n    this.selectedExperimentSubscription.unsubscribe();\n    this.hyperParamsConfigSubscription.unsubscribe();\n  }\n\n  activateEditChanged(e) {\n    this.store.dispatch(new ActivateEdit(e.sectionName));\n  }\n\n}\n","<sm-overlay [backdropActive]=\"backdropActive$|async\"></sm-overlay>\n<div class=\"h-100 d-flex\">\n  <sm-experiment-hyper-params-navbar\n    [class.minimized]=\"minimized\"\n    [hyperParams]=\"(hyperParamsInfo$| async)\"\n    [configuration]=\"configuration$ | async\"\n    [routerConfig]=\"(routerConfig$ | async)[minimized ? 5 : 6]\"\n    [routerParams]=\"routerParams$ | async\"\n    [disableAdd]=\"!(selectedExperiment?.status === 'created')\"\n  ></sm-experiment-hyper-params-navbar>\n  <div class=\"hyper-col\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","<ng-template\n  let-saving=\"saving\" let-editable=\"editable\"\n  let-configurationObjectName=\"configurationObjectName\"\n  [ngTemplateOutletContext]=\"{ saving: saving$ | async,\n                               editable: editable$ | async,\n                               configurationObjectName: selectedConfigObj$ | async}\"\n  [ngTemplateOutlet]=\"template\" #template>\n  <sm-editable-section [editable]=\"false\">\n    <sm-section-header [label]=\"configurationObjectName | replaceViaMapPipe:sectionReplaceMap | uppercase\"></sm-section-header>\n    <sm-labeled-row label=\"TYPE\">{{formData?.type === 'legacy' ? '' : formData?.type}}</sm-labeled-row>\n    <sm-labeled-row label=\"DESCRIPTION\">{{formData?.description}}</sm-labeled-row>\n  </sm-editable-section>\n\n  <!-- **************** CONFIGURATION OBJECT **************** -->\n  <sm-editable-section class=\"editable-design\"\n                       #prototext\n                       [saving]=\"saving\"\n                       [editable]=\"editable\"\n                       [disableInEditMode]=\"true\"\n                       (cancelClicked)=\"cancelModelChange()\"\n                       (activateEditClicked)=\"activateEditChanged('prototext'); editPrototext()\">\n    <sm-section-header label=\"CONFIGURATION OBJECT\"></sm-section-header>\n    <sm-experiment-network-design-form\n      [editable]=\"false\"\n      [formData]=\"formData === null ? null : formData?.value\"\n    >\n    </sm-experiment-network-design-form>\n    <button extra-buttons\n            *ngIf=\"formData?.value\"\n            class=\"btn-dark-fill mr-3 flex-1\"\n            (click)=\"clearPrototext()\">\n      <i class=\"p-1 fa fa-trash\"></i>\n      CLEAR\n    </button>\n\n  </sm-editable-section>\n</ng-template>\n","import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectExperimentConfigObj, selectExperimentInfoErrors, selectExperimentSelectedConfigObjectFromRoute, selectExperimentUserKnowledge, selectIsExperimentSaving} from '../../reducers';\nimport {Model} from '../../../../business-logic/model/models/model';\nimport {Observable, Subscription} from 'rxjs';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {experimentSectionsEnum} from '../../../../features/experiments/shared/experiments.const';\nimport {selectIsExperimentEditable, selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {ActivateEdit, CancelExperimentEdit, DeactivateEdit, getExperimentConfigurationObj, saveExperimentConfigObj, SetExperimentErrors, SetExperimentFormErrors} from '../../actions/common-experiments-info.actions';\nimport {ConfigurationItem} from '../../../../business-logic/model/tasks/configurationItem';\nimport {EditJsonComponent} from '../../../shared/ui-components/overlay/edit-json/edit-json.component';\nimport {take} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {EditableSectionComponent} from '../../../shared/ui-components/panel/editable-section/editable-section.component';\n\n@Component({\n  selector: 'sm-experiment-info-task-model',\n  templateUrl: './experiment-info-task-model.component.html',\n  styleUrls: ['./experiment-info-task-model.component.scss']\n})\nexport class ExperimentInfoTaskModelComponent implements OnInit, OnDestroy {\n  public selectedExperimentSubscription: Subscription;\n  private selectedExperiment: IExperimentInfo;\n  public editable$: Observable<boolean>;\n  public errors$: Observable<IExperimentInfoState['errors']>;\n  public userKnowledge$: Observable<Map<experimentSectionsEnum, boolean>>;\n  public modelLabels$: Observable<Model['labels']>;\n  public saving$: Observable<boolean>;\n  private configInfo$: Observable<ConfigurationItem>;\n  public selectedConfigObj$: Observable<string>;\n  private selectedConfigObjSubscription: Subscription;\n  private formDataSubscription: Subscription;\n  public formData: ConfigurationItem;\n\n  public sectionReplaceMap = {\n    _legacy: 'General',\n    properties: 'User Properties',\n    design: 'General'\n  };\n\n  @ViewChild('prototext') prototext: EditableSectionComponent;\n\n  constructor(private store: Store<IExperimentInfoState>, private dialog: MatDialog) {\n    this.configInfo$ = this.store.select(selectExperimentConfigObj);\n    this.selectedConfigObj$ = this.store.select(selectExperimentSelectedConfigObjectFromRoute);\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.errors$ = this.store.select(selectExperimentInfoErrors);\n    this.userKnowledge$ = this.store.select(selectExperimentUserKnowledge);\n    this.saving$ = this.store.select(selectIsExperimentSaving);\n  }\n\n  ngOnInit() {\n    this.formDataSubscription = this.configInfo$.subscribe(formData => {\n      this.formData = formData;\n    });\n    this.selectedExperimentSubscription = this.store.select(selectSelectedExperiment)\n      .subscribe(selectedExperiment => {\n        this.selectedExperiment = selectedExperiment;\n      });\n    this.selectedConfigObjSubscription = this.selectedConfigObj$.subscribe((confObjName) => {\n      if (confObjName) {\n        this.store.dispatch(getExperimentConfigurationObj());\n      }\n    });\n    this.store.dispatch(new SetExperimentFormErrors(null));\n  }\n\n  ngOnDestroy(): void {\n    this.selectedExperimentSubscription.unsubscribe();\n    this.selectedConfigObjSubscription.unsubscribe();\n  }\n\n  onFormValuesChanged(event: { field: string; value: any }) {\n    // this.store.dispatch(new infoActions.ExperimentDataUpdated({id: this.selectedExperiment.id, changes: {[event.field]: event.value}}));\n  }\n\n  onFormErrorsChanged(event: { field: string; errors: any }) {\n    this.store.dispatch(new SetExperimentErrors({[event.field]: event.errors}));\n  }\n\n  saveModelData(configuration: ConfigurationItem[]) {\n    this.store.dispatch(saveExperimentConfigObj({configuration}));\n    this.store.dispatch(new DeactivateEdit());\n  }\n\n  cancelModelChange() {\n    this.store.dispatch(new DeactivateEdit());\n    this.store.dispatch(new CancelExperimentEdit());\n  }\n\n  activateEditChanged(sectionName: string) {\n    this.store.dispatch(new ActivateEdit(sectionName));\n  }\n\n  editPrototext() {\n    const editPrototextDialog = this.dialog.open(EditJsonComponent, {\n      data: {textData: this.formData?.value, readOnly: false, title: 'EDIT CONFIGURATION', typeJson: false}\n    });\n\n    editPrototextDialog.afterClosed().pipe(take(1)).subscribe((data) => {\n      if (data === undefined) {\n        this.prototext.cancelClickedEvent();\n      } else {\n        this.saveModelData([{name: this.formData.name, type: this.formData.type, value: data, description: this.formData.description}]);\n        this.store.dispatch(new DeactivateEdit());\n      }\n    });\n  }\n\n  clearPrototext() {\n    const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'Clear model configuration',\n        body: 'Are you sure you want to clear the entire contents of Model Configuration?',\n        yes: 'Clear',\n        no: 'Keep',\n        iconClass: 'al-icon al-ico-trash al-color blue-300',\n      }\n    });\n\n    confirmDialogRef.afterClosed().pipe(take(1)).subscribe((confirmed) => {\n      if (confirmed) {\n        this.activateEditChanged('prototext');\n        this.saveModelData([{name: this.formData.name, type: this.formData.type, value: '', description: this.formData.description}]);\n        this.store.dispatch(new DeactivateEdit());\n      }\n    });\n  }\n\n}\n","<form [class.editable]=\"editable\" #hyperParameters=\"ngForm\">\n  <cdk-virtual-scroll-viewport #formContainer class=\"form-container\" itemSize=\"60\" minBufferPx=\"280\" maxBufferPx=\"560\">\n    <ng-container *ngIf=\"editable\">\n      <div *ngFor=\"let parameter of formData; let index= index\" class=\"w-100 d-flex\">\n        <mat-form-field\n          [hintLabel]=\"parameterKey.invalid && parameterKey?.errors?.required? '*Required': ''\"\n          appearance=\"outline\"\n          class=\"strength\">\n          <input\n            #parameterKey=\"ngModel\"\n            [(ngModel)]=\"parameter['name']\"\n            placeholder=\"Parameter\"\n            name=\"parameterKey-{{parameter.id}}\"\n            matInput\n            smUniqueNameValidator\n            [class.highlight-text]=\"(searchedText?.length > 0) && parameter['name'].includes(searchedText)\"\n            [class.current-match]=\"searchIndexList[matchIndex]?.index===index && searchIndexList[matchIndex]?.col==='name'\"\n            [existingNames]=\"formNames(parameter.id)\"\n            required/>\n          <mat-error *ngIf=\"parameterKey.invalid && parameterKey?.errors?.required\">\n            Required\n          </mat-error>\n          <mat-error *ngIf=\"parameterKey.invalid && parameterKey?.errors?.smNotAllowedStringsValidator\">\n            .(dot) $(dollar) and space are not allowed in parameter key.\n          </mat-error>\n          <mat-error *ngIf=\"parameterKey.invalid && parameterKey?.errors?.uniqueName\">\n            key already exists\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\"\n                        class=\"strength\">\n          <input\n            #parameterValue=\"ngModel\"\n            [(ngModel)]=\"parameter['value']\"\n            name=\"parameterValue-{{parameter.id}}\"\n            placeholder=\"Value\"\n            [class.highlight-text]=\"(searchedText?.length > 0) && parameter['value'].includes(searchedText)\"\n            [class.current-match]=\"searchIndexList[matchIndex]?.index===index && searchIndexList[matchIndex]?.col==='value'\"\n            matInput/>\n        </mat-form-field>\n        <div class=\"remove-step\">\n          <i (click)=\"removeRow(index)\" class=\"al-icon al-ico-trash al-color blue-300 sm-md pointer flashing-icon mb-2\"></i>\n        </div>\n      </div>\n    </ng-container>\n  </cdk-virtual-scroll-viewport>\n</form>\n<button *ngIf=\"editable\" class=\"btn btn-dark-fill add-parameter\" (click)=\"addRow()\"><i class=\"fas fa-plus\"></i> ADD PARAMETER</button>\n<div class=\"table-container\" *ngIf=\"!editable\">\n  <sm-table\n    #parametersTable\n    [columns]=\"cols\"\n    [tableData]=\"formData\"\n    [enableTableSearch]=\"true\"\n    [globalFilterFields]=\"['name', 'value','description']\"\n    [resizableColumns]=\"true\"\n    [noHeader]=\"true\"\n    [simple]=\"true\"\n    [virtualScroll]=\"true\"\n    [rowHeight]=\"32\"\n    (rowClicked)=\"rowActivated($event)\"\n  >\n    <ng-template pTemplate=\"body\"\n                 let-col\n                 let-i=\"rowIndex\"\n                 let-row=\"rowData\">\n      <ng-container *ngIf=\"col.id === 'description'; else defaultRow\">\n        <span *ngIf=\"row.type!=='legacy' && (row.description || row.type)\" class=\"allow-multi-space pointer\" customClass=\"hyper-parameters-tooltip parameter-tooltip\"\n              smTooltip=\"{{(row.type ? ('Type: '+ row.type+'\\n') : '') + (row?.description|| '')}}\"><i class=\"al-icon al-ico-description\"></i></span>\n      </ng-container>\n      <ng-template #defaultRow>\n        <span [class.name]=\"col.id==='name'\" smTooltip=\"{{row[col.id]}}\">\n          <span *ngFor=\"let part of (searchedText ? row[col.id].split(searchedText) : [row[col.id]]); let last=last\">{{part}}<span class=\"highlight-text\" [class.current-match]=\"searchIndexList[matchIndex]?.index===i && searchIndexList[matchIndex]?.col===col.id\" *ngIf=\"!last\">{{searchedText}}</span></span></span>\n      </ng-template>\n    </ng-template>\n  </sm-table>\n</div>\n\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input, OnChanges,\n  OnDestroy,\n  Output,\n  QueryList, SimpleChanges,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {IExperimentInfoFormComponent} from '../../../../features/experiments/shared/experiment-info.model';\nimport {HELP_TEXTS} from '../../shared/common-experiments.const';\nimport {cloneDeep} from 'lodash/fp';\nimport {v4 as uuidV4} from 'uuid';\nimport {NgForm} from '@angular/forms';\nimport {ParamsItem} from '../../../../business-logic/model/tasks/paramsItem';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {Subscription} from 'rxjs';\nimport {TableComponent} from '../../../shared/ui-components/data/table/table.component';\nimport {isEqual} from 'lodash/fp';\n\n\n@Component({\n  selector: 'sm-experiment-execution-parameters',\n  templateUrl: './experiment-execution-parameters.component.html',\n  styleUrls: ['./experiment-execution-parameters.component.scss']\n})\nexport class ExperimentExecutionParametersComponent implements IExperimentInfoFormComponent, OnDestroy, AfterViewInit, OnChanges {\n  private _formData: { name?: string; description?: string; section?: string; id: string; type?: string; value?: string }[] = [];\n  private formContainersSub: Subscription;\n\n  search: string = '';\n  lastSearchIndex = -1;\n  public searchIndexList: {index:number, col: string}[];\n  public matchIndex: number;\n\n  formNames(id) {\n    return this.formData.filter(parameter => parameter.id !== id).map(parameter => parameter.name);\n  }\n\n  @ViewChild('hyperParameters') hyperParameters: NgForm;\n  @ViewChild('parametersTable') executionParametersTable: TableComponent;\n\n  private formContainer: CdkVirtualScrollViewport;\n  @ViewChildren('formContainer') formContainers: QueryList<CdkVirtualScrollViewport>;\n  @ViewChild(CdkVirtualScrollViewport) viewPort: CdkVirtualScrollViewport;\n  @Output() formDataChanged = new EventEmitter<{ field: string; value: ParamsItem[] }>();\n  @Output() searchCounterChanged = new EventEmitter<number>();\n  @Output() resetSearch = new EventEmitter();\n  @Output() scrollToResultCounterChanged = new EventEmitter<number>();\n  @Input() section;\n\n  @Input() set formData(formData: { name?: string; description?: string; section?: string; id?: string; type?: string; value?: string }[]) {\n    this._formData = cloneDeep(formData).map((row: ParamsItem) => ({...row, id: uuidV4()}));\n  }\n\n  get formData(): { name?: string; description?: string; section?: string; id?: string; type?: string; value?: string }[] {\n    return this._formData;\n  }\n\n\n  @Input() editable: boolean;\n  @Input() searchedText: string;\n\n  HELP_TEXTS = HELP_TEXTS;\n  public cols = [\n    {id: 'name', style: {width: '40%'}},\n    {id: 'value', style: {width: '40%'}},\n    {id: 'description', style: {width: '48px'}}\n  ] as ISmCol[];\n  private clickedRow: number;\n\n  ngAfterViewInit() {\n    this.formContainersSub = this.formContainers.changes\n      .subscribe((list: QueryList<CdkVirtualScrollViewport>) => {\n        this.formContainer = list.first;\n        if (this.formContainer && this.clickedRow !== null) {\n          this.formContainer.scrollToIndex(this.clickedRow, 'smooth');\n          this.clickedRow = null;\n        }\n      });\n  }\n\n  addRow() {\n    this.formData.push({\n      id: uuidV4(),\n      section: this.section,\n      name: '',\n      value: '',\n      description: '',\n      type: ''\n    });\n    window.setTimeout(() => {\n      const height = this.viewPort.elementRef.nativeElement.scrollHeight;\n      this.viewPort.scrollToIndex(height, 'smooth');\n    }, 50);\n  }\n\n  removeRow(index) {\n    this.formData.splice(index, 1);\n  }\n\n  rowActivated({data}: { data: any; e: MouseEvent }) {\n    this.clickedRow = this.formData.findIndex(row => row.name === data.name);\n  }\n\n  ngOnDestroy(): void {\n    this.formContainersSub?.unsubscribe();\n  }\n\n  jumpToResult(counterIndex: number) {\n    this.matchIndex = counterIndex;\n    if(this.editable){\n      this.viewPort.scrollToIndex(this.searchIndexList[counterIndex]?.index, 'smooth');\n    } else {\n      this.executionParametersTable.scrollToIndex(this.searchIndexList[counterIndex]?.index);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if(changes?.formData && (!changes.formData?.firstChange) && !isEqual(changes.formData.currentValue, changes.formData.previousValue)){\n      this.matchIndex = undefined;\n      this.searchIndexList = [];\n      this.resetSearch.emit();\n    }\n    if (changes?.searchedText) {\n      let searchResultsCounter = 0;\n      const searchedIndexList = [];\n      if (changes?.searchedText?.currentValue) {\n        this.formData.forEach((parameter, index) => {\n          if (parameter?.name.includes(changes.searchedText.currentValue)) {\n            searchResultsCounter++;\n            searchedIndexList.push({index, col:'name'});\n          }\n          if (parameter?.value.includes(changes.searchedText.currentValue)){\n            searchResultsCounter++;\n            searchedIndexList.push({index, col:'value'});\n          }\n        });\n      }\n      this.searchCounterChanged.emit(searchResultsCounter);\n      this.scrollToResultCounterChanged.emit(-1);\n      this.searchIndexList = searchedIndexList;\n    }\n  }\n\n}\n","<sm-overlay [backdropActive]=\"backdropActive$|async\"></sm-overlay>\n<sm-editable-section #parameterSection\n                     *ngIf=\"(selectedSectionHyperParams$| async).length>0 || propSection\"\n                     [editable]=\"(!isExample) && ((editable$ | async) || propSection)\"\n                     [disableSave]=\"!executionParamsForm?.hyperParameters?.form?.valid\"\n                     [saving]=\"saving$ | async\"\n                     (cancelClicked)=\"cancelHyperParametersChange()\"\n                     (saveClicked)=\"sectionSaved()\"\n                     (activateEditClicked)=\"activateEditChanged('hyperparams')\">\n  <sm-section-header [label]=\"(selectedSection | replaceViaMapPipe:sectionReplaceMap) | uppercase \"></sm-section-header>\n  <sm-search search-button\n             #search\n             class=\"table-search dark-theme\"\n             [enableJumpToNextResult]=\"true\"\n             [minimumChars]=\"0\"\n             [debounceTime]=\"0\"\n             [expandOnHover]=\"true\"\n             [searchResultsCount]=\"searchResultsCount\"\n             (valueChanged)=\"searchTable($event)\"\n             (jumpToResult)=\"executionParamsForm.jumpToResult($event)\"\n  ></sm-search>\n  <sm-experiment-execution-parameters\n    #executionParamsForm\n    class=\"form-section\"\n    [searchedText]=\"searchedText\"\n    [editable]=\"(!isExample) && ((editable$ | async) || propSection) && parameterSection.inEditMode\"\n    [section]=\"selectedSection\"\n    [formData]=\"(selectedSectionHyperParams$ | async) | sort:'name'\"\n    (formDataChanged)=\"onFormValuesChanged($event)\"\n    (searchCounterChanged)=\"searchCounterChanged($event)\"\n    (resetSearch)=\"search.clear(false)\"\n    (scrollToResultCounterChanged)=\"scrollIndexCounterChanged($event)\"\n  ></sm-experiment-execution-parameters>\n</sm-editable-section>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {\n  selectExperimentHyperParamsSelectedSectionFromRoute,\n  selectExperimentHyperParamsSelectedSectionParams,\n  selectIsExperimentSaving,\n  selectIsSelectedExperimentInDev\n} from '../../reducers';\nimport {ICommonExperimentInfoState} from '../../reducers/common-experiment-info.reducer';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {selectBackdropActive} from '../../../core/reducers/view.reducer';\nimport {Observable, Subscription} from 'rxjs';\nimport {selectIsExperimentEditable, selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {selectRouterConfig} from '../../../core/reducers/router-reducer';\nimport {\n  ActivateEdit,\n  CancelExperimentEdit,\n  DeactivateEdit,\n  deleteHyperParamsSection,\n  saveHyperParamsSection,\n  SetExperimentFormErrors,\n  updateExperimentAtPath\n} from '../../actions/common-experiments-info.actions';\nimport {ParamsItem} from '../../../../business-logic/model/tasks/paramsItem';\nimport {HELP_TEXTS} from '../../shared/common-experiments.const';\nimport {Router} from '@angular/router';\nimport {ExperimentExecutionParametersComponent} from '../../dumb/experiment-execution-parameters/experiment-execution-parameters.component';\nimport {isReadOnly} from '../../../shared/utils/shared-utils';\n\n@Component({\n  selector   : 'sm-experiment-info-hyper-parameters-form-container',\n  templateUrl: './experiment-info-hyper-parameters-form-container.component.html',\n  styleUrls  : ['./experiment-info-hyper-parameters-form-container.component.scss']\n})\nexport class ExperimentInfoHyperParametersFormContainerComponent implements OnInit, OnDestroy {\n  HELP_TEXTS = HELP_TEXTS;\n  sectionReplaceMap = {\n    _legacy: 'General',\n    properties: 'User Properties',\n    design: 'General'\n  };\n  @ViewChild('parameterSection', {static: false}) parameterSection;\n  @ViewChild('executionParamsForm', {static: false}) executionParamsForm: ExperimentExecutionParametersComponent;\n  public selectedSectionHyperParams$: Observable<ParamsItem[]>;\n  public editable$: Observable<boolean>;\n  public isInDev$: Observable<boolean>;\n  public saving$: Observable<boolean>;\n  public backdropActive$: Observable<boolean>;\n  private selectedExperimentSubscription: Subscription;\n  public routerConfig$: Observable<string[]>;\n  public selectedSection$: Observable<string>;\n  private selectedSectionSubscription: Subscription;\n  public selectedSection: string;\n  public isExample: boolean;\n  public selectedExperiment$: Observable<IExperimentInfo>;\n  public propSection: boolean;\n  public searchedText: string;\n  public searchResultsCount: number;\n  public scrollIndexCounter: number;\n\n  constructor(private store: Store<ICommonExperimentInfoState>, protected router: Router, private cdr: ChangeDetectorRef) {\n\n    this.selectedSectionHyperParams$ = this.store.select(selectExperimentHyperParamsSelectedSectionParams);\n    this.editable$ = this.store.select(selectIsExperimentEditable);\n    this.selectedSection$ = this.store.select(selectExperimentHyperParamsSelectedSectionFromRoute);\n    this.isInDev$ = this.store.select(selectIsSelectedExperimentInDev);\n    this.saving$ = this.store.select(selectIsExperimentSaving);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n    this.routerConfig$ = this.store.select(selectRouterConfig);\n    this.selectedExperiment$ = this.store.select(selectSelectedExperiment);\n\n    this.store.dispatch(new SetExperimentFormErrors(null));\n    this.selectedSectionSubscription = this.selectedSection$.subscribe(section => {\n      this.selectedSection = section;\n      this.propSection = section === 'properties';\n    });\n  }\n\n  ngOnInit() {\n    this.selectedExperimentSubscription = this.store.select(selectSelectedExperiment)\n      .subscribe(selectedExperiment => {\n        this.isExample = isReadOnly(selectedExperiment);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.selectedExperimentSubscription?.unsubscribe();\n    this.selectedSectionSubscription?.unsubscribe();\n  }\n\n\n  cancelHyperParametersChange() {\n    this.store.dispatch(updateExperimentAtPath({path: ('hyperparams.' + this.selectedSection ), value: this.executionParamsForm.formData}));\n    this.store.dispatch(new DeactivateEdit());\n    this.store.dispatch(new CancelExperimentEdit());\n  }\n\n  activateEditChanged(sectionName: string) {\n    this.store.dispatch(new ActivateEdit(sectionName));\n  }\n\n  onFormValuesChanged(event: { field: string; value: any }) {\n    this.store.dispatch(updateExperimentAtPath({path: ('hyperparams.' + event.field), value: event.value}));\n  }\n\n  sectionSaved() {\n    if (this.executionParamsForm.formData.length > 0) {\n      this.store.dispatch(saveHyperParamsSection({hyperparams: this.executionParamsForm.formData}));\n    } else {\n      this.store.dispatch(deleteHyperParamsSection({section: this.selectedSection}));\n    }\n    this.store.dispatch(new DeactivateEdit());\n  }\n\n  searchTable($event: string) {\n    this.searchedText = $event;\n    this.cdr.detectChanges();\n  }\n\n  searchCounterChanged(count: number) {\n    this.searchResultsCount = count;\n    this.cdr.detectChanges();\n  }\n\n  scrollIndexCounterChanged(counterIndex: number) {\n    this.scrollIndexCounter = counterIndex;\n    this.cdr.detectChanges();\n  }\n}\n","import {Component} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {filter, map} from 'rxjs/operators';\nimport {tap} from 'rxjs/operators';\nimport {isReadOnly} from '../../../shared/utils/shared-utils';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {selectExperimentInfoData, selectIsExperimentEditable, selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {ExperimentDetailsUpdated} from '../../actions/common-experiments-info.actions';\n\n@Component({\n  selector   : 'sm-experiment-info-general',\n  templateUrl: './experiment-info-general.component.html',\n  styleUrls  : ['./experiment-info-general.component.scss']\n})\nexport class ExperimentInfoGeneralComponent {\n\n  public selectedExperiment$: Observable<IExperimentInfo>;\n  public editable$: Observable<boolean>;\n  public experimentInfoData$: Observable<IExperimentInfo>;\n  public isExample: boolean;\n  private selectedExperiment: IExperimentInfo;\n\n  constructor(private store: Store<IExperimentInfoState>) {\n    this.selectedExperiment$ = this.store.select(selectSelectedExperiment)\n      .pipe(\n        filter(experiment => !!experiment),\n        map(experiment => this.selectedExperiment = experiment),\n        tap((experiment) => this.isExample = isReadOnly(experiment))\n      );\n    this.experimentInfoData$ = this.store.select(selectExperimentInfoData);\n    this.editable$           = this.store.select(selectIsExperimentEditable);\n  }\n\n  commentChanged(comment) {\n    this.store.dispatch(new ExperimentDetailsUpdated({id: this.selectedExperiment.id, changes: {comment: comment}}));\n  }\n\n}\n","<sm-experiment-general-info\n  [experiment]=\"selectedExperiment$ | async\"\n  [experimentComment]=\"(experimentInfoData$ | async)?.comment\"\n  [editable]=\"(editable$ | async)\"\n  [isExample]=\"isExample\"\n  (commentChanged)=\"commentChanged($event)\"\n></sm-experiment-general-info>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {selectRouterConfig, selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {get, getOr} from 'lodash/fp';\nimport {select, Store} from '@ngrx/store';\nimport {interval, Observable, Subscription} from 'rxjs';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {distinctUntilChanged, filter, map, tap, withLatestFrom} from 'rxjs/operators';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {ExperimentOutputState} from '../../../../features/experiments/reducers/experiment-output.reducer';\nimport {\n  selectExperimentInfoData,\n  selectIsSharedAndNotOwner,\n  selectSelectedExperiment\n} from '../../../../features/experiments/reducers';\nimport {ResetExperimentMetrics, toggleSettings} from '../../actions/common-experiment-output.actions';\nimport * as infoActions from '../../actions/common-experiments-info.actions';\nimport {selectAppVisible, selectAutoRefresh, selectBackdropActive} from '../../../core/reducers/view.reducer';\nimport {addMessage, setAutoRefresh} from '../../../core/actions/layout.actions';\nimport {AUTO_REFRESH_INTERVAL, MESSAGES_SEVERITY} from '../../../../app.constants';\nimport {selectIsExperimentInEditMode, selectSelectedExperiments} from '../../reducers';\nimport {isReadOnly} from '../../../shared/utils/shared-utils';\nimport {ExperimentDetailsUpdated} from '../../actions/common-experiments-info.actions';\n\n@Component({\n  selector: 'sm-base-experiment-output',\n  template: ''\n})\nexport abstract class BaseExperimentOutputComponent implements OnInit, OnDestroy {\n\n  public selectedExperiment: IExperimentInfo;\n  private subs = new Subscription();\n  public infoData$: Observable<any>;\n  public backdropActive$: Observable<any>;\n  public currentComponent: string;\n  public currentMetric: string;\n  public minimized: boolean;\n  public autoRefreshState$;\n  private isExperimentInEditMode$: Observable<boolean>;\n  private projectId: Project['id'];\n  public experimentId: string;\n  public routerConfig: string[];\n  private isAppVisible$: Observable<boolean>;\n  isSharedAndNotOwner$: Observable<boolean>;\n  public isExample: boolean;\n\n  constructor(private store: Store<ExperimentOutputState>, private router: Router, private route: ActivatedRoute) {\n    this.infoData$ = this.store.select(selectExperimentInfoData);\n    this.isSharedAndNotOwner$ = this.store.select((selectIsSharedAndNotOwner));\n    this.autoRefreshState$ = this.store.select(selectAutoRefresh);\n    this.isExperimentInEditMode$ = this.store.select(selectIsExperimentInEditMode);\n    this.isAppVisible$ = this.store.select(selectAppVisible);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n\n  }\n\n  ngOnInit() {\n    this.minimized = getOr(false, 'data.minimized', this.route.snapshot.routeConfig);\n    this.subs.add(this.store.select(selectRouterConfig).subscribe(routerConfig => {\n      this.routerConfig = routerConfig;\n    }));\n\n    this.subs.add(this.store.pipe(\n        select(selectRouterParams),\n        tap((params) => this.projectId = params.projectId),\n        map(params => get('experimentId', params)),\n        filter(experimentId => !!experimentId),\n        tap((experimentId) => this.experimentId = experimentId),\n        distinctUntilChanged(),\n        withLatestFrom(this.store.select(selectSelectedExperiments))\n      ).subscribe(([experimentId, selectedExperiments]) => {\n        this.selectedExperiment = selectedExperiments.find(experiment => experiment.id === experimentId);\n        this.isExample = isReadOnly( this.selectedExperiment);\n        this.store.dispatch(new ResetExperimentMetrics());\n        this.store.dispatch(new infoActions.ResetExperimentInfo());\n        this.store.dispatch(new infoActions.GetExperimentInfo(experimentId));\n      })\n    );\n    this.subs.add(interval(AUTO_REFRESH_INTERVAL).pipe(\n        withLatestFrom(this.autoRefreshState$, this.isAppVisible$, this.isExperimentInEditMode$),\n        filter(([, autoRefreshState, isVisible, isExperimentInEditMode]) => isVisible && autoRefreshState && !isExperimentInEditMode &&!this.minimized)\n      ).subscribe(() => {\n        this.refresh(true);\n      })\n    );\n    this.subs.add(this.store.pipe(select(selectSelectedExperiment),\n      filter(experiment => experiment?.id === this.experimentId))\n      .subscribe(experiment => {\n        this.selectedExperiment = experiment;\n        this.isExample = isReadOnly( this.selectedExperiment);\n      })\n    );\n  }\n\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n\n  returnToInfo(experiment) {\n    this.router.navigateByUrl(`projects/${this.projectId}/experiments/${experiment.id}`);\n  }\n\n  setAutoRefresh($event: boolean) {\n    this.store.dispatch(setAutoRefresh({autoRefresh: $event}));\n  }\n\n  refresh(isAutorefresh) {\n    if (isAutorefresh) {\n      this.store.dispatch(new infoActions.AutoRefreshExperimentInfo(this.experimentId));\n    } else {\n      this.store.dispatch(new infoActions.GetExperimentInfo(this.experimentId));\n    }\n  }\n\n  minimizeView() {\n    const part = this.route.firstChild.routeConfig.path;\n    if (['log', 'metrics/scalar', 'metrics/plots', 'debugImages'].includes(part)) {\n      this.router.navigateByUrl(`projects/${this.projectId}/experiments/${this.experimentId}/info-output/${part}`);\n    } else {\n      const parts = this.router ? this.router.url.split('/') : window.location.pathname.split('/');;\n      parts.splice(5, 1);\n      this.router.navigateByUrl(parts.join('/'));\n    }\n  }\n\n  toggleSettingsBar() {\n    this.store.dispatch(toggleSettings());\n  }\n  updateExperimentName(name) {\n    if (name.trim().length > 2) {\n      this.store.dispatch(new ExperimentDetailsUpdated({id: this.selectedExperiment.id, changes: {name}}));\n    } else {\n      this.store.dispatch(addMessage(MESSAGES_SEVERITY.ERROR, 'Name must be more than three letters long'));\n    }\n  }\n}\n","<sm-overlay [backdropActive]=\"backdropActive$|async\"></sm-overlay>\n<div class=\"experiment-output-container light-theme\">\n  <sm-experiment-info-header\n    *ngIf=\"!minimized\"\n    (minimizeClicked)=\"minimizeView()\"\n    [experiment]=\"selectedExperiment\"\n    [infoData]=\"infoData$ | async\"\n    [editable]=\"!isExample\"\n    [showMenu]=\"true\"\n    [showMinimize]=\"true\"\n    [isSharedAndNotOwner]=\"isSharedAndNotOwner$ | async\"\n    (experimentNameChanged)=\"updateExperimentName($event)\"\n\n  >\n  </sm-experiment-info-header>\n  <nav [class.minimized]=\"minimized\" [smOverflows]=\"'nav'\" (onOverflows)=\"overflow = $event\">\n    <ng-container *ngIf=\"!minimized\">\n      <span [routerLink]=\"['execution']\"  queryParamsHandling=\"preserve\">\n        <sm-navbar-item header=\"execution\" [active]=\"routerConfig.includes('execution')\"></sm-navbar-item>\n      </span>\n        <span [routerLink]=\"['hyper-params/hyper-param/_empty_']\" [class.disabled]=\"routerConfig.includes('hyper-params')\" queryParamsHandling=\"merge\">\n        <sm-navbar-item header=\"Configuration\" [active]=\"routerConfig.includes('hyper-params')\"></sm-navbar-item>\n      </span>\n        <span [routerLink]=\"['artifacts']\" [routerLinkActive]=\"'disabled'\">\n        <sm-navbar-item header=\"artifacts\" [active]=\"routerConfig.includes('artifacts')\"></sm-navbar-item>\n      </span>\n      <span [routerLink]=\"['general']\"  queryParamsHandling=\"preserve\">\n        <sm-navbar-item header=\"info\" [active]=\"routerConfig.includes('general')\"></sm-navbar-item>\n      </span>\n    </ng-container>\n\n    <span [matMenuTriggerFor]=\"results\" *ngIf=\"!minimized && overflow\">\n      <sm-navbar-item header=\"results\" [multi]=\"true\" [active]=\"console.active || scalar.active || plots.active || samples.active\"></sm-navbar-item>\n    </span>\n\n    <mat-menu #results=\"matMenu\">\n      <button mat-menu-item [routerLink]=\"['log']\" [class.active]=\"routerConfig.includes('log')\">CONSOLE</button>\n      <button mat-menu-item [routerLink]=\"['metrics','scalar']\" [class.active]=\"routerConfig.includes('metrics') && routerConfig.includes('scalar')\">SCALARS</button>\n      <button mat-menu-item [routerLink]=\"['metrics','plots']\" [class.active]=\"routerConfig.includes('metrics') && routerConfig.includes('plots')\">PLOTS</button>\n      <button mat-menu-item [routerLink]=\"['debugImages']\" [class.active]=\"routerConfig.includes('debugImages')\">DEBUG SAMPLES</button>\n    </mat-menu>\n\n    <div class=\"d-inline-block\" [style.visibility]=\"overflow && !minimized ? 'hidden' : 'visible'\">\n      <span [routerLink]=\"['log']\" queryParamsHandling=\"preserve\">\n        <sm-navbar-item #console header=\"console\" [active]=\"routerConfig.includes('log')\"></sm-navbar-item>\n      </span>\n      <span [routerLink]=\"['metrics','scalar']\" queryParamsHandling=\"preserve\">\n        <sm-navbar-item #scalar header=\"Scalars\" [active]=\"routerConfig.includes('metrics') && routerConfig.includes('scalar')\"></sm-navbar-item>\n      </span>\n      <span [routerLink]=\"['metrics','plots']\" queryParamsHandling=\"preserve\">\n        <sm-navbar-item #plots header=\"PLOTS\" [active]=\"routerConfig.includes('metrics') && routerConfig.includes('plots')\"></sm-navbar-item>\n      </span>\n      <span [routerLink]=\"['debugImages']\" queryParamsHandling=\"preserve\">\n        <sm-navbar-item #samples header=\"DEBUG SAMPLES\" [active]=\"routerConfig.includes('debugImages')\"></sm-navbar-item>\n      </span>\n    </div>\n    <span class=\"refresh-position\">\n      <sm-experiment-settings\n        [class.maximized]=\"!minimized\"\n        [showSettings]=\"routerConfig.includes('scalar') && minimized\"\n        (toggleSettings)=\"toggleSettingsBar()\">\n      </sm-experiment-settings>\n      <sm-refresh-button\n        *ngIf=\" ! minimized\"\n        class=\"light-theme\"\n        [autoRefreshState]=\"autoRefreshState$ | async\"\n        (refreshList)=\"refresh(false)\"\n        (setAutoRefresh)=\"setAutoRefresh($event)\"\n      >\n      </sm-refresh-button>\n    </span>\n  </nav>\n  <div class=\"output-body\" [class.minimized]=\"minimized\">\n    <router-outlet class=\"output-outlet\"></router-outlet>\n  </div>\n</div>\n","import {Component} from '@angular/core';\nimport {BaseExperimentOutputComponent} from '../../../../webapp-common/experiments/containers/experiment-ouptut/base-experiment-output.component';\n\n@Component({\n  selector: 'sm-experiment-output',\n  templateUrl: './experiment-output.component.html',\n  styleUrls: ['../../../../webapp-common/experiments/containers/experiment-ouptut/base-experiment-output.component.scss']\n})\nexport class ExperimentOutputComponent extends BaseExperimentOutputComponent {\n  public overflow: boolean;\n}\n","<div class=\"h-100 row\">\n  <div *ngIf=\"!minimized\" class=\"list-container\">\n    <sm-graph-settings-bar\n      [verticalLayout]=\"true\"\n      [smoothWeight]=\"smoothWeight$ | async\"\n      [xAxisType]=\"xAxisType$ | async\"\n      [groupBy]=\"groupBy\"\n      [groupByOptions]=\"groupByOptions\"\n      (changeWeight)=\"changeSmoothness($event)\"\n      (toggleSettings)=\"toggleSettingsBar()\"\n      (changeXAxisType)=\"changeXAxisType($event)\"\n      (changeGroupBy)=\"changeGroupBy($event)\"\n    ></sm-graph-settings-bar>\n    <sm-selectable-grouped-filter-list\n      [list]=\"scalarList\"\n      [selected]=\"selectedGraph\"\n      [checkedList]=\"listOfHidden | async\"\n      [searchTerm]=\"searchTerm$ | async\"\n      (itemSelect)=\"metricSelected($event)\"\n      (hiddenChanged)=\"hiddenListChanged($event)\"\n      (searchTermChanged)=\"searchTermChanged($event)\"\n    >\n    </sm-selectable-grouped-filter-list>\n  </div>\n  <div class=\"graphs-container\" [class.maximized]=\"!minimized\">\n    <sm-experiment-graphs\n      [isGroupGraphs]=\"false\"\n      [metrics]=\"graphs\"\n      [hiddenList]=\"listOfHidden | async\"\n      [legendStringLength]=\"minimized? 14 : undefined\"\n      [minimized]=\"minimized\"\n      [smoothWeight]=\"smoothWeight$ | async\"\n      [xAxisType]=\"xAxisType$ | async\"\n      [groupBy]=\"groupBy\"\n      [showSettings]=\"showSettingsBar\"\n      [splitSize]=\"splitSize$ | async\"\n      [breakPoint]=\"900\"\n      (changeWeight)=\"changeSmoothness($event)\"\n      (resetGraphs)=\"resetMetrics()\"\n      (toggleSettings)=\"toggleSettingsBar()\"\n      (changeXAxisType)=\"changeXAxisType($event)\"\n      (changeGroupBy)=\"changeGroupBy($event)\"\n    >\n    </sm-experiment-graphs>\n  </div>\n</div>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {selectExperimentInfoHistograms, selectExperimentMetricsSearchTerm, selectIsExperimentInProgress, selectSelectedExperimentSettings, selectSelectedSettingsGroupBy, selectSelectedSettingsHiddenScalar, selectSelectedSettingsSmoothWeight, selectSelectedSettingsxAxisType, selectShowSettings, selectSplitSize} from '../../reducers';\nimport {Observable, Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {scrollToElement} from '../../../shared/utils/shared-utils';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {of} from 'rxjs';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {ExperimentScalarRequested, ResetExperimentMetrics, SetExperimentMetricsSearchTerm, SetExperimentSettings} from '../../actions/common-experiment-output.actions';\nimport {convertScalars} from '../../../tasks/tasks.utils';\nimport {ScalarKeyEnum} from '../../../../business-logic/model/events/scalarKeyEnum';\nimport {selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {GroupByCharts} from '../../reducers/common-experiment-output.reducer';\nimport {GroupedList} from '../../../shared/ui-components/data/selectable-grouped-filter-list/selectable-grouped-filter-list.component';\nimport {ExtFrame} from '../../../shared/experiment-graphs/single-graph/plotly-graph-base';\n\n\n@Component({\n  selector: 'sm-experiment-output-scalars',\n  templateUrl: './experiment-output-scalars.component.html',\n  styleUrls: ['./experiment-output-scalars.component.scss']\n})\nexport class ExperimentOutputScalarsComponent implements OnInit, OnDestroy {\n  public scalarList: GroupedList = {};\n  public selectedGraph: string = null;\n\n  private subs = new Subscription();\n  private experimentId: string;\n  private routerParams$: Observable<any>;\n  private selectedExperimentId$: Observable<any>;\n  public refreshDisabled: boolean;\n  public listOfHidden: Observable<Array<any>>;\n  public scalars$: any;\n  public experimentSettings$: Observable<any>;\n  public searchTerm$: Observable<string>;\n  public minimized: boolean = false;\n  public graphs: { [key: string]: ExtFrame[] };\n  public selectIsExperimentPendingRunning: Observable<boolean>;\n  public smoothWeight$: Observable<number>;\n  public showSettingsBar: boolean = false;\n  public xAxisType$: Observable<ScalarKeyEnum>;\n  public groupBy$: Observable<GroupByCharts>;\n  public splitSize$: Observable<number>;\n  public groupBy: GroupByCharts;\n  private scalars: any;\n\n  groupByOptions = [\n    {\n      name: 'Metric',\n      value: GroupByCharts.Metric\n    },\n    {\n      name: 'None',\n      value: GroupByCharts.None\n    }\n  ];\n\n  constructor(private store: Store<IExperimentInfoState>, private router: Router, private activeRoute: ActivatedRoute, private changeDetection: ChangeDetectorRef) {\n    this.searchTerm$ = this.store.pipe(select(selectExperimentMetricsSearchTerm));\n    this.splitSize$ = this.store.pipe(select(selectSplitSize));\n\n    this.scalars$ = this.store.select(selectExperimentInfoHistograms)\n      .pipe(\n        filter((metrics) => !!metrics),\n      );\n\n    this.experimentSettings$ = this.store.pipe(\n      select(selectSelectedExperimentSettings),\n      filter(settings => !!settings),\n      map(settings => settings ? settings.selectedScalar : null),\n      distinctUntilChanged()\n    );\n    this.smoothWeight$ = this.store.select(selectSelectedSettingsSmoothWeight);\n    this.xAxisType$ = this.store.select(selectSelectedSettingsxAxisType);\n    this.groupBy$ = this.store.select(selectSelectedSettingsGroupBy);\n\n    this.routerParams$ = this.store.pipe(\n      select(selectRouterParams),\n      filter(params => !!params.experimentId),\n      tap(params => this.experimentId = params.experimentId),\n      distinctUntilChanged()\n    );\n\n    this.selectIsExperimentPendingRunning = this.store.pipe(\n      select(selectIsExperimentInProgress)\n    );\n\n    this.selectedExperimentId$ = this.store.pipe(\n      select(selectRouterParams),\n      filter(params => !!params.experimentId),\n      distinctUntilChanged()\n    );\n\n    this.subs.add(this.xAxisType$\n      .pipe(filter((axis) => !!axis && !!this.experimentId))\n      .subscribe(() => this.store.dispatch(new ExperimentScalarRequested(this.experimentId)))\n    );\n\n    this.subs.add(this.groupBy$\n      .pipe(filter((groupBy) => !!groupBy))\n      .subscribe(groupBy => {\n        this.groupBy = groupBy;\n        this.prepareGraphsAndUpdate(this.scalars);\n      })\n    );\n\n    this.subs.add(this.store.select(selectShowSettings)\n      .subscribe((show) => this.showSettingsBar = show)\n    );\n  }\n\n  ngOnInit() {\n    this.minimized = this.activeRoute.snapshot.routeConfig.data.minimized;\n    this.listOfHidden = this.minimized ? of([]) : this.store.pipe(select(selectSelectedSettingsHiddenScalar))\n      .pipe(distinctUntilChanged());\n\n    this.subs.add(this.store.select(selectSelectedExperiment)\n      .pipe(\n        filter(experiment => !!experiment),\n        distinctUntilChanged()\n      )\n      .subscribe(experiment => {\n        this.experimentId = experiment.id;\n        this.refresh();\n      })\n    );\n\n    this.subs.add(this.scalars$\n      .subscribe(scalars => {\n        this.refreshDisabled = false;\n        this.scalars = scalars;\n        this.prepareGraphsAndUpdate(scalars);\n      })\n    );\n\n    this.subs.add(this.experimentSettings$\n      .subscribe((selectedScalar) => {\n        this.selectedGraph = selectedScalar;\n        scrollToElement(this.selectedGraph);\n      })\n    );\n\n    this.subs.add(this.routerParams$\n      .subscribe(params => {\n        if (!this.experimentId || this.experimentId !== params.experimentId) {\n          this.graphs = undefined;\n          this.resetMetrics();\n          // this.store.dispatch(new ExperimentScalarRequested(params.experimentId));\n          this.store.dispatch(new SetExperimentMetricsSearchTerm({searchTerm: ''}));\n        }\n      })\n    );\n  }\n\n  private prepareGraphsAndUpdate(scalars: GroupedList) {\n    if (scalars) {\n      const splittedScalars = this.groupBy === 'metric' ? scalars : this.splitScalars(scalars);\n      this.scalarList = this.prepareScalarList(splittedScalars);\n      this.graphs = convertScalars(splittedScalars, this.experimentId);\n      this.changeDetection.detectChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n    this.resetMetrics();\n  }\n\n  private prepareScalarList(metricsScalar: GroupedList): GroupedList {\n    return Object.keys(metricsScalar || []).reduce((acc, curr) => {\n      acc[curr] = {};\n      return acc;\n    }, {});\n  }\n\n  metricSelected(id) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {selectedScalar: id}}));\n  }\n\n\n  hiddenListChanged(hiddenList) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {hiddenMetricsScalar: hiddenList}}));\n  }\n\n  refresh() {\n    if (!this.refreshDisabled) {\n      this.refreshDisabled = true;\n      this.store.dispatch(new ExperimentScalarRequested(this.experimentId));\n    }\n  }\n\n  searchTermChanged(searchTerm: string) {\n    this.store.dispatch(new SetExperimentMetricsSearchTerm({searchTerm}));\n  }\n\n  resetMetrics() {\n    this.store.dispatch(new ResetExperimentMetrics());\n  }\n\n  changeSmoothness($event: any) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {smoothWeight: $event}}));\n  }\n\n  changeXAxisType($event: ScalarKeyEnum) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {xAxisType: $event}}));\n  }\n\n  changeGroupBy($event: GroupByCharts) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {groupBy: $event}}));\n  }\n\n  toggleSettingsBar() {\n    this.showSettingsBar = !this.showSettingsBar;\n  }\n\n  private splitScalars(scalars: GroupedList): GroupedList {\n    return Object.entries(scalars).reduce((acc, [metric, variantGraph]) => {\n      Object.entries(variantGraph).forEach(([variant, graph]) => {\n        acc[metric + ' / ' + variant] = {[metric + ' / ' + variant]: graph};\n      });\n      return acc;\n    }, {});\n  }\n}\n","<div *ngIf=\" !minimized\" class=\"list-container\">\n  <sm-selectable-filter-list\n    checkAllIcon=\"fa-eye\"\n    placeholder=\"Find plots\"\n    [list]=\"plotsList\"\n    [selected]=\"selectedGraph\"\n    [checkedList]=\"listOfHidden | async\"\n    [searchTerm]=\"searchTerm$ | async\"\n    (itemSelect)=\"metricSelected($event)\"\n    (hiddenChanged)=\"hiddenListChanged($event)\"\n    (searchTermChanged)=\"searchTermChanged($event)\"\n  >\n  </sm-selectable-filter-list>\n</div>\n<div class=\"graphs-container\" [ngClass]=\"{'col-20': !minimized, 'col-24': minimized}\">\n  <sm-experiment-graphs\n    [isGroupGraphs]=\"true\"\n    [hiddenList]=\"listOfHidden | async\"\n    [metrics]=\"graphs\"\n    [legendStringLength]=\"minimized? 14 : undefined\"\n    [minimized]=\"minimized\"\n    [splitSize]=\"splitSize$ | async\"\n    (resetGraphs)=\"resetMetrics()\"\n  >\n  </sm-experiment-graphs>\n</div>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {\n  selectExperimentInfoPlots, selectExperimentMetricsSearchTerm,\n  selectIsExperimentInProgress, selectSelectedExperimentSettings,\n  selectSelectedSettingsHiddenPlot, selectSplitSize\n} from '../../reducers';\nimport {Observable, of, Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {SelectableListItem} from '../../../shared/ui-components/data/selectable-list/selectable-list.model';\nimport {distinctUntilChanged, filter, map} from 'rxjs/operators';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {scrollToElement} from '../../../shared/utils/shared-utils';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {\n  experimentPlotsRequested, ResetExperimentMetrics, SetExperimentMetricsSearchTerm,\n  SetExperimentSettings\n} from '../../actions/common-experiment-output.actions';\nimport {convertPlots, groupIterations, sortMetricsList} from '../../../tasks/tasks.utils';\nimport {selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {ExtFrame} from '@common/shared/experiment-graphs/single-graph/plotly-graph-base';\nimport {MetricsPlotEvent} from '../../../../business-logic/model/events/metricsPlotEvent';\n\n@Component({\n  selector: 'sm-experiment-output-plots',\n  templateUrl: './experiment-output-plots.component.html',\n  styleUrls: ['./experiment-output-plots.component.scss']\n})\nexport class ExperimentOutputPlotsComponent implements OnInit, OnDestroy {\n\n  public plotsList: Array<SelectableListItem> = [];\n  public selectedGraph: string = null;\n\n  private plotsSubscription: Subscription;\n  private settingsSubscription: Subscription;\n  private routerParamsSubscription: Subscription;\n  private experimentId: string;\n  private routerParams$: Observable<any>;\n  public listOfHidden: Observable<Array<any>>;\n  public plots$: Observable<MetricsPlotEvent[]>;\n  public experimentSettings$: Observable<any>;\n  public searchTerm$: Observable<string>;\n  public minimized: boolean = false;\n  public graphs: { [key: string]: ExtFrame[] };\n  public refreshDisabled: boolean;\n  public selectIsExperimentPendingRunning: Observable<boolean>;\n  private selectedExperimentSubscription: Subscription;\n  public splitSize$: Observable<number>;\n\n\n  constructor(private store: Store<IExperimentInfoState>, private router: Router, private activeRoute: ActivatedRoute, private changeDetection: ChangeDetectorRef) {\n    this.searchTerm$ = this.store.pipe(select(selectExperimentMetricsSearchTerm));\n    this.splitSize$ = this.store.pipe(select(selectSplitSize));\n\n    this.plots$ = this.store.pipe(\n      select(selectExperimentInfoPlots),\n      distinctUntilChanged(),\n      filter(metrics => !!metrics)\n    );\n\n    this.experimentSettings$ = this.store.pipe(\n      select(selectSelectedExperimentSettings),\n      filter(settings => !!settings),\n      map(settings => settings ? settings.selectedPlot : null),\n      distinctUntilChanged()\n    );\n\n    this.routerParams$ = this.store.pipe(\n      select(selectRouterParams),\n      filter(params => !!params.experimentId),\n      distinctUntilChanged()\n    );\n\n    this.selectIsExperimentPendingRunning = this.store.pipe(\n      select(selectIsExperimentInProgress)\n    );\n  }\n\n  ngOnInit() {\n    this.minimized = this.activeRoute.snapshot.routeConfig.data.minimized;\n    this.listOfHidden = this.minimized ? of([]) : this.store.select(selectSelectedSettingsHiddenPlot);\n    this.plotsSubscription = this.plots$\n      .subscribe((metricsPlots) => {\n        this.refreshDisabled = false;\n        const groupedPlots = groupIterations(metricsPlots);\n        this.plotsList = this.preparePlotsList(groupedPlots);\n        this.graphs = convertPlots({plots: groupedPlots, experimentId: this.experimentId});\n        this.changeDetection.detectChanges();\n      });\n\n    this.settingsSubscription = this.experimentSettings$\n      .subscribe((selectedPlot) => {\n        this.selectedGraph = selectedPlot;\n        scrollToElement(this.selectedGraph);\n      });\n\n    this.routerParamsSubscription = this.routerParams$\n      .subscribe(params => {\n        if (!this.experimentId || this.experimentId !== params.experimentId) {\n          this.graphs = undefined;\n          this.resetMetrics();\n          // this.store.dispatch(new ExperimentPlotsRequested(params.experimentId));\n          this.store.dispatch(new SetExperimentMetricsSearchTerm({searchTerm: ''}));\n        }\n        this.experimentId = params.experimentId;\n      });\n\n    this.selectedExperimentSubscription = this.store.select(selectSelectedExperiment)\n      .pipe(\n        filter(experiment => !!experiment),\n        distinctUntilChanged()\n      )\n      .subscribe(experiment => {\n        this.experimentId = experiment.id;\n        this.refresh();\n      });\n\n  }\n\n  ngOnDestroy() {\n    this.resetMetrics();\n    this.plotsSubscription.unsubscribe();\n    this.settingsSubscription.unsubscribe();\n    this.routerParamsSubscription.unsubscribe();\n    this.selectedExperimentSubscription.unsubscribe();\n    this.resetMetrics();\n  }\n\n  private preparePlotsList(groupedPlots: {[title: string]: MetricsPlotEvent[]}): Array<SelectableListItem> {\n    const list = groupedPlots ? Object.keys(groupedPlots) : [];\n    const sortedList = sortMetricsList(list);\n    return sortedList.map((item) => ({name: item, value: item}));\n  }\n\n  metricSelected(id: string) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {selectedPlot: id}}));\n  }\n\n  hiddenListChanged(hiddenList: string[]) {\n    this.store.dispatch(new SetExperimentSettings({id: this.experimentId, changes: {hiddenMetricsPlot: hiddenList}}));\n  }\n\n  refresh() {\n    if (!this.refreshDisabled) {\n      this.refreshDisabled = true;\n      this.store.dispatch(experimentPlotsRequested({task: this.experimentId}));\n    }\n  }\n\n  searchTermChanged(searchTerm: string) {\n    this.store.dispatch(new SetExperimentMetricsSearchTerm({searchTerm}));\n  }\n\n  resetMetrics() {\n    this.store.dispatch(new ResetExperimentMetrics());\n  }\n\n}\n","<cdk-virtual-scroll-viewport itemSize=\"25\" minBufferPx=\"1000\" maxBufferPx=\"2000\"\n  class=\"viewport\" tabindex=\"0\" #LogContainer [class.dark-theme]=\"isDarkTheme\">\n  <div *cdkVirtualFor=\"let line of lines; trackBy: trackByTimestampFn\" class=\"log-line\" [class.separator]=\"line.separator\">\n    <div class=\"timestamp\">{{line.timestamp | date:'y-MM-dd HH:mm:ss'}}</div>\n    <div class=\"entry\" *ngIf=\"line.hasAnsi; else regularLine\" [innerHTML]=\"line.entry | safe:'html'\"></div>\n    <ng-template #regularLine>\n      <div class=\"entry\">{{line.entry}}</div>\n    </ng-template>\n  </div>\n</cdk-virtual-scroll-viewport>\n<mat-spinner *ngIf=\"fetching\" [diameter]=\"80\" [strokeWidth]=\"8\"></mat-spinner>\n<button *ngIf=\"!fetching\" class=\"btn btn-primary get-last\" [class.at-end]=\"canRefresh\" (click)=\"getLast()\">Jump to end</button>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ViewChild,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef, AfterViewInit, ElementRef\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {last, findIndex} from 'lodash/fp';\nimport Convert from 'ansi-to-html';\nimport {Log} from '../../reducers/common-experiment-output.reducer';\n\nimport hasAnsi from 'has-ansi';\n\ninterface LogRow {\n  timestamp?: string;\n  entry: string;\n  separator?: boolean;\n  hasAnsi?: boolean;\n}\n\n@Component({\n  selector: 'sm-experiment-log-info',\n  templateUrl: './experiment-log-info.component.html',\n  styleUrls: ['./experiment-log-info.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExperimentLogInfoComponent implements OnDestroy, AfterViewInit {\n\n  public orgLogs: Log[];\n  public lines = [] as LogRow[];\n  private initial = true;\n  public convert: Convert;\n  private hasFilter = false;\n  private regex: RegExp;\n  private scrollSubscription: Subscription;\n  private indexSubscription: Subscription;\n  private shouldFocusLog = false;\n  public fetching = false;\n  private scrolling: boolean = false;\n  private prevLocation = 0;\n  public canRefresh = true;\n  private prevLine: LogRow;\n  private fetchPrev: boolean;\n  private prevLineOffset: number;\n\n  @ViewChild('LogContainer', {static: true}) private logContainer: CdkVirtualScrollViewport;\n  @Input() beginningOfLog: boolean;\n  @Input() isDarkTheme: boolean;\n  private hasAnsi: any;\n  private observer: IntersectionObserver;\n  private logInView: boolean;\n\n  @Input() set filterString(filter: string) {\n    if (this.logInView) {\n      this.shouldFocusLog = false;\n      setTimeout(() => this.shouldFocusLog = true, 1000);\n    }\n    this.hasFilter = !!filter;\n    if (this.hasFilter) {\n      this.regex = ExperimentLogInfoComponent.getRegexFromString(filter);\n    }\n\n    if (this.orgLogs) {\n      this.calcLines();\n    }\n  }\n\n  @Input() set logs(log: Log[]) {\n    if (log === null) {\n      return;\n    }\n    this.orgLogs = log;\n    this.calcLines();\n    let prevLocation = findIndex(this.prevLine, this.lines) + this.prevLineOffset;\n    if (this.fetchPrev) {\n      prevLocation -= 25;\n    }\n    this.fetchPrev = null;\n    if (this.fetching) {\n      this.scrolling = true;\n      window.setTimeout(() => {\n        this.logContainer?.scrollToIndex(prevLocation);\n        window.setTimeout(() => this.scrolling = false, 50);\n      });\n    } else {\n      const elm = this.logContainer?.elementRef.nativeElement;\n      if (log?.length && (elm.scrollTop + elm.offsetHeight > elm.scrollHeight - 100 || this.initial)) {\n        this.initial = false;\n        this.scrolling = true;\n        window.setTimeout(() => {\n          this.logContainer?.scrollToIndex(this.lines.length);\n          this.canRefresh = true;\n          window.setTimeout(() => this.scrolling = false, 80);\n        }, 10);\n      }\n    }\n    window.setTimeout(() => {\n      this.fetching = false;\n      this.cdr.detectChanges();\n    }, 50);\n  }\n\n  @Output() fetchMore = new EventEmitter<{ direction: string; from?: number }>();\n\n  constructor(private cdr: ChangeDetectorRef, private element: ElementRef) {\n    this.convert = new Convert();\n    this.hasAnsi = hasAnsi;\n  }\n\n  ngAfterViewInit() {\n    this.scrollSubscription = this.logContainer?.elementScrolled().subscribe((event: Event) => {\n      if (this.shouldFocusLog) {\n        setTimeout(() => (event.target as HTMLElement).focus(), 50);\n      }\n    });\n\n    window.setTimeout(() => {\n      this.indexSubscription = this.logContainer?.scrolledIndexChange.subscribe((location: number) => {\n        if (!this.fetching && !this.scrolling) {\n          const itemsInView = Math.ceil(this.logContainer?.getViewportSize() / 25);\n          if (location < 10 && location < this.prevLocation && !this.beginningOfLog) {\n            this.fetching = true;\n            this.cdr.detectChanges();\n            this.fetchPrev = true;\n            this.fetchMore.emit({direction: 'prev', from: this.orgLogs?.[0]?.timestamp});\n          } else if (location >= this.lines.length - itemsInView && location > this.prevLocation) {\n            this.fetching = true;\n            this.cdr.detectChanges();\n            this.fetchMore.emit({direction: 'next', from: last(this.orgLogs)?.timestamp});\n          }\n        }\n        this.prevLocation = location;\n        this.prevLine = {} as LogRow;\n        let i = 0;\n        while (!this.prevLine.timestamp) {\n          this.prevLine = this.lines[location - i];\n          i += 1;\n        }\n        this.prevLineOffset = i;\n        if (this.canRefresh !== location > this.lines.length - 30) {\n          this.canRefresh = !this.canRefresh;\n          this.cdr.detectChanges();\n        }\n      });\n    }, 500);\n\n    this.observer = new IntersectionObserver((entries => {\n      this.logInView = entries[0].isIntersecting;\n      this.shouldFocusLog = entries[0].isIntersecting;\n    }), {threshold: 0.7});\n    this.observer.observe(this.element.nativeElement);\n  }\n\n  ngOnDestroy() {\n    this.scrollSubscription?.unsubscribe();\n    this.indexSubscription?.unsubscribe();\n    this.logContainer = null;\n  }\n\n  private static getRegexFromString(filter: string) {\n    const flags = filter.match(/.*\\/([gimy]*)$/);\n    if (flags) {\n      const pattern = flags ? filter.replace(new RegExp('^/(.*?)/' + flags[1] + '$'), '$1') : filter;\n      filter.replace(new RegExp('^/(.*?)/' + flags[1] + '$'), '$1');\n      return new RegExp(pattern, flags[1]);\n    } else {\n      return new RegExp(filter, 'i');\n    }\n  }\n\n  calcLines() {\n    this.lines = [];\n    this.orgLogs.filter((row) => !this.hasFilter || this.regex.test(row.msg))\n      .forEach(logItem => {\n        let first = true;\n        logItem.msg.split('\\n').filter(msg => !!msg).forEach((msg: string) => {\n          const hasAnsi = this.hasAnsi(msg);\n          const converted = msg ? (hasAnsi ? this.convert.toHtml(msg) :\n            msg) : '';\n          if (first) {\n            this.lines.push({timestamp: logItem['timestamp'] || logItem['@timestamp'], entry: converted, hasAnsi: hasAnsi});\n            first = false;\n          } else {\n            this.lines.push({entry: converted, hasAnsi: hasAnsi});\n          }\n        });\n        this.lines[this.lines.length - 1].separator = true;\n      });\n  }\n\n  trackByTimestampFn(index: number, line: LogRow) {\n    return line.timestamp;\n  }\n\n  reset() {\n    this.initial = true;\n    this.fetching = false;\n    this.cdr.detectChanges();\n  }\n\n  getLast() {\n    this.prevLine = null;\n    this.prevLineOffset = 0;\n    this.initial = true;\n    this.fetchMore.emit({direction: 'prev'});\n  }\n}\n","<div class=\"px-4 py-2 row align-items-center\" *ngIf=\"hasLog && showHeader\">\n  <div class=\"p-2 mr-auto\">\n    <span>\n      <b>Hostname:</b> {{creator}}\n    </span>\n  </div>\n  <button class=\"btn btn-primary mr-5\" (click)=\"downloadLog()\">\n    <i class=\"fa fa-download\"></i>\n    Download full log\n  </button>\n  <span style=\"width: 45px;\">Filter: </span>\n  <input\n    placeholder=\"Filter By Regex\"\n    class=\"form-control\"\n    style=\"width: 250px;\"\n    [value]=\"filter$ |async\"\n    (keyup)=\"filterLog($event)\"\n  />\n</div>\n<div *ngIf=\"hasLog !== undefined && !hasLog\" class=\"no-output\">\n  <i class=\"icon no-output-icon\" [ngClass]=\"isDarkTheme ? 'i-no-log-dark' : 'i-no-log'\"></i>\n  <h3>NO LOG DATA</h3>\n</div>\n\n<sm-experiment-log-info *ngIf=\"hasLog\"\n  [class.no-header]=\"!showHeader\"\n  [isDarkTheme]=\"isDarkTheme\"\n  [logs]=\"log$ | async\"\n  [beginningOfLog]=\"logBeginning$ | async\"\n  [filterString]=\"filter$ | async\"\n  (fetchMore)=\"getLogs($event)\"\n></sm-experiment-log-info>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectExperimentBeginningOfLog, selectExperimentLog, selectLogFilter} from '../../reducers';\nimport {Observable, Subscription} from 'rxjs';\nimport {distinctUntilChanged, filter} from 'rxjs/operators';\nimport {last} from 'lodash/fp';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {selectSelectedExperiment} from '../../../../features/experiments/reducers';\nimport {\n  downloadFullLog,\n  getExperimentLog,\n  ResetLogFilter,\n  ResetOutput,\n  SetLogFilter\n} from '../../actions/common-experiment-output.actions';\nimport {ExperimentLogInfoComponent} from '../../dumb/experiment-log-info/experiment-log-info.component';\nimport {selectRefreshing} from '../../../experiments-compare/reducers';\n\n@Component({\n  selector: 'sm-experiment-output-log',\n  templateUrl: './experiment-output-log.component.html',\n  styleUrls: ['./experiment-output-log.component.scss']\n})\nexport class ExperimentOutputLogComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @Input() showHeader = true;\n  @Input() isDarkTheme = false;\n  private subs = new Subscription();\n  private experiment: IExperimentInfo;\n\n  public log$: Observable<any[]>;\n  public filter$: Observable<string>;\n  public logBeginning$: Observable<boolean>;\n  public creator: string | Worker;\n  public disabled: boolean;\n  public hasLog: boolean;\n  private logRef: ExperimentLogInfoComponent;\n  @ViewChildren(ExperimentLogInfoComponent) private logRefs: QueryList<ExperimentLogInfoComponent>;\n\n  constructor(private store: Store<IExperimentInfoState>, private cdr: ChangeDetectorRef) {\n    this.log$ = this.store.select(selectExperimentLog);\n    this.logBeginning$ = this.store.select(selectExperimentBeginningOfLog);\n    this.filter$ = this.store.select(selectLogFilter);\n  }\n\n  ngAfterViewInit(): void {\n    this.subs.add(this.logRefs.changes.subscribe(refs => this.logRef = refs.first));\n  }\n\n  ngOnInit() {\n    this.subs.add(this.log$.subscribe(log => {\n      if (log) {\n        this.creator = last(log)?.worker ?? '';\n        this.disabled = false;\n        this.hasLog = log.length > 0;\n        this.cdr.detectChanges();\n      }\n    }));\n\n    this.subs.add(this.store.select(selectSelectedExperiment)\n      .pipe(\n        filter(experiment => !!experiment),\n        distinctUntilChanged()\n      )\n      .subscribe(experiment => {\n        if (this.experiment?.id !== experiment.id || this.experiment?.started !== experiment.started) {\n          this.store.dispatch(new ResetOutput());\n          this.logRef?.reset();\n          this.experiment = experiment;\n          this.store.dispatch(getExperimentLog({\n            id: this.experiment.id,\n            direction: null\n          }));\n        } else if (!this.logRef?.lines?.length || this.logRef?.canRefresh) {\n          this.store.dispatch(getExperimentLog({\n            id: this.experiment.id,\n            direction: !this.logRef?.orgLogs ? 'prev' : 'next',\n            from: last(this.logRef?.orgLogs)?.timestamp\n          }));\n        }\n      })\n    );\n\n    this.subs.add(this.store.select(selectRefreshing)\n      .pipe(filter(({refreshing}) => refreshing))\n      .subscribe(({autoRefresh}) => this.store.dispatch(getExperimentLog({\n        id: this.experiment.id,\n        direction: autoRefresh ? 'prev' : 'next',\n        from: last(this.logRef?.orgLogs)?.timestamp\n      })))\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe();\n    this.logRef = null;\n    this.logRefs = null;\n    this.store.dispatch(new ResetLogFilter());\n    this.store.dispatch(new ResetOutput());\n  }\n\n  public filterLog(event: KeyboardEvent) {\n    this.store.dispatch(new SetLogFilter((event.target as HTMLInputElement).value));\n  }\n\n  getLogs({direction, from}: {direction: string; from?: number}) {\n    this.store.dispatch(getExperimentLog({id: this.experiment.id, direction, from, refresh: !from}));\n  }\n\n  downloadLog() {\n    this.store.dispatch(downloadFullLog({experimentId: this.experiment.id}));\n  }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {SelectableListComponent} from '../../webapp-common/shared/ui-components/data/selectable-list/selectable-list.component';\nimport {SelectableFilterListComponent} from '../../webapp-common/shared/ui-components/data/selectable-filter-list/selectable-filter-list.component';\nimport {routes as commonRoutes} from '../../webapp-common/experiments/experiment-routes';\n\nexport const routes: Routes = [\n  ...commonRoutes\n];\n\n@NgModule({\n  imports: [\n    SMSharedModule,\n    RouterModule.forChild(routes),\n\n  ],\n  exports: [RouterModule, SelectableListComponent, SelectableFilterListComponent]\n})\nexport class ExperimentRouterModule {\n}\n\n","import {Routes} from '@angular/router';\nimport {ExperimentsComponent} from '@common/experiments/experiments.component';\nimport {ExperimentInfoComponent} from '../../features/experiments/containers/experiment-info/experiment-info.component';\nimport {ExperimentInfoExecutionComponent} from './containers/experiment-info-execution/experiment-info-execution.component';\nimport {LeavingBeforeSaveAlertGuard} from '../shared/guards/leaving-before-save-alert.guard';\nimport {ExperimentInfoArtifactsComponent} from './containers/experiment-info-aritfacts/experiment-info-artifacts.component';\nimport {ExperimentInfoModelComponent} from './containers/experiment-info-model/experiment-info-model.component';\nimport {ExperimentInfoArtifactItemComponent} from './containers/experiment-info-artifact-item/experiment-info-artifact-item.component';\nimport {ExperimentInfoHyperParametersComponent} from './containers/experiment-info-hyper-parameters/experiment-info-hyper-parameters.component';\nimport {ExperimentInfoTaskModelComponent} from './containers/experiment-info-task-model/experiment-info-task-model.component';\nimport {ExperimentInfoHyperParametersFormContainerComponent} from './containers/experiment-info-hyper-parameters-form-container/experiment-info-hyper-parameters-form-container.component';\nimport {ExperimentInfoGeneralComponent} from './containers/experiment-info-general/experiment-info-general.component';\nimport {ExperimentOutputComponent} from '../../features/experiments/containers/experiment-ouptut/experiment-output.component';\nimport {ExperimentOutputScalarsComponent} from './containers/experiment-output-scalars/experiment-output-scalars.component';\nimport {ExperimentOutputPlotsComponent} from './containers/experiment-output-plots/experiment-output-plots.component';\nimport {DebugImagesComponent} from '../debug-images/debug-images.component';\nimport {ExperimentOutputLogComponent} from './containers/experiment-output-log/experiment-output-log.component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: ExperimentsComponent,\n    children: [\n      {\n        path: ':experimentId', component: ExperimentInfoComponent,\n        children: [\n          {path: '', redirectTo: 'execution', pathMatch: 'full'},\n          {\n            path: 'execution',\n            component: ExperimentInfoExecutionComponent,\n            canDeactivate: [LeavingBeforeSaveAlertGuard],\n            data: {minimized: true}\n          },\n          {\n            path: 'artifacts',\n            component: ExperimentInfoArtifactsComponent,\n            canDeactivate: [LeavingBeforeSaveAlertGuard],\n            data     : {minimized: true},\n            children: [\n              {path: '', redirectTo: 'input-model', pathMatch: 'full'},\n              {path: 'input-model/:modelId', component: ExperimentInfoModelComponent, data: {outputModel: false}},\n              {path: 'output-model/:modelId', component: ExperimentInfoModelComponent , data: {outputModel: true}},\n              {\n                path: 'artifact/:artifactId',\n                children: [{path: ':mode', component: ExperimentInfoArtifactItemComponent}]\n              },\n              {path: 'other/:artifactId', children: [{path: ':mode', component: ExperimentInfoArtifactItemComponent}]}\n            ]\n          },\n          {\n            path: 'hyper-params',\n            component: ExperimentInfoHyperParametersComponent,\n            canDeactivate: [LeavingBeforeSaveAlertGuard],\n            data     : {minimized: true},\n            children: [\n              {path: 'configuration/:configObject', component: ExperimentInfoTaskModelComponent},\n              {path: 'hyper-param/:hyperParamId', component: ExperimentInfoHyperParametersFormContainerComponent}\n            ]\n          },\n          {path: 'general', component: ExperimentInfoGeneralComponent, data: {minimized: true}},\n          {\n            path: 'info-output',\n            component: ExperimentOutputComponent,\n            data: {minimized: true},\n            children: [\n              {path: 'metrics/scalar', component: ExperimentOutputScalarsComponent, data: {minimized: true}},\n              {path: 'metrics/plots', component: ExperimentOutputPlotsComponent, data: {minimized: true}},\n              {path: 'debugImages', component: DebugImagesComponent, data: {minimized: true}},\n              {path: 'log', component: ExperimentOutputLogComponent, data: {minimized: true}},\n              {path: '', redirectTo: 'log', pathMatch: 'full'}\n            ]\n          }\n        ]\n      },\n    ]\n  },\n\n  {\n    path: ':experimentId/output',\n    component: ExperimentOutputComponent,\n    data: {search: false},\n    children: [\n      {path: '', redirectTo: 'execution'},\n      {path: 'execution',\n        component: ExperimentInfoExecutionComponent,\n        canDeactivate: [LeavingBeforeSaveAlertGuard]\n      },\n      {\n        path: 'hyper-params',\n        component: ExperimentInfoHyperParametersComponent,\n        data: {},\n        canDeactivate: [LeavingBeforeSaveAlertGuard],\n        children: [\n          {path: 'configuration/:configObject', component: ExperimentInfoTaskModelComponent},\n          {path: 'hyper-param/:hyperParamId', component: ExperimentInfoHyperParametersFormContainerComponent}\n        ]\n      },\n      {\n        path: 'artifacts',\n        component: ExperimentInfoArtifactsComponent,\n        data: {},\n        canDeactivate: [LeavingBeforeSaveAlertGuard],\n        children: [\n          {path: '', redirectTo: 'input-model', pathMatch: 'full'},\n          {path: 'input-model/:modelId', component: ExperimentInfoModelComponent , data: {outputModel: false}},\n          {path: 'output-model/:modelId', component: ExperimentInfoModelComponent , data: {outputModel: true}},\n          {path: 'artifact/:artifactId', children: [{path: ':mode', component: ExperimentInfoArtifactItemComponent}]},\n          {path: 'other/:artifactId', children: [{path: ':mode', component: ExperimentInfoArtifactItemComponent}]}\n        ]\n      },\n      {path: 'general', component: ExperimentInfoGeneralComponent, data: {}},\n      {path: 'metrics/scalar', component: ExperimentOutputScalarsComponent, data: {}},\n      {path: 'metrics/plots', component: ExperimentOutputPlotsComponent, data: {}},\n      {path: 'debugImages', component: DebugImagesComponent},\n      {path: 'log', component: ExperimentOutputLogComponent},\n    ]\n  }\n];\n","import {Injectable} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport * as actions from './select-model.actions';\nimport * as exSelectors from './select-model.reducer';\nimport {MODELS_PAGE_SIZE} from '../models/models.consts';\nimport {catchError, mergeMap, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {get} from 'lodash/fp';\nimport {MODEL_TAGS, MODELS_TABLE_COL_FIELDS} from '../models/shared/models.const';\nimport {IModelsViewState} from '../models/reducers/models-view.reducer';\nimport {ApiModelsService} from '../../business-logic/api-services/models.service';\nimport {requestFailed} from '../core/actions/http.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../core/actions/layout.actions';\nimport {selectRouterParams} from '../core/reducers/router-reducer';\nimport {addMultipleSortColumns, escapeRegex} from '../shared/utils/shared-utils';\nimport {of} from 'rxjs';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {ModelsGetAllExRequest} from '../../business-logic/model/models/modelsGetAllExRequest';\nimport {SortMeta} from 'primeng/api';\nimport {encodeOrder} from '../shared/utils/tableParamEncode';\nimport {selectTableSortFields} from './select-model.reducer';\n\n@Injectable()\nexport class SelectModelEffects {\n\n  constructor(private actions$: Actions, private store: Store<IModelsViewState>, private apiModels: ApiModelsService) {\n  }\n\n  @Effect()\n  activeLoader = this.actions$.pipe(\n    ofType(actions.GET_NEXT_MODELS, actions.GLOBAL_FILTER_CHANGED,\n      actions.ALL_PROJECTS_MODE_CHANGED, actions.TABLE_SORT_CHANGED, actions.TABLE_FILTER_CHANGED),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  tableSortChange = this.actions$.pipe(\n    ofType(actions.tableSortChanged),\n    withLatestFrom(this.store.select(selectTableSortFields)),\n    switchMap(([action, oldOrders]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [actions.setTableSort({orders})];\n    })\n  );\n\n  @Effect()\n  modelsFilterChanged = this.actions$.pipe(\n    ofType(actions.GLOBAL_FILTER_CHANGED, actions.ALL_PROJECTS_MODE_CHANGED, actions.TABLE_SORT_CHANGED, actions.TABLE_FILTER_CHANGED),\n    switchMap((action) => this.fetchModels$(null)\n      .pipe(\n        mergeMap(res => [\n          new actions.SetNoMoreModels((res.models.length < MODELS_PAGE_SIZE)),\n          new actions.SetModels(res.models),\n          actions.setCurrentScrollId({scrollId: res.scroll_id}),\n          deactivateLoader(action.type)\n        ]),\n        catchError(error => [requestFailed(error), deactivateLoader(action.type), setServerError(error, null, 'Fetch Models failed')])\n      )\n    )\n  );\n\n  @Effect()\n  getModels = this.actions$.pipe(\n    ofType<actions.GetNextModels>(actions.GET_NEXT_MODELS),\n    withLatestFrom(this.store.select(exSelectors.selectCurrentScrollId)),\n    switchMap(([action, scrollId]) =>\n      this.fetchModels$(scrollId)\n        .pipe(\n          mergeMap(res => [\n            new actions.SetNoMoreModels((res.models.length < MODELS_PAGE_SIZE)),\n            new actions.AddModels(res.models),\n            actions.setCurrentScrollId({scrollId: res.scroll_id}),\n            deactivateLoader(action.type)\n          ]),\n          catchError(error => [requestFailed(error), deactivateLoader(action.type), setServerError(error, null, 'Fetch Models failed')])\n        )\n    )\n  );\n\n  getGetAllQuery(\n    scrollId: string, projectId: string, searchQuery: string, isAllProjects: boolean,\n    orderFields: SortMeta[], tableFilters: { [s: string]: FilterMetadata }\n  ): ModelsGetAllExRequest {\n    const userFilter = get([MODELS_TABLE_COL_FIELDS.USER, 'value'], tableFilters);\n    const tagsFilter = get([MODELS_TABLE_COL_FIELDS.TAGS, 'value'], tableFilters);\n    const systemTags = get(['system_tags', 'value'], tableFilters);\n    const systemTagsFilter = ['-' + MODEL_TAGS.HIDDEN].concat(systemTags ? systemTags : []);\n    return {\n      _any_: searchQuery ? {\n        pattern: escapeRegex(searchQuery),\n        fields: ['id', 'name', 'framework', 'system_tags', 'uri']\n      } : undefined,\n      /* eslint-disable @typescript-eslint/naming-convention */\n      project: (isAllProjects || !projectId || projectId === '*') ? undefined : [projectId],\n      scroll_id: scrollId || null, // null to create new scroll (undefined doesn't generate scroll)\n      size: MODELS_PAGE_SIZE,\n      order_by: encodeOrder(orderFields),\n      tags: (tagsFilter && tagsFilter.length > 0) ? tagsFilter : [],\n      system_tags: (systemTagsFilter && systemTagsFilter.length > 0) ? systemTagsFilter : [],\n      only_fields: ['created', 'framework', 'id', 'labels', 'name', 'ready', 'tags', 'system_tags', 'task.name', 'uri', 'user.name', 'parent', 'design', 'company'],\n      ready: true,\n      framework: get([MODELS_TABLE_COL_FIELDS.FRAMEWORK, 'value'], tableFilters) || undefined,\n      user: (userFilter && userFilter.length > 0) ? userFilter : undefined\n      /* eslint-enable @typescript-eslint/naming-convention */\n    };\n  }\n\n  fetchModels$(scrollId1: string) {\n    return of(scrollId1)\n      .pipe(\n        withLatestFrom(\n          // TODO: refactor with ngrx router.\n          this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n          this.store.select(exSelectors.selectIsAllProjectsMode),\n          this.store.select(exSelectors.selectGlobalFilter),\n          this.store.select(exSelectors.selectTableSortFields),\n          this.store.select(exSelectors.selectTableFilters),\n        ),\n        switchMap(([scrollId, projectId, isAllProjects, gb, sortFields, filters]) =>\n          this.apiModels.modelsGetAllEx(this.getGetAllQuery(scrollId, projectId, gb, isAllProjects, sortFields, filters))\n        )\n      );\n  }\n\n  getReadyFilter(tableFilters) {\n    switch (get('ready.value.length', tableFilters)) {\n      case 0:\n        return null;\n      case 1:\n        return tableFilters.ready.value[0] === 'true';\n      case 2:\n        return null;\n      default:\n        return null;\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {SelectModelComponent} from './select-model.component';\nimport {selectModelReducer} from './select-model.reducer';\nimport {SelectModelEffects} from './select-model.effects';\nimport {ModelSharedModule} from '../models/shared/model-shared.module';\n\n@NgModule({\n  imports        : [\n    CommonModule,\n    SMSharedModule,\n    ModelSharedModule,\n    EffectsModule.forFeature([SelectModelEffects]),\n    StoreModule.forFeature('selectModel', selectModelReducer)\n  ],\n  providers      : [],\n  declarations   : [SelectModelComponent],\n  exports        : [SelectModelComponent]\n})\nexport class SelectModelModule {\n}\n","import {Injectable} from '@angular/core';\nimport {Actions} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {ApiAuthService} from '../../../business-logic/api-services/auth.service';\nimport {BlTasksService} from '../../../business-logic/services/tasks.service';\nimport {ApiEventsService} from '../../../business-logic/api-services/events.service';\nimport {CommonExperimentOutputState} from '../../../webapp-common/experiments/reducers/common-experiment-output.reducer';\n\n\n@Injectable()\nexport class ExperimentOutputEffects {\n\n  constructor(private actions$: Actions, private store: Store<CommonExperimentOutputState>, private apiTasks: ApiTasksService,\n              private authApi: ApiAuthService, private taskBl: BlTasksService, private eventsApi: ApiEventsService) {\n  }\n\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class ExperimentsMenuEffects {\n\n  constructor() {\n  }\n\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ExperimentSharedModule} from './shared/experiment-shared.module';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {ExperimentRouterModule} from './experiments-routing.module';\nimport {ExperimentsComponent} from './experiments.component';\nimport {EffectsModule} from '@ngrx/effects';\nimport {StoreModule} from '@ngrx/store';\nimport {experimentsReducers} from './reducers';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {SelectModelModule} from '../../webapp-common/select-model/select-model.module';\nimport {SmSyncStateSelectorService} from '../../webapp-common/core/services/sync-state-selector.service';\nimport {ExperimentOutputEffects} from './effects/experiment-output.effects';\nimport {ExperimentsMenuEffects} from './effects/experiments-menu.effects';\nimport {LayoutModule} from '../../layout/layout.module';\nimport {ExperimentGraphsModule} from '../../webapp-common/shared/experiment-graphs/experiment-graphs.module';\nimport {ExperimentCompareSharedModule} from '../../webapp-common/experiments-compare/shared/experiment-compare-shared.module';\nimport {AngularSplitModule} from 'angular-split';\nimport {SMMaterialModule} from '../../webapp-common/shared/material/material.module';\nimport {ExperimentsCommonModule} from '../../webapp-common/experiments/common-experiments.module';\nimport {CommonLayoutModule} from '../../webapp-common/layout/layout.module';\nimport {EXPERIMENTS_STORE_KEY} from '../../webapp-common/experiments/shared/common-experiments.const';\nimport {ExperimentInfoComponent} from './containers/experiment-info/experiment-info.component';\nimport {DebugImagesModule} from '../../webapp-common/debug-images/debug-images.module';\nimport {ExperimentInfoExecutionComponent} from '../../webapp-common/experiments/containers/experiment-info-execution/experiment-info-execution.component';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatListModule} from '@angular/material/list';\nimport {ExperimentOutputComponent} from './containers/experiment-ouptut/experiment-output.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AngularFileUploaderModule } from \"angular-file-uploader\";\nimport { HttpClientModule } from '@angular/common/http';\n\n\n\n\nexport const experimentSyncedKeys = [\n  'view.projectColumnsSortOrder',\n  'view.projectColumnFilter',\n  'view.projectColumnsWidth',\n  'view.hiddenProjectTableCols',\n  'view.metricsCols',\n  'view.colsOrder',\n  'info.userKnowledge',\n  'output.settingsList',\n];\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    AngularFileUploaderModule,\n    FontAwesomeModule,\n    SMMaterialModule,\n    FormsModule,\n    LayoutModule,\n    ReactiveFormsModule,\n    CommonModule,\n    ExperimentsCommonModule,\n    SMSharedModule,\n    ExperimentRouterModule,\n    ExperimentSharedModule,\n    ExperimentGraphsModule,\n    SelectModelModule,\n    DebugImagesModule,\n    ExperimentCompareSharedModule,\n    CommonLayoutModule,\n    MatSidenavModule,\n    MatListModule,\n    AngularSplitModule,\n    StoreModule.forFeature(EXPERIMENTS_STORE_KEY, experimentsReducers),\n    EffectsModule.forFeature([ExperimentOutputEffects, ExperimentsMenuEffects]),\n  ],\n  declarations: [\n    ExperimentsComponent,\n    ExperimentInfoComponent,\n    ExperimentInfoExecutionComponent,\n    ExperimentOutputComponent,\n  ],\n  providers: [\n    AdminService,\n    SmSyncStateSelectorService\n  ]\n})\nexport class ExperimentsModule {\n}\n","import {commonExperimentsInitialState, commonExperimentsViewReducer, ICommonExperimentsViewState} from '../../../webapp-common/experiments/reducers/common-experiments-view.reducer';\n\nexport type IExperimentsViewState = ICommonExperimentsViewState;\n\nexport const initialState: IExperimentsViewState = {\n  ...commonExperimentsInitialState,\n};\n\nexport const experimentsViewReducer = commonExperimentsViewReducer;\n","import * as actions from '../actions/common-experiments-info.actions';\nimport {IExperimentInfo} from '../../../features/experiments/shared/experiment-info.model';\nimport {experimentSections, experimentSectionsEnum} from '../../../features/experiments/shared/experiments.const';\nimport {\n  ACTIVATE_EDIT, DEACTIVATE_EDIT, deleteHyperParamsSection, EXPERIMENT_CANCEL_EDIT, EXPERIMENT_DATA_UPDATED, EXPERIMENT_DETAILS_UPDATED, EXPERIMENT_SAVE, hyperParamsSectionUpdated,\n  saveExperimentConfigObj, saveExperimentSection, saveHyperParamsSection, SET_EXPERIMENT, SET_EXPERIMENT_ERRORS, SET_EXPERIMENT_FORM_ERRORS, setExperimentSaving, updateExperimentAtPath\n} from '../actions/common-experiments-info.actions';\nimport {set} from 'lodash/fp';\n\n\nexport interface ICommonExperimentInfoState {\n  selectedExperiment: IExperimentInfo;\n  experimentLog: Array<any>;\n  infoData: IExperimentInfo;\n  errors: { [key: string]: any } | null;\n  showExtraDataSpinner: boolean;\n  activeSectionEdit: boolean;\n  saving: boolean;\n  currentActiveSectionEdit: string;\n  infoDataFreeze: IExperimentInfo;\n  userKnowledge: Map<experimentSectionsEnum, boolean>;\n}\n\nexport const initialCommonExperimentInfoState: ICommonExperimentInfoState = {\n  selectedExperiment: null,\n  experimentLog     : null,\n  infoData          : null,\n  errors            : {\n    model    : null,\n    execution: null,\n  },\n  showExtraDataSpinner: false,\n  activeSectionEdit: false,\n  saving           : false,\n  currentActiveSectionEdit: null,\n  infoDataFreeze   : null,\n  userKnowledge    : {\n    [experimentSections.MODEL_INPUT]: false\n  } as any,\n};\n\nexport function commonExperimentInfoReducer(state: ICommonExperimentInfoState = initialCommonExperimentInfoState, action): ICommonExperimentInfoState {\n\n  switch (action.type) {\n    case SET_EXPERIMENT:\n      return {...state, selectedExperiment: action.payload};\n    case SET_EXPERIMENT_FORM_ERRORS:\n      return {...state, errors: action.payload};\n    case EXPERIMENT_DATA_UPDATED:\n      return {...state, infoData: {...state.infoData, ...action.payload.changes}};\n    case hyperParamsSectionUpdated.type:\n      return {...state, infoData: {...state.infoData, hyperparams: {...state.infoData.hyperparams, [action.section]: action.hyperparams}}};\n\n    case EXPERIMENT_SAVE:\n    case saveHyperParamsSection.type:\n    case saveExperimentConfigObj.type:\n    case deleteHyperParamsSection.type:\n    case saveExperimentSection.type:\n      return {...state, saving: true};\n    case ACTIVATE_EDIT:\n      return {...state, activeSectionEdit: true, infoDataFreeze: state.infoData, currentActiveSectionEdit: action.payload};\n    case DEACTIVATE_EDIT:\n      return {...state, activeSectionEdit: false, currentActiveSectionEdit: null};\n    case EXPERIMENT_CANCEL_EDIT:\n      return {...state, infoData: state.infoDataFreeze ? state.infoDataFreeze : state.infoData, currentActiveSectionEdit: null};\n    case EXPERIMENT_DETAILS_UPDATED:\n      return {...state, infoData: {...state.infoData, ...action.payload.changes}};\n    case setExperimentSaving.type:\n      return {...state, saving: action.saving};\n    case updateExperimentAtPath.type: {\n      const payload = action as ReturnType<typeof updateExperimentAtPath>;\n      const newInfoData = set(payload.path, payload.value, state.infoData);\n      return {...state, infoData: newInfoData as any};\n    }\n    // case actions.EXPERIMENT_UPDATED_SUCCESSFULLY:\n    //   return {...state, saving: false};\n    case SET_EXPERIMENT_ERRORS:\n      return {...state, errors: {...state.errors, ...action.payload}};\n    case actions.RESET_EXPERIMENT_INFO:\n      return {...state, infoData: null};\n    case actions.SET_EXPERIMENT_INFO_DATA:\n      return {...state, infoData: {\n        ...action.payload,\n        configuration: state.infoData?.configuration,\n        execution: {...action.payload?.execution, diff: state.infoData?.execution?.diff}\n      }};\n    case actions.UPDATE_EXPERIMENT_INFO_DATA:\n      return {...state, selectedExperiment: {...state.selectedExperiment, ...action.payload.changes}, infoData:{...state.infoData, ...action.payload.changes}};\n    case actions.getExperimentUncommittedChanges.type:\n      return {...state, showExtraDataSpinner: !(action as ReturnType<typeof actions.getExperimentUncommittedChanges>).autoRefresh};\n    case actions.setExperimentUncommittedChanges.type:\n      return {...state, showExtraDataSpinner: false, infoData: {...state?.infoData, execution: {...state?.infoData?.execution, diff: action.diff}}};\n    default:\n      return state;\n  }\n}\n","import {commonExperimentInfoReducer, ICommonExperimentInfoState, initialCommonExperimentInfoState} from '../../../webapp-common/experiments/reducers/common-experiment-info.reducer';\n\nexport interface IExperimentInfoState extends ICommonExperimentInfoState {\n  errors: { [key: string]: any } | null;\n}\n\nexport const initialState: IExperimentInfoState = {\n  ...initialCommonExperimentInfoState,\n};\n\nexport function experimentInfoReducer(state: IExperimentInfoState = initialState, action): IExperimentInfoState {\n  switch (action.type) {\n\n    default:\n      return commonExperimentInfoReducer(state, action) as IExperimentInfoState;\n  }\n}\n","import {commonExperimentOutputReducer, CommonExperimentOutputState, initialCommonExperimentOutputState} from '../../../webapp-common/experiments/reducers/common-experiment-output.reducer';\n\nexport type ExperimentOutputState = CommonExperimentOutputState;\n\nexport const initialState: ExperimentOutputState = {\n  ...initialCommonExperimentOutputState\n};\n\nexport function experimentOutputReducer(state = initialState, action): ExperimentOutputState {\n  return commonExperimentOutputReducer(state as CommonExperimentOutputState, action) as ExperimentOutputState;\n}\n","import {ActionReducerMap, createSelector} from '@ngrx/store';\nimport {experimentsViewReducer, IExperimentsViewState} from './experiments-view.reducer';\nimport {experimentInfoReducer, IExperimentInfoState} from './experiment-info.reducer';\nimport {experimentOutputReducer} from './experiment-output.reducer';\nimport {IExperimentInfo} from '../shared/experiment-info.model';\nimport {TaskStatusEnum} from '../../../business-logic/model/tasks/taskStatusEnum';\nimport {isReadOnly, isSharedAndNotOwner} from '../../../webapp-common/shared/utils/shared-utils';\nimport {EXPERIMENTS_STORE_KEY} from '../../../webapp-common/experiments/shared/common-experiments.const';\nimport {CommonExperimentOutputState} from '../../../webapp-common/experiments/reducers/common-experiment-output.reducer';\nimport {selectSelectedModel} from \"../../../webapp-common/models/reducers\";\nimport {selectCurrentUser} from '@common/core/reducers/users-reducer';\n\nexport const experimentsReducers: ActionReducerMap<any, any> = {\n  view: experimentsViewReducer,\n  info: experimentInfoReducer,\n  output: experimentOutputReducer,\n};\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport function experiments(state) {\n  return state[EXPERIMENTS_STORE_KEY];\n}\n\n// view selectors.\nexport const experimentsView = createSelector(experiments, (state): IExperimentsViewState => state ? state.view : {});\nexport const selectExperimentsMetricsCols = createSelector(experimentsView, state => state.metricsCols);\nexport const selectMetricVariants = createSelector(experimentsView, state => state.metricVariants);\nexport const selectMetricsLoading = createSelector(experimentsView, state => state.metricsLoading);\n\n\n// info selectors\nexport const experimentInfo = createSelector(experiments, (state): IExperimentInfoState => state ? state.info : {});\nexport const selectSelectedExperiment = createSelector(experimentInfo, state => state.selectedExperiment);\nexport const selectExperimentInfoData = createSelector(experimentInfo, state => state.infoData);\nexport const selectShowExtraDataSpinner = createSelector(experimentInfo, state => state.showExtraDataSpinner);\n\n\n// output selectors\nexport const experimentOutput = createSelector(experiments, (state): CommonExperimentOutputState => state ? state.output : {});\n\nexport const selectIsExperimentEditable = createSelector(selectSelectedExperiment, selectCurrentUser,\n  (experiment, user): boolean => experiment && experiment.status === TaskStatusEnum.Created && !isReadOnly(experiment) && !isSharedAndNotOwner(experiment, user.company));\nexport const selectIsSharedAndNotOwner = createSelector(selectSelectedExperiment, selectSelectedModel, selectCurrentUser,\n  (experiment, model, user): boolean => {\n  const item = experiment || model;\n    return item && isSharedAndNotOwner(item, user.company);\n  }\n);\nexport const selectExperimentInfoDataFreeze = createSelector(experimentInfo, (state): IExperimentInfo => state.infoDataFreeze);\n\nexport const selectExperimentInfoErrors = createSelector(experimentInfo, (state): IExperimentInfoState['errors'] => state.errors);\nexport const selectExperimentFormValidity = createSelector(selectExperimentInfoData, selectExperimentInfoErrors,\n  (infoData, errors): boolean => {\n    if (!infoData || !errors) {\n      return true;\n    }\n    const error = Object.keys(infoData).find(key => errors[key]);\n\n    return !error;\n  });\n","import {Container} from '~/business-logic/model/tasks/container';\nimport {Queue} from '~/business-logic/model/queues/queue';\n\nexport enum sourceTypesEnum {\n  Tag = 'tag',\n  VersionNum = 'version_num',\n  Branch = 'branch',\n}\n\nexport interface IExecutionForm {\n  source: {\n    repository: string;\n    tag?: string;\n    version_num?: string;\n    branch?: string;\n    entry_point: string;\n    working_dir: string;\n    scriptType: sourceTypesEnum;\n  };\n  docker_cmd?: string;\n  requirements: any;\n  diff: string;\n  output: {\n    destination: string;\n    logLevel?: 'basic' | 'details'; // TODO: should be enum from gencode.\n  };\n  queue: Queue;\n  container?: Container;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../../../webapp-common/shared/shared.module';\nimport {ExperimentConverterService} from './services/experiment-converter.service';\nimport { ExperimentMenuComponent } from '../../../webapp-common/experiments/shared/components/experiment-menu/experiment-menu.component';\nimport {ExperimentMenuExtendedComponent} from '../containers/experiment-menu-extended/experiment-menu-extended.component';\n\nconst DECLARATIONS = [\n  ExperimentMenuComponent,\n  ExperimentMenuExtendedComponent,\n];\n\n@NgModule({\n  imports        : [\n    SMSharedModule,\n    CommonModule\n  ],\n  declarations   : [...DECLARATIONS],\n  providers      : [ExperimentConverterService],\n  exports        : [...DECLARATIONS]\n})\nexport class ExperimentSharedModule {\n}\n","import {TaskStatusEnum} from '../../../business-logic/model/tasks/taskStatusEnum';\nimport {ExperimentTableColFieldsEnum} from './experiments.model';\n\nexport type experimentSectionsEnum =\n  'MODEL_INPUT'\n  | 'MODEL_SOURCE'\n  | 'MODEL_OUTPUT'\n  | 'MODEL_NETWORK_DESIGN';\nexport const experimentSections = {\n  MODEL_INPUT         : 'MODEL_INPUT' as experimentSectionsEnum,\n  MODEL_SOURCE        : 'MODEL_SOURCE' as experimentSectionsEnum,\n  MODEL_OUTPUT        : 'MODEL_OUTPUT' as experimentSectionsEnum,\n  MODEL_NETWORK_DESIGN: 'MODEL_NETWORK_DESIGN' as experimentSectionsEnum,\n};\n\nexport const DIGITS_AFTER_DECIMAL = 6;\n\nexport const EXPERIMENTS_TABLE_COL_FIELDS = {\n  SELECTED      : 'selected' as ExperimentTableColFieldsEnum,\n  ID            : 'id' as ExperimentTableColFieldsEnum,\n  TYPE          : 'type' as ExperimentTableColFieldsEnum,\n  NAME          : 'name' as ExperimentTableColFieldsEnum,\n  TAGS          : 'tags' as ExperimentTableColFieldsEnum,\n  USER          : 'users' as ExperimentTableColFieldsEnum,\n  STARTED       : 'started' as ExperimentTableColFieldsEnum,\n  COMPLETED     : 'completed' as ExperimentTableColFieldsEnum,\n  STATUS        : 'status' as ExperimentTableColFieldsEnum,\n  LAST_UPDATE   : 'last_update' as ExperimentTableColFieldsEnum,\n  LAST_ITERATION: 'last_iteration' as ExperimentTableColFieldsEnum,\n  COMMENT       : 'comment' as ExperimentTableColFieldsEnum,\n  ACTIVE_DURATION: 'active_duration' as ExperimentTableColFieldsEnum,\n  PROJECT       : 'project.name' as ExperimentTableColFieldsEnum,\n  METRIC        : 'project.name' as ExperimentTableColFieldsEnum,\n  HYPER_PARAM   : 'project.name' as ExperimentTableColFieldsEnum,\n  PARENT        : 'parent.name' as ExperimentTableColFieldsEnum\n};\n\nexport enum ExperimentTagsEnum {\n  Development = 'development',\n  Hidden = 'archived',\n  Shared = 'shared'\n}\n\nexport const EXPERIMENTS_TAGS = {\n  ['shared' as ExperimentTagsEnum]: 'SHARED'\n};export const EXPERIMENTS_TAGS_TOOLTIP = {};\nexport const EXPERIMENTS_STATUS_LABELS = {\n  [TaskStatusEnum.Created]   : 'Draft',\n  [TaskStatusEnum.Queued]    : 'Pending',\n  [TaskStatusEnum.InProgress]: 'Running',\n  [TaskStatusEnum.Completed] : 'Completed',\n  [TaskStatusEnum.Published] : 'Published',\n  [TaskStatusEnum.Failed]    : 'Failed',\n  [TaskStatusEnum.Stopped]   : 'Aborted',\n  [TaskStatusEnum.Closed]    : 'Completed'\n\n};\nexport const DevWarningEnabled = false;\n","import {Model} from '../../../business-logic/model/models/model';\nimport {ISelectedExperiment} from './experiment-info.model';\nimport {isExample} from '../../../webapp-common/shared/utils/shared-utils';\n\n\nexport function areLabelsEqualss(modelLabels: Model['labels'], labels: Model['labels']) {\n  return true;\n}\n\nexport function isDevelopment(entity): boolean {\n  return false;\n}\n\nexport function getSystemTags(experiment: ISelectedExperiment) {\n  const sysTags = [];\n  if (isExample(experiment)) {\n    sysTags.push('example');\n  }\n  return sysTags;\n}\n","import {Injectable} from '@angular/core';\nimport {TasksEditRequest} from '../../../../business-logic/model/tasks/tasksEditRequest';\nimport {IExperimentInfo, ISelectedExperiment} from '../experiment-info.model';\nimport {IExecutionForm} from '../experiment-execution.model';\nimport {Execution} from '../../../../business-logic/model/tasks/execution';\nimport {isEqual} from 'lodash/fp';\nimport {CommonExperimentConverterService} from '../../../../webapp-common/experiments/shared/services/common-experiment-converter.service';\nimport {IHyperParamsForm} from '../../../../webapp-common/experiments/shared/experiment-hyper-params.model';\nimport {IExperimentModelInfo} from '../../../../webapp-common/experiments/shared/common-experiment-model.model';\n\n\n@Injectable()\nexport class ExperimentConverterService {\n\n  constructor(private commonExperimentConverterService: CommonExperimentConverterService) {\n  }\n\n\n  convertExperiment(experimentInfo: IExperimentInfo, selectedExperiment: IExperimentInfo, experimentInfoBeforeChange: IExperimentInfo): TasksEditRequest {\n    const convertedExperiment                   = this.commonExperimentConverterService.convertCommonExperiment(experimentInfo, selectedExperiment, experimentInfoBeforeChange);\n\n    const executionInfoNoOutputDest             = {...experimentInfo.execution, output: {...experimentInfo.execution.output, destination: null}};\n    const executionInfoNoOutputDestBeforeChange = {...experimentInfoBeforeChange.execution, output: {...experimentInfoBeforeChange.execution.output, destination: null}};\n\n    if (!isEqual(executionInfoNoOutputDest, executionInfoNoOutputDestBeforeChange) ||\n      !isEqual(experimentInfo.model, experimentInfoBeforeChange.model) ||\n      !isEqual(experimentInfo.hyperparams, experimentInfoBeforeChange.hyperparams) ||\n      !isEqual(experimentInfo.model, experimentInfoBeforeChange.model)\n    ) {\n      convertedExperiment.execution = this.convertExecution(experimentInfo.execution,\n        experimentInfo.model);\n    }\n    return convertedExperiment;\n  }\n\n  convertExecution(execution: IExecutionForm, model: IExperimentModelInfo): Execution {\n    return {\n      ...this.commonExperimentConverterService.commonConvertExecution(execution, model),\n    };\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {IExperimentInfo, ISelectedExperiment} from '../experiment-info.model';\nimport {CommonExperimentReverterService} from '../../../../webapp-common/experiments/shared/services/common-experiment-reverter.service';\nimport {ITask} from '../../../../business-logic/model/al-task';\n\n@Injectable({providedIn: 'root'})\nexport class ExperimentReverterService {\n\n  constructor(public commonExperimentReverterService: CommonExperimentReverterService) {\n  }\n\n  revertExperiment(experiment: ITask): IExperimentInfo {\n    return {\n      ...this.commonExperimentReverterService.commonRevertExperiment(experiment),\n    };\n  }\n\n}\n","<div *ngIf=\"showButton\" mat-button [matMenuTriggerFor]=\"modelMenu\" class=\"p-0 cell menu-button btn al-icon sm-md al-color light-grey-blue al-ico-bars-menu\"></div>\n<div *ngIf=\"!showButton\" #contextTrigger\n     style=\"visibility: hidden; position: fixed\"\n     [style.left.px]=\"position.x\"\n     [style.top.px]=\"position.y\"\n     [matMenuTriggerFor]=\"modelMenu\">\n</div>\n<mat-menu #modelMenu=\"matMenu\" [hasBackdrop]=\"false\">\n  <ng-container *ngIf=\"selectedDisableAvailable[menuItems.publish]\">\n  <button mat-menu-item (click)=\"publishPopup()\" [disabled]=\"selectedDisableAvailable[menuItems.publish].disable\">\n    <i [class]=\"'al-icon ' + ICONS.PUBLISHED + ' sm-md'\"></i>\n      {{selectedDisableAvailable[menuItems.publish].available | menuItemText : 'Publish' : selectedDisableAvailableIsMultiple}}\n  </button>\n  <button mat-menu-item (click)=\"deleteModelPopup()\" [disabled]=\"selectedDisableAvailable[menuItems.delete].disable\" *ngIf=\"isArchive\">\n    <i [class]=\"'al-icon ' + ICONS.REMOVE + ' sm-md'\"></i>\n    {{selectedDisableAvailable[menuItems.delete].available | menuItemText : 'Delete' : selectedDisableAvailableIsMultiple}}\n  </button>\n\n    <button mat-menu-item (click)=\"archiveClicked()\"\n            [disabled]=\"selectedDisableAvailable[menuItems.archive].disable\">\n      <i class=\"al-icon sm-md\" [class]=\"isArchive ? ICONS.RESTORE : ICONS.ARCHIVE\"></i>\n      {{selectedDisableAvailable[menuItems.archive].available | menuItemText : isArchive ? 'Restore from Archive' : 'Archive' : selectedDisableAvailableIsMultiple}}\n    </button>\n\n  <hr>\n  <button mat-menu-item\n          [matMenuTriggerFor]=\"tagMenu\"\n          [disabled]=\"isExample\"\n          (menuOpened)=\"tagMenuOpened()\"\n          (menuClosed)=\"tagMenuClosed()\"\n  >\n    <i [class]=\"'al-icon ' + ICONS.TAG + ' sm-md'\"></i>\n    <span>{{numSelected | menuItemText : 'Add Tag'  : selectedDisableAvailableIsMultiple}}</span>\n  </button>\n  <hr>\n  <button mat-menu-item (click)=\"downloadModelFileClicked()\" [disabled]=\"isLocalFile\">\n    <i [class]=\"'al-icon  ' + ICONS.DOWNLOAD + ' sm-md'\"></i>Download\n  </button>\n  <button mat-menu-item (click)=\"moveToProjectPopup()\" [disabled]=\"isExample\">\n    <i [class]=\"'al-icon ' + ICONS.MOVE_TO + '  sm-md'\"></i>{{selectedDisableAvailable[menuItems.moveTo].available | menuItemText : 'Move to Project' : selectedDisableAvailableIsMultiple}}\n  </button>\n    <ng-content select=\"[extended]\"></ng-content>\n  </ng-container>\n</mat-menu>\n\n<mat-menu #tagMenu=\"matMenu\">\n  <sm-tags-menu\n    #tagMenuContent\n    class=\"light-theme\"\n    [tags]=\"model?.tags\"\n    [projectTags]=\"projectTags\"\n    [companyTags]=\"companyTags\"\n    [tagsFilterByProject]=\"tagsFilterByProject\"\n    (tagSelected)=\"tagSelected.emit($event)\">\n  </sm-tags-menu>\n</mat-menu>\n","import {Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\nimport {\n  archivedSelectedModels,\n  changeProjectRequested,\n  publishModelClicked,\n  restoreSelectedModels\n} from '../../actions/models-menu.actions';\nimport {htmlTextShorte, isReadOnly} from '@common/shared/utils/shared-utils';\nimport {ICONS} from '@common/constants';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {selectS3BucketCredentials} from '@common/core/reducers/common-auth-reducer';\nimport {ModelInfoState} from '../../reducers/model-info.reducer';\nimport {ConfirmDialogComponent} from '@common/shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {Observable, Subscription} from 'rxjs';\nimport {filter, map, take} from 'rxjs/operators';\nimport {ChangeProjectDialogComponent} from '@common/experiments/shared/components/change-project-dialog/change-project-dialog.component';\nimport {fetchModelsRequested, modelSelectionChanged, setSelectedModels} from '../../actions/models-view.actions';\nimport {SelectedModel} from '../../shared/models.model';\nimport {CommonDeleteDialogComponent} from '@common/shared/entity-page/entity-delete/common-delete-dialog.component';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {CancelModelEdit} from '../../actions/models-info.actions';\nimport {BaseContextMenuComponent} from '../../../shared/components/base-context-menu/base-context-menu.component';\nimport {\n  selectionDisabledArchive,\n  selectionDisabledMoveTo,\n  selectionDisabledPublishModels\n} from '../../../shared/entity-page/items.utils';\nimport {getSignedUrl} from '../../../core/actions/common-auth.actions';\nimport {selectSignedUrl} from '../../../core/reducers/common-auth-reducer';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {get} from 'lodash/fp';\n\n\n@Component({\n  selector: 'sm-model-menu',\n  templateUrl: './model-menu.component.html',\n  styleUrls: ['./model-menu.component.scss']\n})\nexport class ModelMenuComponent extends BaseContextMenuComponent implements OnInit, OnDestroy{\n\n  readonly ICONS = ICONS;\n  private S3BucketCredentials: Observable<any>;\n  public modelSignedUri: string;\n  public _model: any;\n  public isExample: boolean;\n  public isLocalFile: boolean;\n  public isArchive: boolean;\n  private projectId: string;\n  private subscription: Subscription;\n\n  @Input() set model(model: SelectedModel) {\n    this._model = model;\n    this.isExample = isReadOnly(model);\n    this.isLocalFile = this.adminService.isLocalFile(model?.uri);\n    this.isArchive = model?.system_tags?.includes('archived');\n  }\n\n  get model() {\n    return this._model;\n  }\n\n  @Input() selectedModel: SelectedModel;\n  @Input() selectedModels: SelectedModel[];\n  @Input() numSelected = 0;\n  @Input() projectTags: string[];\n  @Input() companyTags: string[];\n  @Input() tagsFilterByProject: boolean;\n  @Input() showButton = true;\n  @Output() tagSelected = new EventEmitter<string>();\n\n  constructor(\n    protected dialog: MatDialog,\n    protected store: Store<ModelInfoState>,\n    protected adminService: AdminService,\n    protected eRef: ElementRef\n  ) {\n    super(store, eRef);\n    this.S3BucketCredentials = store.select(selectS3BucketCredentials);\n  }\n\n  ngOnInit(): void {\n    this.subscription = this.store.select(selectRouterParams)\n      .pipe(map(params => get('projectId', params)))\n      .subscribe((id => this.projectId = id));\n  }\n\n  archiveClicked() {\n    // info header case\n    const selectedModels = this.selectedModels ? selectionDisabledArchive(this.selectedModels).selectedFiltered : [this.selectedModel];\n\n    if (this.isArchive) {\n      this.store.dispatch(restoreSelectedModels({selectedEntities: selectedModels, skipUndo: false}));\n    } else {\n      this.store.dispatch(archivedSelectedModels({selectedEntities: selectedModels, skipUndo: false}));\n    }\n  }\n\n  public publishPopup() {\n    const selectedModels = this.selectedModels ? selectionDisabledPublishModels(this.selectedModels).selectedFiltered : [this.model];\n\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'PUBLISH',\n        body: `<b>${selectedModels.length === 1 ? htmlTextShorte(selectedModels[0].name) : selectedModels.length + ' models'}</b> status will be set to Published.\n<br><br>Published models are read-only and cannot be reset.`,\n        yes: 'Publish',\n        no: 'Cancel',\n        iconClass: 'd-block fas fa-cloud-upload-alt fa-7x w-auto',\n      }\n    });\n\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.publishModel(selectedModels);\n      }\n    });\n  }\n\n  publishModel(selectedModels: SelectedModel[]) {\n    this.store.dispatch(publishModelClicked({selectedModels}));\n  }\n\n  public moveToProjectPopup() {\n    const selectedModels = this.selectedModels ? selectionDisabledMoveTo(this.selectedModels).selectedFiltered : [this.model];\n    const currentProjects = Array.from(new Set(selectedModels.map(exp => exp.project?.id).filter(p => p)));\n    const dialog = this.dialog.open(ChangeProjectDialogComponent, {\n      data: {\n        currentProjects: currentProjects.length > 0 ? currentProjects : [selectedModels[0].project?.id],\n        defaultProject: selectedModels[0].project?.id,\n        reference: selectedModels.length > 1 ? selectedModels : selectedModels[0]?.name,\n        type: 'model'\n      }\n    });\n    dialog.afterClosed().pipe(filter(project => !!project)).subscribe(project => {\n      this.moveToProjectClicked(project, selectedModels);\n    });\n\n  }\n\n  moveToProjectClicked(project, selectedModels) {\n    this.store.dispatch(changeProjectRequested({selectedModels, project}));\n  }\n\n  public downloadModelFileClicked = () => {\n    const url = this.model.uri;\n    this.store.dispatch(getSignedUrl({url}));\n    this.store.select(selectSignedUrl(url))\n      .pipe(\n        filter(signed => !!signed?.signed),\n        map(({signed: signedUrl}) => signedUrl),\n        take(1)\n      ).subscribe(signed => {\n      const a = document.createElement('a') as HTMLAnchorElement;\n      a.target = '_blank';\n      a.href = signed;\n      a.click();\n    });\n  };\n\n  public downloadModelFile = () => {\n    const a = document.createElement('a') as HTMLAnchorElement;\n    a.target = '_blank';\n    a.href = this.modelSignedUri;\n    a.click();\n  };\n\n  deleteModelPopup() {\n    const confirmDialogRef = this.dialog.open(CommonDeleteDialogComponent, {\n      data: {\n        entity: this._model,\n        numSelected: this.numSelected,\n        entityType: EntityTypeEnum.model,\n        useCurrentEntity: this.showButton\n      },\n      width: '600px',\n      disableClose: true\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.store.dispatch(setSelectedModels({models: []}));\n        this.store.dispatch(modelSelectionChanged({model: null, project: this.projectId || this.model?.project?.id || '*'}));\n        this.store.dispatch(fetchModelsRequested());\n        this.store.dispatch(new CancelModelEdit());\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component} from '@angular/core';\nimport {ModelMenuComponent} from '../../../../webapp-common/models/containers/model-menu/model-menu.component';\n\n@Component({\n  selector: 'sm-model-menu-extended',\n  templateUrl: '../../../../webapp-common/models/containers/model-menu/model-menu.component.html',\n  styleUrls: ['../../../../webapp-common/models/containers/model-menu/model-menu.component.scss']\n})\nexport class ModelMenuExtendedComponent extends ModelMenuComponent {\n\n  set contextMenu(data) {}\n  get contextMenu() {\n    return this;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport { ModelMenuComponent } from '../../webapp-common/models/containers/model-menu/model-menu.component';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {CommonLayoutModule} from '../../webapp-common/layout/layout.module';\nimport { ModelMenuExtendedComponent } from './containers/model-menu-extended/model-menu-extended.component';\n\n@NgModule({\n  declarations: [ModelMenuComponent, ModelMenuExtendedComponent],\n  exports     : [ModelMenuComponent, ModelMenuExtendedComponent],\n  imports     : [\n    CommonLayoutModule,\n    CommonModule,\n    SMSharedModule\n  ]\n})\nexport class FeatureModelsModule {\n}\n","import {Component} from '@angular/core';\nimport {ProjectCardMenuComponent} from '@common/shared/ui-components/panel/project-card-menu/project-card-menu.component';\n\n\n@Component({\n  selector: 'sm-project-card-menu-extended',\n  templateUrl: '../../../../webapp-common/shared/ui-components/panel/project-card-menu/project-card-menu.component.html',\n  styleUrls: ['../../../../webapp-common/shared/ui-components/panel/project-card-menu/project-card-menu.component.scss']\n})\nexport class ProjectCardMenuExtendedComponent extends ProjectCardMenuComponent{\n  set contextMenu(data) {}\n  get contextMenu() {\n    return this;\n  }\n}\n","<sm-menu buttonClass=\"al-ico-bars-menu al-icon sm\" [showCart]=\"false\">\n  <sm-menu-item itemLabel=\"Rename\"\n                iconClass=\"al-icon al-color blue-800 al-ico-edit\"\n                [disabled]=\"!project.company?.id\"\n                [iconFontSize]=\"20\"\n                (itemClicked)=\"projectNameInlineActivated.emit()\"></sm-menu-item>\n  <sm-menu-item itemLabel=\"New Project\"\n                [iconFontSize]=\"20\"\n                iconClass=\"al-icon al-color blue-800 al-ico-add\"\n                (itemClicked)=\"newProjectClicked.emit(project.id)\"></sm-menu-item>\n  <sm-menu-item itemLabel=\"Move to\"\n                [iconFontSize]=\"20\"\n                iconClass=\"al-icon al-color blue-800 al-ico-move-to\"\n                (itemClicked)=\"moveToClicked.emit(project.id)\"></sm-menu-item>\n  <sm-menu-item itemLabel=\"Delete\"\n                [iconFontSize]=\"20\"\n                iconClass=\"al-icon al-color blue-800 al-ico-trash\"\n                (itemClicked)=\"deleteProjectClicked.emit(project)\"></sm-menu-item>\n  <ng-content select=\"[extendedCardMenu]\"></ng-content>\n</sm-menu>\n","export function isDeletableProject(readyForDeletion) {\n  return (readyForDeletion.experiments.unarchived + readyForDeletion.models.unarchived) === 0;\n}\n\nexport function getDeletePopupEntitiesList(): string {\n  return 'experiments or models';\n}\n\nexport function getDeleteProjectPopupStatsBreakdown(readyForDeletion, statsSubset: 'archived' | 'unarchived' | 'total'): string {\n  return `${readyForDeletion.experiments[statsSubset] > 0 ? readyForDeletion.experiments[statsSubset] + ' experiments ' : ''}\n          ${readyForDeletion.models[statsSubset] > 0 ? readyForDeletion.models[statsSubset] + ' models ' : ''}`;\n}\n\nexport function readyForDeletionFilter(readyForDeletion) {\n  return !(readyForDeletion.experiments === null || readyForDeletion.models === null);\n}\n","<div class=\"sm-card-list-layout projects\">\n  <ng-content></ng-content>\n  <ng-container *ngFor=\"let project of projects; let last=last\">\n    <sm-project-card\n      (deleteProjectClicked)=\"deleteProjectClicked.emit($event)\"\n      (projectCardClicked)=\"projectCardClicked.emit($event)\"\n      (newProjectClicked)=\"createNewProjectClicked.emit($event)\"\n      (projectNameChanged)=\"projectNameChanged.emit({project: project.id, name:$event})\"\n      (moveToClicked)=\"moveToClicked.emit($event)\"\n      *ngIf=\"!last || (last && noMoreProjects)\"\n      [hideMenu]=\"['All Experiments'].includes(project.name) || project.isRoot || isExample(project)\"\n      [project]=\"project\">\n    </sm-project-card>\n  </ng-container>\n\n  <div class=\"load-more\" *ngIf=\"!noMoreProjects && projects?.length > pageSize\">\n    <button (click)=\"loadMore.emit()\" class=\"btn btn-primary load-more-btn\">LOAD MORE</button>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ProjectsGetAllResponseSingle} from '../../../../business-logic/model/projects/projectsGetAllResponseSingle';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {isExample} from '../../../shared/utils/shared-utils';\nimport {pageSize} from '../../common-projects.consts';\n\n@Component({\n  selector: 'sm-projects-list',\n  templateUrl: './projects-list.component.html',\n  styleUrls: ['./projects-list.component.scss']\n})\nexport class ProjectsListComponent {\n  isExample = isExample;\n  pageSize = pageSize;\n\n  @Input() projects: Array<ProjectsGetAllResponseSingle>;\n  @Input() noMoreProjects: boolean;\n  @Output() projectCardClicked = new EventEmitter<ProjectsGetAllResponseSingle>();\n  @Output() projectNameChanged = new EventEmitter<{ project: string, name: string }>();\n  @Output() deleteProjectClicked = new EventEmitter<Project>();\n  @Output() loadMore = new EventEmitter();\n  @Output() moveToClicked = new EventEmitter<string>();\n  @Output() createNewProjectClicked = new EventEmitter<string>();\n\n}\n","<div class=\"sm-card-list-header\">\n  <div class=\"recent-title\">\n    <sm-menu [header]=\"sortByTitle\" [iconClass]=\"sortOrder===1?'fa fa-caret-up':'fa fa-caret-down' \" class=\"menu\">\n      <sm-menu-item itemLabel=\"RECENT\" (itemClicked)=\"orderByChanged.emit('last_update')\"></sm-menu-item>\n      <sm-menu-item itemLabel=\"NAME\" (itemClicked)=\"orderByChanged.emit('name')\"></sm-menu-item>\n    </sm-menu>\n    <sm-show-only-user-work></sm-show-only-user-work>\n  </div>\n  <div>\n    <button *ngIf=\"!hideCreateButton\" class=\"btn btn-primary d-flex align-items-center\"\n            (click)=\"createProjectClicked.emit(selectedProject)\">\n      <i class=\"al-icon al-color blue-400 al-ico-add sm mr-2\"></i>NEW PROJECT\n    </button>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {TableSortOrderEnum} from '../../../shared/ui-components/data/table/table.consts';\n\n@Component({\n  selector: 'sm-projects-header',\n  templateUrl: './projects-header.component.html',\n  styleUrls: ['./projects-header.component.scss']\n})\nexport class ProjectsHeaderComponent {\n  @Input() hideCreateButton: boolean;\n  @Input() searchQuery: string;\n  @Input() sortOrder: TableSortOrderEnum;\n  @Input() selectedProject;\n\n  @Input() set sortByField(sortByField: string) {\n    this.sortByTitle = sortByField.includes('name') ? 'NAME' : 'RECENT';\n  }\n\n  @Output() orderByChanged = new EventEmitter<string>();\n  @Output() searchChanged = new EventEmitter<string>();\n  @Output() createProjectClicked = new EventEmitter<string>();\n  @ViewChild('menu') vcDropDownMenu;\n  public sortByTitle: string;\n}\n\n\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {CommonProjectsPageComponent} from '../../webapp-common/projects/containers/projects-page/common-projects-page.component';\n\nexport const routes: Routes = [\n  {path: '', component: CommonProjectsPageComponent}\n];\n\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class ProjectRouterModule {\n}\n\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {\n  CommonProjectReadyForDeletion,\n  selectNoMoreProjects,\n  selectProjectReadyForDeletion,\n  selectProjectsData,\n  selectProjectsOrderBy,\n  selectProjectsSortOrder\n} from '../../common-projects.reducer';\nimport {\n  CheckProjectForDeletion,\n  GetAllProjectsPageProjects,\n  ProjectUpdated,\n  ResetProjects,\n  ResetProjectsSearchQuery,\n  ResetReadyToDelete,\n  SetProjectsOrderBy,\n  setProjectsSearchQuery\n} from '../../common-projects.actions';\nimport {Router} from '@angular/router';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ProjectsGetAllResponseSingle} from '../../../../business-logic/model/projects/projectsGetAllResponseSingle';\nimport {ProjectDialogComponent} from '../../../shared/project-dialog/project-dialog.component';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  filter,\n  map,\n  skip,\n  withLatestFrom\n} from 'rxjs/operators';\nimport {ConfirmDialogComponent} from '../../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport * as coreProjectsActions from '../../../core/actions/projects.actions';\nimport {setDeep, setSelectedProjectId} from '../../../core/actions/projects.actions';\nimport {InitSearch, ResetSearch} from '../../../common-search/common-search.actions';\nimport {ICommonSearchState, selectSearchQuery} from '../../../common-search/common-search.reducer';\nimport {\n  getDeletePopupEntitiesList,\n  getDeleteProjectPopupStatsBreakdown,\n  isDeletableProject,\n  readyForDeletionFilter\n} from '../../../../features/projects/projects-page.utils';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {get} from 'lodash/fp';\nimport {selectShowOnlyUserWork} from '../../../core/reducers/users-reducer';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {CommonDeleteDialogComponent} from '../../../shared/entity-page/entity-delete/common-delete-dialog.component';\nimport {resetDeleteState} from '../../../shared/entity-page/entity-delete/common-delete-dialog.actions';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {StatsStatusCount} from '../../../../business-logic/model/projects/statsStatusCount';\nimport {isExample} from '../../../shared/utils/shared-utils';\nimport {selectSelectedProject} from '../../../core/reducers/projects.reducer';\nimport {Projects} from '@angular/cli/lib/config/workspace-schema';\n\n@Component({\n  selector: 'sm-common-projects-page',\n  templateUrl: './common-projects-page.component.html',\n  styleUrls: ['./common-projects-page.component.scss']\n})\nexport class CommonProjectsPageComponent implements OnInit, OnDestroy {\n  public projectsList$: Observable<Projects[]>;\n  public projectsOrderBy$: Observable<string>;\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  public ALL_EXPERIMENTS_CARD: ProjectsGetAllResponseSingle = {\n    id: '*',\n    name: 'All Experiments',\n    stats: {\n      active: {\n        status_count: {queued: '∞' as any, in_progress: '∞' as any, published: '∞' as any},\n        total_runtime: 0\n      }\n    }\n  };\n\n  public ROOT_EXPERIMENTS_CARD: ProjectsGetAllResponseSingle = {\n    name: '[.]',\n    stats: {\n      active: {\n        status_count: {queued: 0, in_progress: 0, closed: 0},\n        total_runtime: 0\n      }\n    }\n  };\n  /* eslint-enable @typescript-eslint/naming-convention */\n  private searchSubs: Subscription;\n  private projectReadyForDeletion$: Observable<CommonProjectReadyForDeletion>;\n  private projectReadyForDeletionSub: Subscription;\n  private searchQuery$: Observable<ICommonSearchState['searchQuery']>;\n  public noMoreProjects$: Observable<boolean>;\n  public projectsSortOrder$: Observable<1 | -1>;\n  private projectDialog: MatDialogRef<ProjectDialogComponent, any>;\n  public selectedProjectId$: Observable<string>;\n  private showOnlyUserWorkSub$: Subscription;\n  private selectedProjectSub: Subscription;\n  private selectedProject$: Observable<Project>;\n  private selectedProjectIdSub: Subscription;\n\n  constructor(public store: Store<any>, private router: Router, private dialog: MatDialog) {\n    this.searchQuery$ = this.store.select(selectSearchQuery);\n    this.projectsOrderBy$ = this.store.select(selectProjectsOrderBy);\n    this.projectsSortOrder$ = this.store.select(selectProjectsSortOrder);\n    this.noMoreProjects$ = this.store.select(selectNoMoreProjects);\n    this.selectedProjectId$ = this.store.select(selectRouterParams).pipe(map(params => get('projectId', params)));\n    this.selectedProject$ = this.store.select(selectSelectedProject);\n\n    this.projectReadyForDeletion$ = this.store.select(selectProjectReadyForDeletion).pipe(\n      distinctUntilChanged(),\n      filter(readyForDeletion => readyForDeletionFilter(readyForDeletion)));\n    this.projectsList$ = combineLatest([\n      this.store.select(selectProjectsData),\n      this.store.select(selectSelectedProject)\n    ]).pipe(\n      debounceTime(0),\n      withLatestFrom(this.selectedProjectId$, this.searchQuery$),\n      map(([[projectsList, selectedProject], selectedProjectId, searchQuery]) => {\n        if ((searchQuery?.query || searchQuery?.regExp)) {\n          return projectsList;\n        } else {\n          if (selectedProject?.sub_projects?.length === 0 && selectedProjectId === selectedProject?.id) {\n            this.router.navigateByUrl(`projects/${selectedProject.id}/experiments`);\n            return [];\n          }\n          const pageProjectsList = ([{\n            ...((selectedProjectId && selectedProject) ? selectedProject : this.ALL_EXPERIMENTS_CARD),\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            id: selectedProjectId ? selectedProjectId : '*', name: 'All Experiments', sub_projects: null,\n            ...(selectedProject && {stats: {active: this.calculateAllExperimentsProjectStats(selectedProject, projectsList)}})\n          } as ProjectsGetAllResponseSingle]);\n          return pageProjectsList.concat(projectsList);\n        }\n      })\n    );\n\n    this.syncAppSearch();\n  }\n\n  ngOnInit() {\n    // this.store.dispatch(new ResetSelectedProject());\n    this.store.dispatch(setDeep({deep: false}));\n    this.store.dispatch(new GetAllProjectsPageProjects());\n\n    this.selectedProjectIdSub = this.selectedProjectId$.pipe(\n      filter(projectId => !projectId),\n      distinctUntilChanged(),\n    ).subscribe(() => {\n        this.store.dispatch(new ResetProjectsSearchQuery());\n        this.store.dispatch(new GetAllProjectsPageProjects());\n      }\n    );\n    this.selectedProjectSub = this.selectedProject$.pipe(\n      filter(project => (!!project)),\n      distinctUntilKeyChanged('id'),\n      skip(1),\n    ).subscribe(() => {\n      this.store.dispatch(new ResetProjectsSearchQuery());\n      this.store.dispatch(new GetAllProjectsPageProjects());\n    });\n    this.showOnlyUserWorkSub$ = this.store.select(selectShowOnlyUserWork).pipe(skip(1)).subscribe(() => {\n      this.store.dispatch(new ResetProjectsSearchQuery());\n      this.store.dispatch(new GetAllProjectsPageProjects());\n    });\n\n    this.projectReadyForDeletionSub = this.projectReadyForDeletion$.subscribe(readyForDeletion => {\n      if (isDeletableProject(readyForDeletion)) {\n        this.showDeleteDialog(readyForDeletion);\n      } else {\n        this.showConfirmDialog(readyForDeletion);\n      }\n    });\n  }\n\n  private showConfirmDialog(readyForDeletion: CommonProjectReadyForDeletion) {\n    const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: `Unable to Delete Project`,\n        body: `You cannot delete project \"<b>${readyForDeletion.project.name}</b>\" with un-archived ${getDeletePopupEntitiesList()}. <br/>\n                   You have: ${getDeleteProjectPopupStatsBreakdown(readyForDeletion, 'unarchived')} in this project. <br/>\n                   If you wish to delete this project, you must archive, delete, or move these items to another project.`,\n        no: 'OK',\n        iconClass: 'i-alert',\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe(() => {\n      this.store.dispatch(new ResetReadyToDelete());\n    });\n  }\n\n  private showDeleteDialog(readyForDeletion: CommonProjectReadyForDeletion) {\n    const confirmDialogRef = this.dialog.open(CommonDeleteDialogComponent, {\n      data: {\n        entity: readyForDeletion.project,\n        numSelected: 1,\n        entityType: EntityTypeEnum.project,\n        projectStats: readyForDeletion\n      },\n      width: '600px',\n      disableClose: true\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.store.dispatch(resetDeleteState());\n        this.store.dispatch(new ResetProjects());\n        this.store.dispatch(new GetAllProjectsPageProjects());\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.stopSyncSearch();\n    this.projectReadyForDeletionSub.unsubscribe();\n    this.showOnlyUserWorkSub$.unsubscribe();\n    this.selectedProjectSub.unsubscribe();\n    this.selectedProjectIdSub.unsubscribe();\n    this.store.dispatch(new ResetReadyToDelete());\n    this.store.dispatch(new ResetProjectsSearchQuery());\n  }\n\n  stopSyncSearch() {\n    this.store.dispatch(new ResetSearch());\n    this.searchSubs.unsubscribe();\n  }\n\n\n  syncAppSearch() {\n    this.store.dispatch(new InitSearch('Search for projects'));\n    this.searchSubs = this.searchQuery$.pipe(skip(1)).subscribe(query => this.search(query));\n  }\n\n  public projectCardClicked(project: ProjectsGetAllResponseSingle) {\n    if (project.name === 'All Experiments') {\n      this.store.dispatch(setDeep({deep: true}));\n    }\n    this.router.navigateByUrl((project?.sub_projects?.length > 0) ? `projects/${project.id}/projects` :\n      (project.id !== '*' ? `projects/${project.id}` : `projects/${project.id}/experiments`));\n    this.store.dispatch(setSelectedProjectId({projectId: project.id, example: isExample(project)}));\n  }\n\n  search(query: ICommonSearchState['searchQuery']) {\n    this.store.dispatch(setProjectsSearchQuery(query));\n  }\n\n  orderByChanged(sortByFieldName: string) {\n    this.store.dispatch(new SetProjectsOrderBy(sortByFieldName));\n  }\n\n  projectNameChanged(updatedProject) {\n    this.store.dispatch(new ProjectUpdated(updatedProject));\n  }\n\n  deleteProject(project: Project) {\n    this.store.dispatch(new CheckProjectForDeletion(project));\n  }\n\n  loadMore() {\n    this.store.dispatch(new GetAllProjectsPageProjects());\n  }\n\n\n  openProjectDialog(projectId?: string, mode?: string) {\n    this.projectDialog = this.dialog.open(ProjectDialogComponent, {\n      data: {\n        mode,\n        projectId\n      }\n    });\n    this.projectDialog.afterClosed().subscribe(projectHasBeenUpdated => {\n      if (projectHasBeenUpdated) {\n        this.store.dispatch(new ResetProjectsSearchQuery());\n        this.store.dispatch(new GetAllProjectsPageProjects());\n        this.store.dispatch(coreProjectsActions.getAllSystemProjects());\n      }\n    });\n  }\n\n  private calculateAllExperimentsProjectStats(selectedProject: ProjectsGetAllResponseSingle, projectsList: ProjectsGetAllResponseSingle[]): StatsStatusCount {\n    const stats: StatsStatusCount = {};\n    for (const key of Object.keys(selectedProject.stats.active)) {\n      if(['completed_tasks', 'running_tasks', 'total_tasks', 'total_runtime'].includes(key)){\n        stats[key] = projectsList.map(project => (project.stats.active[key] || 0)).reduce((a, b) => a + b, 0);\n      }\n    }\n    return stats;\n  }\n\n\n}\n","<sm-projects-list\n  (deleteProjectClicked)=\"deleteProject($event)\"\n  (loadMore)=\"loadMore()\"\n  (projectCardClicked)=\"projectCardClicked($event)\"\n  (projectNameChanged)=\"projectNameChanged($event)\"\n  (createNewProjectClicked)=\"openProjectDialog($event, 'create')\"\n  (moveToClicked)=\"openProjectDialog($event, 'move')\"\n  [noMoreProjects]=\"noMoreProjects$ | async\"\n  [projects]=\"projectsList$ | async\"\n>\n  <sm-projects-header\n    (createProjectClicked)=\"openProjectDialog($event, 'create')\"\n    (orderByChanged)=\"orderByChanged($event)\"\n    [hideCreateButton]=\"false\"\n    [sortByField]=\"projectsOrderBy$ | async\"\n    [sortOrder]=\"projectsSortOrder$ | async\"\n    [selectedProject]=\"selectedProjectId$ | async\"\n  ></sm-projects-header>\n</sm-projects-list>\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {StoreModule} from '@ngrx/store';\nimport {ProjectRouterModule} from './projects-routing.module';\nimport {projectsReducer} from './projects.reducer';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonProjectsModule} from '../../webapp-common/projects/common-projects.module';\n\nexport const projectSyncedKeys = ['showHidden'];\n\n@NgModule({\n  imports        : [\n    CommonModule,\n    SMSharedModule,\n    ProjectRouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonProjectsModule,\n    StoreModule.forFeature('projects', projectsReducer),\n  ],\n  declarations   : []\n})\nexport class ProjectsModule {\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {\n  CommonProjectReadyForDeletion,\n  commonProjectsInitState,\n  commonProjectsReducer,\n  ICommonProjectsState\n} from '@common/projects/common-projects.reducer';\nimport {PROJECTS_ACTIONS} from '@common/projects/common-projects.consts';\nimport {selectSelectedProject} from '@common/core/reducers/projects.reducer';\n\nexport type IProjectReadyForDeletion = CommonProjectReadyForDeletion;\n\nexport interface IProjectsState extends ICommonProjectsState {\n\n  projectReadyForDeletion: IProjectReadyForDeletion;\n}\n\nconst projectsInitState: IProjectsState = {\n        ...commonProjectsInitState,\n        projectReadyForDeletion: {\n          project: null, experiments: null, models: null\n        }\n      };\n\nexport const projectsReducer = (state: IProjectsState = projectsInitState, action): IProjectsState => {\n  switch (action.type) {\n    case PROJECTS_ACTIONS.CHECK_PROJECT_FOR_DELETION:\n      return {...state, projectReadyForDeletion: {...projectsInitState.projectReadyForDeletion, project: action.payload.project}};\n    case PROJECTS_ACTIONS.RESET_READY_TO_DELETE:\n      return {...state, projectReadyForDeletion: projectsInitState.projectReadyForDeletion};\n    case PROJECTS_ACTIONS.SET_PROJECT_READY_FOR_DELETION:\n      return {...state, projectReadyForDeletion: {...state.projectReadyForDeletion, ...action.payload.readyForDeletion}};\n    default:\n      return commonProjectsReducer(state, action);\n  }\n};\n\nexport const projects = state => state.projects as IProjectsState;\n\nexport const selectShowHidden = createSelector(projects, () => false);\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {SMSharedModule} from '@common/shared/shared.module';\nimport {ProjectCardComponent} from '@common/shared/ui-components/panel/project-card/project-card.component';\nimport {ProjectCardMenuExtendedComponent} from '~/features/projects/containers/project-card-menu-extended/project-card-menu-extended.component';\nimport {ProjectCardMenuComponent} from '@common/shared/ui-components/panel/project-card-menu/project-card-menu.component';\n\nconst _declarations = [\n  ProjectCardComponent,\n  ProjectCardMenuComponent,\n  ProjectCardMenuExtendedComponent\n];\n\n@NgModule({\n  imports        : [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SMSharedModule\n  ],\n  declarations   : [..._declarations],\n  exports        : [..._declarations]\n})\nexport class ProjectsSharedModule {\n}\n","<div class=\"header d-flex align-items-center justify-content-center h-100 w-100 flex-column\"   *ngIf=\"currentUser$ | async as currentUser\">\n    <div class=\"user-icon\"> </div>\n    <sm-inline-edit class=\"dark profile-name\"\n                    [originalText]=\"currentUser.name\"\n                    [editable]=\"true\"\n                    (textChanged)=\"nameChange($event, currentUser)\">\n      <div class=\"text-center\">{{currentUser.name}}</div>\n    </sm-inline-edit>\n    <div *ngIf=\"currentUser.email\" class=\"profile-email text\">Email address:</div>\n    <div>{{currentUser.email}}</div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {filter, take} from 'rxjs/operators';\nimport {selectCurrentUser} from '@common/core/reducers/users-reducer';\nimport {getAllCredentials} from '@common/core/actions/common-auth.actions';\nimport {updateCurrentUser} from '@common/core/actions/users.actions';\nimport {GetCurrentUserResponseUserObject} from '../../../../business-logic/model/users/getCurrentUserResponseUserObject';\n\n@Component({\n  selector: 'sm-profile-name',\n  templateUrl: './profile-name.component.html',\n  styleUrls: ['./profile-name.component.scss']\n})\nexport class ProfileNameComponent implements OnInit {\n\n  currentUser$ = this.store.select(selectCurrentUser);\n\n  constructor(private store: Store<any>) { }\n\n  ngOnInit(): void {\n    this.currentUser$\n      .pipe(filter(user => !!user), take(1))\n      .subscribe(() => {\n        this.store.dispatch(getAllCredentials());\n      });\n  }\n\n\n  nameChange(updatedUserName: string, currentUser: GetCurrentUserResponseUserObject) {\n    const user = {name: updatedUserName, user: currentUser.id};\n    this.store.dispatch(updateCurrentUser({user}));\n  }\n}\n","<form [formGroup]=\"S3Form\" *ngIf=\"S3Form\">\n  <div class=\"row s3-row header\" *ngIf=\"bucketCredentials.controls.length>0\">\n    <div class=\"col-6\">Bucket</div>\n    <div class=\"col-4\">Key</div>\n    <div class=\"col-6\">Secret / SAS</div>\n    <div class=\"col-2\">AWS Region</div>\n    <div class=\"col-6\">Host (Endpoint)</div>\n  </div>\n  <div *ngFor=\"let bucket of bucketCredentials.controls; let i = index; trackBy: trackByFn\"\n       formArrayName=\"bucketCredentials\">\n    <div class=\"row s3-row\" [formGroupName]=\"i\">\n      <div class=\"col-6\">\n        <input matInput class=\"form-control\" formControlName=\"Bucket\">\n      </div>\n      <div class=\"col-4\">\n        <input matInput class=\"form-control\" formControlName=\"Key\">\n      </div>\n      <div class=\"col-6\">\n        <input matInput class=\"form-control\" formControlName=\"Secret\">\n      </div>\n      <div class=\"col-2\">\n        <input matInput class=\"form-control\" formControlName=\"Region\" placeholder=\"us-east-2\">\n      </div>\n      <div class=\"col-4\">\n        <input matInput class=\"form-control\" formControlName=\"Endpoint\" placeholder=\"Leave empty for AWS S3\">\n      </div>\n      <div class=\"col-2 d-flex justify-content-end\">\n        <span class=\"delete-button\" (click)=\"removeBucket(i)\" type=\"button\" smTooltip=\"Remove\">\n          <i class=\"al-icon sm-md\" [ngClass]=\"ICONS.REMOVE\"></i>\n        </span>\n      </div>\n    </div>\n  </div>\n  <div>\n    <a href=\"\" class=\"add-button\" (click)=\"$event.preventDefault(); addBucket({})\" type=\"button\">\n      <i class=\"al-icon sm al-ico-plus mr-1 vertical-middle\"></i>Add access keys\n    </a>\n  </div>\n</form>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {FormArray, FormBuilder, FormGroup} from '@angular/forms';\nimport {get} from 'lodash/fp';\nimport {ALLEGRO_TUTORIAL_BUCKET} from '../../../../app.constants';\nimport {debounceTime} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport { ICONS } from '../../../constants';\n\n@Component({\n  selector   : 'sm-s3-access',\n  templateUrl: './s3-access.component.html',\n  styleUrls  : ['./s3-access.component.scss']\n})\nexport class S3AccessComponent implements OnDestroy, OnInit {\n  readonly ALLEGRO_TUTORIAL_BUCKET = ALLEGRO_TUTORIAL_BUCKET;\n  readonly BUCKET_CREDENTIALS      = 'bucketCredentials';\n  public S3Form: FormGroup;\n  public ICONS                     = ICONS;\n  private formChangeSubscription: Subscription;\n\n  @Input() set s3bucketCredentials(s3bucketCredentials) {\n    this.formChangeSubscription && this.formChangeSubscription.unsubscribe();\n    this.buildS3Form(s3bucketCredentials);\n    this.formChangeSubscription = this.S3Form.valueChanges.pipe(debounceTime(300)).subscribe(formData => {\n      this.saveCredentials(this.S3Form.getRawValue());\n      this.disableTutorialBucket();\n    });\n  };\n\n  @Output() s3bucketCredentialsChanged = new EventEmitter();\n\n  constructor(private store: Store<any>, private formBuilder: FormBuilder) {\n  }\n\n  get bucketCredentials(): FormArray {\n    return this.S3Form.get(this.BUCKET_CREDENTIALS) as FormArray;\n  }\n\n  addBucket({Key = '', Secret = '', Region = '', Bucket = '', Endpoint = null} = {}) {\n    this.bucketCredentials.push(this.formBuilder.group({\n      Key,\n      Secret,\n      Region,\n      Bucket,\n      Endpoint: (Endpoint?.startsWith('http') || Endpoint === null)? Endpoint : `http${Endpoint?.endsWith('443') ? 's' : ''}://${Endpoint}`\n\n  }));\n  }\n\n  removeBucket(index) {\n    this.bucketCredentials.removeAt(index);\n  }\n\n  private buildS3Form(S3Credentials) {\n    this.S3Form = this.formBuilder.group({\n      bucketCredentials: this.formBuilder.array([]),\n    });\n\n    if (get('bucketCredentials.length', S3Credentials)) {\n      S3Credentials.bucketCredentials.forEach(bucket => {\n        this.addBucket(bucket || {});\n      });\n    }\n\n    this.disableTutorialBucket();\n  }\n\n  public trackByFn(index, item) {\n    return index;\n  }\n\n  public saveCredentials(formData) {\n    this.s3bucketCredentialsChanged.emit(formData);\n  }\n\n  public disableTutorialBucket() {\n    const tutorialBucketIndex = this.S3Form.get(this.BUCKET_CREDENTIALS).value.findIndex(cre =>\n      cre.Bucket === this.ALLEGRO_TUTORIAL_BUCKET);\n    if (tutorialBucketIndex >= 0) {\n      this.S3Form.get(this.BUCKET_CREDENTIALS).get(tutorialBucketIndex.toString()).disable();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.formChangeSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectS3BucketCredentials} from '@common/core/reducers/common-auth-reducer';\nimport {updateS3Credential} from '@common/core/actions/common-auth.actions';\nimport {AdminService} from '~/shared/services/admin.service';\n\n@Component({\n  selector: 'sm-profile-key-storage',\n  templateUrl: './profile-key-storage.component.html',\n  styleUrls: ['./profile-key-storage.component.scss']\n})\nexport class ProfileKeyStorageComponent implements OnInit {\n\n  public s3BucketCredentials$ = this.store.select(selectS3BucketCredentials);\n\n  constructor(private store: Store<any>,\n              private adminService: AdminService) { }\n\n  ngOnInit(): void {\n  }\n\n  onS3BucketCredentialsChanged(formData) {\n    this.adminService.resetS3Services();\n    this.store.dispatch(updateS3Credential({s3BucketCredentials: formData}));\n  }\n}\n","<div class=\"title\">\n  WEB APP CLOUD ACCESS <i\n  class=\"al-icon al-ico-info-circle sm info ml-3\"\n  smTooltip=\"Local, browser cached, access tokens that facilitate retrieving your cloud stored resources\"\n  matTooltipPosition=\"above\"\n></i>\n</div>\n<div class=\"section\">\n  <sm-s3-access\n    [s3bucketCredentials]=\"s3BucketCredentials$ | async\"\n    (s3bucketCredentialsChanged)=\"onS3BucketCredentialsChanged($event)\">\n  </sm-s3-access>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sm-webapp-configuration',\n  templateUrl: './webapp-configuration.component.html',\n  styleUrls: ['./webapp-configuration.component.scss']\n})\nexport class WebappConfigurationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<section>\n  <!-- <div class=\"title first\">User Preferences</div> -->\n  <!-- <sm-profile-preferences class=\"section\"></sm-profile-preferences> -->\n  <sm-profile-key-storage></sm-profile-key-storage>\n</section>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sm-user-data',\n  templateUrl: './user-data.component.html',\n  styleUrls: ['./user-data.component.scss']\n})\nexport class UserDataComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { EventEmitter, Input, Output, Directive } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport { ICONS } from '../../constants';\nimport {CredentialKey} from '../../../business-logic/model/auth/credentialKey';\n\n@Directive()\nexport class AdminCredentialTableBaseDirective {\n  @Input() credentials: CredentialKey[];\n  @Output() credentialRevoked = new EventEmitter();\n  public ICONS                = ICONS;\n  public dialog: MatDialog;\n\n  constructor(dialog: MatDialog) {\n    this.dialog = dialog;\n  }\n\n  confirmPopUp(credential) {\n    const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title    : 'Are you sure?',\n        body     : `Are you sure you want to revoke access key ${credential.access_key}?<br>\\n\n              When revoked, these credentials cannot be recovered.`,\n        yes      : 'Revoke',\n        no       : 'Cancel',\n        iconClass: 'i-alert',\n      }\n    });\n\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.credentialRevoked.emit(credential.access_key);\n      }\n    });\n  }\n\n}\n","<table class=\"admin-table\" *ngIf=\"credentials?.length\">\n  <thead>\n    <tr>\n      <th>Keys</th>\n      <th>Last used</th>\n      <th>Worker/IP</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let credential of credentials\">\n      <td>{{credential.access_key}}</td>\n      <td>{{credential?.last_used ? (credential.last_used |  date : TIME_FORMAT_STRING): 'Never'}}</td>\n      <td>{{credential?.last_used_from ? credential?.last_used_from : 'Not available'}}</td>\n      <td class=\"text-center\">\n          <div class=\"delete-button\" (click)=\"confirmPopUp(credential)\" type=\"button\" smTooltip=\"Revoke\">\n            <i class=\"al-icon sm-md  m-auto\" [ngClass]=\"ICONS.REMOVE\"></i>\n          </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n","import {Component} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {AdminCredentialTableBaseDirective} from '../admin-credential-table.base';\nimport {TIME_FORMAT_STRING} from '../../../constants';\n\n\n@Component({\n  selector   : 'sm-admin-credential-table',\n  templateUrl: './admin-credential-table.component.html',\n  styleUrls  : ['./admin-credential-table.component.scss']\n})\nexport class AdminCredentialTableComponent extends AdminCredentialTableBaseDirective {\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n  constructor(public dialog: MatDialog) {\n    super(dialog);\n  }\n}\n","<div class=\"title\">APP CREDENTIALS <i\n  class=\"fas fa-info-circle info\"\n  smTooltip=\"Credentials providing API access to this workspace\"\n  matTooltipPosition=\"above\"></i>\n</div>\n<div class=\"section mb-4\" *ngFor=\"let cred of credentials$ | async | keyvalue\">\n  <sm-admin-credential-table [credentials]=\"cred?.value\"\n                             (credentialRevoked)=\"onCredentialRevoked($event)\">\n  </sm-admin-credential-table>\n  <span\n    class=\"add-button d-flex align-items-center pointer\"\n    [class.disabled]=\"creatingCredentials\"\n    (click)=\"createCredential()\"><i class=\"al-icon sm al-ico-plus mr-1\"></i> Create new credentials\n  </span>\n</div>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Observable, Subscription} from 'rxjs';\nimport {CredentialKeyExt, selectCredentials, selectNewCredential} from '@common/core/reducers/common-auth-reducer';\nimport {selectCurrentUser} from '@common/core/reducers/users-reducer';\nimport {filter, take} from 'rxjs/operators';\nimport {credentialRevoked, getAllCredentials} from '@common/core/actions/common-auth.actions';\nimport {Store} from '@ngrx/store';\nimport { createCredential } from '@common/core/actions/common-auth.actions';\nimport {GetCurrentUserResponseUserObject} from '~/business-logic/model/users/getCurrentUserResponseUserObject';\n\n@Component({\n  selector: 'sm-user-credentials',\n  templateUrl: './user-credentials.component.html',\n  styleUrls: ['./user-credentials.component.scss']\n})\nexport class UserCredentialsComponent implements OnInit, OnDestroy {\n\n  public credentials$: Observable<{ [workspaceId: string]: CredentialKeyExt[] }>;\n  private newCredentialSub: Subscription;\n  creatingCredentials = false;\n  private user: GetCurrentUserResponseUserObject;\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    this.store.select(selectCurrentUser)\n      .pipe(filter(user => !!user), take(1))\n      .subscribe(user => {\n        this.user = user;\n        this.store.dispatch(getAllCredentials());\n      });\n    this.credentials$ = this.store.select(selectCredentials);\n\n    this.newCredentialSub = this.store.select(selectNewCredential)\n      .subscribe(() => {\n        this.creatingCredentials = false;\n      });\n  }\n\n  createCredential() {\n    this.creatingCredentials = true;\n    this.store.dispatch(createCredential({workspace: this.user.company, openCredentialsPopup: true}));\n  }\n\n  onCredentialRevoked(accessKey) {\n    this.store.dispatch(credentialRevoked({accessKey, workspaceId: this.user.company.id}));\n  }\n\n  ngOnDestroy(): void {\n    this.newCredentialSub.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sm-workspace-configuration',\n  templateUrl: './workspace-configuration.component.html',\n  styleUrls: ['./workspace-configuration.component.scss']\n})\nexport class WorkspaceConfigurationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<section class=\"d-flex flex-column w-100\">\n  <sm-user-data></sm-user-data>\n  <sm-user-credentials></sm-user-credentials>\n</section>\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'sm-admin-footer-actions',\n  templateUrl: './admin-footer-actions.component.html',\n  styleUrls: ['./admin-footer-actions.component.scss']\n})\nexport class AdminFooterActionsComponent {\n  constructor() { }\n}\n","<footer>\n  <sm-admin-footer-actions></sm-admin-footer-actions>\n  <div class=\"version float-right\">\n    <span>WebApp: </span>\n    <span>{{version[\"docker-image\"] || version.version}}</span>\n    <ng-container *ngIf=\"(serverVersions$ | async) as serverVersions\">\n      <span> • Server: {{serverVersions?.server}}</span>\n      <span> • API: {{serverVersions?.api}}</span>\n    </ng-container>\n  </div>\n</footer>\n","import { Component, OnInit } from '@angular/core';\nimport {selectServerVersions} from '@common/core/reducers/users-reducer';\nimport {Store} from '@ngrx/store';\nimport version from '../../../../../version.json';\nimport {getApiVersion} from '@common/core/actions/users.actions';\n\n@Component({\n  selector: 'sm-admin-footer',\n  templateUrl: './admin-footer.component.html',\n  styleUrls: ['./admin-footer.component.scss']\n})\nexport class AdminFooterComponent implements OnInit {\n\n  public serverVersions$ = this.store.select(selectServerVersions);\n  public version = version;\n\n  constructor(private store: Store<any>) {\n    store.dispatch(getApiVersion());\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ProfileNameComponent} from '../../webapp-common/settings/admin/profile-name/profile-name.component';\nimport {WebappConfigurationComponent} from '../../webapp-common/settings/webapp-configuration/webapp-configuration.component';\nimport {WorkspaceConfigurationComponent} from '../../webapp-common/settings/workspace-configuration/workspace-configuration.component';\nimport {SettingsComponent} from './settings.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'profile',\n        pathMatch: 'full'\n      },\n      {path: 'profile',\n        component: ProfileNameComponent,\n      },\n      {\n        path: 'webapp-configuration',\n        component: WebappConfigurationComponent,\n      },\n      {\n        path: 'workspace-configuration',\n        component: WorkspaceConfigurationComponent,\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule { }\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sm-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['../../webapp-common/settings/settings.component.scss']\n})\nexport class SettingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-drawer-container class=\"settings-container\">\n  <mat-drawer mode=\"side\" opened>\n    <mat-list class=\"pointer\" style=\"padding-top: 24px;\">\n      <mat-list-item routerLinkActive=\"active\" routerLink=\"profile\"> Profile </mat-list-item>\n      <mat-list-item routerLinkActive=\"active\" routerLink=\"webapp-configuration\"> Configuration </mat-list-item>\n      <mat-list-item routerLinkActive=\"active\" routerLink=\"workspace-configuration\"> Workspace </mat-list-item>\n    </mat-list>\n  </mat-drawer>\n  <mat-drawer-content>\n    <div class=\"section\">\n      <div class=\"content\">\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n    <sm-admin-footer></sm-admin-footer>\n  </mat-drawer-content>\n</mat-drawer-container>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { SettingsComponent } from '../settings/settings.component';\nimport {SMMaterialModule} from '../../webapp-common/shared/material/material.module';\nimport {SMSharedModule} from '@common/shared/shared.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {SharedModule} from '~/shared/shared.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {WebappConfigurationComponent} from '@common/settings/webapp-configuration/webapp-configuration.component';\nimport {WorkspaceConfigurationComponent} from '@common/settings/workspace-configuration/workspace-configuration.component';\nimport {ProfileKeyStorageComponent} from '@common/settings/admin/profile-key-storage/profile-key-storage.component';\nimport {ProfilePreferencesComponent} from '@common/settings/admin/profile-preferences/profile-preferences.component';\nimport {ProfileNameComponent} from '@common/settings/admin/profile-name/profile-name.component';\nimport {AdminFooterComponent} from '@common/settings/admin/admin-footer/admin-footer.component';\nimport {S3AccessComponent} from '@common/settings/admin/s3-access/s3-access.component';\nimport {AdminDialogTemplateComponent} from '@common/settings/admin/admin-dialog-template/admin-dialog-template.component';\nimport {AdminCredentialTableComponent} from '@common/settings/admin/admin-credential-table/admin-credential-table.component';\nimport {AdminFooterActionsComponent} from '~/features/settings/containers/admin/admin-footer-actions/admin-footer-actions.component';\nimport {UserCredentialsComponent} from '~/features/settings/containers/admin/user-credentials/user-credentials.component';\nimport {UserDataComponent} from '~/features/settings/containers/admin/user-data/user-data.component';\nimport {UsageStatsComponent} from '~/features/settings/containers/admin/usage-stats/usage-stats.component';\nimport {CreateCredentialDialogComponent} from '~/features/settings/containers/admin/create-credential-dialog/create-credential-dialog.component';\n\n\n\n@NgModule({\n  declarations: [\n    SettingsComponent,\n    UsageStatsComponent,\n    UserDataComponent,\n    UserCredentialsComponent,\n    AdminFooterActionsComponent,\n    AdminCredentialTableComponent,\n    AdminDialogTemplateComponent,\n    S3AccessComponent,\n    CreateCredentialDialogComponent,\n    AdminFooterComponent,\n    ProfileNameComponent,\n    ProfilePreferencesComponent,\n    ProfileKeyStorageComponent,\n    WorkspaceConfigurationComponent,\n    WebappConfigurationComponent,\n  ],\n  imports: [\n    CommonModule,\n    SettingsRoutingModule,\n    SMMaterialModule,\n    SMSharedModule,\n    ReactiveFormsModule, SharedModule, MatExpansionModule,\n  ],\n  exports: [\n    UserCredentialsComponent,\n    AdminFooterComponent,\n    ProfilePreferencesComponent,\n    ProfileNameComponent,\n    WebappConfigurationComponent,\n  ]\n})\nexport class SettingsModule { }\n","import {TableModel} from '@common/models/shared/models.model';\nimport {IExperimentInfo} from '~/features/experiments/shared/experiment-info.model';\nimport {Project} from '~/business-logic/model/projects/project';\nimport {Task} from '~/business-logic/model/tasks/task';\nimport {selectSelectedTableModel} from '@common/models/reducers';\nimport {createSelector} from '@ngrx/store';\nimport {selectSelectedExperiment} from '~/features/experiments/reducers';\nimport {selectRootProjects, selectSelectedProject} from '@common/core/reducers/projects.reducer';\nimport {formatStaticCrumb, prepareLinkData} from '@common/layout/breadcrumbs/breadcrumbs-common.utils';\n\nexport interface IBreadcrumbs {\n  project: Project;\n  projects: Project[];\n  experiment: IExperimentInfo;\n  model: TableModel;\n  task: Task;\n}\n\nexport const selectBreadcrumbsStringsBase = createSelector(\n  selectSelectedProject, selectSelectedExperiment, selectSelectedTableModel, selectRootProjects,\n  (project, experiment, model, projects) =>\n    ({project, experiment, model, projects}) as IBreadcrumbs);\n\n\nexport const prepareNames = (data: IBreadcrumbs) => {\n  const project    = prepareLinkData(data.project, true);\n  if (data.project) {\n    const subProjects = [];\n    const subProjectsNames = data.project?.name?.split('/');\n    let currentName = '';\n    subProjectsNames.forEach(name => {\n      currentName += currentName ? ('/' + name) : name;\n      const foundProject = [\n        ...data.projects,\n        {id: '*', name: 'All Experiments'},\n        {...data.project}\n      ].find(proj => currentName === proj.name);\n      subProjects.push(foundProject);\n    });\n    const subProjectsLinks = subProjects.map(subProject => ({\n      name: subProject?.name.substring(subProject?.name.lastIndexOf('/') + 1),\n      url: `projects/${subProject?.id}/projects`\n    })) as { name: string; url: string }[];\n    project.name = project.name.substring(project.name.lastIndexOf('/') + 1);\n    project.subCrumbs = subProjectsLinks;\n  }\n  const task       = prepareLinkData(data.task);\n  const experiment = (data.experiment) ? prepareLinkData(data.experiment, true) : {};\n  const model      = prepareLinkData(data.model, true);\n  const overview = formatStaticCrumb('overview');\n  const output      = formatStaticCrumb('');\n  const accountAdministration      = formatStaticCrumb('account-administration');\n  const experiments = formatStaticCrumb('experiments');\n  const models      = formatStaticCrumb('models');\n  const compare     = formatStaticCrumb('compare-experiments');\n\n\n  return {\n    ':projectId'         : project,\n    ':experimentId'      : experiment,\n    ':modelId'           : model,\n    ':taskId'            : task,\n    'compare-experiments': compare,\n    output,\n    experiments,\n    overview,\n    models,\n    execution: formatStaticCrumb('execution'),\n    'hyper-params' : formatStaticCrumb('hyper-params'),\n    artifacts: formatStaticCrumb('artifacts'),\n    general: formatStaticCrumb('general'),\n    log: formatStaticCrumb('logs'),\n    scalar: formatStaticCrumb('scalars'),\n    plots: formatStaticCrumb('plots'),\n    accountAdministration,\n    debugImages: formatStaticCrumb('Debug Samples'),\n  };\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {SideNavComponent} from './side-nav/side-nav.component';\nimport {SMSharedModule} from '../webapp-common/shared/shared.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {SurveyComponent} from './survey/survey.component';\nimport {SharedModule} from '../shared/shared.module';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n@NgModule({\n  declarations: [SideNavComponent, SurveyComponent],\n  exports: [SideNavComponent, SurveyComponent],\n    imports: [\n        FontAwesomeModule,\n        CommonModule,\n        SMSharedModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        SharedModule,\n    ]\n})\nexport class LayoutModule { }\n","import {TaskStatusEnum} from '../../business-logic/model/tasks/taskStatusEnum';\nimport {TaskTypeEnum} from '../../business-logic/model/tasks/taskTypeEnum';\n\nexport enum EntityTypeEnum {\n  experiment = 'experiment',\n  model = 'model',\n  project = 'project',\n}\n\nexport enum CircleTypeEnum {\n  completed = 'completed',\n  running = 'running',\n  pending = 'pending',\n  empty = 'empty',\n  'model-labels' = 'model-labels'\n}\n\nexport const EXPERIMENTS_STATUS_LABELS = {\n  [TaskStatusEnum.Created]     : 'Draft',\n  [TaskStatusEnum.Queued]      : 'Pending',\n  [TaskStatusEnum.InProgress]  : 'Running',\n  [TaskStatusEnum.Completed]   : 'Completed',\n  [TaskStatusEnum.Published]   : 'Published',\n  [TaskStatusEnum.Failed]      : 'Failed',\n  [TaskStatusEnum.Stopped]     : 'Completed',\n  [TaskStatusEnum.Closed]      : 'Closed',\n  [TaskTypeEnum.Testing]       : 'Testing',\n  [TaskTypeEnum.Training]      : 'Training',\n  [TaskTypeEnum.Inference]     : 'Inference',\n  [TaskTypeEnum.DataProcessing]: 'Data Processing',\n  [TaskTypeEnum.Application]   : 'Application',\n  [TaskTypeEnum.Monitor]       : 'Monitor',\n  [TaskTypeEnum.Controller]    : 'Controller',\n  [TaskTypeEnum.Optimizer]     : 'Optimizer',\n  [TaskTypeEnum.Service]       : 'Service',\n  [TaskTypeEnum.Qc]            : 'Qc',\n  [TaskTypeEnum.Custom]        : 'Custom'\n};\n","import {Directive, Input, OnDestroy, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectCurrentUser} from '../../webapp-common/core/reducers/users-reducer';\nimport {Subscription} from 'rxjs';\nimport {GetCurrentUserResponseUserObject} from \"../../business-logic/model/users/getCurrentUserResponseUserObject\";\n\n@Directive({\n  selector: '[smCheckPermission]'\n})\nexport class CheckPermissionDirective implements OnDestroy{\n  private userDataSubscription: Subscription;\n  private elseTemplateRef: TemplateRef<any>|null = null;\n  private user: GetCurrentUserResponseUserObject;\n  private blocked = true;\n\n  @Input() set smCheckPermission(permission: boolean | string) {\n    this.blocked = permission === false;\n    this.setUpView();\n  }\n\n  @Input()\n  set smCheckPermissionElse(templateRef: TemplateRef<any>|null) {\n    this.elseTemplateRef = templateRef;\n    this.setUpView();\n  }\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private store: Store<any>) {\n    this.userDataSubscription = this.store.select(selectCurrentUser)\n      .subscribe((user: GetCurrentUserResponseUserObject) => {\n        this.user = user;\n        this.setUpView();\n      });\n  }\n\n  setUpView() {\n    const allowed = !this.blocked && this.user && this.user.role !== 'guest';\n    this.viewContainer.clear();\n    if (allowed) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else if (this.elseTemplateRef) {\n      this.viewContainer.createEmbeddedView(this.elseTemplateRef);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.userDataSubscription?.unsubscribe();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {HttpClient} from '@angular/common/http';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {EMPTY} from 'rxjs';\nimport {ApiLoginService} from '~/business-logic/api-services/login.service';\nimport {BaseLoginService} from '@common/shared/services/login.service';\nimport {ConfigurationService} from '@common/shared/services/configuration.service';\nimport {UserPreferences} from '@common/user-preferences';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService extends BaseLoginService {\n\n  constructor(\n    protected httpClient: HttpClient,\n    protected loginApi: ApiLoginService,\n    protected dialog: MatDialog,\n    protected configService: ConfigurationService,\n    protected store: Store,\n    protected router: Router,\n    protected userPreferences: UserPreferences\n) {\n    super(httpClient, loginApi, dialog, configService, store, router, userPreferences);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  signup(signupInfo) {\n    return EMPTY;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getInviteInfo(inviteId: string) {\n    return EMPTY;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ssoLogin(params) {\n    return EMPTY;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ssoFlow(resolve) {\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  exports     : [],\n  imports     : [\n    CommonModule\n  ],\n})\nexport class SharedModule {\n}\n","import {HTTP} from '~/app.constants';\n\nexport const isFileserverUrl = (url: string) =>\n  url.startsWith(HTTP.FILE_BASE_URL);\n\nexport const convertToReverseProxy = (url: string) => url;\n","import {Action, createAction, props} from '@ngrx/store';\n\nconst COMMON_SEARCH_PREFIX = 'CommonSearch_';\n\nexport const COMMON_SEARCH_ACTIONS = {\n  SET_IS_SEARCHING      : COMMON_SEARCH_PREFIX + 'SET_IS_SEARCHING',\n  RESET_SEARCH          : COMMON_SEARCH_PREFIX + 'RESET_SEARCH',\n  INIT_SEARCH           : COMMON_SEARCH_PREFIX + 'INIT_SEARCH',\n  SET_SEARCH_QUERY      : COMMON_SEARCH_PREFIX + 'SET_SEARCH_QUERY',\n  SET_SEARCH_PLACEHOLDER: COMMON_SEARCH_PREFIX + 'SET_SEARCH_PLACEHOLDER',\n  SET_SEARCH_ACTIVE     : COMMON_SEARCH_PREFIX + 'SET_SEARCH_ACTIVE',\n};\n\nexport class SetIsSearching implements Action {\n  readonly type = COMMON_SEARCH_ACTIONS.SET_IS_SEARCHING;\n\n  constructor(public payload: boolean) {\n\n  }\n}\n\nexport class SetSearchActive implements Action {\n  readonly type = COMMON_SEARCH_ACTIONS.SET_SEARCH_ACTIVE;\n\n  constructor(public payload: boolean) {\n  }\n}\n\nexport const setSearchQuery = createAction(\n  COMMON_SEARCH_ACTIONS.SET_SEARCH_QUERY,\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport class SetSearchPlaceholder implements Action {\n  readonly type = COMMON_SEARCH_ACTIONS.SET_SEARCH_PLACEHOLDER;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class ResetSearch implements Action {\n  readonly type = COMMON_SEARCH_ACTIONS.RESET_SEARCH;\n\n  constructor() {\n  }\n}\n\nexport class InitSearch implements Action {\n  readonly type = COMMON_SEARCH_ACTIONS.INIT_SEARCH;\n\n  constructor(public payload: string) {\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {CommonSearchComponent} from './containers/common-search/common-search.component';\nimport {StoreModule} from '@ngrx/store';\nimport {commonSearchReducer} from './common-search.reducer';\n\n@NgModule({\n  imports     : [\n    CommonModule,\n    SMSharedModule,\n    StoreModule.forFeature('commonSearch', commonSearchReducer),\n  ],\n  declarations: [CommonSearchComponent],\n  exports     : [CommonSearchComponent]\n})\nexport class CommonSearchModule {\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {COMMON_SEARCH_ACTIONS, setSearchQuery} from './common-search.actions';\n\n\nexport interface ICommonSearchState {\n  isSearching: boolean;\n  searchQuery: {query: string; regExp?: boolean};\n  placeholder: string;\n  active: boolean;\n}\n\n// Todo remove selectedProjectId\nconst commonSearchInitState: ICommonSearchState = {\n  isSearching: false,\n  searchQuery: null,\n  placeholder: null,\n  active     : false\n};\n\nexport function commonSearchReducer<ActionReducer>(state: ICommonSearchState = commonSearchInitState, action): ICommonSearchState {\n\n  switch (action.type) {\n    case COMMON_SEARCH_ACTIONS.SET_IS_SEARCHING:\n      return {...state, isSearching: action.payload};\n    case setSearchQuery.type:\n      return {...state, searchQuery: action as ReturnType<typeof setSearchQuery>};\n    case COMMON_SEARCH_ACTIONS.SET_SEARCH_PLACEHOLDER:\n      return {...state, placeholder: action.payload};\n    case COMMON_SEARCH_ACTIONS.SET_SEARCH_ACTIVE:\n      return {...state, active: action.payload};\n    case COMMON_SEARCH_ACTIONS.INIT_SEARCH:\n      return {\n        ...state,\n        isSearching: false,\n        searchQuery: commonSearchInitState.searchQuery,\n        placeholder: action.payload || 'Search',\n        active     : false\n      };\n    case COMMON_SEARCH_ACTIONS.RESET_SEARCH:\n      return {\n        ...state,\n        isSearching: false,\n        searchQuery: commonSearchInitState.searchQuery,\n        placeholder: 'Search',\n        active     : false\n      };\n    default:\n      return state;\n  }\n}\n\nexport const selectCommonSearch = createFeatureSelector<ICommonSearchState>('commonSearch');\nexport const selectIsSearching  = createSelector(selectCommonSearch, (state: ICommonSearchState): boolean => state ? state.isSearching : false);\nexport const selectSearchQuery  = createSelector(selectCommonSearch, (state: ICommonSearchState) => state?.searchQuery || commonSearchInitState.searchQuery);\nexport const selectPlaceholder  = createSelector(selectCommonSearch, (state: ICommonSearchState): string => state ? state.placeholder : '');\nexport const selectActiveSearch = createSelector(selectCommonSearch, (state: ICommonSearchState): boolean => state ? state.active : false);\n\n\n","export type TableSelectionState = 'All' | 'Partial' | 'None';\n\nexport const TIME_FORMAT_STRING = 'MMM d yyyy H:mm';\n\nexport const ICONS = {\n  ALERT: 'al-ico-alert',\n  CREATED: 'fa-plus',\n  MINUS: 'fa-minus',\n  CHART: 'al-ico-info-max',\n  QUEUED: 'al-ico-manage-queue',\n  ENQUEUE: 'al-ico-enqueue',\n  DEQUEUE: 'al-ico-dequeue',\n  IN_PROGRESS: 'fa-hourglass-half',\n  STOPPED: 'al-ico-abort',\n  STOPPED_ALL: 'al-ico-abort-all',\n  RESUME: 'fa-hourglass-half',\n  CLOSED: 'fa-circle-o',\n  FAILED: 'fa-times',\n  FALSE: 'fa-times',\n  PUBLISHED: 'al-ico-publish',\n  PUBLISHING: 'fa-spinner',\n  TRUE: 'fa-check',\n  ANNOTATION: 'fa-puzzle-piece',\n  DATASET: 'fa-puzzle-piece',\n  TASK: 'fa-briefcase',\n  MODEL: 'fa-cube',\n  SHOW: 'fa-eye',\n  ARCHIVE: 'al-ico-archive',\n  RESTORE: 'al-ico-restore',\n  COMPARE: 'al-ico-compare',\n  HIDE: 'fa-eye-slash',\n  COMPLETED: 'fa-circle',\n  ABORTED: 'fa-circle',\n  UNKNOWN: 'fa-question-circle',\n  TESTING: 'fa-balance-scale',\n  IMPORT: 'fa-download',\n  TRAINING: 'fa-cube',\n  ANNOTATION_MANUAL: 'fa-edit',\n  ADMIN: 'fa-cogs',\n  DATASET_IMPORT: 'fa-download',\n  WARNING: 'fa-exclamation-triangle',\n  OUTPUT: 'fa-folder-open',\n  EXECUTION: 'fa-terminal',\n  LIST: 'al-ico-list-view',\n  REMOVE: 'al-ico-trash',\n  MOVE_TO: 'al-ico-move-to',\n  PLUGIN: 'al-ico-plugin',\n  ADD: 'fa-plus',\n  TREE: 'fa-code-branch',\n  TABLE: 'fa-table',\n  SELECTED: 'fa-check-square-o',\n  PROJECT: 'fa-list-alt',\n  FOCUS: 'fa-crosshairs',\n  LOG: 'fa-file-text-o',\n  METRICS: 'fa-chart-area',\n  TOKEN: 'fa-key',\n  EDIT: 'fa-pencil-square-o',\n  EDITABLE: 'fa-pencil',\n  RESET: 'al-ico-reset',\n  CLONE: 'al-ico-clone',\n  EXTEND: 'al-ico-extend',\n  DOWNLOAD: 'al-ico-download',\n  WORKER: 'al-ico-workers',\n  TAG: 'al-ico-tag',\n  SHARE: 'al-ico-shared-item',\n  ARROW_DOWN: 'al-ico-ico-chevron-down',\n  ARROW_UP: 'al-ico-ico-chevron-up',\n};\n\nexport type IconNames = keyof typeof ICONS;\nexport type ObjectKeysRecord<T extends object> = { [P in keyof T]: P };\nexport type IconsValues = typeof ICONS[keyof typeof ICONS];\n\nexport const PALLET = {\n  blue25: '#f9fafb',\n  blue50: '#f2f4fc', //242,244,252\n  blue100: '#dce0ee', //220,224,238\n  blue200: '#c3cdf0', //195,205,240\n  blue250: '#A4ADCD',\n  blue280: '#a7b2d8',\n  blue300: '#8492c2', //132,146,19\n  blue400: '#5a658e', //90,101,142\n  blue450: '#657099',\n  blue480: '#707ba3',\n  blue500: '#384161', //56,65,97\n  blue550: '#47527A',\n  blue570: '#323a56',\n  blue600: '#2c3246', //44,50,70\n  blue650: '#24293c',\n  blue700: '#202432', //32,36,50\n  blue800: '#1a1e2c', //26,30,44\n  blue900: '#141722', //20,23,34\n  blue950: '#0d0e15', //20,23,34\n};\n","import {createAction, props} from '@ngrx/store';\nimport {CredentialKeyExt, Credentials} from '../reducers/common-auth-reducer';\nimport {GetCurrentUserResponseUserObjectCompany} from '~/business-logic/model/users/getCurrentUserResponseUserObjectCompany';\n\nexport const AUTH_PREFIX = 'AUTH_';\n\nexport const updateS3Credential = createAction(\n  AUTH_PREFIX + 'SET_BUCKETS_CREDENTIALS',\n  props<{s3BucketCredentials: {bucketCredentials: Credentials[]}}>()\n);\nexport const createCredential = createAction(\n  AUTH_PREFIX + 'CREATE_CREDENTIAL (API)',\n  props<{workspace: GetCurrentUserResponseUserObjectCompany; openCredentialsPopup?: boolean}>()\n);\nexport const addCredential = createAction(\n  AUTH_PREFIX + 'ADD_CREDENTIAL',\n  props<{ newCredential: CredentialKeyExt; workspaceId: string }>()\n);\nexport const resetCredential = createAction(AUTH_PREFIX + 'RESET_CREDENTIAL');\nexport const removeCredential = createAction(\n  AUTH_PREFIX + '[remove credentials]',\n  props<{ accessKey: string; workspaceId: string }>()\n);\nexport const saveS3Credentials = createAction(AUTH_PREFIX + 'SET_BUCKET_CREDENTIALS',\n  props<{ newCredential: Credentials }>()\n);\nexport const cancelS3Credentials = createAction(\n  AUTH_PREFIX + 'CANCEL_BUCKET_CREDENTIALS',\n  props<{ dontAskAgainForBucketName: string }>()\n);\nexport const resetDontShowAgainForBucketEndpoint = createAction(AUTH_PREFIX + 'RESET_DONT_SHOW_AGAIN_FOR_BUCKET_ENDPOINT');\nexport const resetShowS3Popup = createAction(AUTH_PREFIX + 'RESET_SHOW_S3_POPUP');\nexport const showS3PopUp = createAction(\n  AUTH_PREFIX + 'SHOW_S3_POPUP',\n  props<{credentials: Credentials; credentialsError: string; isAzure: boolean}>()\n);\nexport const getTutorialBucketCredentials = createAction(AUTH_PREFIX + 'GET_TUTORIAL_BUCKET_CREDENTIALS');\nexport const showLocalFilePopUp = createAction(\n  AUTH_PREFIX + 'SHOW_LOCAL_FILE_POPUP',\n  props<{ url: string }>()\n);\nexport const getAllCredentials = createAction(AUTH_PREFIX + 'GET_ALL_CREDENTIALS');\nexport const credentialRevoked = createAction(\n  AUTH_PREFIX + 'REVOKE_CREDENTIAL (API)',\n  props<{ accessKey: string; workspaceId: string }>()\n);\nexport const updateAllCredentials = createAction(\n  AUTH_PREFIX + 'UPDATE_ALL_CREDENTIALS',\n  props<{ credentials: CredentialKeyExt[]; extra: {[workspace: string]: CredentialKeyExt[]}; workspace: string }>()\n);\nexport const getSignedUrl = createAction(\n  AUTH_PREFIX + '[get signed url]',\n  props<{url: string; config?: { skipLocalFile?: boolean; skipFileServer?: boolean; disableCache?: number; dprsUrl?: string | boolean }}>()\n);\nexport const setSignedUrl = createAction(\n  AUTH_PREFIX + '[set signed url]',\n  props<{url: string; signed: string; expires: number}>()\n);\n\n","import {HTTP_PREFIX} from '../../../app.constants';\nimport {omit} from 'lodash/fp';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {createAction, props} from '@ngrx/store';\n\nexport const requestFailed = createAction(\n  HTTP_PREFIX + 'REQUEST_FAILED',\n  (err: HttpErrorResponse) => ({err: omit(['headers'], err)})\n);\n\nexport const apiRequest = createAction(\n  HTTP_PREFIX + 'API Request',\n  props<{method: string; endpoint: string; success: string}>()\n);\n","import {MessageSeverityEnum, VIEW_PREFIX} from '../../../app.constants';\nimport {createAction, props} from '@ngrx/store';\nimport {omit} from 'lodash/fp';\nimport {HttpErrorResponse} from '@angular/common/http';\n\nexport const setAutoRefresh = createAction(\n  VIEW_PREFIX + '[set auto refresh]',\n  props<{autoRefresh: boolean}>()\n);\n\nexport const setCompareAutoRefresh = createAction(\n  VIEW_PREFIX + '[set compare auto refresh]',\n  props<{autoRefresh: boolean}>()\n);\n\nexport const setServerError = createAction(\n  VIEW_PREFIX + '[set server error]',\n  (serverError: HttpErrorResponse, contextSubCode?: number, customMessage?: string, aggregateSimilar = false) => ({\n    serverError: omit(['headers'], serverError) as Omit<HttpErrorResponse, 'headers'>,\n    contextSubCode,\n    customMessage,\n    aggregateSimilar\n  })\n);\n\nexport const setNotificationDialog = createAction(\n  VIEW_PREFIX + '[set notification dialog]',\n  props<{notification: {message: string; title: string}}>()\n);\n\nexport const resetLoader = createAction(VIEW_PREFIX + '[reset loader]');\n\nexport const setBackdrop = createAction(\n  VIEW_PREFIX + '[set backdrop]',\n  props<{payload: boolean}>()\n);\n\nexport const activeLoader = createAction(\n  VIEW_PREFIX + '[activate loader]',\n  (endpoint: string) => ({endpoint})\n);\n\nexport const deactivateLoader = createAction(\n  VIEW_PREFIX + '[deactivate loader]',\n  (endpoint: string) => ({endpoint})\n);\n\n\nexport const visibilityChanged = createAction(\n  VIEW_PREFIX + '[visibility changed]',\n  props<{visible: boolean}>()\n);\n\nexport const addMessage = createAction(\n  VIEW_PREFIX + '[add message]',\n  (severity: MessageSeverityEnum, msg: string, userActions?: {actions: any[]; name: string}[], suppressNextMessages?: boolean) =>\n    ({severity, msg, userActions, suppressNextMessages})\n);\n\nexport const removeMessage = createAction(VIEW_PREFIX + '[remove message]');\n\nexport const setServerUpdatesAvailable = createAction(\n  VIEW_PREFIX + '[set server updates available]',\n  props<{availableUpdates}>()\n);\n\nexport const setScaleFactor = createAction(\n  VIEW_PREFIX + '[set scale]',\n  props<{scale: number}>()\n);\n\nexport const firstLogin = createAction(\n  VIEW_PREFIX + '[set first Login]',\n  props<{first: boolean}>()\n);\n\nexport const neverShowPopupAgain = createAction(VIEW_PREFIX + 'NEVER_SHOW_POPUP_AGAIN', props<{ popupId: string; reset?: boolean }>());\n\nexport const plotlyReady = createAction(VIEW_PREFIX + '[plotly ready]');\nexport const aceReady = createAction(VIEW_PREFIX + '[ace ready]');\nexport const openAppsAwarenessDialog = createAction(VIEW_PREFIX + '[apps awareness dialog]',\n  props<{appsYouTubeIntroLink}>()\n);\n\n","import {createAction, props} from '@ngrx/store';\nimport {Project} from '../../../business-logic/model/projects/project';\nimport {ProjectsUpdateRequest} from '../../../business-logic/model/projects/projectsUpdateRequest';\nimport {ModelsPublishManyResponse} from '../../../business-logic/model/models/modelsPublishManyResponse';\nimport {ModelsArchiveManyResponse} from '../../../business-logic/model/models/modelsArchiveManyResponse';\nimport {ModelsDeleteManyResponse} from '../../../business-logic/model/models/modelsDeleteManyResponse';\nimport {archivedSelectedModels} from '@common/models/actions/models-menu.actions';\nimport {TasksResetManyResponse} from '../../../business-logic/model/tasks/tasksResetManyResponse';\nimport {TasksEnqueueManyResponse} from '../../../business-logic/model/tasks/tasksEnqueueManyResponse';\nimport {TasksArchiveManyResponse} from '../../../business-logic/model/tasks/tasksArchiveManyResponse';\nimport {TasksPublishManyResponse} from '../../../business-logic/model/tasks/tasksPublishManyResponse';\nimport {TasksStopManyResponse} from '../../../business-logic/model/tasks/tasksStopManyResponse';\nimport {EntityTypeEnum} from '../../../shared/constants/non-common-consts';\nimport {MetricColumn} from '@common/shared/utils/tableParamEncode';\nimport {ProjectStatsGraphData} from '@common/core/reducers/projects.reducer';\n\nexport const PROJECTS_PREFIX = '[ROOT_PROJECTS] ';\nexport const SET_PROJECTS = PROJECTS_PREFIX + 'SET_PROJECTS';\nexport const RESET_PROJECTS = PROJECTS_PREFIX + 'RESET_PROJECTS';\nexport const SET_LAST_UPDATE = PROJECTS_PREFIX + 'SET_LAST_UPDATE';\nexport const RESET_SELECTED_PROJECT = PROJECTS_PREFIX + 'RESET_SELECTED_PROJECT';\nexport const RESET_PROJECT_SELECTION = PROJECTS_PREFIX + 'RESET_PROJECT_SELECTION';\nexport const UPDATE_PROJECT = PROJECTS_PREFIX + 'UPDATE_PROJECT';\n\nexport interface TagColor {\n  foreground: string;\n  background: string;\n}\n\nexport const getAllSystemProjects = createAction(\n  PROJECTS_PREFIX + 'GET_PROJECTS'\n);\n\nexport const updateProject = createAction(\n  UPDATE_PROJECT,\n  props<{ id: string; changes: Partial<ProjectsUpdateRequest> }>()\n);\n\nexport const setAllProjects = createAction(\n  SET_PROJECTS,\n  props<{ projects: Project[]; updating?: boolean }>()\n);\n\nexport const resetProjects = createAction(RESET_PROJECTS);\n\nexport const setLastUpdate = createAction(\n  SET_LAST_UPDATE,\n  props<{ lastUpdate: string }>());\n\nexport const updateProjectCompleted = createAction(\n  PROJECTS_PREFIX + 'UPDATE_PROJECT_COMPLETED'\n);\n\nexport const setSelectedProjectId = createAction(\n  PROJECTS_PREFIX + 'SET_SELECTED_PROJECT_ID',\n  props<{ projectId: string; example?: boolean }>()\n);\n\nexport const setSelectedProject = createAction(\n  PROJECTS_PREFIX + 'SET_SELECTED_PROJECT',\n  props<{ project: Project }>()\n);\n\nexport const resetSelectedProject = createAction(\n  PROJECTS_PREFIX + 'RESET_SELECTED_PROJECT'\n);\n\nexport const resetProjectSelection = createAction(\n  PROJECTS_PREFIX + 'RESET_PROJECT_SELECTION'\n);\n\nexport const setArchive = createAction(\n  PROJECTS_PREFIX + 'SET_ARCHIVE',\n  props<{ archive: boolean }>()\n);\n\nexport const setDeep = createAction(\n  PROJECTS_PREFIX + 'SET_DEEP',\n  props<{ deep: boolean }>()\n);\n\nexport const getTags = createAction(\n  PROJECTS_PREFIX + '[get tags]'\n);\n\nexport const getCompanyTags = createAction(\n  PROJECTS_PREFIX + '[get company tags]'\n);\n\nexport const setTagsFilterByProject = createAction(\n  PROJECTS_PREFIX + '[set tags filter by project]',\n  props<{ tagsFilterByProject: boolean }>()\n);\n\nexport const setTags = createAction(\n  PROJECTS_PREFIX + '[set tags]',\n  props<{ tags: string[] }>()\n);\n\nexport const setCompanyTags = createAction(\n  PROJECTS_PREFIX + '[set company tags]',\n  props<{ tags: string[]; systemTags: string[] }>()\n);\n\nexport const openTagColorsMenu = createAction(\n  PROJECTS_PREFIX + '[open tag colors]'\n);\n\nexport const setTagColors = createAction(\n  PROJECTS_PREFIX + '[set tag colors]',\n  props<{ tag: string; colors: TagColor }>()\n);\n\nexport const openMoreInfoPopup = createAction(\n  PROJECTS_PREFIX + '[open more info popup]',\n  props<{ parentAction: ReturnType<typeof archivedSelectedModels>; operationName: string; entityType: EntityTypeEnum; res: ModelsPublishManyResponse | ModelsArchiveManyResponse | ModelsDeleteManyResponse | TasksResetManyResponse | TasksEnqueueManyResponse | TasksArchiveManyResponse | TasksPublishManyResponse | TasksStopManyResponse }>()\n);\n\nexport const setMetricVariant = createAction(\n  PROJECTS_PREFIX + '[set selected metric variant for graph]',\n  props<{ projectId: string; col: MetricColumn }>()\n);\nexport const fetchGraphData = createAction(PROJECTS_PREFIX + '[fetch stats for project graph]');\n\nexport const setGraphData = createAction(\n  PROJECTS_PREFIX + '[set project stats]',\n  props<{ stats: ProjectStatsGraphData[] }>()\n);\n","import {ISmAction} from '../models/actions';\nimport {NAVIGATION_PREFIX, NAVIGATION_ACTIONS} from '~/app.constants';\nimport {Action, createAction, props} from '@ngrx/store';\nimport {Params} from '@angular/router';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {SortMeta} from 'primeng/api';\n\n\n// TODO: remove this action...\nexport class NavigateTo implements ISmAction {\n  readonly type = NAVIGATION_ACTIONS.NAVIGATE_TO;\n\n  constructor(public payload: {\n    url: string;\n    params?: Params;\n    unGuard?: boolean;\n  }) {}\n}\n\nexport class NavigationEnd implements Action {\n  readonly type = NAVIGATION_ACTIONS.NAVIGATION_END;\n}\n\nexport class SetRouterSegments implements Action {\n  readonly type = NAVIGATION_ACTIONS.SET_ROUTER_SEGMENT;\n\n  constructor(public payload: {\n    url: string;\n    params: Params;\n    queryParams: Params;\n    config: string[];\n  }) {}\n}\n\nexport const setURLParams = createAction(\n  NAVIGATION_PREFIX + 'SET_URL_PARAMS',\n  props<{\n    columns?: string[];\n    orders?: SortMeta[];\n    filters?: { [key: string]: FilterMetadata };\n    isArchived?: boolean;\n    isDeep?: boolean;\n    update?: boolean;\n  }>()\n);\n","import {createAction, props} from '@ngrx/store';\nimport {USERS_PREFIX} from '~/app.constants';\nimport {GetCurrentUserResponseUserObjectCompany} from '~/business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {UsersUpdateRequest} from '~/business-logic/model/users/usersUpdateRequest';\n\nexport const fetchCurrentUser = createAction(USERS_PREFIX +'FETCH_USER');\nexport const updateCurrentUser = createAction(USERS_PREFIX +'UPDATE_USER',\n  props<{user: UsersUpdateRequest}>());\n\nexport const setCurrentUserName = createAction(USERS_PREFIX + 'SET_CURRENT_USER_NAME',\n  props<{name: string}>()\n);\nexport const termsOfUseAccepted = createAction(USERS_PREFIX + '[TOS accepted]');\n\nexport const logout = createAction(USERS_PREFIX + 'LOGOUT', props<{provider?: string}>());\nexport const logoutSuccess = createAction(USERS_PREFIX + 'LOGOUT_SUCCESS');\n\nexport const setPreferences = createAction(USERS_PREFIX +'SET_PREF', props<{payload: any}>());\n\nexport const setActiveWorkspace = createAction(\n  USERS_PREFIX + ' set active workspace',\n  props<{workspace: GetCurrentUserResponseUserObjectCompany; skipRedirect?: boolean}>()\n);\nexport const setSelectedWorkspaceTab = createAction(\n  USERS_PREFIX + ' set selected workspace tab',\n  props<{workspace: GetCurrentUserResponseUserObjectCompany}>()\n);\n\n\nexport const setFilterByUser =  createAction(USERS_PREFIX +'SET_FILTERED_BY_USER', props<{showOnlyUserWork: boolean}>());\n\nexport const setUserWorkspacesFromUser = createAction(USERS_PREFIX + ' set user workspaces from current user');\n\nexport const setAccountAdministrationPage = createAction(`${USERS_PREFIX} route to account-administration`  );\nexport const getApiVersion = createAction(`${USERS_PREFIX} get api version`  );\nexport const setApiVersion = createAction(`${USERS_PREFIX} set api version`, props<{serverVersions: {server: string; api: string}}>());\n\n","import {createSelector, on, ReducerTypes, select, Store} from '@ngrx/store';\nimport {\n  addCredential,\n  cancelS3Credentials,\n  removeCredential, resetCredential,\n  resetDontShowAgainForBucketEndpoint,\n  saveS3Credentials, setSignedUrl,\n  showLocalFilePopUp,\n  updateAllCredentials,\n  updateS3Credential\n} from '../actions/common-auth.actions';\nimport {CredentialKey} from '../../../business-logic/model/auth/credentialKey';\nimport {inBucket} from '@common/settings/admin/base-admin.service';\nimport {filter, map, timeoutWith} from 'rxjs/operators';\n\nexport interface Credentials {\n  Bucket?: string;\n  Endpoint?: string;\n  Key?: string;\n  Secret?: string;\n  Region?: string;\n}\n\nexport interface CredentialKeyExt extends CredentialKey {\n  secret_key?: string;\n  company?: string;\n  access_key?: string;\n}\n\nexport interface AuthState {\n  showLocalFilePopup: boolean;\n  localFilesPopupURLs: Array<string>;\n  revokeSucceed: boolean;\n  credentials: {[workSpaceId: string]: CredentialKeyExt[]};\n  newCredential: CredentialKeyExt;\n  dontShowAgainForBucketEndpoint: string;\n  s3BucketCredentials: { bucketCredentials: Credentials[] };\n  signedUrls: {[url: string]: {signed: string; expires: number}};\n}\n\nexport const initAuth: AuthState = {\n  showLocalFilePopup: false,\n  localFilesPopupURLs: [],\n  revokeSucceed: false,\n  credentials: {},\n  newCredential: null,\n  dontShowAgainForBucketEndpoint: '',\n  s3BucketCredentials: {\n    bucketCredentials: []\n  },\n  signedUrls: {}\n};\n\nexport const selectAuth = state => state.auth as AuthState;\n\n// Auth selectors\nexport const selectRevokeSucceed                  = createSelector(selectAuth, state => state.revokeSucceed);\nexport const selectCredentials                    = createSelector(selectAuth, state => state.credentials);\nexport const selectNewCredential                  = createSelector(selectAuth, state => state.newCredential);\nexport const selectS3BucketCredentials            = createSelector(selectAuth, state => state.s3BucketCredentials);\nexport const selectS3BucketCredentialsBucketCredentials = createSelector(selectAuth, state => state.s3BucketCredentials?.bucketCredentials);\nexport const selectShowLocalFilesPopUp            = createSelector(selectAuth, state => state.showLocalFilePopup);\nexport const selectDontShowAgainForBucketEndpoint = createSelector(selectAuth, state => state.dontShowAgainForBucketEndpoint);\nexport const selectSignedUrls = createSelector(selectAuth, state => state.signedUrls);\nexport const selectSignedUrl = url => createSelector(selectAuth, state => state.signedUrls[url]);\nexport const getSignedUrlOrOrigin$ = (url: string, store: Store) => store.pipe(\n  select(selectSignedUrl(url)),\n  filter(signed => !!signed?.signed),\n  map(signed => signed?.signed || url),\n  timeoutWith(600, store.select(selectSignedUrl(url)).pipe(map(signed => signed?.signed || url))),\n);\n\n\nexport const commonAuthReducer = [\n  on(showLocalFilePopUp, (state, action) => ({...state, showLocalFilePopup: true, localFilesPopupURLs: Array.from(new Set([...state.localFilesPopupURLs, action.url]))})),\n  on(cancelS3Credentials, (state, action) => ({...state, dontShowAgainForBucketEndpoint: action.dontAskAgainForBucketName})),\n  on(updateS3Credential, (state, action) => ({\n    ...state,\n    s3BucketCredentials: action.s3BucketCredentials,\n    dontShowAgainForBucketEndpoint: '',\n    newCredential: initAuth.newCredential,\n    signedUrls: {}\n  })),\n  on(resetDontShowAgainForBucketEndpoint, (state) => ({...state, dontShowAgainForBucketEndpoint: ''})),\n  on(saveS3Credentials, (state, action) => {\n    const credIndex = state.s3BucketCredentials.bucketCredentials.findIndex((creds) =>\n      (creds?.Bucket === action.newCredential.Bucket && creds?.Endpoint === action.newCredential.Endpoint));\n    if (credIndex > -1) {\n      return {\n        ...state,\n        s3BucketCredentials: {\n          bucketCredentials: state.s3BucketCredentials.bucketCredentials.map((creds, index) =>\n            index === credIndex ? action.newCredential : creds)\n        },\n        signedUrls: Object.fromEntries(Object.entries(state.signedUrls).filter(([url]) =>\n          !inBucket(url, action.newCredential.Bucket, action.newCredential.Endpoint)\n        ))\n      };\n    } else {\n      return {...state, s3BucketCredentials: {bucketCredentials: [...state.s3BucketCredentials.bucketCredentials, action.newCredential]}};\n    }\n  }),\n  on(resetCredential, state => ({...state, newCredential: initAuth.newCredential})),\n  on(addCredential, (state, action) => ({        ...state,\n    newCredential: {...action.newCredential, company: action.workspaceId},\n    credentials: {\n      ...state.credentials,\n      [action.workspaceId]: [\n        ...(state.credentials[action.workspaceId] || []),\n        ...(Object.keys(action.newCredential).length > 0 ? [{...action.newCredential, company: action.workspaceId}] : [])\n      ]}})),\n  on(removeCredential, (state, action) => ({        ...state, credentials: {\n      ...state.credentials,\n      [action.workspaceId]: state.credentials[action.workspaceId].filter((cred => cred.access_key !== action.accessKey))\n    }})),\n  on(updateAllCredentials, (state, action) => ({\n    ...state,\n    credentials: {[action.credentials[0]?.company || action.workspace]: action.credentials, ...action.extra}, revokeSucceed: false})),\n  on(setSignedUrl, (state, action) => ({...state, signedUrls: {...state.signedUrls, [action.url]: {signed: action.signed, expires: action.expires}}})),\n] as ReducerTypes<AuthState, any>[];\n","import {createSelector} from '@ngrx/store';\nimport * as projectsActions from '../actions/projects.actions';\nimport {\n  setAllProjects,\n  setCompanyTags,\n  setGraphData,\n  setLastUpdate,\n  setMetricVariant,\n  setTagColors,\n  setTags,\n  setTagsFilterByProject,\n  TagColor\n} from '../actions/projects.actions';\nimport {Project} from '~/business-logic/model/projects/project';\nimport {getSystemTags} from '~/features/experiments/shared/experiments.utils';\nimport {ITableExperiment} from '../../experiments/shared/common-experiment-model.model';\nimport {MetricColumn} from '@common/shared/utils/tableParamEncode';\nimport {sortByField} from '@common/tasks/tasks.utils';\nimport {ProjectsGetAllResponseSingle} from '~/business-logic/model/projects/projectsGetAllResponseSingle';\n\n\nexport interface ProjectStatsGraphData {\n  id: string;\n  x: number;\n  y: number;\n  name: string;\n  type: string;\n  status: string;\n  user: string;\n}\n\nexport interface RootProjects {\n  projects: Project[];\n  selectedProject: Project;\n  archive: boolean;\n  deep: boolean;\n  projectTags: string[];\n  companyTags: string[];\n  systemTags: string[];\n  tagsColors: { [tag: string]: TagColor };\n  tagsFilterByProject: boolean;\n  graphVariant: { [project: string]: MetricColumn };\n  graphData: ProjectStatsGraphData[];\n  lastUpdate: string;\n}\n\nconst initRootProjects: RootProjects = {\n  projects: [],\n  selectedProject: null,\n  archive: false,\n  deep: false,\n  projectTags: [],\n  companyTags: [],\n  systemTags: [],\n  tagsColors: {},\n  tagsFilterByProject: true,\n  graphVariant: {},\n  graphData: null,\n  lastUpdate: null\n};\n\nexport const projects = state => state.rootProjects as RootProjects;\nexport const selectRootProjects = createSelector(projects, (state): Project[] => state.projects);\nexport const selectSelectedProject = createSelector(projects, (state): ProjectsGetAllResponseSingle => state.selectedProject);\nexport const selectSelectedProjectDescription = createSelector(projects, state => state.selectedProject?.description);\nexport const selectSelectedProjectId = createSelector(selectSelectedProject, (selectedProject): string => selectedProject ? selectedProject.id : '');\nexport const selectIsArchivedMode = createSelector(projects, state => state.archive);\nexport const selectIsDeepMode = createSelector(projects, state => state.deep);\nexport const selectTagsFilterByProject = createSelector(projects, state => state.tagsFilterByProject);\nexport const selectProjectTags = createSelector(projects, state => state.projectTags);\nexport const selectCompanyTags = createSelector(projects, state => state.companyTags);\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const selectProjectSystemTags = createSelector(projects, state => getSystemTags({system_tags: state.systemTags} as ITableExperiment));\nexport const selectTagsColors = createSelector(projects, state => state.tagsColors);\nexport const selectLastUpdate = createSelector(projects, (state): string => state.lastUpdate);\nexport const selectTagColors = createSelector(selectTagsColors,\n  (tagsColors, props: { tag: string }) => tagsColors[props.tag]);\nconst selectSelectedProjectsMetricVariant = createSelector(projects, state => state.graphVariant);\n\nexport const selectSelectedMetricVariant = createSelector(selectSelectedProjectsMetricVariant,\n  (projectsVariant, projectId: string) => projectsVariant[projectId]);\n\nexport const selectSelectedMetricVariantForCurrProject = createSelector(\n  selectSelectedProjectsMetricVariant, selectSelectedProjectId,\n  (projectsVariant, projectId) => projectsVariant[projectId]);\n\nexport const selectGraphData = createSelector(projects, state => state.graphData);\n\n\nexport const projectsReducer = (state: RootProjects = initRootProjects, action) => {\n  switch (action.type) {\n    case projectsActions.resetProjects.type:\n      return {...state, projects: [], lastUpdate: null};\n    case projectsActions.setAllProjects.type:\n      const payload = action as ReturnType<typeof setAllProjects>;\n      let newProjects = state.projects;\n      if (payload.updating) {\n        payload.projects.forEach(proj => {\n          const index = state.projects.findIndex(stateProject => stateProject.id === proj.id);\n          if (index > -1) {\n            newProjects = [...newProjects.slice(0, index), proj, ...newProjects.slice(index + 1)];\n          } else {\n            newProjects = [...newProjects, proj];\n          }\n        });\n      } else {\n        newProjects = [...newProjects, ...payload.projects];\n      }\n      return {...state, projects: sortByField(newProjects, 'name')};\n    case projectsActions.setSelectedProjectId.type: {\n      const projectId = (action as ReturnType<typeof projectsActions.setSelectedProjectId>).projectId;\n      return {\n        ...state,\n        ...(state.selectedProject?.id !== projectId && {archive: initRootProjects.archive}),\n        graphData: initRootProjects.graphData,\n      };\n    }\n    case projectsActions.setSelectedProject.type:\n      return {...state, selectedProject: action.project};\n    case projectsActions.resetSelectedProject.type:\n      return {...state, selectedProject: initRootProjects.selectedProject};\n    case projectsActions.updateProject.type: {\n      return {...state, selectedProject: {...state.selectedProject, ...(action as ReturnType<typeof projectsActions.updateProject>).changes}};\n    }\n    case projectsActions.setArchive.type:\n      return {...state, archive: action.archive};\n    case projectsActions.setDeep.type:\n      return {...state, deep: action.deep};\n    case setTags.type:\n      return {...state, projectTags: action.tags};\n    case setTagsFilterByProject.type:\n      return {...state, tagsFilterByProject: action.tagsFilterByProject};\n    case setCompanyTags.type:\n      return {...state, companyTags: action.tags, systemTags: action.systemTags};\n    case setTagColors.type:\n      return {...state, tagsColors: {...state.tagsColors, [action.tag]: action.colors}};\n    case setMetricVariant.type: {\n      const payLoad = action as ReturnType<typeof setMetricVariant>;\n      return {...state, graphVariant: {...state.graphVariant, [payLoad.projectId]: payLoad.col}};\n    }\n    case setGraphData.type:\n      return {...state, graphData: (action as ReturnType<typeof setGraphData>).stats};\n    case setLastUpdate.type:\n      return {...state, lastUpdate: (action as ReturnType<typeof setLastUpdate>).lastUpdate};\n    default:\n      return state;\n  }\n};\n","import {createSelector, Action} from '@ngrx/store';\nimport {NAVIGATION_ACTIONS} from '../../../app.constants';\nimport {SetRouterSegments} from '../actions/router.actions';\nimport {Params} from '@angular/router';\n\nexport interface RouterState {\n  url: string;\n  params: Params;\n  queryParams: Params;\n  config: string[];\n  skipNextNavigation: boolean;\n}\n\nconst initRouter = {\n  url               : window.location.pathname,\n  params            : null,\n  queryParams       : null,\n  config            : null,\n  skipNextNavigation: false\n};\n\nexport const selectRouter       = state => state.router as RouterState;\nexport const selectRouterUrl    = createSelector(selectRouter, router => router && router.url);\nexport const selectRouterParams = createSelector(selectRouter, router => router && router.params);\nexport const selectRouterQueryParams = createSelector(selectRouter, router => router && router.queryParams);\nexport const selectRouterConfig = createSelector(selectRouter, router => router && router.config);\n\nexport function routerReducer(state: RouterState = initRouter, action: Action): RouterState {\n  switch (action.type) {\n    case NAVIGATION_ACTIONS.SET_ROUTER_SEGMENT: {\n      const payload = (action as SetRouterSegments).payload;\n      return {...state, params: payload.params, queryParams: payload.queryParams,\n        url: payload.url, config: payload.config};\n    }\n    default:\n      return state;\n  }\n\n}\n","import {createSelector, on, ReducerTypes} from '@ngrx/store';\nimport {\n  logout,\n  setFilterByUser,\n  setApiVersion,\n  fetchCurrentUser,\n  setCurrentUserName\n} from '../actions/users.actions';\nimport {GetCurrentUserResponseUserObject} from '~/business-logic/model/users/getCurrentUserResponseUserObject';\nimport {GetCurrentUserResponseUserObjectCompany} from '~/business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {OrganizationGetUserCompaniesResponseCompanies} from '~/business-logic/model/organization/organizationGetUserCompaniesResponseCompanies';\n\nexport interface UsersState {\n  currentUser: GetCurrentUserResponseUserObject;\n  activeWorkspace: GetCurrentUserResponseUserObjectCompany;\n  userWorkspaces: OrganizationGetUserCompaniesResponseCompanies[];\n  selectedWorkspaceTab: GetCurrentUserResponseUserObjectCompany;\n  workspaces: GetCurrentUserResponseUserObjectCompany[];\n  showOnlyUserWork: boolean;\n  serverVersions: { server: string; api: string };\n}\n\nexport const initUsers: UsersState = {\n  currentUser: null,\n  activeWorkspace: null,\n  userWorkspaces: [],\n  selectedWorkspaceTab: null,\n  workspaces: [],\n  showOnlyUserWork: false,\n  serverVersions: null,\n};\n\nexport const users = state => state.users as UsersState;\n\nexport const selectCurrentUser = createSelector(users, state  => state.currentUser);\nexport const selectActiveWorkspace = createSelector(users, state => state.activeWorkspace);\nexport const selectUserWorkspaces = createSelector(users, state => state.userWorkspaces);\nexport const selectSelectedWorkspaceTab = createSelector(users, state => state.selectedWorkspaceTab);\nexport const selectWorkspaces = createSelector(users, state => state.workspaces);\nexport const selectShowOnlyUserWork = createSelector(users, state => state.showOnlyUserWork);\nexport const selectServerVersions = createSelector(users, state  => state.serverVersions);\n\nexport const usersReducerFunctions = [\n  on(fetchCurrentUser, state => ({...state})),\n  on(setCurrentUserName, (state, action) => ({\n    ...state,\n    currentUser: {...state.currentUser, name: action.name}\n  })),\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on(logout, state => ({\n    ...state,\n    currentUser: null\n  })),\n  on(setFilterByUser, (state, action) => ({...state, showOnlyUserWork: action.showOnlyUserWork})),\n  on(setApiVersion, (state, action) => ({...state, serverVersions: action.serverVersions}))\n] as ReducerTypes<UsersState, any>[];\n","import {createReducer, createSelector, on, ReducerTypes} from '@ngrx/store';\nimport * as layoutActions from '../actions/layout.actions';\nimport {apiRequest, requestFailed} from '@common/core/actions/http.actions';\n\nexport interface ViewState {\n  loading: { [endpoint: string]: boolean };\n  dialog: boolean;\n  notification: { title: string; message: string };\n  loggedOut: boolean;\n  backdropActive: boolean;\n  autoRefresh: boolean;\n  compareAutoRefresh: boolean;\n  applicationVisible: boolean;\n  scaleFactor: number;\n  firstLogin: boolean;\n  firstLoginAt: number;\n  neverShowPopupAgain: string[];\n  plotlyReady: boolean;\n  aceReady: boolean;\n  preferencesReady: boolean;\n}\n\nexport const initViewState: ViewState = {\n  loading: {},\n  dialog: false,\n\n  notification: null,\n  loggedOut: false,\n  backdropActive: false,\n  autoRefresh: true,\n  compareAutoRefresh: false,\n  applicationVisible: true,\n  scaleFactor: 100,\n  firstLogin: false,\n  firstLoginAt: +(window?.localStorage?.getItem('firstLogin') || 0),\n  neverShowPopupAgain: [],\n  plotlyReady: false,\n  aceReady: false,\n  preferencesReady: false\n};\n\nexport const views = state => state.views as ViewState;\nexport const selectReady = createSelector(views, state => state.preferencesReady);\nexport const selectLoading = createSelector(views, state => state.loading);\nexport const selectBackdropActive = createSelector(views, state => state.backdropActive);\n\nexport const selectNotification = createSelector(views, state => state.notification);\n\nexport const selectLoggedOut = createSelector(views, state => state.loggedOut);\nexport const selectAutoRefresh = createSelector(views, state => state && state.autoRefresh);\nexport const selectCompareAutoRefresh = createSelector(views, state => state.compareAutoRefresh);\nexport const selectAppVisible = createSelector(views, state => state.applicationVisible);\nexport const selectScaleFactor = createSelector(views, state => state.scaleFactor);\nexport const selectFirstLogin = createSelector(views, state => state.firstLogin);\nexport const selectFirstLoginAt = createSelector(views, state => state.firstLoginAt);\nexport const selectPlotlyReady = createSelector(views, state => state.plotlyReady);\nexport const selectAceReady = createSelector(views, state => state.aceReady);\nexport const selectNeverShowPopups = createSelector(views, (state): string[] => state.neverShowPopupAgain);\n\n\nexport const viewReducers = [\n  on(requestFailed, (state, action) => {\n    const isLoggedOut = action.err && action.err.status === 401;\n    return {...state, loggedOut: isLoggedOut};\n  }),\n  on(layoutActions.deactivateLoader, (state, action) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {[action.endpoint]: removed, ...loading} = state.loading;\n    return {...state, loading};\n  }),\n  on(layoutActions.activeLoader, (state, action) => ({\n    ...state,\n    loading: {...state.loading, [action.endpoint]: true}\n  })),\n  on(layoutActions.visibilityChanged, (state, action) => ({...state, applicationVisible: action.visible})),\n  on(layoutActions.setScaleFactor, (state, action) => ({...state, scaleFactor: action.scale})),\n  on(layoutActions.firstLogin, (state, action) => ({...state, firstLogin: action.first, firstLoginAt: new Date().getTime()})),\n  on(layoutActions.plotlyReady, (state) => ({...state, plotlyReady: true})),\n  on(layoutActions.aceReady, (state) => ({...state, aceReady: true})),\n  on(layoutActions.resetLoader, (state) => ({...state, loading: {}})),\n  on(apiRequest, (state, action) => ({\n    ...state,\n    loading: {...state.loading, [action?.endpoint || 'default']: true}\n  })),\n  on(layoutActions.setNotificationDialog, (state, action) => ({...state, notification: action.notification})),\n  on(layoutActions.setBackdrop, (state, action) => ({...state, backdropActive: action.payload})),\n  on(layoutActions.setAutoRefresh, (state, action) => ({...state, autoRefresh: action.autoRefresh})),\n  on(layoutActions.setCompareAutoRefresh, (state, action) => ({...state, compareAutoRefresh: action.autoRefresh})),\n  on(layoutActions.neverShowPopupAgain, (state, action) => ({\n    ...state,\n    neverShowPopupAgain: action.reset ? state.neverShowPopupAgain.filter(popups => popups !== action.popupId) : Array.from(new Set([...state.neverShowPopupAgain, action.popupId]))\n  })),\n] as ReducerTypes<ViewState, any>[];\n\nexport const viewReducer = createReducer(\n  initViewState,\n  ...viewReducers\n);\n","import {Injectable} from '@angular/core';\nimport {select, Selector, Store} from '@ngrx/store';\nimport {take} from 'rxjs/operators';\n\n@Injectable()\nexport class SmSyncStateSelectorService {\n\n  constructor(private store: Store<any>) {\n  }\n\n  selectSync(selector: Selector<any, any>) {\n    let entity: any;\n    this.store.pipe(\n      select(selector),\n      take(1))\n      .subscribe(o => entity = o);\n\n    return entity;\n  }\n\n}\n","import {Action, createAction, props} from '@ngrx/store';\nimport {ISmAction} from '../core/models/actions';\nimport {SEARCH_ACTIONS} from './dashboard-search.consts';\nimport {Project} from '../../business-logic/model/projects/project';\nimport {Task} from '../../business-logic/model/tasks/task';\nimport {Model} from '../../business-logic/model/models/model';\n\n\nexport const searchSetTerm = createAction(\n  SEARCH_ACTIONS.SET_TERM,\n  props<{query: string; regExp?: boolean; force?: boolean}>()\n);\n\nexport const searchStart = createAction(\n  SEARCH_ACTIONS.SEARCH_START,\n  props<{query: string; regExp?: boolean; force?: boolean}>()\n);\n\nexport class SearchError implements ISmAction {\n  readonly type = SEARCH_ACTIONS.SEARCH_ERROR;\n}\n\nexport class SearchClear implements Action {\n  readonly type = SEARCH_ACTIONS.SEARCH_CLEAR;\n}\n\nexport class SearchActivate implements Action {\n  readonly type = SEARCH_ACTIONS.ACTIVATE;\n}\n\nexport class SearchDeactivate implements Action {\n  readonly type = SEARCH_ACTIONS.DEACTIVATE;\n}\n\nexport const searchProjects = createAction(\n  SEARCH_ACTIONS.SEARCH_PROJECTS,\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport class SetProjectsResults implements ISmAction {\n  public type = SEARCH_ACTIONS.SET_PROJECTS;\n  public payload: { projects: Array<Project> };\n\n  constructor(projects: Array<Project>) {\n    this.payload = {projects};\n  }\n}\n\nexport const searchExperiments= createAction(\n  SEARCH_ACTIONS.SEARCH_EXPERIMENTS,\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport class SetExperimentsResults implements ISmAction {\n  public type = SEARCH_ACTIONS.SET_EXPERIMENTS;\n  public payload: { experiments: Array<Task> };\n\n  constructor(experiments: Array<Task>) {\n    this.payload = {experiments};\n  }\n}\n\nexport const searchModels = createAction(\n  SEARCH_ACTIONS.SEARCH_MODELS,\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport class SetModelsResults implements ISmAction {\n  public type = SEARCH_ACTIONS.SET_MODELS;\n  public payload: { models: Array<Model> };\n\n  constructor(models: Array<Model>) {\n    this.payload = {models};\n  }\n}\n\n","const SEARCH_PREFIX           = 'SEARCH_';\nexport const SEARCH_PAGE_SIZE = 1000;\n\nexport const SEARCH_ACTIONS = {\n  SET_TERM          : SEARCH_PREFIX + 'SET_TERM',\n  SEARCH_START      : SEARCH_PREFIX + 'SEARCH_START',\n  SEARCH_PROJECTS   : SEARCH_PREFIX + 'SEARCH_PROJECTS',\n  SEARCH_EXPERIMENTS: SEARCH_PREFIX + 'SEARCH_EXPERIMENTS',\n  SEARCH_MODELS     : SEARCH_PREFIX + 'SEARCH_MODELS',\n  SEARCH_COMPLETE   : SEARCH_PREFIX + 'SEARCH_COMPLETE',\n  SEARCH_ERROR      : SEARCH_PREFIX + 'SEARCH_ERROR',\n  SEARCH_CLEAR      : SEARCH_PREFIX + 'SEARCH_CLEAR',\n  SET_PROJECTS      : SEARCH_PREFIX + 'SET_PROJECTS',\n  SET_MODELS        : SEARCH_PREFIX + 'SET_MODELS',\n  SET_EXPERIMENTS   : SEARCH_PREFIX + 'SET_EXPERIMENTS',\n  ACTIVATE          : SEARCH_PREFIX + 'ACTIVATE',\n  DEACTIVATE        : SEARCH_PREFIX + 'DEACTIVATE'\n};\n\nexport const EXPERIMENT_SEARCH_ONLY_FIELDS = ['name', 'created', 'status', 'type', 'user.name', 'id', 'company'];\n\n\n","<sm-dialog-template [displayX]=\"true\"\n                    [header]=\"queue? 'NO WORKERS ASSIGNED TO QUEUE': (step === 1 ? 'Welcome to ClearML' : 'GETTING STARTED')\"\n                    (xClicked)=\"closeDialog()\" [closeOnX]=\"false\"\n                    [iconClass]=\"queue?'al-ico-queues': 'i-welcome-researcher'\">\n\n  <div *ngIf=\"step === 1; else configStep\" class=\"welcome-content\">\n    <div class=\"body\">\n      <div class=\"info\">\n        <span class=\"position-relative\">\n          <i class=\"al-ico-card-example foreground\"></i>\n          <span class=\"background\"></span>\n        </span>\n        <div class=\"mt-2\">See the pre-loaded examples to quickly get familiar with ClearML’s various capabilities.</div>\n      </div>\n      <div class=\"info\">\n        <i class=\"al-ico-help-outlined\"></i>\n        <div class=\"mt-2\">Browse \"Pro Tips\" in the Help menu to jump start your work flow.</div>\n      </div>\n      <div class=\"info\">\n        <i class=\"al-ico-documentation\"></i>\n        <div class=\"mt-2\">Check out the <a target=\"_blank\" [href]=\"docsLink\">ClearML docs</a> for advanced information and in depth how-to’s.\n        </div>\n      </div>\n    </div>\n    <div class=\"separator\"></div>\n    <div class=\"d-flex justify-content-center\">\n      <button class=\"btn btn-neon\" (click)=\"nextSteps($event)\">GET STARTED</button>\n    </div>\n  </div>\n  <ng-template #configStep>\n    <div class=\"steps-content\">\n      <div class=\"text\" *ngIf=\"queue\">\n        Tasks have been enqueued on the <b>{{queue?.name}}</b> queue, which is currently not serviced by any worker. They will remain in the 'pending' state until a ClearML worker services this queue.\n      </div>\n      <div *ngFor=\"let step of steps\" class=\"step-container\">\n        <div class=\"step-header\">{{step.header}}</div>\n        <div class=\"step\">{{step.title}}</div>\n        <div class=\"code\">\n          <div class=\"content\" #stepCode>{{step.code}}</div>\n          <sm-copy-clipboard\n            [hideBackground]=\"true\"\n            [label]=\"''\"\n            [copyIcon]=\"'far fa-lg fa-copy'\"\n            [clipboardText]=\"stepCode.innerHTML\"></sm-copy-clipboard>\n        </div>\n        <div *ngIf=\"step.subNote\" class=\"sub-note\"><i class=\"mr-1 fas fa-info-circle info\"></i>{{step.subNote}}</div>\n      </div>\n      <div class=\"step-container\">\n        <div class=\"step-header sub-note\">Complete the clearml configuration information as prompted.</div>\n        <div *ngIf=\"!accessKey ; else config\" class=\"code empty-config\">\n          <div>\n            <button class=\"mb-2 btn btn-neon\" [disabled]=\"creatingCredentials\" (click)=\"createCredentials()\">CREATE NEW\n              CREDENTIALS\n            </button>\n          </div>\n        </div>\n        <ng-template #config>\n          <div class=\"code\">\n<div #content class=\"content\"><span class=\"variable\">api</span> {{ '{' }}<ng-container *ngIf=\"community && workspace.name\">\n  <span class=\"comment\">{{'# ' + workspace.name}}</span></ng-container>\n  <span class=\"variable\">web_server</span><span class=\"operation\">:</span> <span class=\"string\">{{WEB_SERVER_URL}}</span>\n  <span class=\"variable\">api_server</span><span class=\"operation\">:</span> <span class=\"string\">{{API_BASE_URL}}</span>\n<ng-container *ngIf=\"fileBaseUrl\">  <span class=\"variable\">files_server</span><span class=\"operation\">:</span> <span class=\"string\">{{fileBaseUrl}}</span>\n</ng-container>  <span class=\"variable\">credentials</span> {{ '{' }}\n    <span class=\"string\">\"access_key\"</span> <span class=\"operation\">=</span> <span class=\"string\">\"{{accessKey}}\"</span>\n    <span class=\"string\">\"secret_key\"</span> <span class=\"operation\">=</span> <span class=\"string\">\"{{secretKey}}\"</span>\n  }\n}</div>\n            <sm-copy-clipboard\n              [hideBackground]=\"true\"\n              [label]=\"''\"\n              [copyIcon]=\"'far fa-lg fa-copy'\"\n              [clipboardText]=\"content.textContent\"></sm-copy-clipboard>\n          </div>\n        </ng-template>\n        <div class=\"sub-note\"><i class=\"mr-1 fas fa-info-circle info\"></i>Manage your app credentials in the <a target=\"_blank\" href=\"settings/workspace-configuration\">workspace settings page</a></div>\n      </div>\n      <div class=\"step-container\" *ngIf=\"!queue\">\n        <div class=\"step\">3. Integrate</div>\n        <div class=\"step sub-note\">Add the following lines to your code</div>\n        <div class=\"code\">\n          <div #content class=\"content\"><span class=\"variable\">from</span> {{gettingStartedContext?.packageName || 'clearml'}} <span class=\"variable\">import</span> Task\ntask <span class=\"operation\">=</span> Task.<span class=\"variable\">init</span>(project_name<span class=\"operation\">=</span>\"my project\", task_name<span class=\"operation\">=</span>\"my task\")</div>\n          <sm-copy-clipboard\n            [hideBackground]=\"true\"\n            [label]=\"''\"\n            [copyIcon]=\"'far fa-lg fa-copy'\"\n            [clipboardText]=\"content.textContent\"></sm-copy-clipboard>\n        </div>\n      </div>\n      <div *ngIf=\"queue\" class=\"text\">\n        <sm-checkbox-control\n          fieldName=\"orphanedQueue\"\n          [formData]=\"doNotShowAgain\"\n          (formDataChanged)=\"doNotShowThisAgain($event)\"\n          label=\"Don’t show again\"></sm-checkbox-control>\n      </div>\n    </div>\n  </ng-template>\n</sm-dialog-template>\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {setSelectedWorkspaceTab} from '@common/core/actions/users.actions';\nimport {Subscription} from 'rxjs';\nimport {selectActiveWorkspace} from '@common/core/reducers/users-reducer';\nimport {filter, tap} from 'rxjs/operators';\nimport {Store} from '@ngrx/store';\nimport {createCredential, resetCredential} from '@common/core/actions/common-auth.actions';\nimport {selectNewCredential} from '@common/core/reducers/common-auth-reducer';\nimport {guessAPIServerURL, HTTP} from '~/app.constants';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {ConfigurationService} from '@common/shared/services/configuration.service';\nimport {GetCurrentUserResponseUserObjectCompany} from '~/business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {Queue} from '~/business-logic/model/queues/queue';\nimport {GettingStartedContext} from '../../../../../environments/base';\n\ninterface StepObject { header?: string; title?: string; code?: string; subNote?: string }\n\n@Component({\n  selector: 'sm-welcome-message',\n  templateUrl: './welcome-message.component.html',\n  styleUrls: ['./welcome-message.component.scss']\n})\nexport class WelcomeMessageComponent implements OnInit, OnDestroy {\n  public step: number = 1;\n  accessKey: string;\n  secretKey: string;\n  creatingCredentials = false;\n\n  private workspacesSub: Subscription;\n  public workspace: GetCurrentUserResponseUserObjectCompany;\n  private newCredentialSub: Subscription;\n\n  API_BASE_URL = HTTP.API_BASE_URL_NO_VERSION;\n  fileBaseUrl = HTTP.FILE_BASE_URL;\n  WEB_SERVER_URL = window.location.origin;\n  GETTING_STARTED_STEPS: StepObject[] = [{\n    header: 'Get started in a jiffy:',\n    title: '1. Install',\n    code: 'pip install clearml',\n  }, {\n    title: '2. Configure',\n    code: 'clearml-init'\n  }];\n  ORPHANED_QUEUE_STEPS: StepObject[] =\n    [{\n      header: null, code: null,\n      subNote: 'See ClearML Documentation for different ways of deploying workers'\n    }, {\n      header: 'To setup a worker',\n      title: '1. Install',\n      code: 'pip install clearml-agent',\n    }, {\n      title: '2. Configure',\n      code: 'clearml-agent init'\n    }\n    ];\n  host: string;\n  community = false;\n  public queue: Queue;\n  steps: StepObject[];\n  doNotShowAgain: boolean;\n  public gettingStartedContext: GettingStartedContext;\n  docsLink: string;\n\n  constructor(\n    private store: Store<any>,\n    private dialogRef: MatDialogRef<any>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private adminService: AdminService,\n    private configService: ConfigurationService\n  ) {\n    this.dialogRef.beforeClosed().subscribe(() => this.dialogRef.close(this.doNotShowAgain));\n    this.step = data?.step || this.step;\n    this.queue = data?.queue;\n    this.gettingStartedContext = this.configService.getStaticEnvironment().gettingStartedContext;\n    this.docsLink = this.configService.getStaticEnvironment().docsLink;\n\n    this.steps = this.queue ? this.ORPHANED_QUEUE_STEPS : this.GETTING_STARTED_STEPS;\n    if (this.queue) {\n      this.steps[0].code = `clearml-agent daemon --queue ${this.queue.name}`;\n      this.steps[0].header = `To assign a worker to the ${this.queue.name} queue, run:`;\n    } else if (this.gettingStartedContext) {\n      this.steps[0].code = this.gettingStartedContext.install;\n      this.steps[1].code = this.gettingStartedContext.configure;\n    }\n    this.host = `${window.location.protocol}//${window.location.hostname}`;\n    if (this.API_BASE_URL === '/api') {\n      this.API_BASE_URL = guessAPIServerURL();\n    }\n\n    this.workspacesSub = this.store.select(selectActiveWorkspace)\n      .pipe(filter(active => !!active))\n      .subscribe(active => this.workspace = active);\n  }\n\n  ngOnInit(): void {\n    this.community = this.configService.getStaticEnvironment().communityServer;\n\n    this.newCredentialSub = this.store.select(selectNewCredential)\n      .pipe(\n        tap(() => this.creatingCredentials = false),\n        filter(credential => credential && Object.keys(credential).length > 0)\n      ).subscribe(credential => {\n        this.accessKey = credential.access_key;\n        this.secretKey = credential.secret_key;\n        this.store.dispatch(resetCredential());\n      });\n  }\n\n  closeDialog() {\n    this.dialogRef.close(this.doNotShowAgain);\n  }\n\n  nextSteps(event: MouseEvent) {\n    event.preventDefault();\n    this.step++;\n  }\n\n  createCredentials() {\n    this.creatingCredentials = true;\n    this.store.dispatch(setSelectedWorkspaceTab({workspace: {id: this.workspace.id}}));\n    this.store.dispatch(createCredential({workspace: this.workspace}));\n  }\n\n  ngOnDestroy(): void {\n    this.workspacesSub?.unsubscribe();\n    this.newCredentialSub?.unsubscribe();\n  }\n\n  doNotShowThisAgain($event: { field: string; value: any; event: Event }) {\n    this.doNotShowAgain = $event.value;\n  }\n}\n","<ng-container *ngIf=\"(source$ | async) as source\">\n  <div *ngIf=\"!isFailed\" class=\"item snippet\" [ngClass]=\"{'loading' : isLoading}\">\n    <ng-container [ngSwitch]=\"type\">\n      <img\n        *ngSwitchCase=\"'image'\"\n        class=\"pointer\"\n        [src]=\"source\"\n        (error)=\"isFailed = true\"\n        (click)=\"imageClicked.emit()\"\n        (load)=\"loadedMedia()\"\n        [ngClass]=\"{'loading' : isLoading}\"\n      >\n      <video\n        #video\n        *ngSwitchCase=\"'player'\"\n        preload=\"metadata\"\n        class=\"pointer w-100 h-100\"\n        [src]=\"source\"\n        (error)=\"imageError.emit(); isFailed = true\"\n        (loadedmetadata)=\"loadedMedia()\"\n        (click)=\"imageClicked.emit()\"\n      ></video>\n      <div class=\"html-snippet\" *ngSwitchCase=\"'html'\">\n        <div class=\"html-wrap\">\n          <iframe class=\"html-viewer\" width=\"400\" height=\"400\" referrerpolicy=\"origin-when-cross-origin\" [src]=\"source | safe:'url'\"></iframe>\n        </div>\n        <div class=\"toolbar\">\n          <div class=\"clickable-icon d-flex align-items-center justify-content-center pointer mr-2\"\n               ngxClipboard\n               smTooltip=\"Copy URL\"\n               [cbContent]=\"source\"\n               (cbOnSuccess)=\"copyToClipboardSuccess(true)\">\n            <i class=\"fas fa-copy\"></i>\n          </div>\n          <div class=\"clickable-icon d-flex align-items-center justify-content-center pointer\"\n               smTooltip=\"Open URL in a new Tab\"\n               (click)=\"openInNewTab(source)\"\n          >\n            <i class=\"fas fa-external-link-alt\"></i>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n    <div *ngIf=\"!isLoading\" class=\"image-var ellipsis\" [smTooltip]=\"frame?.variant\">{{frame?.variantAndMetric || frame?.variant}}</div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"(source$ | async) as source\">\n  <div *ngIf=\"isFailed\" class=\"item\">\n    <sm-snippet-error\n      [theme]=\"themeEnum.Light\"\n      [copyContent]=\"source?.split('?X-Amz-Date')[0]\"\n      (openImageClicked)=\"openInNewTab(source)\"\n    ></sm-snippet-error>\n  </div>\n</ng-container>\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {isHtmlPage, isTextFileURL} from '../../shared/utils/shared-utils';\nimport {IsAudioPipe} from '../../shared/pipes/is-audio.pipe';\nimport {IsVideoPipe} from '../../shared/pipes/is-video.pipe';\nimport {addMessage} from '../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {Store} from '@ngrx/store';\nimport {ThemeEnum} from '../../experiments/shared/common-experiments.const';\nimport {getSignedUrlOrOrigin$} from '../../core/reducers/common-auth-reducer';\nimport {tap} from 'rxjs/operators';\nimport {Observable} from 'rxjs/internal/Observable';\n\n@Component({\n  selector: 'sm-debug-image-snippet',\n  templateUrl: './debug-image-snippet.component.html',\n  styleUrls: ['./debug-image-snippet.component.scss']\n})\nexport class DebugImageSnippetComponent implements OnInit {\n  public type: 'image' | 'player' | 'html';\n  public themeEnum = ThemeEnum;\n  public source$: Observable<string>;\n  private _frame: any;\n\n  @Input() set frame(frame) {\n    if (frame.url) {\n      this.source$ = getSignedUrlOrOrigin$(frame.url, this.store).pipe(\n        tap(signed => {\n          if (new IsVideoPipe().transform(signed) ||\n            new IsAudioPipe().transform(signed)) {\n            this.type = 'player';\n          } else if (isHtmlPage(signed) || isTextFileURL(signed)) {\n            this.type = 'html';\n          } else {\n            this.type = 'image';\n          }\n          this.isFailed = !signed?.startsWith('http');\n        }));\n    }\n    this._frame = frame;\n  }\n  get frame() {\n    return this._frame;\n  }\n  @Output() imageError = new EventEmitter();\n  @Output() imageClicked = new EventEmitter();\n  @ViewChild('video') video: ElementRef<HTMLVideoElement>;\n\n  isFailed = false;\n  isLoading = true;\n\n  constructor(private store: Store<any>) {\n  }\n\n  ngOnInit() {\n  }\n\n  openInNewTab(source: string) {\n    window.open(source, '_blank');\n  }\n\n  loadedMedia() {\n    this.isLoading = false;\n    if (this.video?.nativeElement?.videoHeight === 0) {\n      this.video.nativeElement.poster = '/app/webapp-common/assets/icons/audio.svg';\n    }\n  }\n\n  copyToClipboardSuccess(success: boolean) {\n    this.store.dispatch(addMessage(\n      success ? MESSAGES_SEVERITY.SUCCESS : MESSAGES_SEVERITY.ERROR,\n      success ? 'Path copied to clipboard' : 'No path to copy'\n    ));\n  }\n\n  log($event: ErrorEvent) {\n    console.log($event);\n  }\n}\n","import {createAction, props} from '@ngrx/store';\nimport {Task} from '../../business-logic/model/tasks/task';\nimport {TaskMetric} from '../../business-logic/model/events/taskMetric';\nimport {EventsDebugImagesResponse} from '../../business-logic/model/events/eventsDebugImagesResponse';\nimport {EventsGetDebugImageIterationsResponse} from '../../business-logic/model/events/eventsGetDebugImageIterationsResponse';\n\nexport const DEBUG_IMAGES_PREFIX = 'DEBUG_IMAGES_';\n\n\nexport const resetDebugImages = createAction(DEBUG_IMAGES_PREFIX + 'RESET_DEBUG_IMAGES');\n\nexport const setDebugImages = createAction(\n  DEBUG_IMAGES_PREFIX + 'SET_DEBUG_IMAGES',\n  props<{ res: EventsDebugImagesResponse; task: string }>()\n);\nexport const getDebugImagesMetrics = createAction(\n  DEBUG_IMAGES_PREFIX + 'GET_DEBUG_IMAGES_METRICS',\n  props<{ tasks: string[] }>()\n);\n\nexport const refreshDebugImagesMetrics = createAction(\n  DEBUG_IMAGES_PREFIX + 'REFRESH_DEBUG_IMAGES_METRICS',\n  props<{ tasks: string[] }>()\n);\n\nexport const fetchExperiments = createAction(\n  DEBUG_IMAGES_PREFIX + 'FETCH_EXPERIMENTS',\n  props<{ tasks: string[] }>()\n);\n\nexport const setExperimentsNames = createAction(\n  DEBUG_IMAGES_PREFIX + 'SET_EXPERIMENTS_NAMES',\n  props<{ tasks: Partial<Task>[] }>()\n);\n\nexport const setMetrics = createAction(\n  DEBUG_IMAGES_PREFIX + 'SET_DEBUG_IMAGES_METRICS',\n  props<{ metrics: any[] }>()\n);\n\nexport const setSelectedMetric = createAction(\n  DEBUG_IMAGES_PREFIX + 'SET_DEBUG_IMAGES_SELECTED_METRIC',\n  props<{ payload: TaskMetric }>()\n);\n\nexport const refreshMetric = createAction(\n  DEBUG_IMAGES_PREFIX + 'REFRESH_IMAGES_SELECTED_METRIC',\n  props<{ payload: TaskMetric }>()\n);\n\nexport const getNextBatch= createAction(\n  DEBUG_IMAGES_PREFIX + 'GET_NEXT_DEBUG_IMAGES_BATCH',\n  props<{ payload: TaskMetric }>()\n);\n\nexport const getPreviousBatch= createAction(\n  DEBUG_IMAGES_PREFIX + 'GET_PREVIOUS_DEBUG_IMAGES_BATCH',\n  props<{ payload: TaskMetric }>()\n);\n\nexport const setTimeIsNow = createAction(\n  DEBUG_IMAGES_PREFIX + 'SET_TIME_IS_NOW',\n  props<{ task: string; timeIsNow: boolean }>()\n);\n\nexport const setBeginningOfTime = createAction(\n  DEBUG_IMAGES_PREFIX + 'SET_BEGINNING_OF_TIME',\n  props<{ task: string; beginningOfTime: boolean }>()\n);\n\nexport const getDebugImageSample = createAction(DEBUG_IMAGES_PREFIX + 'GET_DEBUG_IMAGES_FOR_ITERATION', props<{ task: string; metric: string; variant: string; iteration: number }>());\nexport const getNextDebugImageSample = createAction(DEBUG_IMAGES_PREFIX + 'GET_NEXT_DEBUG_IMAGE', props<{ task: string; navigateEarlier: boolean }>());\nexport const setCurrentDebugImage = createAction(DEBUG_IMAGES_PREFIX + 'SET_DEBUG_IMAGES_FOR_ITERATION', props<{ event: any }>());\nexport const setDebugImageViewerScrollId = createAction(DEBUG_IMAGES_PREFIX + 'SET_DEBUG_IMAGE_VIEWER_SCROLL_ID', props<{ scrollId: string }>());\nexport const setDebugImageIterations = createAction(DEBUG_IMAGES_PREFIX + 'SET_DEBUG_IMAGE_ITERATIONS', props<EventsGetDebugImageIterationsResponse>());\nexport const setDisplayerEndOfTime = createAction(DEBUG_IMAGES_PREFIX + 'SET_DISPLAYER_END_OF_TIME', props<{ endOfTime: boolean }>());\nexport const setDisplayerBeginningOfTime = createAction(DEBUG_IMAGES_PREFIX + 'SET_DISPLAYER_BEGINNING_OF_TIME', props<{ beginningOfTime: boolean }>());\nexport const resetDisplayer = createAction(DEBUG_IMAGES_PREFIX + 'RESET_DISPLAYER');\n\n\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect,  ofType} from '@ngrx/effects';\nimport {catchError, mergeMap, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport * as  debugActions from './debug-images-actions';\nimport {activeLoader, deactivateLoader} from '../core/actions/layout.actions';\nimport {ApiTasksService} from '../../business-logic/api-services/tasks.service';\nimport {ApiEventsService} from '../../business-logic/api-services/events.service';\nimport {requestFailed} from '../core/actions/http.actions';\nimport {refreshExperiments} from '../experiments/actions/common-experiments-view.actions';\nimport {setRefreshing} from '../experiments-compare/actions/compare-header.actions';\nimport {Action, Store} from '@ngrx/store';\nimport {selectDebugImages, selectImageViewerScrollId} from './debug-images-reducer';\nimport {\n  setCurrentDebugImage,\n  setDebugImageIterations,\n  setDebugImageViewerScrollId,\n  setDisplayerBeginningOfTime, setDisplayerEndOfTime\n} from './debug-images-actions';\nimport {EventsDebugImagesResponse} from '../../business-logic/model/events/eventsDebugImagesResponse';\nimport {EventsGetTaskMetricsResponse} from '../../business-logic/model/events/eventsGetTaskMetricsResponse';\n\nexport const ALL_IMAGES = '-- All --';\n\nexport const removeAllImagesFromPayload = (payload) =>\n  ({...payload, metric: payload.metric === ALL_IMAGES ? null : payload.metric});\n\n\n// interface Image {\n//   timestamp: number;\n//   type?: string;\n//   task?: string;\n//   iter?: number;\n//   metric?: string;\n//   variant?: string;\n//   key?: string;\n//   url?: string;\n//   '@timestamp'?: string;\n//   worker?: string;\n// }\n\n\n@Injectable()\nexport class DebugImagesEffects {\n\n  constructor(\n    private actions$: Actions, private apiTasks: ApiTasksService,\n    private eventsApi: ApiEventsService, private store: Store<any>\n  ) {}\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(debugActions.fetchExperiments),\n    map(action => activeLoader(action.type))\n  ));\n\n\n  fetchDebugImages$ = createEffect(() => this.actions$.pipe(\n    ofType(debugActions.setSelectedMetric, debugActions.getNextBatch, debugActions.getPreviousBatch, debugActions.refreshMetric),\n    withLatestFrom(this.store.select(selectDebugImages)),\n    mergeMap(([action, debugImages]) =>\n      this.eventsApi.eventsDebugImages({\n        /* eslint-disable @typescript-eslint/naming-convention */\n        metrics: [removeAllImagesFromPayload(action.payload)],\n        iters: 3,\n        scroll_id: debugImages[action.payload.task] ? debugImages[action.payload.task].scroll_id : null,\n        navigate_earlier: action.type !== debugActions.getPreviousBatch.type,\n        refresh: [debugActions.setSelectedMetric.type, debugActions.refreshMetric.type].includes(action.type)\n        /* eslint-enable @typescript-eslint/naming-convention */\n      })\n        .pipe(\n          mergeMap((res: EventsDebugImagesResponse ) => {\n            const actionsToShoot = [deactivateLoader(action.type), setRefreshing({payload: false})] as Action[];\n            if (res.metrics[0].iterations && res.metrics[0].iterations.length > 0) {\n              actionsToShoot.push(debugActions.setDebugImages({res, task: action.payload.task}));\n              switch (action.type) {\n                case debugActions.getNextBatch.type:\n                  actionsToShoot.push(debugActions.setTimeIsNow({task: action.payload.task, timeIsNow: false}));\n                  break;\n                case debugActions.setSelectedMetric.type:\n                  actionsToShoot.push(debugActions.setTimeIsNow({task: action.payload.task, timeIsNow: true}));\n                  break;\n                case debugActions.getPreviousBatch.type:\n                  actionsToShoot.push(debugActions.setBeginningOfTime({\n                    task: action.payload.task,\n                    beginningOfTime: false\n                  }));\n                  break;\n              }\n            } else {\n              switch (action.type) {\n                case debugActions.getNextBatch.type:\n                  actionsToShoot.push(debugActions.setBeginningOfTime({\n                    task: action.payload.task,\n                    beginningOfTime: true\n                  }));\n                  break;\n                case debugActions.getPreviousBatch.type:\n                  actionsToShoot.push(debugActions.setTimeIsNow({task: action.payload.task, timeIsNow: true}));\n                  break;\n              }\n            }\n            return actionsToShoot;\n          }),\n          catchError(error => [\n            requestFailed(error),\n            setRefreshing({payload: false}),\n            deactivateLoader(action.type),\n            deactivateLoader(refreshExperiments.type)\n          ])\n        )\n    )\n  ));\n\n  fetchExperiments$ = createEffect(() => this.actions$.pipe(\n    ofType(debugActions.fetchExperiments),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    switchMap((action) => this.apiTasks.tasksGetAllEx({id: action.tasks, only_fields: ['id', 'name', 'status']})\n      .pipe(\n        mergeMap(res => [debugActions.setExperimentsNames({tasks: res.tasks}), deactivateLoader(action.type)]),\n        catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n      )\n    )\n  ));\n\n\n  fetchMetrics$ = createEffect(() => this.actions$.pipe(\n    ofType(debugActions.getDebugImagesMetrics, debugActions.refreshDebugImagesMetrics),\n    switchMap((action) => this.eventsApi.eventsGetTaskMetrics({\n      /* eslint-disable @typescript-eslint/naming-convention */\n      tasks: action.tasks,\n      event_type: 'training_debug_image'\n      /* eslint-enable @typescript-eslint/naming-convention */\n    })\n      .pipe(\n        mergeMap((res: EventsGetTaskMetricsResponse) => [debugActions.setMetrics({metrics: res.metrics}), deactivateLoader(action.type)]),\n        catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n      )\n    )\n  ));\n\n  fetchDebugImagesForIter$ = createEffect(() => this.actions$.pipe(\n    ofType(debugActions.getDebugImageSample),\n    withLatestFrom(this.store.select(selectImageViewerScrollId)),\n    switchMap(([action, scrollId]) =>\n      this.eventsApi.eventsGetDebugImageSample({\n        /* eslint-disable @typescript-eslint/naming-convention */\n        task: action.task,\n        iteration: action.iteration,\n        metric: action.metric,\n        variant: action.variant,\n        scroll_id: scrollId\n        /* eslint-enable @typescript-eslint/naming-convention */\n      })\n        .pipe(\n          mergeMap(res => [\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            setDebugImageIterations({min_iteration: res.min_iteration, max_iteration: res.max_iteration}),\n            setCurrentDebugImage({event: res.event}), deactivateLoader(action.type),\n            setDebugImageViewerScrollId({scrollId: res.scroll_id}),\n          ]),\n          catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n        )\n    )\n  ));\n\n  getNextDebugImagesForIter$ = createEffect(() => this.actions$.pipe(\n    ofType(debugActions.getNextDebugImageSample),\n    withLatestFrom(this.store.select(selectImageViewerScrollId)),\n    switchMap(([action, scrollId]) =>\n      this.eventsApi.eventsNextDebugImageSample({\n        /* eslint-disable @typescript-eslint/naming-convention */\n        task: action.task,\n        scroll_id: scrollId,\n        navigate_earlier: action.navigateEarlier\n        /* eslint-enable @typescript-eslint/naming-convention */\n      })\n        .pipe(\n          mergeMap(res => {\n            if (!res.event) {\n              return [action.navigateEarlier ? setDisplayerBeginningOfTime({beginningOfTime: true}) : setDisplayerEndOfTime({endOfTime: true})];\n            } else {\n              return [\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                setDebugImageIterations({min_iteration: res.min_iteration, max_iteration: res.max_iteration}),\n                setCurrentDebugImage({event: res.event}), deactivateLoader(action.type),\n                setDebugImageViewerScrollId({scrollId: res.scroll_id}),\n                action.navigateEarlier ? setDisplayerBeginningOfTime({beginningOfTime: false}) : setDisplayerEndOfTime({endOfTime: false})\n              ];\n            }\n          }),\n          catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n        )\n    )\n  ));\n}\n","import {\n  fetchExperiments,\n  getDebugImagesMetrics,\n  resetDebugImages,\n  resetDisplayer,\n  setBeginningOfTime,\n  setCurrentDebugImage,\n  setDebugImageIterations,\n  setDebugImages,\n  setDebugImageViewerScrollId,\n  setDisplayerBeginningOfTime,\n  setDisplayerEndOfTime, setExperimentsNames, setMetrics, setSelectedMetric, setTimeIsNow\n} from './debug-images-actions';\nimport {Task} from '../../business-logic/model/tasks/task';\nimport {createFeatureSelector, createReducer, createSelector, on} from '@ngrx/store';\nimport {omit} from 'lodash/fp';\nimport {EventsGetDebugImageIterationsResponse} from '../../business-logic/model/events/eventsGetDebugImageIterationsResponse';\nimport {EventsDebugImagesResponse} from '../../business-logic/model/events/eventsDebugImagesResponse';\n\n\nexport interface IDebugImagesState {\n  debugImages: {[taskId: string]: EventsDebugImagesResponse};\n  settingsList: Array<IDebugImagesSettings>;\n  tasks: Array<Partial<Task>>;\n  optionalMetrics: Array<ITaskOptionalMetrics>;\n  searchTerm: string;\n  scrollId: any;\n  imageDisplayerScrollId: string;\n  imageDisplayerBeginningOfTime: boolean;\n  imageDisplayerEndOfTime: boolean;\n  noMore: boolean;\n  selectedMetric: any;\n  timeIsNow: any;\n  beginningOfTime: any;\n  minMaxIterations: EventsGetDebugImageIterationsResponse;\n  currentImageViewerDebugImage: any;\n}\n\nexport interface IDebugImagesSettings {\n  id: Task['id'];\n  selectedDebugImages: string;\n}\n\nexport interface ITaskOptionalMetrics {\n  task: string;\n  metrics: Array<string>;\n}\n\nexport const initialState: IDebugImagesState = {\n    debugImages: {},\n    settingsList: [],\n    searchTerm: '',\n    tasks: [],\n    optionalMetrics: [],\n    scrollId: {},\n    imageDisplayerScrollId: null,\n    imageDisplayerBeginningOfTime: null,\n    imageDisplayerEndOfTime: null,\n    noMore: true,\n    selectedMetric: null,\n    timeIsNow: {},\n    beginningOfTime: {},\n    minMaxIterations: {},\n    currentImageViewerDebugImage: null\n  }\n;\n\nexport const debugImages = createFeatureSelector<IDebugImagesState>('debugImages');\nexport const selectDebugImages = createSelector(debugImages, (state) => state.debugImages);\nexport const selectTaskNames = createSelector(debugImages, (state) => state.tasks);\nexport const selectNoMore = createSelector(debugImages, (state) => state.noMore);\nexport const selectOptionalMetrics = createSelector(debugImages, (state) => state.optionalMetrics);\nexport const selectTimeIsNow = createSelector(debugImages, (state) => state.timeIsNow);\nexport const selectBeginningOfTime = createSelector(debugImages, (state) => state.beginningOfTime);\nexport const selectMinMaxIterations = createSelector(debugImages, (state) => state.minMaxIterations);\nexport const selectCurrentImageViewerDebugImage = createSelector(debugImages, (state) => state.currentImageViewerDebugImage);\nexport const selectImageViewerScrollId = createSelector(debugImages, (state) => state.imageDisplayerScrollId);\nexport const selectDisplayerEndOfTime = createSelector(debugImages, (state) => state.imageDisplayerEndOfTime);\nexport const selectDisplayerBeginningOfTime = createSelector(debugImages, (state) => state.imageDisplayerBeginningOfTime);\n\nexport const debugSamplesReducer = createReducer(\n  initialState,\n  on(resetDebugImages, state => ({\n    ...state,\n    debugImages: initialState.debugImages,\n    scrollId: initialState.scrollId,\n    noMore: initialState.noMore\n  })),\n  on(setDebugImages, (state, action) => ({...state, debugImages: {...state.debugImages, [action.task]: action.res}})),\n  on(setExperimentsNames, (state, action) => ({...state, tasks: action.tasks})),\n  on(setMetrics, (state, action) => ({...state, optionalMetrics: action.metrics})),\n  on(getDebugImagesMetrics, state => ({...state, optionalMetrics: initialState.optionalMetrics, debugImages: initialState.debugImages})),\n  on(setSelectedMetric, (state, action) => ({\n        ...state,\n        debugImages: omit(action.payload.task, state.debugImages),\n        timeIsNow: {...state.timeIsNow, [action.payload.task]: true},\n        beginningOfTime: {...state.beginningOfTime, [action.payload.task]: false}\n  })),\n  on(setTimeIsNow, (state, action) => ({...state, timeIsNow: {...state.timeIsNow, [action.task]: action.timeIsNow}})),\n  on(fetchExperiments, () => ({...initialState})),\n  on(setBeginningOfTime, (state, action) => ({\n        ...state,\n        beginningOfTime: {...state.beginningOfTime, [action.task]: action.beginningOfTime}\n  })),\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on(setDebugImageIterations, (state, action) => ({...state, minMaxIterations: {min_iteration: action.min_iteration, max_iteration: action.max_iteration}})),\n  on(setCurrentDebugImage, (state, action) => ({...state, currentImageViewerDebugImage: action.event})),\n  on(setDebugImageViewerScrollId, (state, action) => ({...state, imageDisplayerScrollId: action.scrollId})),\n  on(setDisplayerEndOfTime, (state, action) => ({...state, imageDisplayerEndOfTime: action.endOfTime})),\n  on(setDisplayerBeginningOfTime, (state, action) => ({...state, imageDisplayerBeginningOfTime: action.beginningOfTime})),\n  on(resetDisplayer, state => ({\n    ...state,\n    imageDisplayerEndOfTime: null,\n    imageDisplayerBeginningOfTime: null,\n    imageDisplayerScrollId: null,\n    minMaxIterations: null,\n    currentImageViewerDebugImage: null\n  })),\n);\n","<mat-expansion-panel *ngFor=\"let iteration of iterations; let first = first; trackBy:trackKey\"\n                     class=\"images-section\" [class.dark-theme]=\"isDarkTheme\" togglePosition=\"before\" [expanded]=\"first\">\n  <mat-expansion-panel-header class=\"debug-header\" [collapsedHeight]=\"null\">\n    <mat-panel-title> {{iteration.iter}}</mat-panel-title>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"d-flex justify-content flex-wrap\">\n      <sm-debug-image-snippet\n        *ngFor=\"let frame of iteration.events; trackBy:trackFrame\"\n        [frame]=\"frame\"\n        (imageError)=\"imageUrlError({frame: frame, experimentId: experimentId})\"\n        (imageClicked)=\"imageClicked.emit({frame: frame, snippetKey: frame.key, frames: iterationEvents})\">\n      </sm-debug-image-snippet>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, Input, Output} from '@angular/core';\nimport {EventEmitter} from '@angular/core';\n\n@Component({\n  selector: 'sm-debug-images-view',\n  templateUrl: './debug-images-view.component.html',\n  styleUrls: ['./debug-images-view.component.scss']\n})\nexport class DebugImagesViewComponent {\n\n  public trackKey = (index: number, item: any) => item.iter;\n  public trackFrame = (index: number, item: any) => item.key;\n  public iterationEvents;\n\n  @Input() experimentId;\n  @Input() isMergeIterations;\n  @Input() title;\n  private _iterations;\n  @Input() set iterations(iters) {\n    this._iterations = iters;\n    this.iterationEvents = [];\n    iters.forEach(iteration => this.iterationEvents.push(iteration.events));\n  }\n  get iterations() {\n    return this._iterations;\n  }\n  @Input() isDarkTheme = false;\n  @Output() imageClicked = new EventEmitter();\n  @Output() refreshClicked = new EventEmitter();\n  @Output() urlError = new EventEmitter();\n\n  public imageUrlError(data: { frame: string; experimentId: string }) {\n    this.urlError.emit(data);\n  }\n}\n","<div class=\"p-3 images-container\">\n  <div class=\"single-debug-images-container\" *ngFor=\"let experimentId of experimentIds; trackBy: trackExperiment\">\n    <header *ngIf=\"experimentIds?.length > 1\">\n      <div\n        class=\"experiment-name\">\n        <span [smTooltip]=\"experimentNames[experimentId]\" matTooltipPosition=\"above\">{{modifiedExperimentsNames[experimentId]}}</span>\n      </div>\n    </header>\n    <div class=\"d-flex\">\n      <div class=\"metric-bar\" [class.minimized]=\"minimized\" *ngIf=\"!thereAreNoMetrics(experimentId)\">\n        <label>Metric:</label>\n        <mat-form-field appearance=\"outline\" [ngClass]=\"{'dark thin': isDarkTheme}\">\n          <mat-select #metricSelect (selectionChange)=\"selectMetric($event, experimentId)\" [panelClass]=\"isDarkTheme ? 'dark black dark-theme': 'light-theme'\"\n                      [value]=\"selectedMetrics[experimentId]\" name=\"selectedMetric\">\n            <mat-option *ngIf=\"selectedMetrics[experimentId]\" [value]=\"allImages\">{{allImages}}</mat-option>\n            <mat-option *ngFor=\"let metric of optionalMetrics[experimentId]\" [value]=\"metric\">\n              {{metric}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <label>Iterations:</label>\n\n        <div [ngClass]=\"{'disabled': (beginningOfTime$| async)[experimentId]}\"\n             (click)=\"nextBatch({task: experimentId, metric: metricSelect.value})\"\n             class=\"al-icon al-ico-next-batch al-color light-grey-blue\"\n             smTooltip=\"Older images\"></div>\n\n        <b\n          class=\"text-right\">{{debugImages && debugImages[experimentId] && debugImages[experimentId][0][debugImages[experimentId][0].length - 1].iter}}</b>\n\n        <div class=\"al-icon al-ico-between al-color light-blue-grey\"></div>\n\n        <b>{{debugImages && debugImages[experimentId] && debugImages[experimentId][0][0].iter}}</b>\n\n        <div [ngClass]=\"{'disabled': (timeIsNow$| async)[experimentId]}\"\n             (click)=\"(!timeIsNow[experimentId]) && previousBatch({task: experimentId, metric: metricSelect.value})\"\n             class=\"al-icon al-ico-prev-batch al-color light-grey-blue\"\n             smTooltip=\"Newer images\"></div>\n\n        <div [ngClass]=\"{'disabled': (timeIsNow$| async)[experimentId] && !allowAutorefresh }\"\n             (click)=\"(!(timeIsNow[experimentId] && !allowAutorefresh)) && backToNow({task: experimentId, metric: metricSelect.value})\"\n             class=\"al-icon al-ico-back-to-top al-color light-grey-blue\"\n             smTooltip=\"Newest images\"></div>\n      </div>\n    </div>\n    <div class=\"no-images no-output\" [class.dark]=\"isDarkTheme\" *ngIf=\"shouldShowNoImagesForExperiment(experimentId)\">\n      <svg class=\"mb-3 w-100\" xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"150\" viewBox=\"0 0 300 150\">\n        <path opacity=\"0.1\"\n              d=\"M72.67,79.36a5.39,5.39,0,0,1-1.45,4.32,1.17,1.17,0,0,1-.6.34,1.13,1.13,0,0,1-1.31-.88,1.11,1.11,0,0,1,.28-1,3.19,3.19,0,0,0,.89-2.36c-.22-1.09-1.66-1.73-1.68-1.74A1.12,1.12,0,0,1,69.65,76C69.76,76,72.22,77.07,72.67,79.36ZM46.19,78.1a1.38,1.38,0,0,0-1.06,1.61L47.3,90.38a1.38,1.38,0,0,0,1.61,1.06l4-.82L50.19,77.29Zm30.87.39c-.91-4.54-5.23-7.07-5.41-7.18a1.13,1.13,0,1,0-1.16,1.94s3.63,2.13,4.34,5.68-1.8,7-1.82,7a1.12,1.12,0,0,0,.25,1.56,1.11,1.11,0,0,0,.86.2,1.12,1.12,0,0,0,.68-.43C75,87.09,78,83,77.06,78.49Zm-3.57-12a1.12,1.12,0,0,0-1,2,12.48,12.48,0,0,1,2.91,2.24,13.87,13.87,0,0,1,3.88,7.28,14.19,14.19,0,0,1-.78,8.27,13,13,0,0,1-1.83,3.22,1.11,1.11,0,0,0,1.06,1.82h0a1,1,0,0,0,.63-.36,16.47,16.47,0,0,0,3.13-13.38A16.18,16.18,0,0,0,73.49,66.53Zm-9.28,1a1.35,1.35,0,0,0-1.6-1.06h0a1.45,1.45,0,0,0-.71.4L52.2,76.93l2.7,13.24,12.82,5.52a1.36,1.36,0,0,0,1.79-.7,1.33,1.33,0,0,0,.09-.81ZM261.4,76.66l-3.77,21.62-8.28-8.4-.47,2.7a4.13,4.13,0,0,1-4.76,3.35l-25.67-4.48a4.14,4.14,0,0,1-3.35-4.76l2.36-13.51c0-.12,0-.24.08-.35a6.17,6.17,0,1,1,10-3.71,5.62,5.62,0,0,1-.5,1.55l4.49.79a6.37,6.37,0,0,1,.06-1.63,6.15,6.15,0,1,1,11.63,3.65l4.63.81a4,4,0,0,1,3.4,4.53c0,.08,0,.15-.05.23l-.48,2.7ZM225.28,68.1a3.7,3.7,0,0,0-3.52-3.87h-.19a3.79,3.79,0,1,0,3.71,3.87Zm16.29,3A3.7,3.7,0,0,0,238,67.24h-.19a3.79,3.79,0,1,0,3.72,3.86Zm53.2-20.19L281,129.18a17.25,17.25,0,0,1-20,14l-78.27-13.81a17,17,0,0,1-11.13-7.08,17.86,17.86,0,0,1-1-1.69H130.44a17.86,17.86,0,0,1-1,1.69,17,17,0,0,1-11.13,7.08L40.09,143.16a17.25,17.25,0,0,1-20-14L6.26,50.86a17.26,17.26,0,0,1,14-20h0L94.63,17.77A17.24,17.24,0,0,1,110.76,6.58h79.47a17.24,17.24,0,0,1,16.13,11.19l74.38,13.11a17.25,17.25,0,0,1,14,20ZM120.22,119.58h-9.47a17.21,17.21,0,0,1-17.19-17.19V25.1L21.81,37.75a9.55,9.55,0,0,0-7.74,11.06l13.76,78.06a9.57,9.57,0,0,0,11.06,7.71L117,120.81A9.68,9.68,0,0,0,120.22,119.58Zm69.82-7a9.54,9.54,0,0,0,9.52-9.52V24.13a9.53,9.53,0,0,0-9.5-9.55h-79a9.51,9.51,0,0,0-9.51,9.51v79a9.53,9.53,0,0,0,9.51,9.52Zm95.52-70.94a9.49,9.49,0,0,0-6.17-3.93L207.56,25.1v77.33a17.23,17.23,0,0,1-17.21,17.15h-9.49a9.66,9.66,0,0,0,3.28,1.23l78.15,13.77a9.58,9.58,0,0,0,11.07-7.75l13.78-78.06a9.44,9.44,0,0,0-1.58-7.09Zm-109,.43c1.09.64,1,2.34,1,2.34l-.14,37.87a3.33,3.33,0,0,1-3.36,3.3h0l-48.13-.16a3.37,3.37,0,0,1-3.37-3.35l.2-37.39a3.3,3.3,0,0,1,2.11-3l.18-.08h49.68s1.76-.15,1.83.53ZM160.49,53.34a3.8,3.8,0,0,0,7.59,0,3.7,3.7,0,0,0-3.67-3.76h-.12A3.79,3.79,0,0,0,160.49,53.34ZM171.6,74.93l-8.55-9.46-.19-.19a2.49,2.49,0,0,0-3.52.16v0l-4.2,4.63-9.19-10.63a3.05,3.05,0,0,0-1.59-1,2.75,2.75,0,0,0-2.66.95h0l-13.13,15v4.13l43,.14Z\"/>\n      </svg>\n      <h3>NO DEBUG SAMPLES</h3>\n    </div>\n    <sm-debug-images-view\n      *ngFor=\"let debugImages of debugImages[experimentId]\"\n      [iterations]=\"debugImages\"\n      [experimentId]=\"experimentId\"\n      [title]=\"experimentNames && experimentNames[experimentId]\"\n      [isMergeIterations]=\"mergeIterations\"\n      [isDarkTheme]=\"isDarkTheme\"\n      (imageClicked)=\"imageClicked($event)\"\n      (urlError)=\"urlError()\"\n    >\n    </sm-debug-images-view>\n  </div>\n</div>\n\n","import {ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {IExperimentInfoState} from '../../features/experiments/reducers/experiment-info.reducer';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {selectS3BucketCredentials} from '../core/reducers/common-auth-reducer';\nimport {MatDialog} from '@angular/material/dialog';\nimport * as  debugActions from './debug-images-actions';\nimport {fetchExperiments, getDebugImagesMetrics, resetDebugImages} from './debug-images-actions';\nimport {\n  selectBeginningOfTime,\n  selectDebugImages,\n  selectNoMore,\n  selectOptionalMetrics,\n  selectTaskNames,\n  selectTimeIsNow\n} from './debug-images-reducer';\nimport {selectRouterParams} from '../core/reducers/router-reducer';\nimport {distinctUntilChanged, filter, map, withLatestFrom} from 'rxjs/operators';\nimport {Task} from '../../business-logic/model/tasks/task';\nimport {ActivatedRoute} from '@angular/router';\nimport {TaskStatusEnum} from '../../business-logic/model/tasks/taskStatusEnum';\nimport {ImageDisplayerComponent} from '../experiments/dumb/image-displayer/image-displayer.component';\nimport {selectSelectedExperiment} from '../../features/experiments/reducers';\nimport {selectRefreshing} from '../experiments-compare/reducers';\nimport {TaskMetric} from '../../business-logic/model/events/taskMetric';\nimport {get, isEqual} from 'lodash/fp';\nimport {ALL_IMAGES} from './debug-images-effects';\nimport {MatSelectChange} from '@angular/material/select';\nimport {getSignedUrl} from '../core/actions/common-auth.actions';\n\n@Component({\n  selector: 'sm-debug-images',\n  templateUrl: './debug-images.component.html',\n  styleUrls: ['./debug-images.component.scss'],\n})\nexport class DebugImagesComponent implements OnInit, OnDestroy {\n\n  @Input() isDarkTheme = false;\n  private debugImagesSubscription: Subscription;\n  private taskNamesSubscription: Subscription;\n  private selectedExperimentSubscription: Subscription;\n  private routerParamsSubscription: Subscription;\n  private refreshingSubscription: Subscription;\n  private optionalMetricsSubscription: Subscription;\n\n  public debugImages$: Observable<any>;\n  private routerParams$: Observable<any>;\n  private tasks$: Observable<Partial<Task>[]>;\n  public timeIsNow$: Observable<any>;\n  public beginningOfTime$: Observable<any>;\n\n  public mergeIterations: boolean;\n  public debugImages: { [experimentId: string]: any };\n  public experimentNames: { [id: string]: string } = {};\n  public experimentIds: string[];\n  public allowAutorefresh: boolean = false;\n\n  public noMoreData$: Observable<boolean>;\n  public optionalMetrics$: Observable<any>;\n  public optionalMetrics: any;\n  public selectedMetrics: {[taskId: string] : string} = {};\n  public beginningOfTime: any;\n  private beginningOfTimeSubscription: Subscription;\n  public timeIsNow: any;\n  private timeIsNowSubscription: Subscription;\n  minimized: boolean;\n  readonly allImages = ALL_IMAGES;\n  private selectedMetric: string;\n  public modifiedExperimentsNames: { [id: string]: string } = {};\n\n  constructor(\n    private store: Store<IExperimentInfoState>,\n    private adminService: AdminService,\n    private dialog: MatDialog,\n    private changeDetection: ChangeDetectorRef,\n    private activeRoute: ActivatedRoute,\n    private elRef: ElementRef\n  ) {\n    this.tasks$ = this.store.select(selectTaskNames);\n    this.optionalMetrics$ = this.store.select(selectOptionalMetrics);\n    this.noMoreData$ = this.store.select(selectNoMore);\n    this.timeIsNow$ = this.store.select(selectTimeIsNow);\n    this.beginningOfTime$ = this.store.select(selectBeginningOfTime);\n\n    this.debugImagesSubscription = combineLatest([\n      store.pipe(select(selectS3BucketCredentials)),\n      store.pipe(select(selectDebugImages))]).pipe(\n      map(([, debugImages]) => Object.entries(debugImages).reduce(((acc, val: any) => {\n        acc[val[0]] = val[1].metrics.map(metric => metric.iterations.map(iteration => {\n          const events = iteration.events.map(event => {\n            this.store.dispatch(getSignedUrl({url: event.url, config: {disableCache: event.timestamp}}));\n            return {\n              ...event,\n              url: event.url,\n              variantAndMetric: this.selectedMetric === ALL_IMAGES ? `${event.metric}/${event.variant}` : ''\n            };\n          });\n          return {...iteration, events};\n        }));\n        acc[val[0]].metrics = val[1].metrics.map(metric => metric.metric || metric.iterations[0].events[0].metric);\n        acc[val[0]].metric = acc[val[0]].metrics[0];\n        acc[val[0]].scrollId = val[1].scroll_id;\n        return acc;\n      }), {}))\n    ).subscribe(debugImages => {\n      this.debugImages = debugImages;\n      Object.keys(debugImages).forEach(key => {\n        if (!this.selectedMetrics[key]) {\n          this.selectedMetrics[key] = get('metric', debugImages[key]);\n        }\n      });\n      this.changeDetection.markForCheck();\n    });\n\n    this.routerParams$ = this.store.pipe(\n      select(selectRouterParams),\n      filter(params => !!params.ids || !!params.experimentId),\n      distinctUntilChanged()\n    );\n  }\n\n  ngOnInit() {\n    this.mergeIterations = this.activeRoute.snapshot.routeConfig?.data?.mergeIterations;\n    const multipleExperiments = !!this.activeRoute.snapshot.routeConfig?.data?.multiple;\n    this.minimized = this.activeRoute.snapshot.routeConfig?.data?.minimized;\n\n    this.beginningOfTimeSubscription = this.beginningOfTime$.subscribe(beginningOfTime => {\n      this.beginningOfTime = beginningOfTime;\n    });\n\n    this.timeIsNowSubscription = this.timeIsNow$.subscribe(timeIsNow => {\n      this.timeIsNow = timeIsNow;\n    });\n\n    let currentExperiment: string;\n\n    if (multipleExperiments) {\n      this.routerParamsSubscription = this.routerParams$\n        .subscribe(params => {\n          const experiments = params.ids ? params.ids.split(',') : params.experimentId.split(',');\n          if (!isEqual(experiments, this.experimentIds)) {\n            this.experimentIds = experiments;\n            this.store.dispatch(getDebugImagesMetrics({tasks: this.experimentIds}));\n            this.store.dispatch(fetchExperiments({tasks: this.experimentIds}));\n          }\n        });\n\n      this.taskNamesSubscription = this.tasks$\n        .pipe(\n          filter(tasks => tasks?.length > 0)\n        )\n        .subscribe((tasks) => {\n          if (this.isTaskRunning(tasks) && (Object.keys(this.debugImages || {}).length > 0 || this.beginningOfTime[this.experimentIds[0]])) {\n            this.store.dispatch(getDebugImagesMetrics({tasks: this.experimentIds}));\n          }\n\n          this.experimentNames = tasks.reduce((acc, task) => ({\n            ...acc,\n            [task.id]: task.name\n          }), {}) as { [id: string]: string };\n          tasks.forEach(task => {\n              this.modifiedExperimentsNames[task.id] = Object.values(this.experimentNames).filter(name => name === task.name).length > 1 ? `${task.name}.${task.id.substr(0, 6)}` : task.name;\n            }\n          );\n          this.changeDetection.detectChanges();\n        });\n\n      // auto refresh subscription for compare only.\n      this.refreshingSubscription = this.store.select(selectRefreshing).pipe(\n        filter(({refreshing}) => refreshing),\n        withLatestFrom(\n          this.store.select(selectTimeIsNow),\n        )\n      ).subscribe(([, timeIsNow]) => {\n          this.store.dispatch(debugActions.refreshDebugImagesMetrics({tasks: this.experimentIds}));\n          this.experimentIds.forEach(experiment => {\n            this.refresh(experiment, timeIsNow, this.debugImages);\n          });\n        }\n      );\n    } else {\n      this.selectedExperimentSubscription = this.store.select(selectSelectedExperiment)\n        .pipe(\n          filter(experiment => !!experiment),\n          withLatestFrom(\n            this.store.select(selectTimeIsNow),\n          ),\n        ).subscribe(([experiment, timeIsNow]) => {\n          if (currentExperiment === experiment.id && Object.keys(this.debugImages || {}).length > 0) {\n            this.refresh(experiment.id, timeIsNow, this.debugImages);\n          } else {\n            currentExperiment = experiment.id;\n            this.experimentNames = {[experiment.id]: experiment.name};\n            this.experimentIds = [experiment.id];\n            this.store.dispatch(getDebugImagesMetrics({tasks: this.experimentIds}));\n          }\n        });\n    }\n\n    this.optionalMetricsSubscription = this.optionalMetrics$.subscribe(optionalMetrics => {\n      const optionalMetricsDic = {};\n      optionalMetrics.forEach(experimentMetrics => optionalMetricsDic[experimentMetrics.task] = experimentMetrics.metrics);\n      if ((!isEqual(this.optionalMetrics, optionalMetricsDic)) && optionalMetrics.length > 0) {\n        this.optionalMetrics = optionalMetricsDic;\n        optionalMetrics.forEach(optionalMetric => {\n          optionalMetric.metrics[0] && this.store.dispatch(debugActions.setSelectedMetric({\n            payload: {\n              task: optionalMetric.task,\n              metric: optionalMetric.metrics[0]\n            }\n          }));\n        });\n        this.changeDetection.detectChanges();\n      }\n    });\n  }\n\n\n  ngOnDestroy(): void {\n    this.routerParamsSubscription?.unsubscribe();\n    this.taskNamesSubscription?.unsubscribe();\n    this.selectedExperimentSubscription?.unsubscribe();\n    this.refreshingSubscription?.unsubscribe();\n    this.optionalMetricsSubscription?.unsubscribe();\n    this.debugImagesSubscription?.unsubscribe();\n    this.beginningOfTimeSubscription?.unsubscribe();\n    this.timeIsNowSubscription?.unsubscribe();\n    this.store.dispatch(resetDebugImages());\n  }\n\n  public urlError(/*{frame}*/) {\n    // this.adminService.checkImgUrl(frame.oldSrc || frame.src);\n  }\n\n  imageClicked({frame, frames}) {\n    let iterationSnippets = [];\n    Object.entries(frames).map(iteration => {\n      iterationSnippets = iterationSnippets.concat(iteration[1]);\n    });\n    const sources = iterationSnippets.map(img => img.url);\n    const index = iterationSnippets.findIndex(img => img.url === frame.url);\n    this.dialog.open(ImageDisplayerComponent, {\n      data: {imageSources: sources, index, snippetsMetaData: iterationSnippets},\n      panelClass: ['image-displayer-dialog'],\n      height: '100%',\n      maxHeight: 'auto',\n      width: '100%',\n      maxWidth: 'auto'\n    });\n  }\n\n  refresh(experimentId: string, timeIsNow, debugImages) {\n    if (experimentId && timeIsNow?.[experimentId] && debugImages[experimentId] && this.elRef.nativeElement.scrollTop < 40) {\n      this.store.dispatch(debugActions.refreshMetric({\n        payload: {\n          task: experimentId,\n          metric: debugImages[experimentId].metric\n        }\n      }));\n    }\n  }\n\n  private isTaskRunning(tasks: Partial<Task>[]) {\n    return tasks.some(task => [TaskStatusEnum.InProgress, TaskStatusEnum.Queued].includes(task.status));\n  }\n\n  trackExperiment(index: number, experimentID: string) {\n    return experimentID;\n  }\n\n  selectMetric(change: MatSelectChange, task) {\n    this.selectedMetric = change.value;\n    this.store.dispatch(debugActions.setSelectedMetric({payload: {task, metric: change.value}}));\n  }\n\n  nextBatch(taskMetric: TaskMetric) {\n    if (!this.beginningOfTime[taskMetric.task]) {\n      this.store.dispatch(debugActions.getNextBatch({payload: taskMetric}));\n    }\n  }\n\n  previousBatch(taskMetric: TaskMetric) {\n    this.store.dispatch(debugActions.getPreviousBatch({payload: taskMetric}));\n  }\n\n  backToNow(taskMetric: TaskMetric) {\n    this.store.dispatch(debugActions.setSelectedMetric({payload: taskMetric}));\n  }\n\n  thereAreNoMetrics(experiment) {\n    return !(this.optionalMetrics && this.optionalMetrics[experiment] && this.optionalMetrics[experiment].length > 0);\n  }\n\n  thereAreNoDebugImages(experiment) {\n    return !(this.debugImages && this.debugImages[experiment] && this.debugImages[experiment].length > 0);\n  }\n\n  shouldShowNoImagesForExperiment(experiment: string) {\n    return (this.thereAreNoMetrics(experiment) && this.optionalMetrics && this.optionalMetrics[experiment]) || (this.thereAreNoDebugImages(experiment) && this.debugImages && this.debugImages[experiment]);\n  }\n\n}\n","import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ExperimentCompareSharedModule } from '../experiments-compare/shared/experiment-compare-shared.module';\nimport { ImageDisplayerComponent } from '../experiments/dumb/image-displayer/image-displayer.component';\nimport { SMSharedModule } from '../shared/shared.module';\nimport { UiComponentsModule } from '../shared/ui-components/ui-components.module';\nimport { DebugImageSnippetComponent } from './debug-image-snippet/debug-image-snippet.component';\nimport { DebugImagesEffects } from './debug-images-effects';\nimport {debugSamplesReducer} from './debug-images-reducer';\nimport { DebugImagesViewComponent } from './debug-images-view/debug-images-view.component';\nimport { DebugImagesComponent } from './debug-images.component';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {ExperimentGraphsModule} from '../shared/experiment-graphs/experiment-graphs.module';\n\nconst declerations = [DebugImagesComponent, DebugImagesViewComponent, ImageDisplayerComponent, DebugImageSnippetComponent];\n\n@NgModule({\n  declarations   : declerations,\n  exports        : declerations,\n    imports: [\n        UiComponentsModule,\n        SMSharedModule,\n        CommonModule,\n        ExperimentCompareSharedModule,\n        ScrollingModule,\n        StoreModule.forFeature('debugImages', debugSamplesReducer),\n        EffectsModule.forFeature([DebugImagesEffects]),\n        MatSliderModule,\n        ExperimentGraphsModule\n    ]\n})\nexport class DebugImagesModule {\n}\n","import {createAction, props} from '@ngrx/store';\nimport {Task} from '../../../business-logic/model/tasks/task';\nimport {Params} from '@angular/router';\nimport {ISmCol} from '../../shared/ui-components/data/table/table.consts';\nimport {SortMeta} from 'primeng/api';\nimport {TableFilter} from '../../shared/utils/tableParamEncode';\nimport {EXPERIMENTS_PREFIX} from '../../experiments/actions/common-experiments-view.actions';\n\nexport const EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ = 'EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_';\n\nexport const GET_SELECTED_EXPERIMENTS_FOR_COMPARE = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SEARCH_EXPERIMENTS_FOR_COMPARE';\nexport const SET_SHOW_SEARCH_EXPERIMENTS_FOR_COMPARE = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SET_SHOW_SEARCH_EXPERIMENTS_FOR_COMPARE';\nexport const SET_SELECT_EXPERIMENTS_FOR_COMPARE = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SET_SELECT_EXPERIMENTS_FOR_COMPARE';\nexport const RESET_SELECT_EXPERIMENT_FOR_COMPARE = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'RESET_SELECT_EXPERIMENT_FOR_COMPARE';\nexport const TOGGLE_SHOW_SACLARS_OPTIONS = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'TOGGLE_SHOW_SACLARS_OPTIONS';\nexport const SET_HIDE_IDENTICAL_ROWS = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SET_HIDE_IDENTICAL_ROWS';\nexport const SET_REFRESHING = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SET_REFRESHING';\nexport const SET_EXPERIMENTS_UPDATE_TIME = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SET_EXPERIMENTS_UPDATE_TIME';\nexport const REFRESH_IF_NEEDED = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'REFRESH_IF_NEEDED';\nexport const REFETCH_EXPERIMENT_REQUESTED = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'REFETCH_EXPERIMENT_REQUESTED';\nexport const SET_NAVIGATION_PREFERENCES = EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + 'SET_NAVIGATION_PREFERENCES';\n\n\nexport const setHideIdenticalFields = createAction(SET_HIDE_IDENTICAL_ROWS, props<{payload: boolean}>());\nexport const setRefreshing = createAction(SET_REFRESHING, props<{ payload: boolean; autoRefresh?: boolean }>());\nexport const setExperimentsUpdateTime = createAction(SET_EXPERIMENTS_UPDATE_TIME, props<{ payload: {[key: string]: Date}}>());\nexport const refreshIfNeeded = createAction(REFRESH_IF_NEEDED, props<{ payload: boolean; autoRefresh?: boolean }>());\nexport const toggleShowScalarOptions = createAction(TOGGLE_SHOW_SACLARS_OPTIONS);\nexport const setSearchExperimentsForCompareResults = createAction(SET_SELECT_EXPERIMENTS_FOR_COMPARE, props<{ payload: Array<Task> }>());\nexport const setShowSearchExperimentsForCompare = createAction(SET_SHOW_SEARCH_EXPERIMENTS_FOR_COMPARE, props<{ payload: boolean }>());\nexport const resetSelectCompareHeader = createAction(RESET_SELECT_EXPERIMENT_FOR_COMPARE);\nexport const getSelectedExperimentsForCompareAddDialog = createAction(GET_SELECTED_EXPERIMENTS_FOR_COMPARE, props<{tasksIds?: string[]}>());\nexport const compareAddDialogTableSortChanged = createAction(\n  EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + ' [table sort changed]',\n  props<{ isShift: boolean; colId: ISmCol['id'] }>()\n);\nexport const compareAddTableFilterChanged = createAction(\n  EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + '[table filter changed]',\n  props<{filter: TableFilter; projectId: string}>()\n);\n\nexport const compareAddTableFilterInit = createAction(\n  EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + '[table filter init]',\n  props<{projectId: string}>()\n);\n\nexport const compareAddTableClearAllFilters = createAction(\n  EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + '[clear table filters]',\n  props<{projectId: string}>()\n);\nexport const compareAddDialogSetTableSort = createAction(\n  EXPERIMENTS_COMPARE_SELECT_EXPERIMENT_ + ' [set table sort]',\n  props<{ orders: SortMeta[]; projectId: string; colIds: string[] }>()\n);\nexport const refetchExperimentRequested = createAction(REFETCH_EXPERIMENT_REQUESTED, props<{ autoRefresh: boolean }>());\nexport const setNavigationPreferences = createAction(SET_NAVIGATION_PREFERENCES, props<{ navigationPreferences: Params }>());\n","import {Action, createAction, props} from '@ngrx/store';\nimport {ISmAction} from '../../core/models/actions';\nimport {IExperimentSettings} from '../../experiments/reducers/common-experiment-output.reducer';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\n\n\nexport const EXPERIMENTS_COMPARE_METRICS_CHARTS_ = 'EXPERIMENTS_COMPARE_METRICS_CHARTS_';\n\n// COMMANDS:\nexport const SET_SELECTED_EXPERIMENTS           = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'SET_SELECTED_EXPERIMENTS';\nexport const SET_EXPERIMENT_METRICS_SEARCH_TERM = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'SET_EXPERIMENT_METRICS_SEARCH_TERM';\nexport const SET_EXPERIMENT_HISTOGRAM           = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'SET_EXPERIMENT_HISTOGRAM';\nexport const SET_EXPERIMENT_PLOTS               = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'SET_EXPERIMENT_PLOTS';\n\nexport const SET_MULTI_SCALAR_CHARTS            = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'SET_MULTI_SCALAR_CHARTS';\nexport const SET_MULTI_PLOT_CHARTS              = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'SET_MULTI_PLOT_CHARTS';\n\n// EVENTS:\n\nexport const GET_MULTI_SCALAR_CHARTS            = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'GET_MULTI_SCALAR_CHARTS';\nexport const GET_MULTI_PLOT_CHARTS              = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'GET_MULTI_PLOT_CHARTS';\n\n\n\nexport const UPDATE_EXPERIMENT_SETTINGS        = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'UPDATE_EXPERIMENT_SETTINGS';\nexport const RESET_EXPERIMENT_METRICS          = EXPERIMENTS_COMPARE_METRICS_CHARTS_ + 'RESET_EXPERIMENT_METRICS';\n\n\n\nexport class GetMultiScalarCharts implements ISmAction {\n  public type = GET_MULTI_SCALAR_CHARTS;\n\n  constructor(public payload: { taskIds: string[]; autoRefresh?: boolean; cached?: boolean }) {}\n}\n\nexport class GetMultiPlotCharts implements ISmAction {\n  readonly type = GET_MULTI_PLOT_CHARTS;\n\n  constructor(public payload: { taskIds: Array<string>; autoRefresh?: boolean }) {}\n}\n\nexport class SetSelectedExperiments implements Action {\n  readonly type = SET_SELECTED_EXPERIMENTS;\n\n  constructor(public payload: {selectedExperiments: Array<string>}) {\n  }\n}\nexport class SetExperimentHistogram implements Action {\n  readonly type = SET_EXPERIMENT_HISTOGRAM;\n\n  constructor(public payload: any,  public axisType: ScalarKeyEnum) {\n  }\n}\n\nexport const setAxisCache = createAction(\n  EXPERIMENTS_COMPARE_METRICS_CHARTS_ + '[set scalar axis type cache]',\n  props<{axis: ScalarKeyEnum}>()\n);\n\nexport class SetExperimentPlots implements Action {\n  readonly type = SET_EXPERIMENT_PLOTS;\n\n  constructor(public payload: any) {\n  }\n}\n\n\nexport class SetExperimentSettings implements Action {\n  readonly type = UPDATE_EXPERIMENT_SETTINGS;\n\n  constructor(public payload: { id: Array<string>; changes: Partial<IExperimentSettings>}) {\n  }\n}\n\nexport class SetExperimentMetricsSearchTerm implements Action {\n  readonly type = SET_EXPERIMENT_METRICS_SEARCH_TERM;\n\n  constructor(public payload: { searchTerm: string}) {\n  }\n}\n\nexport class ResetExperimentMetrics implements Action {\n  readonly type = RESET_EXPERIMENT_METRICS;\n}\n\n\n\n","import {createAction, props} from '@ngrx/store';\nimport {IExperimentDetail} from '../../../features/experiments-compare/experiments-compare-models';\n\nexport const resetState = createAction('[experiment compare details] RESET_STATE');\nexport const setExperiments = createAction('[experiment compare details] SET_EXPERIMENTS', props<{experiments: IExperimentDetail[]}>());\nexport const experimentListUpdated = createAction('[experiment compare details] EXPERIMENT_LIST_UPDATED', props<{ids: string[]}>());\n","import {Action} from '@ngrx/store';\nimport {Task} from '../../../business-logic/model/tasks/task';\n\nexport const EXPERIMENTS_COMPARE_METRICS_VALUES_ = 'EXPERIMENTS_COMPARE_METRICS_VALUES_';\n\nexport const GET_COMPARED_EXPERIMENTS_METRICS_VALUES = EXPERIMENTS_COMPARE_METRICS_VALUES_ + 'GET_COMPARED_EXPERIMENTS_METRICS_VALUES';\nexport const SET_COMPARED_EXPERIMENTS                = EXPERIMENTS_COMPARE_METRICS_VALUES_ + 'SET_COMPARED_EXPERIMENTS';\nexport const SET_METRIC_VALUES_SORT_BY               = EXPERIMENTS_COMPARE_METRICS_VALUES_ + 'SET_METRIC_VALUES_SORT_BY';\nexport const RESET_STATE                             = EXPERIMENTS_COMPARE_METRICS_VALUES_ + 'RESET_STATE';\n\n\nexport class GetComparedExperimentsMetricsValues implements Action {\n  readonly type = GET_COMPARED_EXPERIMENTS_METRICS_VALUES;\n\n  constructor(public payload: { taskIds: string[]; autoRefresh?: boolean }) {}\n}\n\nexport class SetComparedExperiments implements Action {\n  readonly type = SET_COMPARED_EXPERIMENTS;\n  public payload: { experiments: Array<Task> };\n\n  constructor(experiments: Array<Task>) {\n    this.payload = {experiments};\n  }\n}\n\nexport class SetMetricValuesSortBy implements Action {\n  readonly type = SET_METRIC_VALUES_SORT_BY;\n  public payload: { metric: string, keyOrValue: string, order: string, keyOrder: Array<string> };\n\n  constructor(metric: string, keyOrValue: string, order: string, keyOrder: Array<string>) {\n    this.payload = {metric, keyOrValue, order, keyOrder};\n  }\n}\n\nexport class ResetState implements Action {\n  readonly type = RESET_STATE;\n\n  constructor() {\n  }\n}\n\n\n","import {createAction, props} from '@ngrx/store';\nimport {ExperimentParams} from '../shared/experiments-compare-details.model';\n\nexport const resetState = createAction('[experiment compare params] RESET_STATE');\nexport const setExperiments = createAction('[experiment compare params] SET_EXPERIMENTS', props<{experiments: ExperimentParams[]}>());\nexport const experimentListUpdated = createAction('[experiment compare params] EXPERIMENT_LIST_UPDATED', props<{ids: string[]}>());\n","import {createAction, props} from '@ngrx/store';\nimport {GroupedHyperParams, HyperParams, MetricOption, MetricValueType} from '../reducers/experiments-compare-charts.reducer';\n\nexport const EXPERIMENTS_COMPARE_SCALARS_GRAPH = 'EXPERIMENTS_COMPARE_SCALARS_GRAPH_';\n\nexport const GET_EXPERIMENTS_PARAMS = EXPERIMENTS_COMPARE_SCALARS_GRAPH + 'GET_EXPERIMENTS_PARAMS';\nexport const SET_METRICS_LIST = EXPERIMENTS_COMPARE_SCALARS_GRAPH + 'SET_METRICS_LIST';\nexport const SET_PARAMS_LIST = EXPERIMENTS_COMPARE_SCALARS_GRAPH + 'SET_PARAMS_LIST';\nexport const SET_TASKS = EXPERIMENTS_COMPARE_SCALARS_GRAPH + 'SET_TASKS';\nexport const SET_HIDE_IDENTICAL_HYPER_PARAMS = EXPERIMENTS_COMPARE_SCALARS_GRAPH + 'SET_HIDE_IDENTICAL_HYPER_PARAMS';\nexport const SET_VALUE_TYPE = EXPERIMENTS_COMPARE_SCALARS_GRAPH + 'SET_VALUE_TYPE';\n\nexport const getExperimentsHyperParams = createAction(GET_EXPERIMENTS_PARAMS, props<{ experimentsIds: string[]; autoRefresh?: boolean }>());\nexport const setMetricsList = createAction(SET_METRICS_LIST, props<{ metricsList: MetricOption[] }>());\nexport const setTasks = createAction(SET_TASKS, props<{ tasks: any }>());\nexport const setvalueType = createAction(SET_VALUE_TYPE, props<{ valueType: MetricValueType }>());\nexport const setHyperParamsList = createAction(SET_PARAMS_LIST, props<{ hyperParams: GroupedHyperParams }>());\nexport const setShowIdenticalHyperParams = createAction(SET_HIDE_IDENTICAL_HYPER_PARAMS);\n","import {ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {\n  compareAddDialogTableSortChanged,\n  compareAddTableClearAllFilters,\n  compareAddTableFilterChanged,\n  compareAddTableFilterInit,\n  getSelectedExperimentsForCompareAddDialog,\n  resetSelectCompareHeader,\n  setShowSearchExperimentsForCompare\n} from '../../actions/compare-header.actions';\nimport {\n  selectCompareAddTableSortFields,\n  selectExperimentsForCompareSearchTerm,\n  selectSelectedExperimentsForCompareAdd\n} from '../../reducers';\nimport {BehaviorSubject, combineLatest, Observable, Subscription} from 'rxjs';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {Params} from '@angular/router';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {distinctUntilChanged, distinctUntilKeyChanged, filter, map} from 'rxjs/operators';\nimport {compareLimitations} from '../../../shared/entity-page/footer-items/compare-footer-item';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {ITableExperiment} from '../../../experiments/shared/common-experiment-model.model';\nimport {\n  selectActiveParentsFilter,\n  selectExperimentsList,\n  selectExperimentsMetricsColsForProject,\n  selectExperimentsParents,\n  selectExperimentsTableCols,\n  selectExperimentsTableColsOrder,\n  selectExperimentsTags,\n  selectExperimentsTypes,\n  selectExperimentsUsers,\n  selectHyperParamsOptions,\n  selectNoMoreExperiments,\n  selectTableFilters\n} from '../../../experiments/reducers';\nimport {get, isEqual, unionBy} from 'lodash/fp';\nimport {ColHeaderTypeEnum, ISmCol, TableSortOrderEnum} from '../../../shared/ui-components/data/table/table.consts';\nimport {filterArchivedExperiments} from '../../../experiments/shared/common-experiments.utils';\nimport {InitSearch} from '../../../common-search/common-search.actions';\nimport * as experimentsActions from '../../../experiments/actions/common-experiments-view.actions';\nimport {resetExperiments, resetGlobalFilter} from '../../../experiments/actions/common-experiments-view.actions';\nimport {User} from '../../../../business-logic/model/users/user';\nimport {selectProjectSystemTags, selectRootProjects} from '../../../core/reducers/projects.reducer';\nimport {SortMeta} from 'primeng/api';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {addMessage} from '../../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../../app.constants';\nimport {ProjectsGetTaskParentsResponseParents} from '../../../../business-logic/model/projects/projectsGetTaskParentsResponseParents';\n\nexport const allowAddExperiment$ = (selectRouterParams$: Observable<Params>) => selectRouterParams$.pipe(\n  distinctUntilKeyChanged('ids'),\n  map(res => res.ids),\n  distinctUntilChanged(),\n  map(res => res.split(',').length < compareLimitations)\n);\n\n\n@Component({\n  selector: 'sm-select-experiments-for-compare',\n  templateUrl: './select-experiments-for-compare.component.html',\n  styleUrls: ['./select-experiments-for-compare.component.scss']\n})\nexport class SelectExperimentsForCompareComponent implements OnInit, OnDestroy {\n  public experimentsResults$: Observable<Task[]>;\n  public selectedExperimentsIds: string[] = [];\n  private paramsSubscription: Subscription;\n  public searchTerm$: Observable<string>;\n  @ViewChild('searchExperiments', {static: true}) searchExperiments;\n  public allowAddExperiment$: Observable<boolean>;\n  public tableColsOrder$: Observable<string[]>;\n  public tableSortOrder$: Observable<TableSortOrderEnum>;\n  private columns$: Observable<ISmCol[] | undefined>;\n  private metricTableCols$: Observable<ISmCol[]>;\n  public tableCols$: Observable<any>;\n  public experiments$: Observable<any>;\n  private projectId: string;\n  public users$: Observable<User[]>;\n  public tableFilters$: Observable<{ [p: string]: { value: any; matchMode: string } }>;\n  public tags$: Observable<string[]>;\n  public systemTags$: Observable<string[]>;\n  public types$: Observable<string[]>;\n  public noMoreExperiments$: Observable<boolean>;\n  public hyperParamsOptions$: Observable<Record<string, string[]>>;\n  public activeParentsFilter$: Observable<ProjectsGetTaskParentsResponseParents[]>;\n  public parent$: Observable<ProjectsGetTaskParentsResponseParents[]>;\n  public tableSortFields$: Observable<SortMeta[]>;\n  public projects$: Observable<Project[]>;\n  private originalSelectedExperiments: string[];\n  selectedExperiment: any;\n  public reachedCompareLimit: boolean;\n  private _resizedCols = {} as { [colId: string]: string };\n  private resizedCols$ = new BehaviorSubject<{[colId: string]: string }>(this._resizedCols);\n\n  constructor(\n    private store: Store<any>,\n    private eRef: ElementRef,\n    private changedDetectRef: ChangeDetectorRef,\n    public dialogRef: MatDialogRef<SelectExperimentsForCompareComponent>\n  ) {\n    this.resizedCols$.next(this._resizedCols);\n    this.experimentsResults$ = this.store.pipe(select(selectSelectedExperimentsForCompareAdd));\n    this.experiments$ = combineLatest([this.store.select(selectExperimentsList), this.store.select(selectSelectedExperimentsForCompareAdd)]).pipe(\n      map(([experiments, selectedExperiments]) => unionBy('id', selectedExperiments, experiments)),\n      map((experiments) => filterArchivedExperiments(experiments, false))\n    );\n    this.searchTerm$ = this.store.pipe(select(selectExperimentsForCompareSearchTerm));\n    this.tableColsOrder$ = this.store.select(selectExperimentsTableColsOrder);\n    this.columns$ = this.store.select(selectExperimentsTableCols);\n    this.metricTableCols$ = this.store.select(selectExperimentsMetricsColsForProject);\n    this.users$ = this.store.select(selectExperimentsUsers);\n    this.tableFilters$ = this.store.select(selectTableFilters);\n    this.parent$ = this.store.select(selectExperimentsParents);\n    this.projects$ = this.store.select(selectRootProjects);\n\n    this.tags$ = this.store.select(selectExperimentsTags);\n    this.types$ = this.store.select(selectExperimentsTypes);\n    this.systemTags$ = this.store.select(selectProjectSystemTags);\n    this.noMoreExperiments$ = this.store.select(selectNoMoreExperiments);\n    this.tableSortFields$ = this.store.select(selectCompareAddTableSortFields);\n    this.hyperParamsOptions$ = this.store.select(selectHyperParamsOptions);\n    this.activeParentsFilter$ = this.store.select(selectActiveParentsFilter);\n    this.tableCols$ = combineLatest([this.columns$, this.metricTableCols$, this.resizedCols$])\n      .pipe(\n        filter(([tableCols,,]) => !!tableCols),\n        map(([tableCols, metricCols, resizedCols]) =>\n          tableCols\n            .concat(metricCols.map(col => ({...col, metric: true})))\n            .map(col => ({\n              ...col,\n              style: {...col.style, width: resizedCols[col.id] || col.style?.width}\n            }))\n        ),\n        distinctUntilChanged((a, b) => isEqual(a, b)),\n        map(cols => cols.filter(col => (!col.hidden || col.id === 'project.name')).map(col => ({\n            ...col,\n            hidden: false,\n            headerType: col.headerType === ColHeaderTypeEnum.checkBox ? ColHeaderTypeEnum.title : col.headerType,\n            ...(col.id === 'project.name' && {\n              getter: 'project',\n              filterable: true,\n              searchableFilter: true,\n              sortable: false,\n              headerType: ColHeaderTypeEnum.sortFilter,\n            }),\n          })\n        )));\n  }\n\n  public searchTermChanged(term: string) {\n\n    this.store.dispatch(experimentsActions.globalFilterChanged({query: term}));\n  }\n\n  public closeSearch() {\n    this.store.dispatch(setShowSearchExperimentsForCompare({payload: false}));\n  }\n\n  public syncSelectedExperiments() {\n    if (this.selectedExperimentsIds) {\n      this.store.dispatch(getSelectedExperimentsForCompareAddDialog({tasksIds: this.selectedExperimentsIds}));\n    }\n  }\n\n  syncAppSearch() {\n    this.store.dispatch(new InitSearch('Search for experiments'));\n    this.store.dispatch(experimentsActions.getExperiments());\n  }\n\n  refreshTagsList() {\n    this.store.dispatch(experimentsActions.getTags());\n  }\n\n  refreshTypesList() {\n    this.store.dispatch(experimentsActions.getProjectTypes());\n  }\n\n\n  ngOnInit() {\n    this.paramsSubscription = this.store.pipe(\n      select(selectRouterParams),\n      map(params => [params && params['ids'], get('projectId', params)]),\n      filter(([experimentIds,]) => !!experimentIds)\n    ).subscribe(([experimentIds, projectId]) => {\n      if (this.selectedExperimentsIds.length === 0) {\n        this.selectedExperimentsIds = experimentIds.split(',');\n        this.originalSelectedExperiments = this.selectedExperimentsIds;\n      }\n      if (!this.projectId && projectId !== '*') {\n        this.store.dispatch(compareAddTableFilterInit({projectId}));\n      }\n      this.projectId = projectId;\n      this.changedDetectRef.detectChanges();\n    });\n    this.allowAddExperiment$ = allowAddExperiment$(this.store.select(selectRouterParams));\n    this.store.dispatch(experimentsActions.getUsers());\n    this.store.dispatch(experimentsActions.getTags());\n    this.store.dispatch(experimentsActions.getProjectTypes());\n    this.store.dispatch(experimentsActions.getParents());\n    this.store.dispatch(getSelectedExperimentsForCompareAddDialog(null));\n    this.syncAppSearch();\n  }\n\n  ngOnDestroy(): void {\n    this.paramsSubscription.unsubscribe();\n    this.store.dispatch(setShowSearchExperimentsForCompare({payload: false}));\n    this.store.dispatch(resetExperiments());\n    this.store.dispatch(resetGlobalFilter());\n    this.store.dispatch(resetSelectCompareHeader());\n\n  }\n\n\n  experimentsSelectionChanged(experiments: Array<ITableExperiment>) {\n    this.reachedCompareLimit = experiments.length === compareLimitations;\n    if (experiments.length === 0) {\n      this.store.dispatch(addMessage(MESSAGES_SEVERITY.WARN, 'Compare module should include at least one experiment'));\n      return;\n    }\n    if (experiments.length <= compareLimitations) {\n      this.selectedExperimentsIds = experiments.map(ex => ex.id);\n    } else {\n      this.store.dispatch(addMessage(MESSAGES_SEVERITY.WARN, compareLimitations + ' or fewer experiments can be compared'));\n    }\n  }\n\n  getNextExperiments() {\n    this.syncSelectedExperiments();\n    this.store.dispatch(experimentsActions.getNextExperiments());\n  }\n\n  sortedChanged(event: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.syncSelectedExperiments();\n    this.store.dispatch(compareAddDialogTableSortChanged(event));\n  }\n\n  filterChanged({col, value, andFilter}: { col: ISmCol; value: any; andFilter?: boolean }) {\n    this.syncSelectedExperiments();\n    this.store.dispatch(compareAddTableFilterChanged({\n      filter: {\n        col: col.id,\n        value,\n        filterMatchMode: col.filterMatchMode || andFilter ? 'AND' : undefined\n      }, projectId: this.projectId\n    }));\n  }\n\n  clearTableFilters() {\n    this.store.dispatch(compareAddTableClearAllFilters({projectId: this.projectId}));\n  }\n\n  applyChanges() {\n    this.closeDialog(this.selectedExperimentsIds);\n  }\n\n  closeDialog(experimentIds?: string[]) {\n    this.dialogRef.close(experimentIds);\n  }\n\n  resizeCol({columnId, widthPx}: {columnId: string; widthPx: number}) {\n    this._resizedCols[columnId] = `${widthPx}px`;\n    this.resizedCols$.next(this._resizedCols);\n  }\n}\n","<sm-dialog-template [header]=\"'Choose compared experiments'\">\n  <div class=\"select-experiments-container light-theme\" (click)=\"closeSearch()\">\n    <div class=\"search-experiment-for-compare d-flex justify-content-between\">\n      <mat-form-field appearance=\"outline\" class=\"w-50\" smClickStopPropagation>\n        <input\n          #searchExperiments\n          autofocus\n          matInput\n          name=\"search-experiments\"\n          autocomplete=\"off\"\n          smClickStopPropagation\n          placeholder=\"Start typing experiment name or ID to add to your comparison\"\n          (input)=\"searchTermChanged(searchExperiments.value)\"\n        >\n      </mat-form-field>\n      <sm-clear-filters-button\n        [tableFilters]=\"(tableFilters$ | async)\"\n        (clearTableFilters)=\"clearTableFilters()\"\n      ></sm-clear-filters-button>\n    </div>\n    <div class=\"hide-table show-table\">\n      <sm-experiments-table\n        class=\"align-self-stretch\"\n        [selectionReachedLimit]=\"reachedCompareLimit\"\n        [selectionMode]=\"null\"\n        [disableContextMenu]=\"true\"\n        [reorderableColumns]=\"false\"\n        [minimizedView]=\"false\"\n        [colsOrder]=\"(tableColsOrder$ | async)\"\n        [tableCols]=\"tableCols$| async\"\n        [users]=\"users$ | async\"\n        [projects]=\"projects$ | async\"\n        [selectedExperiments]=\"selectedExperimentsIds | idToObjectsArray\"\n        [experiments]=\"experiments$ | async\"\n        [experimentTypes]=\"types$ | async\"\n        [tableFilters]=\"(tableFilters$ | async)\"\n        [tableSortFields]=\"(tableSortFields$ | async)\"\n        [tableSortOrder]=\"(tableSortOrder$ | async)\"\n        [tags]=\"tags$ | async\"\n        [hyperParamsOptions]=\"hyperParamsOptions$ | async\"\n        [activeParentsFilter]=\"activeParentsFilter$ | async\"\n        [parents]=\"parent$ | async\"\n        [noMoreExperiments]=\"noMoreExperiments$ | async\"\n        [systemTags]=\"systemTags$ | async\"\n        (tagsMenuOpened)=\"refreshTagsList()\"\n        (typesMenuOpened)=\"refreshTypesList()\"\n        (experimentsSelectionChanged)=\"experimentsSelectionChanged($event)\"\n        (loadMoreExperiments)=\"getNextExperiments()\"\n        (sortedChanged)=\"sortedChanged($event)\"\n        (filterChanged)=\"filterChanged($event)\"\n        (columnResized)=\"resizeCol($event)\"\n      >\n      </sm-experiments-table>\n    </div>\n  </div>\n  <div class=\"buttons\">\n    <button type=\"submit\"\n            (click)=\"applyChanges()\"\n            class=\"btn btn-neon yes-button\">\n      APPLY\n    </button>\n    <button (click)=\"closeDialog()\" class=\"btn btn-outline-neon\">\n      CANCEL\n    </button>\n  </div>\n\n</sm-dialog-template>\n","<div class=\"header-container\">\n  <div class=\"actions-container\">\n    <span [smTooltip]=\"(allowAddExperiment$ | async) ?\n      'Add/Remove experiments to comparison' :\n      compareLimitations + ' or fewer experiments can be compared'\"\n    >\n        <button class=\"btn btn-secondary btn-add-experiment\"\n                (click)=\"openAddExperimentSearch()\">\n      <i class=\"fas fa-plus mr-2\"></i>\n      <span>Add Experiment</span>\n    </button>\n    </span>\n    <mat-select *ngIf=\"viewMode\"\n                class=\"view-mode\"\n                panelClass=\"light-theme\"\n                [value]=\"queryParamsViewMode || viewMode\"\n                [disableOptionCentering]=\"true\"\n                (selectionChange)=\"changeView($event)\">\n      <mat-select-trigger>\n        <i class=\"fas mr-2\"\n           [ngClass]=\"{'fa-align-left': viewMode === 'values', 'fa-chart-area': viewMode === 'graph'}\"></i>\n        <ng-container [ngSwitch]=\"true\">\n          <span *ngSwitchCase=\"currentPage === 'hyper-params' && viewMode === 'graph'\">Parallel Coordinates</span>\n          <span *ngSwitchCase=\"currentPage === 'scalars' && viewMode === 'graph'\">Graph</span>\n          <span *ngSwitchCase=\"currentPage === 'scalars' && viewMode === 'values' && queryParamsViewMode === 'values'\">Last Values</span>\n          <span *ngSwitchDefault>{{queryParamsViewMode || viewMode | noUnderscore | titlecase}}</span>\n        </ng-container>\n      </mat-select-trigger>\n      <mat-option value=\"values\" class=\"compare-mat-option\">\n        <i class=\"fas fa-align-left mr-2\"></i>\n        <span *ngIf=\"currentPage === 'scalars'\">Last Values</span>\n        <span *ngIf=\"currentPage !== 'scalars'\">Values</span>\n      </mat-option>\n      <mat-option *ngIf=\"currentPage === 'scalars'\" value=\"min_values\" class=\"compare-mat-option\">\n        <i class=\"fas fa-align-left mr-2\"></i>\n        Min Values\n      </mat-option>\n      <mat-option *ngIf=\"currentPage === 'scalars'\" value=\"max_values\" class=\"compare-mat-option\">\n        <i class=\"fas fa-align-left mr-2\"></i>\n        Max Values\n      </mat-option>\n      <mat-option value=\"graph\" class=\"compare-mat-option\">\n        <i class=\"fas fa-chart-area mr-2\"></i>\n        <span *ngIf=\"currentPage === 'hyper-params'\">Parallel Coordinates</span>\n        <span *ngIf=\"currentPage !== 'hyper-params'\">Graph</span>\n      </mat-option>\n    </mat-select>\n\n    <div id=\"nextDiff\"></div>\n\n    <mat-slide-toggle\n      *ngIf=\"['hyper-params', 'details'].includes(currentPage) && viewMode !== 'graph'\"\n      (change)=\"hideIdenticalFieldsToggled($event)\"\n      [checked]=\"selectHideIdenticalFields$ | async\">Hide Identical Fields\n    </mat-slide-toggle>\n\n  </div>\n\n  <div id=\"searchDiff\"></div>\n\n  <div class=\"settings\">\n\n    <sm-refresh-button\n      [autoRefreshState]=\"autoRefreshState$ | async\"\n      [allowAutoRefresh]=\"true\"\n      (refreshList)=\"refreshList($event)\"\n      (setAutoRefresh)=\"setAutoRefresh($event)\"\n      class=\"light-theme\"\n    >\n    </sm-refresh-button>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {MatSelectChange} from '@angular/material/select';\nimport {Store} from '@ngrx/store';\nimport {selectHideIdenticalFields, selectRefreshing} from '../../reducers';\nimport {interval, Observable, Subscription} from 'rxjs';\nimport {\n  refreshIfNeeded,\n  setHideIdenticalFields,\n  setNavigationPreferences,\n  setShowSearchExperimentsForCompare,\n  toggleShowScalarOptions\n} from '../../actions/compare-header.actions';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {selectRouterParams, selectRouterQueryParams, selectRouterUrl} from '../../../core/reducers/router-reducer';\nimport {get} from 'lodash/fp';\nimport {selectAppVisible, selectAutoRefresh} from '../../../core/reducers/view.reducer';\nimport {setAutoRefresh} from '../../../core/actions/layout.actions';\nimport {AUTO_REFRESH_INTERVAL} from '../../../../app.constants';\nimport {filter, withLatestFrom} from 'rxjs/operators';\nimport {MatSlideToggleChange} from '@angular/material/slide-toggle';\nimport {compareLimitations} from '../../../shared/entity-page/footer-items/compare-footer-item';\nimport {\n  allowAddExperiment$,\n  SelectExperimentsForCompareComponent\n} from '../../containers/select-experiments-for-compare/select-experiments-for-compare.component';\nimport {MatDialog} from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'sm-experiment-compare-header',\n  templateUrl: './experiment-compare-header.component.html',\n  styleUrls: ['./experiment-compare-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentCompareHeaderComponent implements OnInit, OnDestroy {\n  private routerSubscription: Subscription;\n  private queryParamsSubscription: Subscription;\n  public selectHideIdenticalFields$: Observable<boolean>;\n\n  public selectRefreshing$: Observable<{ refreshing: boolean; autoRefresh: boolean }>;\n  public viewMode: string;\n  public currentPage: string;\n  public queryParamsViewMode: string;\n  public compareLimitations = compareLimitations;\n  public autoRefreshState$: Observable<boolean>;\n  public allowAddExperiment$: Observable<boolean>;\n  private autorRefreshSub: Subscription;\n  private showMenuSub: Subscription;\n\n  private isAppVisible$: Observable<boolean>;\n\n  @Output() selectionChanged = new EventEmitter<string[]>();\n\n  constructor(private store: Store<any>, private route: ActivatedRoute, private router: Router, private cdr: ChangeDetectorRef, private dialog: MatDialog) {\n    this.selectHideIdenticalFields$ = this.store.select(selectHideIdenticalFields);\n    this.selectRefreshing$ = this.store.select(selectRefreshing);\n    this.autoRefreshState$ = this.store.select(selectAutoRefresh);\n    this.isAppVisible$ = this.store.select(selectAppVisible);\n  }\n\n  ngOnInit() {\n    this.autorRefreshSub = interval(AUTO_REFRESH_INTERVAL).pipe(\n      withLatestFrom(this.autoRefreshState$, this.isAppVisible$),\n      filter(([, autoRefreshState, isAppVisible]) => autoRefreshState && isAppVisible)\n    ).subscribe(() => {\n      this.refreshList(true);\n    });\n    this.routerSubscription = this.store.select(selectRouterUrl).subscribe(() => {\n      this.currentPage = get('snapshot.firstChild.url[0].path', this.route);\n      this.viewMode = get('snapshot.firstChild.url[1].path', this.route);\n      this.cdr.detectChanges();\n    });\n\n    this.allowAddExperiment$ = allowAddExperiment$(this.store.select(selectRouterParams));\n\n    this.queryParamsSubscription = this.store.select(selectRouterQueryParams)\n      .subscribe((queryParams) => this.queryParamsViewMode = queryParams[this.currentPage]);\n  }\n\n  ngOnDestroy(): void {\n    this.routerSubscription.unsubscribe();\n    this.autorRefreshSub.unsubscribe();\n    this.showMenuSub?.unsubscribe();\n  }\n\n  refresh({isAutoRefresh}: { isAutoRefresh: boolean }) {\n    this.store.dispatch(refreshIfNeeded({payload: true, autoRefresh: isAutoRefresh}));\n  }\n\n  changeView($event: MatSelectChange) {\n    const queryParam = {[this.currentPage]: $event.value};\n    const page = $event.value.replace(/.*_/, '');\n    this.store.dispatch(setNavigationPreferences({navigationPreferences: queryParam}));\n    this.router.navigate([`./${this.currentPage}/${page}`], {\n      queryParams: queryParam,\n      relativeTo: this.route,\n      queryParamsHandling: 'merge'\n    });\n  }\n\n  openAddExperimentSearch() {\n    this.dialog.open(SelectExperimentsForCompareComponent, {\n      height: '100vh',\n      width: '100%',\n      maxWidth: '100%'\n    }).afterClosed().pipe(filter(ids => !!ids)).subscribe(ids => this.selectionChanged.emit(ids));\n  }\n\n  hideIdenticalFieldsToggled(event: MatSlideToggleChange) {\n    this.store.dispatch(setHideIdenticalFields({payload: event.checked}));\n  }\n\n  toggleSettings() {\n    this.store.dispatch(toggleShowScalarOptions());\n  }\n\n  refreshList(isAutorefresh: boolean) {\n    this.store.dispatch(refreshIfNeeded({payload: true, autoRefresh: isAutorefresh}));\n  }\n\n  setAutoRefresh($event: boolean) {\n    this.store.dispatch(setAutoRefresh({autoRefresh: $event}));\n  }\n\n  menuClosed() {\n    this.store.dispatch(setShowSearchExperimentsForCompare({payload: false}));\n  }\n}\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectRouterQueryParams} from '../core/reducers/router-reducer';\nimport {Subscription} from 'rxjs';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {selectNavigationPreferences} from './reducers';\nimport {debounceTime} from 'rxjs/operators';\nimport {setNavigationPreferences} from './actions/compare-header.actions';\n\n@Component({\n  selector: 'sm-experiments-compare',\n  templateUrl: './experiments-compare.component.html',\n  styleUrls: ['./experiments-compare.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentsCompareComponent implements OnInit, OnDestroy {\n  private queryParams$: Subscription;\n  private navigationPreferences$: Subscription;\n  private queryParams: Params;\n\n  constructor(private store: Store<any>, private router: Router, private activatedRoute: ActivatedRoute) {\n    // updating URL with store query params\n    this.navigationPreferences$ = this.store.select(selectNavigationPreferences).pipe(debounceTime(10)).subscribe((queryParams) => {\n      this.router.navigate(\n        [],\n        {\n          relativeTo: this.activatedRoute,\n          queryParams,\n          queryParamsHandling: 'merge'\n        });\n    });\n\n    this.queryParams$ = this.store.select(selectRouterQueryParams).subscribe((queryParams) => this.queryParams = queryParams);\n  }\n\n  ngOnDestroy(): void {\n    this.queryParams$.unsubscribe();\n    this.navigationPreferences$.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    // Update store with url query params on load\n    this.store.dispatch(setNavigationPreferences({navigationPreferences: this.queryParams}));\n  }\n\n  updateUrl(ids: string[]) {\n    this.router.navigate(\n      [{ids}],\n      {\n        relativeTo: this.activatedRoute\n      });\n  }\n}\n","<div class=\"experiment-compare-container light-theme\">\n  <nav class=\"d-flex justify-content-center\">\n    <span [routerLink]=\"['details']\" routerLinkActive #rlaDetails=\"routerLinkActive\" queryParamsHandling=\"preserve\">\n      <sm-navbar-item direction=\"bottom\" [header]=\"'details'\" [active]=\"rlaDetails.isActive\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['hyper-params/graph']\" routerLinkActive #rlaHyperParamsGraph=\"routerLinkActive\" queryParamsHandling=\"preserve\"></span>\n    <span [routerLink]=\"['hyper-params/values']\" routerLinkActive #rlaHyperParams=\"routerLinkActive\" queryParamsHandling=\"preserve\">\n      <sm-navbar-item direction=\"bottom\" [header]=\"'hyper parameters'\" [active]=\"rlaHyperParams.isActive || rlaHyperParamsGraph.isActive\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['scalars/values']\" routerLinkActive #rlaScalarsGraph=\"routerLinkActive\" queryParamsHandling=\"preserve\"></span>\n    <span [routerLink]=\"['scalars/graph']\" [queryParams]=\"{scalars: 'graph'}\" routerLinkActive #rlaScalars=\"routerLinkActive\" queryParamsHandling=\"merge\">\n      <sm-navbar-item [active]=\"rlaScalarsGraph.isActive || rlaScalars.isActive\" header=\"Scalars\" direction=\"bottom\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['metrics-plots']\" routerLinkActive #rlaPlots=\"routerLinkActive\" queryParamsHandling=\"preserve\">\n      <sm-navbar-item header=\"Plots\" [active]=\"rlaPlots.isActive\" direction=\"bottom\"></sm-navbar-item>\n    </span>\n    <span #rlaGeneral=\"routerLinkActive\" [routerLink]=\"['debug-images']\" routerLinkActive queryParamsHandling=\"preserve\">\n      <sm-navbar-item [active]=\"rlaGeneral.isActive\" header=\"Debug Samples\" direction=\"bottom\"></sm-navbar-item>\n    </span>\n  </nav>\n  <sm-experiment-compare-header\n    (selectionChanged)=\"updateUrl($event)\"\n  ></sm-experiment-compare-header>\n  <div class=\"experiment-compare-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n\n","import {TreeNode, TreeNodeMetadata} from '../shared/experiments-compare-details.model';\n\nexport type TreeNodeTransformerFn<T = any> = (node: any, key: string, path: Array<string>, extraParams: any) => T;\nexport type TreeNodeMetaTransformerFn = (node: any, key: string, path: Array<string>, extraParams: any) => TreeNodeMetadata;\n\nexport class TreeBuilderService {\n\n  constructor() {\n  }\n\n  buildTreeFromJson<V>(\n    obj: { [key: string]: any },\n    transformer: TreeNodeTransformerFn,\n    metaTransformer?: TreeNodeMetaTransformerFn,\n    transformerExtraParams?: any\n  ): TreeNode<V> {\n    const _metaTransformer = metaTransformer ? metaTransformer : () => ({classStyle: null});\n    return {\n      data    : <any>{},\n      metaData: <any>{},\n      parent  : null,\n      children: isObject(obj) ?\n        this.buildTreeFromJsonRec(obj, transformer, _metaTransformer, transformerExtraParams) :\n        null\n    };\n  }\n\n  private buildTreeFromJsonRec<V>(obj: { [key: string]: any },\n    transformer: TreeNodeTransformerFn<V>,\n    metaTransformer: TreeNodeMetaTransformerFn,\n    transformerExtraParams?: any,\n    level            = 0,\n    parent: TreeNode<V> = null,\n    path             = [],\n  ): Array<TreeNode<V>> {\n    return Object.keys(obj).reduce<Array<TreeNode<V>>>((accumulator, key) => {\n      const _path          = path.concat([key]);\n      const node: TreeNode<V> = {\n        data    : transformer(obj, key, path, transformerExtraParams),\n        metaData: metaTransformer(obj, key, path, transformerExtraParams),\n        parent  : parent\n      };\n      const value          = obj[key];\n      if (value != null) {\n        if (typeof value === 'object' ) {\n          node.children = this.buildTreeFromJsonRec(\n            <any>value, transformer, metaTransformer, transformerExtraParams, level + 1, node, _path\n          );\n        }\n      }\n      accumulator.push(node);\n      return accumulator;\n    }, []);\n  }\n}\n\n// TODO: move to utils.\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\n\nexport const treeBuilderService = new TreeBuilderService();\n\n","import { EXPERIMENTS_TABLE_COL_FIELDS } from \"../../features/experiments/shared/experiments.const\";\nimport {ColHeaderFilterTypeEnum, ColHeaderTypeEnum, ISmCol} from \"../shared/ui-components/data/table/table.consts\";\n\nexport const RENAME_MAP = {\n  'network_design': 'Network Design',\n  'uncommitted_changes': 'Uncommitted Changes',\n  'installed_packages': 'Installed Packages',\n  'setup_shell_script': 'Setup Shell Script',\n  ' input models': 'Input Models',\n  ' output models': 'Output Models',\n  'model': 'Model',\n  'source': 'Source',\n  ' default': 'Default',\n  'augmentation': 'Augmentation',\n  'filtering': 'Filtering',\n  'iteration': 'Iteration',\n  'labels_enumeration': 'Labels Enumeration',\n  'mapping': 'Mapping',\n  'view': 'View',\n  '_legacy': 'General',\n  'container': 'Container'\n};\n\nexport const MAX_ROWS_FOR_SMART_COMPARE_ARRAYS = 20000;\nexport const COMPARE_DETAILS_ONLY_FIELDS_BASE = [\n  'id',\n  'name',\n  'type',\n  'status',\n  'last_update',\n  'project.name',\n  'models.input.name',\n  'models.output.name',\n  'models.output.model.name',\n  'models.output.model.uri',\n  'models.output.model.framework',\n  'models.output.model.design',\n  'models.input.name',\n  'models.input.model.name',\n  'models.input.model.uri',\n  'models.input.model.framework',\n  'models.input.model.labels',\n  'models.input.model.design',\n  'execution.artifacts',\n  'container',\n  'script',\n  'tags',\n  'published',\n  'last_iteration',\n  'configuration'\n];\nexport const ADD_EXPERIMENT_FOR_COMPARE_TABLE_COLS: ISmCol[] = [\n  {\n    id              : EXPERIMENTS_TABLE_COL_FIELDS.SELECTED,\n    sortable        : false,\n    filterable      : false,\n    headerType      : ColHeaderTypeEnum.checkBox,\n    header          : '',\n    hidden          : false,\n    static          : true,\n    bodyStyleClass  : 'selected-col-body type-col',\n    headerStyleClass: 'selected-col-header',\n    style           : {width: '50px'},\n    disableDrag     : true,\n    disablePointerEvents: true\n  },\n  {\n    id            : EXPERIMENTS_TABLE_COL_FIELDS.TYPE,\n    headerType    : ColHeaderTypeEnum.sortFilter,\n    sortable      : false,\n    filterable    : false,\n    static        : true,\n    header        : 'TYPE',\n    bodyStyleClass: 'type-col',\n    style         : {width: '115px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.NAME,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : false,\n    static      : true,\n    header      : 'NAME',\n    style       : {width: '400px'},\n  },\n  {\n    id: EXPERIMENTS_TABLE_COL_FIELDS.TAGS,\n    headerType      : ColHeaderTypeEnum.sortFilter,\n    filterable: false,\n    searchableFilter: false,\n    sortable: false,\n    static: true,\n    header: 'TAGS',\n    style: {width: '300px'},\n    andFilter: true\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.STATUS,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    filterable  : false,\n    static      : false,\n    header      : 'STATUS',\n    style       : {width: '115px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.PROJECT,\n    headerType  : ColHeaderTypeEnum.title,\n    static      : true,\n    header      : 'PROJECT',\n    style       : {width: '150px'},\n  },\n  {\n    id              : EXPERIMENTS_TABLE_COL_FIELDS.USER,\n    getter          : 'user.name',\n    headerType      : ColHeaderTypeEnum.sortFilter,\n    searchableFilter: false,\n    filterable      : false,\n    sortable        : false,\n    static          : true,\n    header          : 'USER',\n    style           : {width: '115px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.STARTED,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable  : false,\n    filterType    : ColHeaderFilterTypeEnum.durationDate,\n    filterable: false,\n    searchableFilter: false,\n    static        : true,\n    header      : 'STARTED',\n    style       : {width: '150px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.LAST_UPDATE,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable  : false,\n    filterType    : ColHeaderFilterTypeEnum.durationDate,\n    filterable: false,\n    searchableFilter: false,\n    static        : true,\n    header      : 'UPDATED',\n    label       : 'Updated',\n    style       : {width: '150px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.LAST_ITERATION,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : false,\n    filterType    : ColHeaderFilterTypeEnum.durationNumeric,\n    filterable  : false,\n    searchableFilter: false,\n    static        : true,\n    header      : 'ITERATION',\n    label       : 'Iterations:',\n    style       : {width: '115px'},\n  },\n  {\n    id        : EXPERIMENTS_TABLE_COL_FIELDS.COMMENT,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable  : false,\n    header    : 'DESCRIPTION',\n    style     : {width: '300px'}\n  },\n  {\n    id        : EXPERIMENTS_TABLE_COL_FIELDS.ACTIVE_DURATION,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable  : false,\n    filterable: false,\n    filterType    : ColHeaderFilterTypeEnum.duration,\n    searchableFilter: false,\n    static        : true,\n    bodyStyleClass: 'type-col',\n    header    : 'RUN TIME',\n    style     : {width: '150px'}\n  },\n  {\n    id        : EXPERIMENTS_TABLE_COL_FIELDS.PARENT,\n    getter    : [EXPERIMENTS_TABLE_COL_FIELDS.PARENT, 'parent.project.id', 'parent.project.name'],\n    headerType: ColHeaderTypeEnum.sortFilter,\n    searchableFilter: false,\n    filterable      : false,\n    sortable        : false,\n    header    : 'PARENT TASK',\n    style     : {width: '200px'}\n  }\n];\n","import {get, has, isArray, isEqual, mergeWith, isUndefined} from 'lodash/fp';\nimport {IExperimentDetail} from '../../features/experiments-compare/experiments-compare-models';\nimport {treeBuilderService} from './services/tree-builder.service';\nimport {TreeNode} from './shared/experiments-compare-details.model';\nimport {getAlternativeConvertedExperiment, getDisplayTextForTitles} from '../../features/experiments-compare/experiment-compare-utils';\nimport {ConfigurationItem} from '../../business-logic/model/tasks/configurationItem';\nimport * as Diff from 'diff';\nimport {MAX_ROWS_FOR_SMART_COMPARE_ARRAYS} from './experiments-compare.constants';\n\nexport interface TreeNodeJsonData {\n  key: string;\n  value: any;\n  path: string;\n  existOnOrigin: boolean;\n  existOnCompared: boolean;\n  isValueEqualToOrigin: boolean;\n  isArray: boolean;\n  classStyle: string;\n  tooltip: string\n}\n\nfunction arrayOrderIsNotImportant(key) {\n  // List of fields with order important\n  return !['augmentation', 'mapping', 'network_design', 'file content', 'preview'].includes(key);\n}\n\nexport function isArrayOrderNotImportant(val, key, allExperiments = []) {\n  const allIsOne = allExperiments.every(experiment => experiment && experiment[key] && experiment[key].length === 1);\n  return Array.isArray(val) && !allIsOne && (arrayOrderIsNotImportant(key));\n}\n\nfunction customMergeStrategyForArrays(objValue, srcValue, key) {\n  if (isArrayOrderNotImportant(objValue, key)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\n\n\nfunction convertToHashItem(item, originItem, path) {\n  const itemHash = getDisplayTextForTitles(item, path);\n  const convertedItemHash = (originItem && isArray(originItem) && originItem.map(element => getDisplayTextForTitles(element, path)).includes(itemHash) ? 'a_hash_' : 'hash_') + itemHash;\n  return convertedItemHash;\n}\n\nfunction convertInstalledPackages(installedPackages: string[]): { [dependecy: string]: string } {\n  if (!installedPackages) {\n    return {};\n  }\n  return Array.isArray(installedPackages) ? installedPackages.reduce((acc, curr) => {\n    const [key, value] = curr.split(/ *== */);\n    // TODO: What happen when duplicate key/dependency\n    acc[`hash_${key}`] = `${key} : ${value || ''}`;\n    return acc;\n  }, {}) : installedPackages;\n}\n\nexport const mutedArray = (\n  array: string[],\n  changes: { [index: number]: number }\n) => {\n  Object.keys(changes)\n    .sort((a, b) => (a > b ? -1 : 1))\n    .forEach((index) => {\n      const amount = changes[index];\n\n      for (let i = 0; i < amount; i++) {\n        array.splice(+index, 0, undefined);\n      }\n    });\n\n  return array;\n};\n\ninterface DiffArraysReturnInterface {\n  base: string[];\n  compared: string[];\n  changes: {\n    base: { [index: string]: number };\n    compare: { [index: string]: number };\n  };\n}\n\nexport function diffArrays<T extends string[]>(compare: T, baseCompare: T): DiffArraysReturnInterface {\n  const base = [];\n  const compared = [];\n  let diff;\n\n  if (baseCompare.length === 0) {\n    diff = [{added: undefined, count: compare.length, removed: true, value: compare}];\n  } else if (compare.length === 0) {\n    diff = [{removed: undefined, count: baseCompare.length, added: true, value: compare}];\n  } else {\n    diff = Diff.diffArrays(compare, baseCompare);\n  }\n  const changes = {base: {}, compare: {}};\n\n  const setLengthsAndChanges = () => {\n    const baseLength = base.length;\n    const comparedLength = compared.length;\n\n    const max = Math.max(base.length, compared.length);\n\n    base.length = max;\n    compared.length = max;\n\n    if (max - baseLength) {\n      changes.base[baseLength] = max - baseLength;\n    }\n\n    if (max - comparedLength) {\n      changes.compare[comparedLength] = max - comparedLength;\n    }\n  };\n\n  diff.forEach((part) => {\n    // added is for the base\n    // remove for the compared one!\n    if (!part.added && !part.removed) {\n      // they are the same for both\n      setLengthsAndChanges();\n      base.push(...part.value);\n      compared.push(...part.value);\n    } else if (part.removed) {\n      // only in the base\n      base.push(...part.value);\n    } else if (part.added) {\n      // only in the compare\n      compared.push(...part.value);\n    }\n  });\n\n  setLengthsAndChanges();\n\n  return {base, compared, changes};\n}\n\n\nfunction convertnetworkDesign(networkDesign: string): any {\n  if (!networkDesign) {\n    return [];\n  }\n  if (typeof networkDesign !== 'string') {\n    return networkDesign;\n  }\n  return networkDesign;\n  // try {\n  //   return hoconParser(networkDesign);\n  // } catch (e) {\n  //   console.log('Network design parsing error: ', e);\n  //   return networkDesign;\n  // }\n}\n\nfunction convertUncommittedChanges(diff: string[]): { [files: string]: string[] } {\n  if (!diff) {\n    return {};\n  }\n  let currKey = null;\n  return Array.isArray(diff) ? diff.reduce((acc, curr, i) => {\n    const newFileDiff = curr.startsWith('diff --git');\n    if (newFileDiff) {\n      currKey = curr;\n      acc[curr] = [];\n    } else {\n      if (currKey === null) {\n        if (curr.startsWith('** Content is too large to display.')) {\n          acc['a_hash_'] = curr;\n        } else {\n          // Hope there won't be a million rows diff\n          acc[`hash_${i.toString().padStart(6, '0')}`] = curr;\n        }\n      } else {\n        acc[currKey].push(curr);\n      }\n    }\n    return acc;\n  }, {}) : diff;\n}\n\nfunction convertHyperParams(hyperParams: { [section: string]: { [name: string]: any } }, originHyperParams): { [section: string]: { [name: string]: any } } {\n  if (!hyperParams) {\n    return {};\n  }\n\n  if (isParamsConverted(hyperParams)) {\n    return hyperParams;\n  }\n\n  return Object.entries(hyperParams).reduce((result, [sectionName, section]) => {\n    result[sectionName] = Object.entries(section).reduce((acc, [paramName, param]) => {\n      const hasInOrigin = has(`${sectionName}.${paramName}`, originHyperParams);\n      acc[(hasInOrigin ? ' ' : '') + paramName] = param.value;\n      return acc;\n    }, {});\n    return result;\n  }, {});\n}\n\nfunction convertConfiguration(confParams: { [name: string]: ConfigurationItem }, originConfParams): { [name: string]: string | string[] } {\n  if (!confParams) {\n    return {};\n  }\n\n  return Object.entries(confParams).reduce((acc, [paramName, {value}]) => {\n    const hasInOrigin = has(paramName, originConfParams.configuration);\n    acc[(hasInOrigin ? ' ' : '') + paramName] = value ? value.split('\\n') : undefined;\n    return acc;\n  }, {});\n}\n\n/**\n * @description Remove undefineds from the end to start util we have defined value\n * @example removeUndefinedFromBackwardUtilValue( [\n *                                                 [1,2,3,undefined,undefined,undefined],\n *                                                 [undefined,undefined,1]\n *                                                ]) =>\n *                                                      [[1,2,3], [undefined,undefined,1]]\n */\nfunction removeUndefinedFromBackwardUtilValue<T extends unknown[]>(_values: T[]): T[] {\n  return _values.map(newValue => {\n    for (let i = newValue.length - 1; i >= 0; i--) {\n      if (isUndefined(newValue[i])) {\n        newValue.pop();\n      } else {\n        return newValue;\n      }\n    }\n    return newValue;\n  });\n}\n\n/**\n * @description\n * Remove duplicated changes for specific change\n * @example removeDuplicated(\n * [\n *  {changes: {base: {1: 2, 0:1}, compare: {1: 2, 0:3}}},\n *  {changes: {base: {1: 3, 0:1}, compare: {1: 2, 0:3}}}\n * ], 'base')      =>     [\n *                          {changes: {base: {1: undefined, 0:1}        , compare: {1: 1, 0:3}}},\n *                          {changes: {base: {1: 1        , 0:undefined}, compare: {1: 1, 0:3}}}\n *                        ]\n * @param compareValues\n * @param change\n */\nexport function removeDuplicated<T extends DiffArraysReturnInterface>(compareValues: T[], change: 'base' | 'compare'): T[] {\n  compareValues.map(c => c.changes[change]).forEach((data, index) => {\n    for (let i = 0; i < compareValues.length; i++) {\n      if (index !== i) {\n        // make sure we are not on the same object\n\n        Object.entries(data).forEach(([position, amount]) => {\n          const _changes = compareValues[i].changes[change];\n\n          // they are the same -> remove it from current\n          if (_changes[position]) {\n            if (_changes[position] === amount) {\n              data[position] = 0;\n            }\n\n            // current is greater then another one -> minus them and the another one remove\n            else if (_changes[position] > amount) {\n              _changes[position] = _changes[position] - amount;\n              data[position] = undefined;\n            } else {\n              //  another one is greater then current -> minus them and the current one remove\n              data[position] = amount - _changes[position];\n              _changes[position] = undefined;\n            }\n          }\n        });\n      }\n    }\n  }, []);\n  return compareValues;\n}\n\nexport function compareArrayOfStrings<T extends Array<string[]>>(values: T): T {\n  const _values = values.map(v => v.filter(v => !isUndefined(v)));\n\n  let mutedValues = [] as T;\n  let compareValuesFromBaseToRest = [] as DiffArraysReturnInterface[];\n  const compareValuesBetweenTheRest = [] as DiffArraysReturnInterface[];\n\n  _values.forEach((experiment, index) => {\n    const isNotLastIndex = index < _values.length - 1;\n\n    // compare the base array to the rest\n    if (isNotLastIndex) {\n      compareValuesFromBaseToRest.push(\n        diffArrays(\n          _values[0],\n          _values[index + 1]\n        )\n      );\n    }\n\n    // compare the rest of the arrays to the rest (and not the base)\n    if (isNotLastIndex && index > 0) {\n      compareValuesBetweenTheRest.push(\n        diffArrays(\n          _values[index],\n          _values[index + 1]\n        )\n      );\n    }\n  });\n\n  // remove duplicated changes if the base/compare are the same;\n  compareValuesFromBaseToRest = removeDuplicated(compareValuesFromBaseToRest, 'base');\n  compareValuesFromBaseToRest = removeDuplicated(compareValuesFromBaseToRest, 'compare');\n\n  // compare base vs rest AND muted the values !!!\n  compareValuesFromBaseToRest.forEach((compare, index) => {\n    mutedValues[0] = mutedArray(_values[0], compare.changes.base);\n    mutedValues[index + 1] = mutedArray(_values[index + 1], compare.changes.compare);\n  });\n\n  // remove unneeded undefined from the end\n  mutedValues = removeUndefinedFromBackwardUtilValue(mutedValues) as T;\n\n  // compare base vs rest the _muted_ values and muted AGAIN!\n  compareValuesFromBaseToRest.forEach((_, index) => {\n    const diff = diffArrays(\n      mutedValues[0],\n      mutedValues[index + 1]\n    );\n    mutedValues[0] = mutedArray(_values[0], diff.changes.base);\n    mutedValues[index + 1] = mutedArray(_values[index + 1], diff.changes.compare);\n  });\n\n  // remove undefined from end to start untill we have\n  return removeUndefinedFromBackwardUtilValue(mutedValues) as T;\n}\n\nexport function convertConfigurationFromExperiments<T extends Array<IExperimentDetail>>(experiments: T, originalExperiments: Record<string, IExperimentDetail>): T {\n  const data = experiments.map(experiment => originalExperiments[experiment.id]?.configuration?.General?.value.split('\\n') || []) || [];\n  if (data.some(experimentData => experimentData.length > MAX_ROWS_FOR_SMART_COMPARE_ARRAYS)) {\n    return experiments;\n  }\n  const values = compareArrayOfStrings(data);\n  experiments.forEach((experiment, index) => {\n    if (' General' in experiment.configuration) {\n      experiment.configuration[' General'] = values[index] as any;\n    } else {\n      experiment.configuration['General'] = values[index] as any;\n    }\n  });\n  return experiments;\n}\n\nexport function convertContainerScriptFromExperiments<T extends Array<IExperimentDetail>>(experiments: T, originalExperiments: Record<string, IExperimentDetail>): T {\n  const data = experiments.map(experiment => originalExperiments[experiment.id]?.execution?.container?.setup_shell_script);\n  if (data.some(experimentData => experimentData.length > MAX_ROWS_FOR_SMART_COMPARE_ARRAYS)) {\n    return experiments;\n  }\n  const values = compareArrayOfStrings(data);\n  experiments.forEach((experiment, index) => experiment.execution.container.setup_shell_script = values[index]);\n  return experiments;\n}\n\nexport function convertNetworkDesignFromExperiments<T extends IExperimentDetail>(experiments: T[], originalExperiments: Record<string, IExperimentDetail>): T[] {\n  const addValuesToNetworkDesign = (model: ' input models' | ' output models', key: string) => {\n\n    const modelNetworkDesignData = experiments.map(experiment => {\n      const values = (get([experiment.id, 'artifacts', model, key, 'network_design'], originalExperiments) || []);\n      return Array.isArray(values) ? values : [];\n    }) as Array<string[]>;\n\n    if (modelNetworkDesignData.some(experimentData => experimentData.length > MAX_ROWS_FOR_SMART_COMPARE_ARRAYS)) {\n      return experiments;\n    }\n    const inputModelNetworkDesignValues = compareArrayOfStrings(modelNetworkDesignData);\n\n    experiments.forEach((experiment, index) => {\n      if (experiment.artifacts[model].hasOwnProperty(key)) {\n        experiment.artifacts[model][key].network_design = inputModelNetworkDesignValues[index];\n      }\n    });\n  };\n\n  const inputModelKeys = Array.from(new Set(Object.values(originalExperiments).map(exp => [...Object.keys(exp.artifacts[' input models'])]).flat()));\n  const outputModelKeys = Array.from(new Set(Object.values(originalExperiments).map(exp => [...Object.keys(exp.artifacts[' output models'])]).flat()));\n  inputModelKeys.forEach(key => addValuesToNetworkDesign(' input models', key));\n  outputModelKeys.forEach(key => addValuesToNetworkDesign(' output models', key));\n  return experiments;\n}\n\nexport function convertExperimentsArrays(experiment, origin, experiments, path = ''): IExperimentDetail {\n  const convertedExperiment: IExperimentDetail = {};\n  let counter = 9999;\n  Object.keys(experiment).forEach(key => {\n      const newPath = `${path}.${key}`;\n      switch (key) {\n        case 'installed_packages':\n          convertedExperiment[key] = convertInstalledPackages(experiment[key]);\n          break;\n        case 'network_design':\n          convertedExperiment[key] = convertnetworkDesign(experiment[key]);\n          break;\n        case 'uncommitted_changes':\n          convertedExperiment[key] = convertUncommittedChanges(experiment[key]);\n          break;\n        case 'tags':\n          convertedExperiment[key] = experiment[key];\n          break;\n        case 'configuration':\n          convertedExperiment[key] = convertConfiguration(experiment[key], origin) as { [key: string]: ConfigurationItem };\n          break;\n        case 'setup_shell_script':\n          convertedExperiment[key] = experiment[key];\n          break;\n        default:\n          const alternativeConvertedExperiment = getAlternativeConvertedExperiment(newPath, experiment[key]);\n          if (alternativeConvertedExperiment) {\n            convertedExperiment[key] = alternativeConvertedExperiment;\n          } else if (isObject(experiment[key]) && (!isArrayOrderNotImportant(experiment[key], key, experiments))) {\n            let newKey = getDisplayTextForTitles(experiment[key], newPath) || key;\n\n            // Makes base/origin rows first\n            if (origin && Array.isArray(origin) && origin.map(item => getDisplayTextForTitles(item, newPath)).includes(newKey)) {\n              newKey = `0${newKey}`;\n            }\n            convertedExperiment[newKey] = convertExperimentsArrays(experiment[key], origin ? origin[key] : null, experiments.map(exp => exp ? exp[key] : null), newPath);\n          } else if (isArrayOrderNotImportant(experiment[key], key, experiments)) {\n            const hashedObj = {};\n            const currentIndex = path.split(/\\.([0-9]+)$/)[1];\n            experiment[key].forEach(item => {\n              let convertedItemHash = convertToHashItem(item, origin && (Array.isArray(origin) ? (origin.map(item => item[key]) as any).flat() : origin[key][currentIndex]), newPath);\n              if (hashedObj[convertedItemHash]) {\n                convertedItemHash = `${counter}${convertedItemHash}`;\n                counter--;\n              }\n              if (isObject(item)) {\n                hashedObj[convertedItemHash] =\n                  convertExperimentsArrays(item, origin ? origin[key] : null, experiments.map(exp => exp ? exp[key] : null), newPath);\n              } else {\n                hashedObj[convertedItemHash] = item;\n              }\n            });\n            convertedExperiment[key] = hashedObj;\n          } else {\n            convertedExperiment[key] = experiment[key];\n          }\n      }\n    }\n  );\n  return convertedExperiment;\n}\n\nexport function convertExperimentsArraysParams(experiment, origin): IExperimentDetail {\n  return Object.keys(experiment).reduce((acc, key) => {\n    acc[key] = key === 'hyperparams' ? convertHyperParams(experiment[key], origin.hyperparams) : experiment[key];\n    return acc;\n  }, {} as IExperimentDetail);\n}\n\nfunction abSort(obj) {\n  return Object.keys(obj).sort(function (a, b) {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n  );\n}\n\nfunction sortObject(obj, origin, parentKey: string) {\n  const orderedObj = {};\n  abSort(obj).forEach(key => {\n    if (isObject(obj[key]) || isArrayOrderNotImportant(obj[key], parentKey)) {\n      orderedObj[key] = sortObject(obj[key], origin ? origin[key] : null, key);\n    } else {\n      orderedObj[key] = obj[key];\n    }\n  });\n  return orderedObj;\n}\n\nexport function isDetailsConverted(exp) {\n  return exp.execution?.installed_packages && !Array.isArray(exp.execution?.installed_packages);\n}\n\nexport function isParamsConverted(hyperparams) {\n  const firstKey = hyperparams && Object.keys(hyperparams)[0];\n  const firstParam = firstKey && Object.values(hyperparams[firstKey])[0];\n  return typeof firstParam === 'string';\n}\n\nexport function getAllKeysEmptyObject(jsons) {\n  let obj = {};\n  jsons.forEach(json => obj = mergeWith(customMergeStrategyForArrays, obj, json));\n  const sortedObject = sortObject(obj, jsons[0], '');\n  return sortedObject;\n}\n\nexport function createDiffObjectScalars(AllKeysObject, originObject?, comparedObject?, metaTransformerFunction?, originPath?): Array<TreeNode<TreeNodeJsonData>> {\n  return treeBuilderService.buildTreeFromJson<TreeNodeJsonData>(AllKeysObject, (data, key, path) => {\n\n    const originData = path.length === 0 ? originObject : get(path, originObject);\n    const comparedData = path.length === 0 ? comparedObject : get(path, comparedObject);\n    const originPartial = get(key, originData);\n    const comparedPartial = get(key, comparedData);\n    const existOnOrigin = originData && has(key, originData);\n    const existOnCompared = comparedData && has(key, comparedData);\n\n    return {\n      key,\n      path,\n      existOnOrigin,\n      existOnCompared,\n      value: comparedPartial,\n      isValueEqualToOrigin: (existOnOrigin === existOnCompared) && isEqual(originPartial, comparedPartial),\n      isArray: isArrayOrderNotImportant(comparedPartial, key),\n      originPath,\n      fullPath: originPath.concat(path).concat(key)\n    };\n  }, metaTransformerFunction || null, {comparedObject, originPath, originObject}).children;\n}\n","export function getDisplayTextForTitles(item, path): string {\n  return null;\n}\n\nexport const getAlternativeConvertedExperiment = (newPath, data) => false;\n","import * as detailsActions from '../actions/experiments-compare-details.actions';\nimport * as paramsActions from '../actions/experiments-compare-params.actions';\nimport {ExperimentCompareTree, ExperimentCompareTreeSection, IExperimentDetail} from '../../../features/experiments-compare/experiments-compare-models';\nimport {get, has, isEmpty, isEqual} from 'lodash/fp';\nimport {treeBuilderService} from '../services/tree-builder.service';\nimport {isArrayOrderNotImportant} from '../jsonToDiffConvertor';\nimport {ExperimentParams, TreeNode, TreeNodeMetadata} from '../shared/experiments-compare-details.model';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {activeLoader, addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport {ChangeDetectorRef, OnDestroy, QueryList, ViewChildren, Directive} from '@angular/core';\nimport {ExperimentCompareDetailsBase} from '../../../features/experiments-compare/experiments-compare-details.base';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {select, Store} from '@ngrx/store';\nimport {IExperimentInfoState} from '../../../features/experiments/reducers/experiment-info.reducer';\nimport {Observable, Subscription} from 'rxjs';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {selectHideIdenticalFields, selectRefreshing} from '../reducers';\nimport {refetchExperimentRequested} from '../actions/compare-header.actions';\nimport {RENAME_MAP} from '../experiments-compare.constants';\nimport {selectHasDataFeature} from '../../../core/reducers/users.reducer';\nimport {ListRange} from '@angular/cdk/collections';\n\nexport type NextDiffDirectionEnum = 'down' | 'up';\n\nexport interface FlatNode {\n  data: any;\n  metaData: TreeNodeMetadata;\n  level: number;\n  parent: TreeNode<any>;\n  hasChildren: boolean;\n}\n\n@Directive()\nexport abstract class ExperimentCompareBase extends ExperimentCompareDetailsBase implements OnDestroy {\n  public hasDataFeature$: Observable<boolean>;\n  private hasDataFeature: boolean;\n\n  public renameMap = RENAME_MAP;\n  public experiments$: Observable<any[]>;\n  public taskIds$: Observable<string>;\n\n  public routerParamsSubscription: Subscription;\n  public experimentsSubscription: Subscription;\n  public hideIdenticalFieldsSub: Subscription;\n  public refreshingSubscription: Subscription;\n  private scrollSubscription: Subscription[];\n\n  public tree: ExperimentCompareTree = {};\n  public experiments: Array<IExperimentDetail>;\n  public originalExperiments: { [id: string]: IExperimentDetail | ExperimentParams } = {};\n  public allPathsDiffs: any = {};\n  public selectedPath: string = null;\n  private selectedPathIndex: number = -1;\n  public onlyDiffsPaths: string[];\n\n  public allPaths: any = {};\n  public calculatingTree: boolean;\n  public hideIdenticalFields = false;\n  public experimentsDataControl: { [key: string]: [MatTreeFlatDataSource<TreeNode<any>, FlatNode>, FlatTreeControl<FlatNode>, FlatNode[]] } = {};\n  public compareTabPage: string;\n  public foundPaths: string[] = [];\n  public foundIndex: number = 0;\n  public searchText = '';\n  public experimentsDataSources: { [id: string]: { all: any; onlyDiffs: any } } = {};\n  public previousOpenPaths: string[] = [];\n  public experimentTags: { [experimentId: string]: string[] } = {};\n  private timeoutIndex: number;\n  private originalScrolledElement: EventTarget;\n  private taskIds: string;\n\n  get baseExperiment(): IExperimentDetail {\n    return get('[0]', this.experiments);\n  }\n\n  @ViewChildren('virtualScrollRef') virtualScrollRef: QueryList<CdkVirtualScrollViewport>;\n\n\n  constructor(public router: Router,\n              public store: Store<IExperimentInfoState>,\n              public changeDetection: ChangeDetectorRef,\n              public activeRoute: ActivatedRoute) {\n    super();\n    this.hasDataFeature$ = this.store.pipe(select(selectHasDataFeature));\n\n    this.taskIds$ = this.store.pipe(\n      select(selectRouterParams),\n      map(params => get('ids', params)),\n      distinctUntilChanged(),\n      tap(taskIds => this.taskIds = taskIds),\n      filter(taskIds => !!taskIds && taskIds !== this.getExperimentIdsParams(this.experiments))\n    );\n  }\n\n  onInit() {\n    // todo: remove this\n    this.compareTabPage = get('snapshot.routeConfig.data.mode', this.activeRoute);\n\n    this.hideIdenticalFieldsSub = this.store.select(selectHideIdenticalFields).subscribe(hide => {\n      this.hideIdenticalFields = hide;\n\n      Object.keys(this.experimentsDataControl).forEach(id => {\n        const [dataSource, treeControl] = this.experimentsDataControl[id];\n        const expandedPaths = treeControl.expansionModel.selected.map(node => node.data.path);\n        dataSource.data = this.experimentsDataSources[id][this.hideIdenticalFields ? 'onlyDiffs' : 'all'];\n        const expandedDataNodes = treeControl.dataNodes.filter(node => node.hasChildren).filter(node => expandedPaths.includes(node.data.path));\n        treeControl.expansionModel.select(...expandedDataNodes);\n      });\n      this.find(this.searchText);\n    });\n\n    this.refreshingSubscription = this.store.pipe(select(selectRefreshing))\n      .pipe(filter(({refreshing}) => refreshing))\n      .subscribe(({autoRefresh}) => this.store.dispatch(refetchExperimentRequested({autoRefresh})));\n\n    this.hideIdenticalFieldsSub.add(this.hasDataFeature$.subscribe(hasData => this.hasDataFeature = hasData));\n\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(detailsActions.resetState());\n    this.store.dispatch(paramsActions.resetState());\n    this.routerParamsSubscription.unsubscribe();\n    this.experimentsSubscription.unsubscribe();\n    this.hideIdenticalFieldsSub.unsubscribe();\n    this.refreshingSubscription.unsubscribe();\n  }\n\n  calculateTree(experiments) {\n    this.calculatingTree = true;\n    this.store.dispatch(activeLoader('CALCULATING_DIFF_TREE'));\n    this.changeDetection.detectChanges();\n\n    setTimeout(() => {\n      const experimentTrees = this.buildCompareTree(experiments, this.hasDataFeature);\n      this.tree = experimentTrees;\n      this.clearRemovedExperiment(experiments);\n\n      const treeFlattener = new MatTreeFlattener<TreeNode<any>, FlatNode>(\n        this.nodeTransformer,\n        this.getNodeLevel,\n        this.getIsNodeExpandable,\n        this.getNodeChildren\n      );\n      const expandedsPaths = this.getExpandedPath(experimentTrees);\n\n      Object.keys(experimentTrees).forEach(experimentID => {\n        const sectionTree = experimentTrees[experimentID];\n        let root = Object.keys(sectionTree).map((section: string) => sectionTree[section].children[0]);\n        if (this.compareTabPage === 'hyper-params') {\n          root = root[0].children;\n        }\n        const rootOnlyDiffs = this.filterTreeDiffs(root);\n        const treeControl: FlatTreeControl<FlatNode> = new FlatTreeControl<FlatNode>(this.getNodeLevel, this.getIsNodeExpandable);\n        const dataSource: MatTreeFlatDataSource<TreeNode<any>, FlatNode> = new MatTreeFlatDataSource(treeControl, treeFlattener);\n\n        dataSource.connect({viewChange: new Observable<ListRange>()}).subscribe((nodes: FlatNode[]) =>\n          this.experimentsDataControl[experimentID] = [dataSource, treeControl, nodes]\n        );\n\n        this.experimentsDataControl[experimentID] = [dataSource, treeControl, []];\n        this.experimentsDataSources[experimentID] = {all: root, onlyDiffs: rootOnlyDiffs};\n        dataSource.data = this.experimentsDataSources[experimentID][this.hideIdenticalFields ? 'onlyDiffs' : 'all'];\n        this.setExpandedPaths(expandedsPaths, treeControl);\n        this.selectedPath && window.setTimeout(() => this.exapndAndScrollToPath());\n      });\n      this.calculatingTree = false;\n      this.store.dispatch(deactivateLoader('CALCULATING_DIFF_TREE'));\n      if (!this.changeDetection['destroyed']) {\n        this.changeDetection.detectChanges();\n      }\n      this.onlyDiffsPaths = Object.keys(this.allPathsDiffs).filter(key => !!this.allPathsDiffs[key]);\n      this.syncScrollSubscription();\n      if (this.searchText) {\n        this.findAllOccurrences(this.searchText);\n        if (this.foundIndex >= this.foundPaths.length) {\n          this.foundIndex = this.foundPaths.length;\n          this.findPrev();\n        }\n        if (this.foundPaths.length > 0 && this.foundIndex === -1) {\n          this.findNext();\n        }\n        this.changeDetection.detectChanges();\n      }\n    }, 0);\n  }\n\n  private setExpandedPaths(expandedsPaths: any[], treeControl: FlatTreeControl<FlatNode>) {\n    if (expandedsPaths.length > 0) {\n      const expandedDatanodes = treeControl.dataNodes.filter(node => node.hasChildren).filter(node => expandedsPaths.includes(node.data.path));\n      treeControl.expansionModel.select(...expandedDatanodes);\n    }\n  }\n\n  toggleNode(node) {\n    Object.keys(this.experimentsDataControl).forEach(id => {\n      const [, treeControl] = this.experimentsDataControl[id];\n      const n = treeControl.dataNodes.filter(n1 => n1.hasChildren).find(n2 => n2.data.path === node.data.path);\n      treeControl.toggle(n);\n    });\n  }\n\n  clearRemovedExperiment(experiments) {\n    const expIds = experiments.map(exp => exp.id);\n    Object.keys(this.experimentsDataControl).forEach(expId => {\n      if (!expIds.includes(expId)) {\n        delete this.experimentsDataControl[expId];\n        delete this.experimentsDataSources[expId];\n      }\n    });\n  }\n\n  getExpandedPath(experimentTrees: ExperimentCompareTree) {\n    let expandedsPaths = [];\n    Object.keys(experimentTrees).some(experimentID => {\n      if (this.experimentsDataControl[experimentID]) {\n        expandedsPaths = this.experimentsDataControl[experimentID][1].expansionModel.selected.map(node => node.data.path);\n        return expandedsPaths.length > 0;\n      }\n    });\n    return expandedsPaths;\n  }\n\n  syncScrollSubscription() {\n    this.scrollSubscription && this.scrollSubscription.forEach(sub => sub.unsubscribe());\n    this.scrollSubscription = this.virtualScrollRef.map(kk => kk.elementScrolled().subscribe((event: Event) => {\n        const target = event.target as HTMLElement;\n        if (!this.originalScrolledElement) {\n          this.originalScrolledElement = target;\n        }\n        if (this.originalScrolledElement !== target) {\n          return;\n        }\n\n        clearTimeout(this.timeoutIndex);\n        this.timeoutIndex = window.setTimeout(() => this.originalScrolledElement = null, 500);\n        this.virtualScrollRef.forEach(k => {\n          if (k.elementRef.nativeElement !== kk.elementRef.nativeElement) {\n            k.elementRef.nativeElement.scrollTo({top: target.scrollTop, left: target.scrollLeft});\n          }\n        });\n      })\n    );\n  }\n\n  goToNextDiff(direction: NextDiffDirectionEnum) {\n    if (direction === 'down') {\n      this.selectedPathIndex = this.onlyDiffsPaths.length - 1 > this.selectedPathIndex ? this.selectedPathIndex + 1 : 0;\n    } else if (this.selectedPathIndex > 0) {\n      this.selectedPathIndex -= 1;\n    } else {\n      this.selectedPathIndex = this.onlyDiffsPaths.length - 1;\n    }\n    this.selectedPath = this.onlyDiffsPaths[this.selectedPathIndex];\n    this.exapndAndScrollToPath();\n  }\n\n  exapndAndScrollToPath() {\n    const openPaths = [];\n    let pathPartial = '';\n    const selectedPath = this.selectedPath ? this.selectedPath.split(',') : [];\n    selectedPath.forEach((pathPart, index) => {\n      if (index === 0) {\n        pathPartial = pathPart;\n      } else {\n        pathPartial = pathPartial + ',' + pathPart;\n      }\n      openPaths.push(pathPartial);\n    });\n    let nodeGotExpanded = false;\n    if (!isEqual(openPaths.slice(0, openPaths.length - 1), this.previousOpenPaths)) {\n      Object.keys(this.experimentsDataControl).forEach(id => {\n        const [, treeControl] = this.experimentsDataControl[id];\n        const nodesToOpen = treeControl.dataNodes.filter(node => node.hasChildren).filter(n => {\n          const currentPath = n.data.path;\n          return !treeControl.isExpanded(n) && openPaths.includes(currentPath);\n        });\n        if (nodesToOpen.length > 0) {\n          treeControl.expansionModel.select(...nodesToOpen);\n          nodeGotExpanded = true;\n        }\n      });\n    }\n    this.previousOpenPaths = openPaths.slice(0, openPaths.length - 1);\n    const [, , flatNodes] = Object.values(this.experimentsDataControl)[0];\n    const selectedNodeIndex = this.findRealIndex(flatNodes);\n    const scrollToInPixels = (selectedNodeIndex + 1) * 28 - this.virtualScrollRef.first.getViewportSize() / 2;\n    if (nodeGotExpanded) {\n      // Hack to make multiple scroll work with cdk. Don't change\n      window.setTimeout(() => this.virtualScrollRef.forEach(vs => vs.elementRef.nativeElement.scrollTo({top: scrollToInPixels})), 200);\n      window.setTimeout(() => this.virtualScrollRef.forEach(vs => vs.elementRef.nativeElement.scrollTo({top: scrollToInPixels})), 300);\n    } else {\n      this.virtualScrollRef.forEach(vs => vs.elementRef.nativeElement.scrollTo({top: scrollToInPixels}));\n      window.setTimeout(() => this.virtualScrollRef.forEach(vs => vs.elementRef.nativeElement.scrollTo({top: scrollToInPixels})), 0);\n      // window.setTimeout(() => this.virtualScrollRef.forEach(vs => vs.elementRef.nativeElement.scrollTo({top: scrollToInPixels})), 100);\n    }\n  }\n\n  public find(text: string) {\n    if (text) {\n      this.findAllOccurrences(text);\n      this.foundIndex = -1;\n      this.findNext();\n    } else if (this.searchText !== text) {\n      this.foundPaths = [];\n      this.selectedPath = null;\n    }\n    this.searchText = text;\n  }\n\n  findAllOccurrences(text) {\n    text = text.toLowerCase();\n    const foundPathsPerExpTemp = Object.values(this.experimentsDataControl).map(exp => exp[1].dataNodes\n      .map((node, index) => {\n        const keyWithoutHash = node.data.key.replace(/(a_){0,1}hash_/, '').toLowerCase();\n        if (node.hasChildren) {\n          if (keyWithoutHash.includes(text)) {\n            return {path: node.data.path, index};\n          }\n        } else if (keyWithoutHash.includes(text) || (node.data.value !== undefined && JSON.stringify(node.data.value).toLowerCase().includes(text))) {\n          return {path: node.data.path, index};\n        }\n      })\n      .filter(i => i)\n    );\n\n    const foundPathsPerExp = (foundPathsPerExpTemp as any).flat()\n      .sort((a, b) => (a.index > b.index) ? 1 : -1)\n      .map(found => found.path);\n    this.foundPaths = Array.from(new Set((foundPathsPerExp)));\n  }\n\n  public findNext() {\n    if (this.foundPaths.length === 0) {\n      return;\n    }\n    this.foundIndex = this.foundIndex === (this.foundPaths.length - 1) ? 0 : this.foundIndex + 1;\n    this.selectedPath = this.foundPaths[this.foundIndex];\n    this.exapndAndScrollToPath();\n  }\n\n  public findPrev() {\n    if (this.foundPaths.length === 0) {\n      return;\n    }\n    this.foundIndex = this.foundIndex === 0 ? this.foundPaths.length - 1 : this.foundIndex - 1;\n    this.selectedPath = this.foundPaths[this.foundIndex];\n    this.exapndAndScrollToPath();\n  }\n\n\n  buildSectionTree(experiment, section, mergedExperiment): ExperimentCompareTreeSection {\n    return treeBuilderService.buildTreeFromJson(\n      {[section]: mergedExperiment[section]},\n      this.dataTransformer,\n      this.metaDataTransformer,\n      {experiment}\n    );\n  }\n\n  dataTransformer = (data, key, path, extraParams: { experiment; section: string }) => {\n    const originExperiment: any = this.baseExperiment;\n    const comparedExperiment: any = extraParams.experiment;\n    path.push(key);\n    const fullPath = path;\n    const fullPathJoined = fullPath.join(',');\n\n    const originData = fullPath.length === 0 ? originExperiment : get(fullPath, originExperiment);\n    const comparedData = fullPath.length === 0 ? comparedExperiment : get(fullPath, comparedExperiment);\n    const existOnOrigin = !!has(fullPath, originExperiment);\n    const existOnCompared = !!has(fullPath, comparedExperiment);\n    const isEquals = isEqual(comparedData, originData);\n    const isEmptyObject = isEmpty(comparedData) || (!Array.isArray(comparedData) && Object.values(comparedData).every(val => val === undefined));\n\n    const isPrimitive = this.isPrimitive(originData) || originData === undefined || originData === null;\n    this.allPaths[fullPathJoined] = this.allPaths[fullPathJoined] || !isEquals;\n    if (isPrimitive) {\n      this.setPathDif(fullPathJoined, isEquals, (originExperiment === undefined && comparedExperiment === undefined));\n    }\n    if (originExperiment === undefined && comparedExperiment && !this.isPrimitive(comparedExperiment)) {\n      delete this.allPathsDiffs[fullPathJoined];\n    }\n\n    let tooltip;\n    if (this.compareTabPage === 'hyper-params') {\n      path[path.length - 1] = path[path.length - 1].trim();\n      const hypeParamObject = get(path.join('.'), this.originalExperiments[comparedExperiment.id]);\n      if (hypeParamObject && has('name', hypeParamObject) && has('value', hypeParamObject) && hypeParamObject.type !== 'legacy') {\n        tooltip = (hypeParamObject.type ? `Type: ${hypeParamObject.type}\\n` : '') + (hypeParamObject.description || '');\n      }\n    }\n    path.pop();\n\n    return {\n      key,\n      path: fullPathJoined,\n      existOnOrigin,\n      existOnCompared,\n      value: comparedData,\n      isValueEqualToOrigin: (originExperiment === comparedExperiment) || (isEquals && (existOnOrigin === existOnCompared)),\n      isArray: isArrayOrderNotImportant(comparedExperiment, key),\n      classStyle: `${(originExperiment === comparedExperiment || isEquals) ? '' : 'al-danger '}${isEmptyObject ? 'al-empty-collapse ' : ''}${existOnCompared ? '' : 'hide-field'}`,\n      tooltip: tooltip || undefined\n    };\n  };\n\n  metaDataTransformer = (data, key, path, extraParams): TreeNodeMetadata => {\n    return null;\n  };\n\n  isPrimitive(obj) {\n    return (typeof obj === 'string' || typeof obj === 'boolean' || typeof obj === 'number');\n  }\n\n  private setPathDif(fullPath, isEquals, undefinedOriginFirstRun) {\n    if (!this.allPathsDiffs[fullPath]) {\n      this.allPathsDiffs[fullPath] = !isEquals;\n    }\n    if (undefinedOriginFirstRun && this.allPathsDiffs[fullPath] === undefined) {\n      this.allPathsDiffs[fullPath] = false;\n    }\n  }\n\n  public syncUrl(experiments: Array<IExperimentDetail>) {\n    const newParams = this.getExperimentIdsParams(experiments);\n    if (newParams !== this.taskIds) {\n      this.router.navigateByUrl(this.router.url.replace(this.taskIds, newParams));\n    }\n  }\n\n  public extractTags(experiments) {\n    experiments.map(({tags, ...experiment}) => {\n      if (tags?.length || !this.experimentTags[experiment.id]?.length) {\n        this.experimentTags[experiment.id] = tags;\n      }\n    });\n  }\n\n  public getExperimentIdsParams(experiments: Array<IExperimentDetail>): string {\n    return experiments ? experiments.map(e => e.id).toString() : '';\n  }\n\n  selectedPathClicked(path) {\n    if (this.onlyDiffsPaths.includes(path)) {\n      this.selectedPath = path;\n      this.selectedPathIndex = this.onlyDiffsPaths.indexOf(this.selectedPath);\n    }\n  }\n\n  keyClicked(data) {\n    const path = data.path;\n    this.selectedPathClicked(path);\n  }\n\n  checkIfSelectedPath = (data: any) => this.selectedPath === (data.path);\n\n// checkIfFoundPathPath = (data: any) => this.foundPath === (data.path);\n\n  checkIfIdenticalRow(data: any) {\n    if (this.hideIdenticalFields && this.allPaths) {\n      const currentPath = data.path;\n      return !this.allPaths[currentPath];\n    } else {\n      return false;\n    }\n  }\n\n  filterTreeDiffs(node: any) {\n    if (node.data && this.allPaths[node.data.path] === false) {\n      return false;\n    }\n    if (Array.isArray(node)) {\n      return node.map(item => this.filterTreeDiffs(item)).filter(item => !!item);\n    }\n    if (node.children) {\n      return {...node, children: this.filterTreeDiffs(node.children)};\n    }\n    if (node.data) {\n      return {...node, data: this.filterTreeDiffs(node.data)};\n    }\n    return node;\n  }\n\n  private findRealIndex(flatNodes: FlatNode[]) {\n    return flatNodes.findIndex(node => node.data?.path === this.selectedPath);\n  }\n\n  copyIdToClipboard() {\n    this.store.dispatch(addMessage('success', 'Copied to clipboard'));\n  }\n\n  public resetComponentState(experiments) {\n    this.allPathsDiffs = {};\n    this.onlyDiffsPaths = [];\n    this.experiments = experiments;\n    this.allPaths = [];\n    this.previousOpenPaths = [];\n  }\n\n// Function that maps a nested node to a flat node\n  nodeTransformer(node: TreeNode<any>, level: number) {\n    return {\n      data: node.data,\n      metaData: node.metaData,\n      level,\n      parent: node.parent,\n      hasChildren: !!node.children,\n    };\n  }\n\n// Function that gets a flat node's level\n  getNodeLevel({level}: FlatNode) {\n    return level;\n  }\n\n// Function that determines whether a flat node is expandable or not\n  getIsNodeExpandable({hasChildren}: FlatNode) {\n    return hasChildren;\n  }\n\n// Function that returns a nested node's list of children\n  getNodeChildren(node: TreeNode<any>) {\n    return node.children;\n  }\n}\n","export abstract class ExperimentCompareDetailsBase {\n  public buildExperimentTree(experiment, baseExperiment, mergedExperiment, param) {\n    return {\n      artifacts: this.buildSectionTree(experiment, 'artifacts', mergedExperiment),\n      execution: this.buildSectionTree(experiment, 'execution', mergedExperiment),\n      configuration: this.buildSectionTree(experiment, 'configuration', mergedExperiment),\n    };\n  }\n\n\n  abstract buildCompareTree(experiments, hasDataFeature?);\n  abstract buildSectionTree(experiment: any, execution1: string, mergedExperiment: any);\n}\n","import {Directive} from '@angular/core';\n\n@Directive({\n  selector: '[compareCardBody]'\n})\nexport class CompareCardBodyDirective {\n\n  constructor() {\n  }\n\n}\n","import {Directive} from '@angular/core';\n\n@Directive({\n  selector: '[compareCardExtraHeader]'\n})\nexport class CompareCardExtraHeaderDirective {\n\n  constructor() {\n  }\n\n}\n","import {Directive} from '@angular/core';\n\n@Directive({\n  selector: '[compareCardHeader]'\n})\nexport class CompareCardHeaderDirective {\n\n  constructor() {\n  }\n\n}\n","<div\n  #drawerContainer\n  class='drawer-container'\n  [class.drawer-closed]=\"closed\">\n  <div class=\"c-drawer-toggle\" [class.display-on-hover]=\"displayOnHover && !closed\">\n    <button\n      class=\"pointer drawer-toggle\"\n      [class.display-on-hover]=\"displayOnHover && !closed\"\n      (click)=\"toggleDrawer()\"\n    >\n      <i *ngIf=\"!closed\" class=\"arrows-icon fas fa-angle-double-left\"></i>\n      <div #closedLabel [class.hidden]=\"!closed\" class=\"label\">{{label}}</div>\n    </button>\n  </div>\n  <div class='content-container'>\n    <div #fixedWidth class=\"fixed-width\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\n\n@Component({\n  selector       : 'al-drawer',\n  templateUrl    : './drawer.component.html',\n  styleUrls      : ['./drawer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DrawerComponent {\n\n  public closed              = false;\n\n  @Input() label          = '';\n  @Input() displayOnHover = false;\n  @Output() toggled = new EventEmitter<boolean>();\n\n  @ViewChild('drawerContainer', { static: true }) drawerContainer: ElementRef;\n  @ViewChild('fixedWidth', { static: true }) fixedWidth: ElementRef;\n  @ViewChild('closedLabel', { static: true }) closedLabel: ElementRef;\n\n  constructor(private renderer: Renderer2, private ref: ElementRef) {\n  }\n\n  toggleDrawer() {\n    if (!this.closed) {\n      // 30px padding for 15px padding for label text\n      this.renderer.setStyle(this.closedLabel.nativeElement, 'max-height', this.drawerContainer.nativeElement.clientHeight - 30 + 'px');\n      this.renderer.addClass(this.ref.nativeElement, 'collapsed');\n    } else {\n      this.renderer.removeStyle(this.closedLabel.nativeElement, 'max-height');\n      this.renderer.removeClass(this.ref.nativeElement, 'collapsed');\n    }\n    this.closed = !this.closed;\n    window.setTimeout(() => this.toggled.emit(!this.closed), 330);\n  }\n}\n","<div class=\"al-card\">\n  <div\n       class=\"card-container\"\n       [ngClass]=\"{'bordered': showBorder}\"\n       >\n    <div class=\"extra-header\">\n      <ng-content select=\"[extra-header]\">\n      </ng-content>\n    </div>\n    <header>\n      <div>\n        <h4 *ngIf=\"header\" class=\"al-header\">{{header}}</h4>\n        <ng-content select=\"[header-content]\"></ng-content>\n      </div>\n      <div>\n        <ng-content select=\"[headerButtons]\"></ng-content>\n      </div>\n    </header>\n    <div class=\"card-body\">\n      <ng-content></ng-content>\n      {{text}}\n    </div>\n    <footer>\n      <ng-content select=\"[footer]\">\n      </ng-content>\n    </footer>\n  </div>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector       : 'sm-card2',\n  templateUrl    : './card-component2.component.html',\n  styleUrls      : ['./card-component2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent2 implements OnInit {\n\n  @Input() header: string;\n  @Input() text: string;\n  @Input() showBorder      = false;\n  @Input() headerClassName = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<div\n  #detailsContainer\n  id=\"experiment-details-container\"\n  cdkDropList\n  cdkDropListOrientation=\"horizontal\"\n  (cdkDropListDropped)=\"drop($event)\"\n>\n  <al-drawer\n    *ngFor=\"let experiment of experiments; let i = index; trackBy: trackByFn\"\n    class=\"light-theme\"\n    cdkDrag\n    cdkDragLockAxis=\"x\"\n    cdkDragPreviewContainer=\"parent\"\n    [displayOnHover]=\"i > 0\"\n    [label]=\"experiments[i].name\"\n    (toggled)=\"toggled.emit($event)\"\n    (mouseenter)=\"changeHovered(i, true)\"\n    (mouseleave)=\"changeHovered(i, false)\">\n    <sm-card2\n      [showBorder]=\"baseExperiment.id === experiment.id || hovered[i]\"\n    >\n      <!--[cdkAutoScroller]=\"detailsContainer\"-->\n      <div extra-header style=\"width: 100%\">\n        <ng-container *ngTemplateOutlet=\"extraHeaderTemplate; context: {$implicit: experiment, index: i}\">\n        </ng-container>\n      </div>\n      <div headerButtons class=\"actions-container\">\n        <div class=\"actions\" [ngClass]=\"{'invisible': ! hovered[i]}\">\n          <!--<div class=\"actions\">-->\n          <i class=\"fas fa-minus-circle pointer\"\n             *ngIf=\"experiments.length > 1\"\n             (click)=\"experimentRemoved(experiment)\"\n             smTooltip=\"Remove from comparison\"></i>\n          <i *ngIf=\"baseExperiment.id !== experiment.id\"\n             class=\"fas fa-adjust pointer\"\n             (click)=\"setAsBase(experiment)\"\n             smTooltip=\"Set as baseline\">\n          </i>\n          <i class=\"fas fa-arrows-alt\"\n             cdkDragHandle\n             smTooltip=\"Click and drag to reposition the experiment\"\n             [ngClass]=\"{'invisible': experiments.length === 1}\"\n          >\n          </i>\n        </div>\n      </div>\n      <div header-content>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: experiment, index: i}\">\n        </ng-container>\n      </div>\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {$implicit: experiment, index: i}\">\n        </ng-container>\n    </sm-card2>\n  </al-drawer>\n</div>\n","import {Component, ContentChild, EventEmitter, Input, Output, TemplateRef, ViewChild} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {CompareCardBodyDirective} from '../compare-card-body.directive';\nimport {CompareCardExtraHeaderDirective} from '../compare-card-extra-header.directive';\nimport {CompareCardHeaderDirective} from '../compare-card-header.directive';\nimport {IExperimentDetail} from '../../../../features/experiments-compare/experiments-compare-models';\n\n@Component({\n  selector   : 'sm-compare-card-list',\n  templateUrl: './compare-card-list.component.html',\n  styleUrls  : ['./compare-card-list.component.scss']\n})\nexport class CompareCardListComponent {\n\n  @Input() experiments: IExperimentDetail[];\n  @Input() baseExperiment: IExperimentDetail;\n  @Output() experimentListChanged = new EventEmitter<IExperimentDetail[]>();\n  @Output() toggled = new EventEmitter<boolean>();\n\n  @ContentChild(CompareCardBodyDirective, { read: TemplateRef }) bodyTemplate;\n  @ContentChild(CompareCardExtraHeaderDirective, { read: TemplateRef }) extraHeaderTemplate;\n  @ContentChild(CompareCardHeaderDirective, { read: TemplateRef }) headerTemplate;\n\n  @ViewChild('detailsContainer', {static: true}) detailsContainer;\n\n  hovered = [];\n\n  constructor() {\n  }\n\n  experimentRemoved(experiment: IExperimentDetail) {\n    this.experimentListChanged.emit(this.experiments.filter(exp => exp !== experiment));\n  }\n\n  setAsBase(experiment: IExperimentDetail) {\n    this.detailsContainer.nativeElement.scrollLeft = 0;\n    this.reorderExperiments(this.experiments.indexOf(experiment), 0);\n  }\n\n  reorderExperiments(prevIndex, currentIndex) {\n    const newExperiments = [].concat(this.experiments);\n    moveItemInArray(newExperiments, prevIndex, currentIndex);\n    this.experimentListChanged.emit(newExperiments);\n  }\n\n  drop(e: CdkDragDrop<Array<Task>>) {\n    if (e.previousIndex === e.currentIndex) { return; }\n    this.reorderExperiments(e.previousIndex, e.currentIndex);\n  }\n\n  trackByFn(index, item) {\n    return item.id;\n  }\n\n  changeHovered(i, val) {\n    this.hovered[i] = val;\n  }\n}\n","<ng-container *cdkPortal>\n  <ng-content></ng-content>\n</ng-container>","import {\n  Component, ViewChild, ApplicationRef, Injector,\n  OnDestroy, AfterViewInit, Inject, ComponentFactoryResolver, EventEmitter, Output, ViewContainerRef, Input\n} from '@angular/core';\nimport {CdkPortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n@Component({\n  selector   : 'sm-portal',\n  templateUrl: './portal.component.html',\n  styleUrls  : ['./portal.component.scss']\n})\nexport class PortalComponent implements AfterViewInit, OnDestroy {\n  @Input() outletId: string;\n\n  @ViewChild(CdkPortal, { static: true }) portal: CdkPortal;\n\n  host: DomPortalOutlet;\n\n  @Output() buttonClicked: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    private cfr: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector) {\n  }\n\n  ngAfterViewInit(): void {\n    this.host = new DomPortalOutlet(\n      this.document.getElementById(this.outletId),\n      this.cfr, this.appRef, this.injector\n    );\n\n    this.host.attach(this.portal);\n  }\n\n  ngOnDestroy(): void {\n    this.host.detach();\n  }\n\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../../features/experiments/shared/experiments.const';\nimport {IExperimentDetail} from '../../../../features/experiments-compare/experiments-compare-models';\nimport {TIME_FORMAT_STRING} from '../../../constants';\n\n@Component({\n  selector: 'sm-experiment-compare-general-data',\n  templateUrl: './experiment-compare-general-data.component.html',\n  styleUrls: ['./experiment-compare-general-data.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentCompareGeneralDataComponent {\n\n  public EXPERIMENTS_STATUS_LABELS = EXPERIMENTS_STATUS_LABELS;\n\n  @Input() experiment: IExperimentDetail;\n  @Input() isOrigin: boolean = false;\n  @Input() tags: string[];\n  @Output() copyIdClicked = new EventEmitter();\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n\n  copyToClipboard() {\n    this.copyIdClicked.emit();\n  }\n\n  buildUrl() {\n    return `/projects/${this.experiment.project ? this.experiment.project.id : '*'}/experiments/${this.experiment.id}`;\n  }\n}\n","<header>\n  <div class=\"project ellipsis\">{{experiment.project?.name}}</div>\n  <div [smTooltip]=\"experiment.name\" class=\"experiment-name al-header\"><a smEllipsisMiddleDirective [routerLink]=\"buildUrl()\">{{experiment.name}}</a>\n  </div>\n  <i class=\"icon i-id-fix id-icon pointer\"\n     [smTooltip]=\"experiment.id\"\n     ngxClipboard\n     [cbContent]=\"experiment.id\"\n     (cbOnSuccess)=\"copyToClipboard()\"></i>\n</header>\n<sm-tag-list [tags]=\"tags\"></sm-tag-list>\n<div class=\"general-info\">\n  <i [class]=\"'mr-1 icon sm bw i-'+ experiment.status\"></i>\n  <span>{{EXPERIMENTS_STATUS_LABELS[experiment.status]}}</span>\n  <span class=\"dot\"></span>\n  <span class=\"flex-shrink-0\">{{experiment.last_iteration | number | NA}} iterations</span>\n  <span class=\"dot\"></span>\n  <span class=\"flex-shrink-1\" [smTooltip]=\"(experiment.last_update | date : TIME_FORMAT_STRING) || ''\">Last updated {{experiment.last_update | timeAgo | NA}}</span>\n</div>\n","<sm-compare-card-list\n  [experiments]=\"experiments\"\n  [baseExperiment]=\"baseExperiment\"\n  [ngClass]=\"calculatingTree ? 'pending' : ''\"\n  (experimentListChanged)=\"experimentListChanged($event)\"\n  (toggled)=\"afterResize()\"\n>\n  <div *compareCardHeader=\"let experiment; let i = index\">\n    <sm-experiment-compare-general-data\n      [experiment]=\"experiment\"\n      [tags]=\"experimentTags[experiment.id]\"\n      (copyIdClicked)=\"copyIdToClipboard()\">\n    </sm-experiment-compare-general-data>\n  </div>\n  <div #treeCardBody class=\"tree-card-body\" *compareCardBody=\"let experiment; let i = index\">\n    <div class=\"section h-100\" *ngIf=\"experimentsDataControl[experiment.id]\">\n      <!--      TODO: move is-not-origin class outside nodes tree-->\n      <ng-template let-dataSource=\"dataSource\"\n                   let-treeControl=\"treeControl\"\n                   [ngTemplateOutletContext]=\"{dataSource: experimentsDataControl[experiment.id][0],\n                                               treeControl: experimentsDataControl[experiment.id][1]}\"\n                   [ngTemplateOutlet]=\"selfie\" #selfie>\n        <cdk-virtual-scroll-viewport #virtualScrollRef class=\"virtual-scroll-container\" [class.is-not-origin]=\"i > 0\" itemSize=\"28\" minBufferPx=\"280\" maxBufferPx=\"560\">\n          <ng-container *cdkVirtualFor=\"let node of dataSource; let i = index\">\n            <div class=\"node\" [class.parent]=\"node.hasChildren\">\n              <div *ngIf=\"node.hasChildren\" class=\"section\" [ngClass]=\"'depth-' + node.level\">\n                <div class=\"content\"\n                     (click)=\"toggleNode(node)\"\n                     [ngClass]=\"node?.data?.classStyle\"\n                     [class.selected-diff]=\"checkIfSelectedPath(node.data)\"\n                     [class.identical-row]=\"!allPaths[node.data.path]\">\n                  <i class=\"fas\" [style.margin-left.px]=\"2 + node.level * 20\" [ngClass]=\"treeControl.isExpanded(node) ? 'fa-chevron-down' : 'fa-chevron-right'\"></i>\n                  <span\n                    class=\"title-key\"\n                    [class.ellipsis]=\"showEllipsis\"\n                    [style.width.px]=\"showEllipsis ? nativeWidth - 45 - node.level * 20 : null\"\n                  >{{(renameMap[node.data.key] || node.data.key) | hideHashTitle}}</span>\n                  <i *ngIf=\"node.data.tooltip\" class=\"al-icon sm al-ico-description node-icon\" customClass=\"hyper-parameters-tooltip\" [smTooltip]=\"node.data.tooltip\"></i>\n                </div>\n              </div>\n              <div *ngIf=\"!node.hasChildren\" class=\"section\" (click)=\"keyClicked(node.data)\">\n                <div [style.padding-left.px]=\"2 + node.level * 20\" [ngClass]=\"{\n                  'node-item-container': true,\n                  'identical-row': checkIfIdenticalRow(node.data),\n                  'selected-diff': checkIfSelectedPath(node.data),\n                  'not-existing-on-origin': !node.data.existOnOrigin,\n                  'not-existing-on-compared': !node.data.existOnCompared,\n                  'diff-row': !node.data.isValueEqualToOrigin,\n                  'equal-row': node.data.isValueEqualToOrigin,\n                  'hide-identical-mode': hideIdenticalFields\n                }\">\n                  <div>\n                    <pre *ngIf=\"(node.data.value !== undefined) || (node.data.existOnOrigin && node.data.existOnCompared)\"\n                         [class.no-ellipsis]=\"((node.data.key | hideHash) + node.data.value).length < 51\"\n                         [class.with-ellipsis]=\"showEllipsis\"\n                         [style.width.px]=\"showEllipsis ? nativeWidth - 45 - node.level * 20 : null\"\n                    >{{node.data.key | hideHash}}{{node.data.value}}<i class=\"al-icon sm al-ico-line-expand extend-toggle\" [class.fa-rotate-180]=\"!showEllipsis\" (click)=\"toggleEllipsis(); $event.stopPropagation()\"></i>\n                    </pre>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </ng-template>\n    </div>\n  </div>\n</sm-compare-card-list>\n\n\n<sm-portal outletId=\"searchDiff\">\n  <div class=\"btn-group mr-2\" role=\"group\">\n    <sm-search [value]=\"searchText\"\n               [minimumChars]=\"1\"\n               [debounceTime]=\"300\"\n               (keydown.enter)=\"findNext()\"\n               (valueChanged)=\"find($event)\"\n    ></sm-search>\n\n    <button class=\"btn btn-secondary prev\" smTooltip=\"Previous occurrence\" [disabled]=\"foundPaths.length === 0 \" (click)=\"findPrev()\">\n      <i class=\"fas fa-chevron-up\"></i>\n    </button>\n\n    <button class=\"btn btn-secondary next\" smTooltip=\"Next occurrence\" [disabled]=\"foundPaths.length === 0 \" (click)=\"findNext()\">\n      <i class=\"fas fa-chevron-down\"></i>\n    </button>\n  </div>\n  <span [class.hidden]=\"searchText.length === 0 \"> Match {{foundPaths.length === 0 ? '0' : foundIndex + 1}} / {{foundPaths.length}}</span>\n</sm-portal>\n\n<sm-portal outletId=\"nextDiff\">\n  <button class=\"btn btn-secondary btn-arrow mr-3\" smTooltip=\"Previous diff\" (click)=\"goToNextDiff('up')\">\n    <i class=\"fas fa-arrow-up\"></i>\n  </button>\n\n  <button class=\"btn btn-secondary btn-arrow\" smTooltip=\"Next diff\" (click)=\"goToNextDiff('down')\">\n    <i class=\"fas fa-arrow-down\"></i>\n  </button>\n</sm-portal>\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef, HostListener,\n  OnInit, QueryList,\n  ViewChildren\n} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {experimentListUpdated, setExperiments} from '../../actions/experiments-compare-details.actions';\nimport {selectExperimentsDetails} from '../../reducers';\nimport {filter, take, tap} from 'rxjs/operators';\nimport {ExperimentCompareTree, IExperimentDetail} from '../../../../features/experiments-compare/experiments-compare-models';\nimport {\n  convertConfigurationFromExperiments, convertContainerScriptFromExperiments,\n  convertExperimentsArrays, convertNetworkDesignFromExperiments,\n  getAllKeysEmptyObject,\n  isDetailsConverted\n} from '../../jsonToDiffConvertor';\nimport {ExperimentCompareBase} from '../experiment-compare-base';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {ConfigurationItem} from '../../../../business-logic/model/tasks/configurationItem';\n\n@Component({\n  selector: 'sm-experiment-compare-details',\n  templateUrl: './experiment-compare-details.component.html',\n  styleUrls: ['./experiment-compare-details.component.scss', '../../cdk-drag.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentCompareDetailsComponent extends ExperimentCompareBase implements OnInit, AfterViewInit {\n  public showEllipsis: boolean = true;\n  public nativeWidth = 410;\n\n  private treeCardBody: HTMLDivElement;\n  @ViewChildren('treeCardBody') treeCardBodies: QueryList<ElementRef<HTMLDivElement>>;\n\n  @HostListener('window:resize')\n  afterResize() {\n    window.setTimeout(() => {\n      this.nativeWidth = Math.max(this.treeCardBody.getBoundingClientRect().width, 410);\n      this.cdr.detectChanges();\n    });\n  }\n\n  constructor(\n    public router: Router,\n    public store: Store<IExperimentInfoState>,\n    public changeDetection: ChangeDetectorRef,\n    public activeRoute: ActivatedRoute,\n    private cdr: ChangeDetectorRef\n  ) {\n    super(router, store, changeDetection, activeRoute);\n  }\n\n  experiments$ = this.store.pipe(select(selectExperimentsDetails));\n\n  ngOnInit() {\n    this.onInit();\n    this.routerParamsSubscription = this.taskIds$.subscribe((experimentIds: string) => this.store.dispatch(experimentListUpdated({ids: experimentIds.split(',')})));\n\n    this.experimentsSubscription = this.experiments$.pipe(\n      filter(experiments => !!experiments && experiments.length > 0),\n      tap(experiments => {\n        this.syncUrl(experiments);\n        this.extractTags(experiments);\n      }),\n    ).subscribe(experiments => {\n      this.originalExperiments = experiments.reduce((acc, exp) => {\n        acc[exp.id] = isDetailsConverted(exp) ? this.originalExperiments[exp.id] : exp;\n        return acc;\n      }, {} as { [id: string]: ConfigurationItem });\n      experiments = Object.values(this.originalExperiments).map(experiment => convertExperimentsArrays(experiment, this.originalExperiments[experiments[0].id], experiments));\n      experiments = convertConfigurationFromExperiments(experiments, this.originalExperiments);\n      experiments = convertNetworkDesignFromExperiments(experiments, this.originalExperiments);\n      experiments = convertContainerScriptFromExperiments(experiments, this.originalExperiments);\n\n      this.resetComponentState(experiments);\n      this.calculateTree(experiments);\n    });\n  }\n\n\n\n  ngAfterViewInit() {\n    this.treeCardBodies.changes\n      .pipe(filter(list => list.first), take(1))\n      .subscribe((list: QueryList<ElementRef<HTMLDivElement>>) => {\n        this.treeCardBody = list.first.nativeElement;\n        this.nativeWidth = Math.max(this.treeCardBody.getBoundingClientRect().width, 410);\n      });\n  }\n\n  buildCompareTree(experiments: Array<IExperimentDetail>, hasDataFeature?: boolean): ExperimentCompareTree {\n    const mergedExperiment = getAllKeysEmptyObject(experiments);\n    return experiments\n      .reduce((acc, cur) => {\n        acc[cur.id] = this.buildExperimentTree(cur, this.baseExperiment, mergedExperiment, hasDataFeature);\n\n        return acc;\n      }, {} as ExperimentCompareTree);\n  }\n\n  experimentListChanged(experiments: Array<IExperimentDetail>) {\n    this.store.dispatch(setExperiments({experiments}));\n  }\n\n  toggleEllipsis() {\n    this.showEllipsis = !this.showEllipsis;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\ninterface SyncScrollData {\n  scrollTop: number;\n  scrollLeft: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SyncScrollService {\n\n  private scrollSubject: Subject<SyncScrollData> = new Subject();\n  private timer: NodeJS.Timer;\n  public  originalTarget: EventTarget;\n\n  setScroll(scroll: SyncScrollData) {\n    this.scrollSubject.next(scroll);\n  }\n\n  getScroll(): Observable<SyncScrollData> {\n    return this.scrollSubject.asObservable();\n  }\n\n  updateOriginalTarget(target: EventTarget) {\n    this.originalTarget = this.originalTarget || target;\n    clearInterval(this.timer);\n    this.timer = setTimeout( () => this.originalTarget = null, 200);\n  }\n}\n","import {Directive, ElementRef, HostListener, OnDestroy, Renderer2} from '@angular/core';\nimport {SyncScrollService} from '../../services/sync-scroll.service';\nimport {Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n@Directive({\n  selector: '[smSyncScroll]'\n})\nexport class SyncScrollDirective implements OnDestroy {\n\n  private subscription: Subscription;\n\n  @HostListener('scroll', ['$event'])\n  public onScroll(event: MouseEvent): void {\n    this.syncScrollService.updateOriginalTarget(event.target);\n    if (this.syncScrollService.originalTarget === event.target) {\n      this.syncScrollService.setScroll({\n        scrollTop : (<HTMLInputElement>event.target).scrollTop,\n        scrollLeft: (<HTMLInputElement>event.target).scrollLeft,\n      });\n    }\n  }\n\n  constructor(private el: ElementRef, private syncScrollService: SyncScrollService, private renderer: Renderer2) {\n    this.subscription = this.syncScrollService.getScroll()\n      .pipe(filter( _ => this.syncScrollService.originalTarget !== this.el.nativeElement))\n      .subscribe(scrollData => {\n      if (this.el.nativeElement.scrollTop !== scrollData.scrollTop) {\n        this.renderer.setProperty(this.el.nativeElement, 'scrollTop', scrollData.scrollTop);\n      }\n      if (this.el.nativeElement.scrollLeft !== scrollData.scrollLeft) {\n        this.renderer.setProperty(this.el.nativeElement, 'scrollLeft', scrollData.scrollLeft);\n\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","<div class=\"table-diff-row header\">\n  <div (click)=\"sortByClicked('key')\" class=\"pointer\">{{keyTitle}}\n    <i class=\"fas\"\n       [ngClass]=\"{\n       'fa-sort-down': sortConfig.keyOrValue === 'key' && sortConfig.order==='asc',\n       'fa-sort-up': sortConfig.keyOrValue === 'key' && sortConfig.order==='desc',\n       'fa-sort show-only-on-hover': sortConfig.keyOrValue === 'value'}\"></i>\n  </div>\n  <div (click)=\"sortByClicked('value')\" class=\"pointer\">{{valueTitle}}\n    <i class=\"fas\"\n       [ngClass]=\"{\n       'fa-sort-down': sortConfig.keyOrValue === 'value' && sortConfig.order==='asc',\n       'fa-sort-up': sortConfig.keyOrValue === 'value' && sortConfig.order==='desc',\n       'fa-sort show-only-on-hover': sortConfig.keyOrValue === 'key'}\"></i>\n  </div>\n</div>\n<div *ngFor=\"let data of keyValueArray\" class=\"table-diff-row\">\n  <div *ngIf=\"data.value || data.value === 0\">{{data.key}}</div>\n  <div [title]=\"data.value\">\n    <ng-template\n      [ngTemplateOutlet]=\"templateRef\"\n      [ngTemplateOutletContext]=\"{$implicit: data.value}\">\n    </ng-template>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef\n} from '@angular/core';\n\nexport interface IKeyValue {\n  key: string;\n  value: number;\n}\n\n\nexport interface ITableDiffSortBy {\n  keyOrValue: 'key' | 'value';\n  order: 'asc' | 'desc';\n  keyValueArray: Array<IKeyValue>;\n}\n\n@Component({\n  selector: 'al-table-diff',\n  templateUrl: './table-diff.component.html',\n  styleUrls: ['./table-diff.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class TableDiffComponent implements OnInit {\n  @Input() keyTitle: string;\n  @Input() valueTitle: string;\n  @Input() keyValueArray: Array<IKeyValue>;\n  @Input() isOrigin = false;\n  @Input() sortConfig: ITableDiffSortBy;\n\n  @Output() sortByChanged = new EventEmitter<ITableDiffSortBy>();\n  @ContentChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  sortByClicked(sortBy) {\n    this.sortByChanged.emit({ keyOrValue: sortBy, order: this.toggleSortOrder(this.sortConfig.order), keyValueArray: this.keyValueArray });\n  }\n\n  toggleSortOrder(order) {\n    return order === 'asc' ? 'desc' : 'asc';\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'getKeyValueArrayPipe',\n})\nexport class GetKeyValueArrayPipePipe implements PipeTransform {\n\n  transform(metricNode: any, allKeysEmptyObject, keyOrderSortConfig, valueKey = 'value', args?: any): any {\n    const keyValueObj = {};\n\n    Object.values(allKeysEmptyObject[metricNode.key]).forEach((variantObj: any) => {\n      keyValueObj[variantObj.variant] = '';\n    });\n    if (metricNode.value || metricNode.value === 0) {\n      Object.values(metricNode.value).forEach((variantObj: any) => {\n        keyValueObj[variantObj.variant] = variantObj[valueKey];\n      });\n    }\n    let keyValueArray = [];\n    if (!keyOrderSortConfig) {\n      keyValueArray = Object.keys(keyValueObj).map(key => {\n        return {key, 'value': keyValueObj[key]};\n      });\n      keyValueArray.sort(function (a, b) {\n        return a.key.toLowerCase().localeCompare(b.key.toLowerCase());\n      });\n    } else {\n      keyValueArray = keyOrderSortConfig.keyOrder.map(key => {\n        return {key, 'value': keyValueObj[key]};\n      });\n    }\n    return keyValueArray;\n\n  }\n\n}\n","<sm-compare-card-list\n  *ngIf=\"comparedTasks\"\n  [experiments]=\"experiments\"\n  [baseExperiment]=\"experiments[0]\"\n  (experimentListChanged)=\"experimentListChanged($event)\"\n>\n  <div *compareCardHeader=\"let experiment;\">\n    <sm-experiment-compare-general-data [experiment]=\"experiment\" (copyIdClicked)=\"copyIdToClipboard()\">\n    </sm-experiment-compare-general-data>\n  </div>\n  <div class=\"tree-card-body\" smSyncScroll *compareCardBody=\"let experiment; let i = index;\">\n    <div *ngFor=\"let node of comparedTasks[i]\" class=\"node\" [ngClass]=\"node?.metaData?.classStyle\">\n      <div class=\"content\" (click)=\"collapsedToggled(node)\">\n        <i class=\"fas\" [style.margin-left.px]=\"2 + node.level * 20\" [ngClass]=\"realIsNodeOpen(node) ? 'fa-chevron-down' : 'fa-chevron-right'\"></i>\n        {{node.data.key}}\n      </div>\n      <al-table-diff *ngIf=\"realIsNodeOpen(node)\"\n                     [valueTitle]=\"valuesMode.name | uppercase\" keyTitle=\"VARIANT\"\n                     [isOrigin]=\"i===0\"\n                     (sortByChanged)=\"metricSortChanged($event,node.data)\"\n                     [sortConfig]=\"(sortOrder$| async)[node.data.key] || {order:'asc', keyOrValue: 'key'}\"\n                     [keyValueArray]=\"node.data | getKeyValueArrayPipe:allKeysEmptyObject:(sortOrder$| async)[node.data.key]:valuesMode.key\">\n        <ng-template\n          let-metricValue>\n          {{metricValue}}\n        </ng-template>\n      </al-table-diff>\n    </div>\n  </div>\n</sm-compare-card-list>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {selectRouterParams, selectRouterQueryParams} from '../../../core/reducers/router-reducer';\nimport {select, Store} from '@ngrx/store';\nimport {distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {get, has} from 'lodash/fp';\nimport {Observable, Subscription} from 'rxjs';\nimport * as metricsValuesActions from '../../actions/experiments-compare-metrics-values.actions';\nimport {selectCompareMetricsValuesExperiments, selectCompareMetricsValuesSortConfig, selectRefreshing} from '../../reducers';\nimport {Router} from '@angular/router';\nimport {addMessage} from '../../../core/actions/layout.actions';\nimport {TreeNode} from '../../shared/experiments-compare-details.model';\nimport {createDiffObjectScalars, getAllKeysEmptyObject} from '../../jsonToDiffConvertor';\n\ninterface ValueMode {\n  key: string;\n  name: string;\n}\n\nconst VALUE_MODES: { [mode: string]: ValueMode } = {\n  'min_values': {\n    key: 'min_value',\n    name: 'Min Value'\n  },\n  'max_values': {\n    key: 'max_value',\n    name: 'Max Value'\n  },\n  'values': {\n    key: 'value',\n    name: 'Last Value'\n  },\n};\n\n@Component({\n  selector: 'sm-experiment-compare-metric-values',\n  templateUrl: './experiment-compare-metric-values.component.html',\n  styleUrls: ['./experiment-compare-metric-values.component.scss', '../../cdk-drag.scss']\n})\nexport class ExperimentCompareMetricValuesComponent implements OnInit, OnDestroy {\n  public sortOrder$: Observable<any>;\n  public comparedTasks$: Observable<any>;\n  private selectRefreshing$: Observable<{ refreshing: boolean; autoRefresh: boolean }>;\n\n  private comparedTasksSubscription: Subscription;\n  private refreshingSubscription: Subscription;\n  private paramsSubscription: Subscription;\n  private queryParamsSubscription: Subscription;\n\n  public comparedTasks: TreeNode<any>;\n  public allKeysEmptyObject = {};\n  public refreshDisabled: boolean = false;\n  private paths = [];\n  public experiments = [];\n  private taskIds: string;\n  public valuesMode: ValueMode;\n\n  constructor(private router: Router, public store: Store<any>, private changeDetection: ChangeDetectorRef) {\n    this.comparedTasks$ = this.store.pipe(select(selectCompareMetricsValuesExperiments));\n    this.sortOrder$ = this.store.pipe(select(selectCompareMetricsValuesSortConfig));\n    this.selectRefreshing$ = this.store.select(selectRefreshing);\n  }\n\n  ngOnInit() {\n    this.queryParamsSubscription = this.store.pipe(\n      select(selectRouterQueryParams),\n      map(params => get('scalars', params)),\n      distinctUntilChanged()\n    ).subscribe((valuesMode) => {\n      this.valuesMode = VALUE_MODES[valuesMode] || VALUE_MODES['values'];\n      this.convertExperimentsToNodes(this.experiments.map(exp => exp.last_metrics));\n    });\n\n    this.paramsSubscription = this.store.pipe(\n      select(selectRouterParams),\n      map(params => get('ids', params)),\n      tap(taskIds => this.taskIds = taskIds),\n      filter(taskIds => !!taskIds && taskIds !== this.getExperimentIdsParams(this.experiments))\n    )\n      .subscribe((experimentIds: string) => {\n        this.store.dispatch(new metricsValuesActions.GetComparedExperimentsMetricsValues({taskIds: experimentIds.split(',')}));\n      });\n\n    this.comparedTasksSubscription = this.comparedTasks$\n      .pipe(\n        filter(exp => !!exp),\n        tap(experiments => this.experiments = experiments),\n        tap(experiments => this.syncUrl(experiments, this.taskIds)),\n        map(experiments => experiments.map(exp => exp.last_metrics)))\n      .subscribe(experimentsLastMetrics => {\n        this.refreshDisabled = false;\n        this.convertExperimentsToNodes(experimentsLastMetrics);\n        this.changeDetection.detectChanges();\n      });\n\n    this.refreshingSubscription = this.selectRefreshing$.pipe(filter(({refreshing}) => refreshing))\n      .subscribe(({autoRefresh}) => this.store.dispatch(\n        new metricsValuesActions.GetComparedExperimentsMetricsValues({taskIds: this.taskIds.split(','), autoRefresh})\n      ));\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new metricsValuesActions.ResetState());\n    this.paramsSubscription.unsubscribe();\n    this.queryParamsSubscription.unsubscribe();\n    this.comparedTasksSubscription.unsubscribe();\n    this.refreshingSubscription.unsubscribe();\n  }\n\n  convertExperimentsToNodes(experiments) {\n    if (experiments) {\n      experiments = experiments.map(experiment => {\n        if (experiment) {\n          const convertedExperiment = {};\n          Object.keys(experiment).map(key => {\n            convertedExperiment[Object.values(experiment[key])[0]['metric']] = experiment[key];\n          });\n          return convertedExperiment;\n        }\n      });\n      this.allKeysEmptyObject = getAllKeysEmptyObject(experiments);\n      this.comparedTasks = experiments.map(experiment => createDiffObjectScalars(this.allKeysEmptyObject, experiments[0], experiment, this.metaDataTransformer, ''),);\n    }\n  }\n\n  public metaDataTransformer = (data, key, path, extraParams) => {\n    const fullPath = path.concat([key]);\n    const keyExists = has(fullPath, extraParams.comparedObject);\n    return {\n      classStyle: keyExists ? 'key-exists' : 'key-not-exists',\n    };\n  };\n\n  trackByFn(index, item) {\n    return item.id;\n  }\n\n  realIsNodeOpen(node) {\n    return this.paths.includes(node.data.key);\n  }\n\n  collapsedToggled(node) {\n    if (!this.realIsNodeOpen(node)) {\n      this.paths.push(node.data.key);\n    } else {\n      this.paths = this.paths.filter(path => path !== node.data.key);\n    }\n  }\n\n  metricSortChanged(event, nodeData) {\n    const orderedKeys = (this.sortByKeyOrValue(event.keyOrValue, event.keyValueArray, event.order)).map(keyValue => keyValue.key);\n    this.store.dispatch(new metricsValuesActions.SetMetricValuesSortBy(nodeData.key, event.keyOrValue, event.order, orderedKeys));\n  }\n\n  sortByKeyOrValue(sortBy, keyValueArray, order) {\n    if (sortBy === 'key') {\n      return keyValueArray.sort(function (a, b) {\n        if (order === 'asc') {\n          return a.key.toLowerCase().localeCompare(b.key.toLowerCase());\n        } else {\n          return b.key.toLowerCase().localeCompare(a.key.toLowerCase());\n        }\n      });\n    } else {\n      return keyValueArray.sort(function (a, b) {\n        if (order === 'asc') {\n          return a.value - b.value;\n        } else {\n          return b.value - a.value;\n        }\n      });\n    }\n  }\n\n  experimentListChanged(experiments: Array<any>) {\n    this.store.dispatch(new metricsValuesActions.SetComparedExperiments(experiments));\n  }\n\n  private syncUrl(experiments: Array<any>, urlParams: string) {\n    const newParams = this.getExperimentIdsParams(experiments);\n    if (newParams !== urlParams) {\n      this.router.navigateByUrl(this.router.url.replace(urlParams, newParams));\n    }\n  }\n\n  private getExperimentIdsParams(experiments: Array<any>): string {\n    return experiments ? experiments.map(e => e.id).toString() : '';\n  }\n\n  copyIdToClipboard() {\n    this.store.dispatch(addMessage('success', 'Copied to clipboard'));\n  }\n}\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {Observable, Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {isEqual} from 'lodash/fp';\nimport {mergeMultiMetrics, mergeMultiMetricsGroupedVariant} from '../../../tasks/tasks.utils';\nimport {scrollToElement} from '../../../shared/utils/shared-utils';\nimport {GetMultiScalarCharts, ResetExperimentMetrics, SetExperimentMetricsSearchTerm, SetExperimentSettings, SetSelectedExperiments} from '../../actions/experiments-compare-charts.actions';\nimport {selectCompareSelectedSettingsGroupBy, selectCompareSelectedSettingsSmoothWeight, selectCompareSelectedSettingsxAxisType, selectCompareTasksScalarCharts, selectExperimentMetricsSearchTerm, selectRefreshing, selectSelectedExperimentSettings, selectSelectedSettingsHiddenScalar, selectShowScalarsOptions} from '../../reducers';\nimport {ScalarKeyEnum} from '../../../../business-logic/model/events/scalarKeyEnum';\nimport {toggleShowScalarOptions} from '../../actions/compare-header.actions';\nimport {GroupByCharts} from '../../../experiments/reducers/common-experiment-output.reducer';\nimport {GroupedList} from '../../../shared/ui-components/data/selectable-grouped-filter-list/selectable-grouped-filter-list.component';\nimport {ExtFrame} from '../../../shared/experiment-graphs/single-graph/plotly-graph-base';\n\n\n@Component({\n  selector   : 'sm-experiment-compare-scalar-charts',\n  templateUrl: './experiment-compare-scalar-charts.component.html',\n  styleUrls  : ['./experiment-compare-scalar-charts.component.scss']\n})\nexport class ExperimentCompareScalarChartsComponent implements OnInit, OnDestroy {\n\n  public smoothWeight$: Observable<number>;\n  public xAxisType$: Observable<ScalarKeyEnum>;\n  public groupBy$: Observable<GroupByCharts>;\n  public showSettingsBar$: Observable<boolean>;\n  private selectRefreshing$: Observable<{ refreshing: boolean, autoRefresh: boolean }>;\n  private routerParams$: Observable<any>;\n  public metrics$: Observable<any>;\n  public experimentSettings$: Observable<any>;\n  public searchTerm$: Observable<string>;\n  public listOfHidden: Observable<Array<any>>;\n\n  private metricsSubscription: Subscription;\n  private settingsSubscription: Subscription;\n  private routerParamsSubscription: Subscription;\n  private refreshingSubscription: Subscription;\n  private xAxisSub: Subscription;\n  private groupBySub: Subscription;\n\n  public graphList: GroupedList = {};\n  public selectedGraph: string = null;\n  private taskIds: Array<string>;\n  public graphs: { [key: string]: ExtFrame[] };\n  public refreshDisabled = false;\n  public showSettingsBar: boolean = false;\n  public groupBy: GroupByCharts;\n  private metrics: GroupedList;\n\n  groupByOptions = [\n    {\n      name: 'Metric',\n      value: GroupByCharts.Metric\n    },\n    {\n      name: 'Metric + Variant',\n      value: GroupByCharts.None\n    }\n  ];\n\n  constructor(private store: Store<IExperimentInfoState>, private changeDetection: ChangeDetectorRef) {\n    this.listOfHidden = this.store.pipe(select(selectSelectedSettingsHiddenScalar));\n    this.searchTerm$ = this.store.pipe(select(selectExperimentMetricsSearchTerm));\n    this.showSettingsBar$ = this.store.pipe(select(selectShowScalarsOptions));\n    this.smoothWeight$ = this.store.select(selectCompareSelectedSettingsSmoothWeight);\n    this.xAxisType$ = this.store.select(selectCompareSelectedSettingsxAxisType);\n    this.groupBy$ = this.store.select(selectCompareSelectedSettingsGroupBy);\n    this.selectRefreshing$ = this.store.select(selectRefreshing);\n    this.metrics$ = this.store.pipe(\n      select(selectCompareTasksScalarCharts),\n      filter(metrics => !!metrics),\n      distinctUntilChanged()\n    );\n    this.experimentSettings$ = this.store.pipe(\n      select(selectSelectedExperimentSettings),\n      filter(settings => !!settings),\n      map(settings => settings ? settings.selectedScalar : null),\n      distinctUntilChanged()\n    );\n\n    this.routerParams$ = this.store.pipe(\n      select(selectRouterParams),\n      filter(params => !!params.ids),\n      distinctUntilChanged(),\n      tap(() => this.refreshDisabled = true)\n    );\n\n    this.xAxisSub = this.xAxisType$\n      .pipe(filter((axis) => !!axis))\n      .subscribe((axis) => this.store.dispatch(new GetMultiScalarCharts({taskIds: this.taskIds, cached: true})));\n\n    this.groupBySub = this.groupBy$\n      .subscribe(groupBy => {\n        this.groupBy = groupBy;\n        this.prepareGraphsAndUpdate(this.metrics);\n      });\n  }\n\n  ngOnInit() {\n    this.metricsSubscription = this.metrics$\n      .subscribe((metricsWrapped) => {\n        this.refreshDisabled = false;\n        const metrics = metricsWrapped.metrics || {};\n        this.metrics = metrics;\n        this.prepareGraphsAndUpdate(metrics);\n      });\n\n    this.settingsSubscription = this.experimentSettings$\n      .subscribe((selectedMetric) => {\n        this.selectedGraph = selectedMetric;\n        scrollToElement(this.selectedGraph);\n      });\n\n    this.routerParamsSubscription = this.routerParams$\n      .subscribe(params => {\n        if (!this.taskIds || this.taskIds.join(',') !== params.ids) {\n          this.taskIds = params.ids.split(',');\n          this.store.dispatch(new SetSelectedExperiments({selectedExperiments: this.taskIds}));\n          this.store.dispatch(new GetMultiScalarCharts({taskIds: this.taskIds}));\n        }\n      });\n\n    this.refreshingSubscription = this.selectRefreshing$.pipe(filter(({refreshing}) => refreshing))\n      .subscribe(({autoRefresh}) => this.store.dispatch(new GetMultiScalarCharts({taskIds: this.taskIds, autoRefresh})));\n  }\n\n  private prepareGraphsAndUpdate(metrics) {\n    if (metrics) {\n      const merged = this.groupBy === 'metric' ? mergeMultiMetricsGroupedVariant(metrics) : mergeMultiMetrics(metrics);\n      this.graphList = this.groupBy === 'metric' ? this.buildNestedListWithoutChildren(merged) : metrics;\n      if (!this.graphs || !isEqual(merged, this.graphs)) {\n        this.graphs = merged;\n      }\n      this.changeDetection.detectChanges();\n    }\n  }\n\n  private buildNestedListWithoutChildren(merged: { [p: string]: ExtFrame[] }) {\n    return Object.keys(merged).reduce((acc, metric) => {\n      acc[metric] = {};\n      return acc;\n    }, {});\n  }\n\n  ngOnDestroy() {\n    this.metricsSubscription.unsubscribe();\n    this.settingsSubscription.unsubscribe();\n    this.routerParamsSubscription.unsubscribe();\n    this.xAxisSub.unsubscribe();\n    this.refreshingSubscription.unsubscribe();\n    this.resetMetrics();\n  }\n\n  metricSelected(id) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {selectedScalar: id}}));\n  }\n\n  hiddenListChanged(hiddenList) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {hiddenMetricsScalar: hiddenList}}));\n  }\n\n  searchTermChanged(searchTerm: string) {\n    this.store.dispatch(new SetExperimentMetricsSearchTerm({searchTerm: searchTerm}));\n  }\n\n  resetMetrics() {\n    this.store.dispatch(new ResetExperimentMetrics());\n  }\n\n  changeSmoothness($event: any) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {smoothWeight: $event}}));\n  }\n\n  changeXAxisType($event: ScalarKeyEnum) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {xAxisType: $event}}));\n  }\n\n  changeGroupBy($event: GroupByCharts) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {groupBy: $event}}));\n  }\n\n  toggleSettingsBar() {\n    this.store.dispatch(toggleShowScalarOptions());\n  }\n}\n","<div class=\"d-flex h-100\">\n  <div class=\"list-container\">\n    <sm-graph-settings-bar\n      [verticalLayout]=\"true\"\n      [smoothWeight]=\"smoothWeight$ | async\"\n      [xAxisType]=\"xAxisType$ | async\"\n      [groupBy]=\"groupBy\"\n      [groupByOptions]=\"groupByOptions\"\n      (changeWeight)=\"changeSmoothness($event)\"\n      (toggleSettings)=\"toggleSettingsBar()\"\n      (changeXAxisType)=\"changeXAxisType($event)\"\n      (changeGroupBy)=\"changeGroupBy($event)\"\n    ></sm-graph-settings-bar>\n    <sm-selectable-grouped-filter-list\n      [list]=\"graphList\"\n      [selected]=\"selectedGraph\"\n      [checkedList]=\"listOfHidden | async\"\n      [searchTerm]=\"searchTerm$ | async\"\n      (itemSelect)=\"metricSelected($event)\"\n      (hiddenChanged)=\"hiddenListChanged($event)\"\n      (searchTermChanged)=\"searchTermChanged($event)\"\n    >\n    </sm-selectable-grouped-filter-list>\n  </div>\n  <div class=\"graphs-container h-100\">\n    <sm-experiment-graphs\n      [metrics]=\"graphs\"\n      [hiddenList]=\"listOfHidden | async\"\n      [isGroupGraphs]=\"false\"\n      [isCompare]=\"true\"\n      [showSettings]=\"showSettingsBar$ | async\"\n      [smoothWeight]=\"(smoothWeight$ | async)\"\n      [xAxisType]=\"xAxisType$ | async\"\n      (resetGraphs)=\"resetMetrics()\"\n      (changeWeight)=\"changeSmoothness($event)\"\n      (changeXAxisType)=\"changeXAxisType($event)\"\n      (toggleSettings)=\"toggleSettingsBar()\"\n    >\n    </sm-experiment-graphs>\n  </div>\n</div>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SelectableListItem} from '../../../shared/ui-components/data/selectable-list/selectable-list.model';\nimport {Observable, Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {convertMultiPlots, prepareMultiPlots, sortMetricsList} from '../../../tasks/tasks.utils';\nimport {isEqual} from 'lodash/fp';\nimport {scrollToElement} from '../../../shared/utils/shared-utils';\nimport {GetMultiPlotCharts, ResetExperimentMetrics, SetExperimentMetricsSearchTerm, SetExperimentSettings, SetSelectedExperiments} from '../../actions/experiments-compare-charts.actions';\nimport {selectCompareTasksPlotCharts, selectExperimentMetricsSearchTerm, selectRefreshing, selectSelectedExperimentSettings, selectSelectedSettingsHiddenPlot} from '../../reducers';\nimport {ExtFrame} from '../../../shared/experiment-graphs/single-graph/plotly-graph-base';\n\n@Component({\n  selector: 'sm-experiment-compare-plots',\n  templateUrl: './experiment-compare-plots.component.html',\n  styleUrls: ['./experiment-compare-plots.component.scss']\n})\nexport class ExperimentComparePlotsComponent implements OnInit, OnDestroy {\n\n  private routerParams$: Observable<any>;\n  public listOfHidden: Observable<Array<any>>;\n  public plots$: Observable<any>;\n  public experimentSettings$: Observable<any>;\n  public searchTerm$: Observable<string>;\n  private selectRefreshing$: Observable<{refreshing: boolean, autoRefresh: boolean}>;\n\n  private plotsSubscription: Subscription;\n  private settingsSubscription: Subscription;\n  private routerParamsSubscription: Subscription;\n  private refreshingSubscription: Subscription;\n\n  public graphList: SelectableListItem[] = [];\n  public selectedGraph: string = null;\n  private experimentId: string;\n  private taskIds: Array<string>;\n  public graphs: { [key: string]: ExtFrame[] };\n  public refreshDisabled: boolean;\n\n\n  constructor(private store: Store<IExperimentInfoState>, private changeDetection: ChangeDetectorRef) {\n    this.listOfHidden = this.store.pipe(select(selectSelectedSettingsHiddenPlot));\n    this.searchTerm$ = this.store.pipe(select(selectExperimentMetricsSearchTerm));\n    this.selectRefreshing$ = this.store.select(selectRefreshing);\n    this.plots$ = this.store.pipe(\n      select(selectCompareTasksPlotCharts),\n      filter(metrics => !!metrics),\n      distinctUntilChanged()\n    );\n    this.experimentSettings$ = this.store.pipe(\n      select(selectSelectedExperimentSettings),\n      filter(settings => !!settings),\n      map(settings => settings ? settings.selectedPlot : null),\n      distinctUntilChanged()\n    );\n\n    this.routerParams$ = this.store.pipe(\n      select(selectRouterParams),\n      filter(params => !!params.ids),\n      distinctUntilChanged(),\n      tap(() => this.refreshDisabled = true)\n    );\n\n  }\n\n  ngOnInit() {\n    this.plotsSubscription = this.plots$\n      .subscribe((metricsPlots) => {\n        this.refreshDisabled = false;\n        const merged = prepareMultiPlots(metricsPlots);\n        this.graphList = this.prepareList(merged);\n        const newGraphs = convertMultiPlots(merged);\n        if (!this.graphs || !isEqual(newGraphs, this.graphs)) {\n          this.graphs = newGraphs;\n        }\n        this.changeDetection.detectChanges();\n      });\n\n    this.settingsSubscription = this.experimentSettings$\n      .subscribe((selectedPlot) => {\n        this.selectedGraph = selectedPlot;\n        scrollToElement(this.selectedGraph);\n      });\n\n    this.routerParamsSubscription = this.routerParams$\n      .subscribe(params => {\n        if (!this.taskIds || this.taskIds.join(',') !== params.ids) {\n          this.taskIds = params.ids.split(',');\n          this.store.dispatch(new SetSelectedExperiments({selectedExperiments: this.taskIds}));\n          this.store.dispatch(new GetMultiPlotCharts({taskIds: this.taskIds}));\n        }\n      });\n\n    this.refreshingSubscription = this.selectRefreshing$.pipe(filter(({refreshing}) => refreshing))\n    .subscribe(({autoRefresh}) => this.store.dispatch(new GetMultiPlotCharts({taskIds: this.taskIds, autoRefresh})));\n  }\n\n  ngOnDestroy() {\n    this.plotsSubscription.unsubscribe();\n    this.settingsSubscription.unsubscribe();\n    this.routerParamsSubscription.unsubscribe();\n    this.refreshingSubscription.unsubscribe();\n    this.resetMetrics();\n  }\n\n  private prepareList(metricsScalar: Object): Array<SelectableListItem> {\n    const list = metricsScalar ? Object.keys(metricsScalar) : [];\n    const sortedList = sortMetricsList(list);\n    return sortedList.map((item) => ({name: item, value: item}));\n  }\n\n  metricSelected(id) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {selectedPlot: id}}));\n  }\n\n  hiddenListChanged(hiddenList) {\n    this.store.dispatch(new SetExperimentSettings({id: this.taskIds, changes: {hiddenMetricsPlot: hiddenList}}));\n  }\n\n\n  searchTermChanged(searchTerm: string) {\n    this.store.dispatch(new SetExperimentMetricsSearchTerm({searchTerm: searchTerm}));\n  }\n\n  resetMetrics() {\n    this.store.dispatch(new ResetExperimentMetrics());\n  }\n}\n","<div class=\"d-flex h-100\">\n  <div class=\"list-container\">\n    <sm-selectable-filter-list\n      checkAllIcon=\"fa-eye\"\n      placeholder=\"Find plots\"\n      [list]=\"graphList\"\n      [selected]=\"selectedGraph\"\n      [checkedList]=\"listOfHidden | async\"\n      [searchTerm]=\"searchTerm$ | async\"\n      (itemSelect)=\"metricSelected($event)\"\n      (hiddenChanged)=\"hiddenListChanged($event)\"\n      (searchTermChanged)=\"searchTermChanged($event)\"\n    >\n    </sm-selectable-filter-list>\n  </div>\n  <div class=\"graphs-container h-100\">\n    <sm-experiment-graphs\n      [metrics]=\"graphs\"\n      [isCompare]=\"true\"\n      [isGroupGraphs]=\"true\"\n      [hiddenList]=\"listOfHidden | async\"\n      (resetGraphs)=\"resetMetrics()\"\n    >\n    </sm-experiment-graphs>\n  </div>\n</div>\n\n","<div class=\"graph-container\">\n  <div class=\"graph-title\">Hyper Parameters Impact on {{metric.name}}</div>\n  <div #parallelGraph>\n  </div>\n  <div class=\"d-flex legend-container\">\n    <div *ngFor=\"let experiment of experiments\" class=\"experiment-name\">\n      <span class=\"dot-container\">\n        <span #dot class=\"dot pallete-cursor\"\n              [style.background-color]=\"experimentsColors[experiment.id]\"\n              smChooseColor [colorButtonRef]=\"dot\"\n              [defaultColor]=\"experimentsColors[getExperimentNameForColor(experiment)]\"\n              [stringToColor]=\"getExperimentNameForColor(experiment)\">\n        </span>\n      </span>\n      <span\n        class=\"task-name pointer\"\n        (click)=\"toggleHideExperiment(experiment.id)\"\n        (mouseover)=\"highlightExperiment(experiment)\"\n        (mouseout)=\"removeHighlightExperiment()\"\n        [class.hide]=\"experiment.hidden\">\n        {{experiment.name + (experiment.duplicateName ? ('.' + (experiment.id|slice:0:5)) : '')}}\n      </span>\n    </div>\n  </div>\n</div>\n","import {Component, ElementRef, HostListener, Input, OnInit, ViewChild} from '@angular/core';\nimport {PlotlyGraphBase} from '../../../shared/experiment-graphs/single-graph/plotly-graph-base';\nimport {debounceTime, filter} from 'rxjs/operators';\nimport {ColorHashService} from '../../../shared/services/color-hash/color-hash.service';\nimport {get, getOr, isEqual, max, min, uniq, cloneDeep} from 'lodash/fp';\nimport {MetricValueType, SelectedMetric} from '../../reducers/experiments-compare-charts.reducer';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {select} from 'd3-selection';\nimport {sortCol} from '../../../shared/utils/tableParamEncode';\nimport {Store} from '@ngrx/store';\nimport {Axis, Color, ColorScale} from 'plotly.js';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let Plotly;\n\ninterface ExtraTask extends Task {\n  duplicateName: boolean;\n  hidden: boolean;\n}\n\ninterface Dimension extends Partial<Axis> {\n  label: string;\n  values: number[];\n  constraintrange;\n}\n\ninterface ParaPlotData {\n  type: string;\n  dimensions: Dimension[];\n  line: {\n    color: Color;\n    colorscale?: ColorScale;\n  };\n}\n\n@Component({\n  selector: 'sm-parallel-coordinates-graph',\n  templateUrl: './parallel-coordinates-graph.component.html',\n  styleUrls: ['./parallel-coordinates-graph.component.scss']\n})\nexport class ParallelCoordinatesGraphComponent extends PlotlyGraphBase implements OnInit {\n\n  private data: ParaPlotData[];\n  private _experiments: ExtraTask[];\n  private _metric: SelectedMetric;\n  public experimentsColors = {};\n  public filteredExperiments = [];\n  private timer: NodeJS.Timer;\n  private _parameters: string[];\n\n  @ViewChild('parallelGraph', {static: true}) parallelGraph: ElementRef;\n  private graphWidth: any;\n  private _metricValueType: MetricValueType;\n  private highlighted: ExtraTask;\n  private dimensionsOrder: string[];\n\n  @HostListener('window:resize')\n  redrawChart() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => this.drawChart(), 75);\n  }\n\n  @Input() set metricValueType(metricValueType: MetricValueType) {\n    this._metricValueType = metricValueType;\n    if (this.experiments) {\n      clearTimeout(this.timer);\n      this.timer = setTimeout(() => this.prepareGraph(), 200);\n    }\n  }\n\n  get metricValueType() {\n    return this._metricValueType;\n  }\n\n  @Input() set metric(metric) {\n    if (metric != this.metric) {\n      this._metric = metric;\n      if (this.experiments) {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => this.prepareGraph(), 200);\n      }\n    }\n  }\n\n  get metric(): SelectedMetric {\n    return this._metric;\n  }\n\n  @Input() set parameters(parameters) {\n    if (!isEqual(parameters, this.parameters)) {\n      this._parameters = parameters;\n      if (this.experiments) {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => this.prepareGraph(), 200);\n      }\n    }\n  }\n\n  get parameters(): string[] {\n    return this._parameters;\n  }\n\n\n  @Input() set experiments(experiments) {\n    let experimentsCopy = cloneDeep(experiments);\n    if (experimentsCopy && (!this.experiments || !isEqual(experimentsCopy.map(experiment => experiment.id), this.experiments.map(experiment => experiment.id)))) {\n\n      const experimentsNames = experimentsCopy.map(experiment => experiment.name);\n      experimentsCopy = experimentsCopy.map(experiment => ({\n        ...experiment,\n        duplicateName: experimentsNames.filter(name => name === experiment.name).length > 1,\n        hidden: this.filteredExperiments.includes(experiment.id)\n      }));\n      this._experiments = experimentsCopy;\n      if (experimentsCopy) {\n        this.prepareGraph();\n      }\n    }\n  }\n\n\n  get experiments(): ExtraTask[] {\n    return this._experiments;\n  }\n\n  private initColorSubscription(forceRedraw = false): void {\n    if (this.colorSub) {\n      // Subscription is already running\n      if (forceRedraw) {\n        this.colorSub.unsubscribe();\n      } else {\n        return;\n      }\n    }\n    this.colorSub = this.colorHash.getColorsObservable()\n      .pipe(\n        filter(colorObj => !!colorObj),\n        debounceTime(100)\n      )\n      .subscribe(() => {\n        this.prepareGraph();\n      });\n  }\n\n  constructor(\n    private colorHash: ColorHashService,\n    protected store: Store\n  ) {\n    super(store);\n  }\n\n  ngOnInit(): void {\n    this.initColorSubscription();\n  }\n\n  toggleHideExperiment(experimentId): void {\n    if (this.filteredExperiments.includes(experimentId)) {\n      this.filteredExperiments = this.filteredExperiments.filter(id => id !== experimentId);\n    } else {\n      this.filteredExperiments.push(experimentId);\n    }\n    this._experiments = this.experiments.map(experiment => ({...experiment, hidden: this.filteredExperiments.includes(experiment.id)}));\n    this.prepareGraph();\n  }\n\n  getStringColor(experiment: ExtraTask): string {\n    const colorArr = this.colorHash.initColor(this.getExperimentNameForColor(experiment));\n    return `rgb(${colorArr[0]},${colorArr[1]},${colorArr[2]})`;\n  }\n\n  getExperimentNameForColor(experiment): string {\n    return `${experiment.name}-${experiment.id}`;\n  }\n\n  getColorsArray(experiments): number[] {\n    return experiments.map((experiment, index) => index / (experiments.length - 1));\n  }\n\n  private prepareGraph(): void {\n    this.experiments.forEach(experiment => this.experimentsColors[experiment.id] = this.getStringColor(experiment));\n    const filteredExperiments = this.experiments.filter(experiment => !experiment.hidden);\n    if (this.parameters && filteredExperiments.length > 0) {\n      const trace = {\n        type: 'parcoords',\n        dimensions: this.parameters.map((parameter) => {\n          parameter = `${parameter}.value`;\n          const allValuesIncludingNull = this.experiments.map(experiment => get(parameter, experiment.hyperparams));\n          const allValues = allValuesIncludingNull.filter(value => (value !== undefined)).filter(value => (value !== ''));\n          const textVal: any = {};\n          let ticktext = this.naturalCompare(uniq(allValues).filter(text => text !== ''));\n          (allValuesIncludingNull.length > allValues.length) && (ticktext = ['N/A'].concat(ticktext));\n          const tickvals = ticktext.map((text, index) => {\n            textVal[text] = index;\n            return index;\n          });\n          let constraintrange;\n          if (this.parallelGraph.nativeElement?.data?.[0]?.dimensions) {\n            const currDimention = this.parallelGraph.nativeElement.data[0].dimensions.find(d => d.label === parameter);\n            if (currDimention?.constraintrange) {\n              constraintrange = currDimention.constraintrange;\n            }\n          }\n          return {\n            label: parameter,\n            ticktext,\n            tickvals,\n            values: filteredExperiments.map((experiment) => (textVal[['', undefined].includes(get(parameter, experiment.hyperparams)) ? 'N/A' : get(parameter, experiment.hyperparams)])),\n            range: [0, max(tickvals)],\n            constraintrange\n          };\n        })\n      } as ParaPlotData ;\n      if (filteredExperiments.length > 1) {\n        trace.line = {\n          color: this.getColorsArray(filteredExperiments),\n          colorscale: filteredExperiments.map((experiment, index) =>\n            [index / (filteredExperiments.length - 1), this.getStringColor(experiment)] as [number, string]),\n        };\n      } else {\n        trace.line = {\n          color: this.getStringColor(filteredExperiments[0])\n        };\n      }\n\n      // this is to keep the metric last in html so that bold scss will take place.\n      // this.data = [trace];\n      // this.drawChart();\n\n      if (this.metric) {\n        const allValuesIncludingNull = this.experiments.map(experiment => get(`${this.metric.path}.${this.metricValueType}`, experiment.last_metrics));\n        const allValues = allValuesIncludingNull.filter(value => value !== undefined);\n        const naVal = this.getNAValue(allValues);\n        const ticktext = uniq(allValuesIncludingNull.map(value => value !== undefined ? value : 'N/A'));\n        const tickvals = ticktext.map(text => text === 'N/A' ? naVal : text);\n        let constraintrange;\n        if (this.parallelGraph.nativeElement?.data?.[0]?.dimensions) {\n          const currDimention = this.parallelGraph.nativeElement.data[0].dimensions.find(d => d.label === this.metric.name);\n          if (currDimention?.constraintrange) {\n            constraintrange = currDimention.constraintrange;\n          }\n        }\n        trace.dimensions.push({\n          label: this.metric.name,\n          ticktext,\n          tickvals,\n          values: filteredExperiments.map((experiment) =>\n            parseFloat(getOr(naVal, `${this.metric.path}.${this.metricValueType}`, experiment.last_metrics))\n          ),\n          range: [min(tickvals), max(tickvals)],\n          constraintrange\n        });\n      }\n      this.data = [trace];\n      if (this.dimensionsOrder) {\n        this.data[0].dimensions.sort((a, b) => sortCol(a.label, b.label, this.dimensionsOrder));\n      }\n      this.drawChart();\n    }\n  }\n\n  private getNAValue(values: Array<number>): number {\n    if (!(values.length > 0)) {\n      return 0;\n    }\n    const valuesMax = max(values);\n    const valuesMin = min(values);\n    return valuesMax === valuesMin ? (valuesMin - 1) : valuesMin - ((valuesMax - valuesMin) / values.length);\n  }\n\n  private drawChart() {\n    Plotly.react(this.parallelGraph.nativeElement, this.data, {\n      margin: {l: 120, r: 120},\n      height: 500,\n      width: this.parallelGraph.nativeElement.offsetWidth\n    }, {\n      'displaylogo': false,\n      'displayModeBar': false,\n      modeBarButtonsToRemove: ['toggleHover']\n    });\n    this.postRenderingGraphManipulation();\n  }\n\n  private postRenderingGraphManipulation() {\n    if (this.parameters) {\n      const graph = select(this.parallelGraph.nativeElement);\n      this.graphWidth = graph.node().getBoundingClientRect().width;\n      graph.selectAll('.y-axis').each((d, index, element) => {\n        if ((d as any).key === this.metric.name) {\n          select(element[index]).attr('class', 'y-axis metric-column');\n        }\n      });\n      graph.selectAll('.axis-title').text((d: any) => this.wrap(d.key)).append('title').text(d => (d as any).key);\n      graph.selectAll('.axis .tick text').text((d: string) => this.wrap(d)).append('title').text((d: string) => d);\n      graph.selectAll('.axis .tick text').style('pointer-events', 'auto');\n      graph.selectAll('.tick').on('mouseover', (event, d) => {\n        const tick = d as unknown as SVGGElement;\n        const axis = tick.parentNode as SVGGElement;\n        if (axis.lastChild !== tick) {\n          axis.removeChild(tick);\n          axis.appendChild(tick);\n        }\n      });\n    }\n  }\n\n  wrap(key) {\n    key = key.toString();\n    const short = (key.slice(0, ((this.graphWidth / this.parameters.length) - 20) / 6));\n    return short + (key.length > short.length ? '...' : '');\n  }\n\n  private naturalCompare(myArray) {\n    const collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\n    const compare = (a: string, b: string) => {\n      const aFloat = parseFloat(a);\n      const bFloat = parseFloat(b);\n      if (!Number.isNaN(a) && !Number.isNaN(b)) {\n        return aFloat - bFloat;\n      }\n      return collator.compare(a, b);\n    };\n\n    return (myArray.sort(compare));\n\n  }\n\n  highlightExperiment(experiment: ExtraTask) {\n    if (this.highlighted?.id != experiment?.id) {\n      this.highlighted = experiment;\n      this.dimensionsOrder = this.parallelGraph.nativeElement.data?.[0].dimensions.map(d => d.label);\n      this._experiments = this.experiments.map(exp => ({...exp, hidden: exp.id !== experiment.id}));\n      this.prepareGraph();\n    }\n  }\n\n  removeHighlightExperiment() {\n    this.highlighted = null;\n    this._experiments = this.experiments.map(experiment => ({...experiment, hidden: this.filteredExperiments.includes(experiment.id)}));\n    this.prepareGraph();\n    this.dimensionsOrder = null;\n  }\n}\n","<div class=\"list-container light-theme\">\n\n  <!--#######  Metrics Autocomplete  ######-->\n  <div smClickStopPropagation class=\"metrics-container\">\n    <div class=\"metric-title\">Performance Metric</div>\n    <div class=\"metrics-search\" (click)=\"openList()\">\n      <input #searchMetric\n             type=\"text\"\n             (keydown.escape)=\"clearMetricSearch(); searchMetric.value= ''\"\n             placeholder=\"Search metric\"\n             [smTooltip]=\"selectedMetric?.name\"\n             [showDelay]=\"500\"\n             [value]=\"(!metrics || listOpen) ? '' : selectedMetric?.name\"\n             (input)=\"updateMetricsList($event)\"\n      >\n      <i *ngIf=\"searchMetric.value.length === 0\" class=\"fa fa-search pr-2\"></i>\n      <i *ngIf=\"searchMetric.value.length > 0\" class=\"fa fa-times pointer pr-2\" (click)=\"clearMetricSearchAndSelected(); searchMetric.value= ''\"></i>\n    </div>\n  <mat-radio-group\n    *ngIf=\"!listOpen\"\n    class=\"value-types\"\n    [value]=\"metricValueType$ | async\"\n    [disabled]=\"searchMetric.value=== ''\"\n    (change)=\"valueTypeChange($event)\">\n    <mat-radio-button class=\"sm\" [value]=\"'value'\">LAST</mat-radio-button>\n    <mat-radio-button class=\"sm\" [value]=\"'min_value'\">MIN</mat-radio-button>\n    <mat-radio-button class=\"sm\" [value]=\"'max_value'\">MAX</mat-radio-button>\n  </mat-radio-group>\n    <div class=\"metric-list\" [ngClass]=\"{'metric-list--show': listOpen}\">\n      <mat-expansion-panel *ngFor=\"let metricGroup of metricsOptions; trackBy: trackMetricByFn\"\n                           class=\"metric-list__panel\"\n                           [expanded]=\"listOpen && searchMetric.value.length > 0\">\n        <mat-expansion-panel-header (click)=\"searchMetric.focus()\" class=\"metric-list__header\" expandedHeight=\"40px\" collapsedHeight=\"40px\">\n          <mat-panel-title class=\"metric-list__title\">\n            {{metricGroup.metricName}}\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <ng-template matExpansionPanelContent>\n          <div *ngFor=\"let variant of metricGroup.variants; trackBy: trackVariantByFn\"\n               class=\"metric-list__item\"\n               [class.selected]=\"$any(variant).value.name === selectedMetric?.name\"\n               (click)=\"metricSelected($any(variant))\">\n            <span class=\"ellipsis\">{{$any(variant).name}}</span>\n          </div>\n        </ng-template>\n      </mat-expansion-panel>\n    </div>\n\n  </div>\n  <hr class=\"separate-margins\">\n\n  <!--#######  Hyper Params Checked List  ######-->\n  <sm-grouped-checked-filter-list\n    titleText=\"Parameters\"\n    [itemsList]=\"hyperParams\"\n    [selectedItemsList]=\"selectedHyperParams\"\n    [selectFilteredItems]=\"selectShowIdenticalHyperParams$ | async\"\n    [selectedItemsListMapper]=\"selectedItemsListMapper\"\n    selectedItemsListPrefix=\"\"\n    [limitSelection]=\"10\"\n    (selectedItems)=\"selectedParamsChanged($event)\"\n    (clearSelection)=\"clearSelection()\"\n  >\n    <mat-slide-toggle\n      (change)=\"showIdenticalParamsToggled()\"\n      [checked]=\"!showIdenticalParamsActive\">Hide identical fields\n    </mat-slide-toggle>\n  </sm-grouped-checked-filter-list>\n\n</div>\n<div class=\"graphs-container h-100\">\n  <div *ngIf=\"plotlyReady$ | async\" class=\"graph-container\">\n    <sm-parallel-coordinates-graph *ngIf=\"(experiments$ | async).length > 1 && selectedHyperParams.length > 0 && !!selectedMetric; else no_data\"\n                                   [experiments]=\"experiments$ | async\"\n                                   [parameters]=\"selectedHyperParams\"\n                                   [metric]=\"selectedMetric\"\n                                   [metricValueType]=\"metricValueType$ | async\"\n    ></sm-parallel-coordinates-graph>\n    <ng-template #no_data>\n      <div class=\"d-flex align-items-center justify-content-center flex-column h-100 no-data\">\n        <div class=\"al-icon al-ico-no-data-graph\"></div>\n        <div class=\"no-data-title\">No data to show</div>\n        <div>Please select parameters & metric</div>\n      </div>\n    </ng-template>\n  </div>\n</div>\n","import {Component, HostListener, OnDestroy, OnInit, ElementRef, ViewChild} from '@angular/core';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {distinctUntilChanged, filter, map} from 'rxjs/operators';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {get, has} from 'lodash/fp';\nimport {SetExperimentSettings, SetSelectedExperiments} from '../../actions/experiments-compare-charts.actions';\nimport {selectRefreshing, selectScalarsGraphHyperParams, selectScalarsGraphMetrics, selectScalarsGraphShowIdenticalHyperParams, selectScalarsGraphTasks, selectMetricValueType, selectSelectedSettigsHyperParams, selectSelectedSettigsMetric} from '../../reducers';\nimport {getExperimentsHyperParams, setShowIdenticalHyperParams, setvalueType} from '../../actions/experiments-compare-scalars-graph.actions';\nimport {GroupedHyperParams, MetricOption, MetricValueType, SelectedMetric, VariantOption} from '../../reducers/experiments-compare-charts.reducer';\nimport {MatRadioChange} from '@angular/material/radio';\nimport {selectPlotlyReady} from '../../../core/reducers/view.reducer';\nimport {ExtFrame} from '../../../shared/experiment-graphs/single-graph/plotly-graph-base';\n\n\nexport const _filter = (opt: VariantOption[], value: string): VariantOption[] => {\n  const filterValue = value.toLowerCase();\n\n  return opt.filter(item => item.name.toLowerCase().includes(filterValue));\n};\n\n@Component({\n  selector: 'sm-experiment-compare-hyper-params-graph',\n  templateUrl: './experiment-compare-hyper-params-graph.component.html',\n  styleUrls: ['./experiment-compare-hyper-params-graph.component.scss']\n})\nexport class ExperimentCompareHyperParamsGraphComponent implements OnInit, OnDestroy {\n  private routerParamsSubscription: Subscription;\n  private hyperParamsSubscription: Subscription;\n  private metricSubscription: Subscription;\n  private selectMetricSubscription: Subscription;\n  private refreshingSubscription: Subscription;\n\n  public selectShowIdenticalHyperParams$: Observable<boolean>;\n  public hyperParams$: Observable<GroupedHyperParams>;\n  public metrics$: Observable<MetricOption[]>;\n  public selectedHyperParams$: Observable<string[]>;\n  private selectedMetric$: Observable<SelectedMetric>;\n  private selectRefreshing$: Observable<{ refreshing: boolean, autoRefresh: boolean }>;\n  public experiments$: Observable<any[]>;\n\n  public graphs: { [key: string]: ExtFrame };\n  public selectedHyperParams: string[];\n  public selectedMetric: SelectedMetric;\n  public hyperParams: { [section: string]:  any};\n  public showIdenticalParamsActive: boolean;\n  public plotlyReady$ = this.store.select(selectPlotlyReady);\n\n  public metrics: MetricOption[];\n  public metricsOptions: MetricOption[];\n  public listOpen = true;\n  private initView = true;\n  private taskIds: string[];\n\n  public metricValueType$: Observable<MetricValueType>;\n  public selectedItemsListMapper(data) {\n    return data\n  }\n  @ViewChild('searchMetric') searchMetricRef: ElementRef;\n\n  @HostListener('document:click', [])\n  clickOut() {\n    if (!this.initView) {\n      this.listOpen = false;\n    }\n  }\n\n  constructor(private store: Store<IExperimentInfoState>) {\n    this.metrics$ = this.store.pipe(select(selectScalarsGraphMetrics));\n    this.hyperParams$ = this.store.pipe(select(selectScalarsGraphHyperParams));\n    this.selectedHyperParams$ = this.store.pipe(select(selectSelectedSettigsHyperParams));\n    this.selectedMetric$ = this.store.pipe(select(selectSelectedSettigsMetric));\n    this.selectShowIdenticalHyperParams$ = this.store.pipe(select(selectScalarsGraphShowIdenticalHyperParams));\n    this.selectRefreshing$ = this.store.select(selectRefreshing);\n    this.experiments$ = this.store.pipe(select(selectScalarsGraphTasks));\n    this.metricValueType$ = this.store.pipe(select(selectMetricValueType));\n\n  }\n\n  ngOnInit() {\n    this.selectMetricSubscription = this.selectedMetric$.pipe(\n      distinctUntilChanged((x, y) => x?.path === y?.path)\n    ).subscribe((selectedMetric: SelectedMetric) => this.selectedMetric = selectedMetric?.name? {...selectedMetric} : null);\n\n    this.metricSubscription = this.metrics$.pipe(filter(metrics => !!metrics)).subscribe(metrics => {\n      this.metrics = metrics;\n      this.metricsOptions = [...metrics];\n\n      if (this.selectedMetric && this.metrics.every(metric => metric.variants.every(variant => this.selectedMetric.name !== variant.value.name))) {\n        this.selectedMetric = null;\n      }\n    });\n\n    this.hyperParamsSubscription = combineLatest([this.selectedHyperParams$, this.hyperParams$, this.selectShowIdenticalHyperParams$])\n      .pipe(\n        filter(([selectedParams, allParams, filterActive]) => !!allParams),\n      )\n      .subscribe(([selectedParams, allParams, showIdentical]) => {\n        this.showIdenticalParamsActive = showIdentical;\n        this.hyperParams = Object.entries(allParams)\n          .reduce((acc, [sectionKey, params]) => {\n            const section = Object.keys(params)\n              .sort((a, b) => a.toLowerCase() > b.toLowerCase() ? 1 : -1)\n              .reduce((acc2, paramKey) => {\n                if (showIdentical || params[paramKey]) {\n                  acc2[paramKey] = true;\n                }\n                return acc2;\n              }, {});\n            if (Object.keys(section).length > 0) {\n              acc[sectionKey] = section;\n            }\n            return acc;\n          }, {});\n        this.selectedHyperParams = selectedParams.filter(selectedParam => has(selectedParam, this.hyperParams));\n      });\n\n    this.routerParamsSubscription = this.store.pipe(\n      select(selectRouterParams),\n      map(params => get('ids', params)),\n      distinctUntilChanged(),\n      filter(ids => !!ids),\n    )\n      .subscribe(ids => {\n        this.taskIds = ids.split(',');\n        this.store.dispatch(new SetSelectedExperiments({selectedExperiments: ['hyper-param-graph']}));\n        this.store.dispatch(getExperimentsHyperParams({experimentsIds: this.taskIds}));\n      });\n\n    this.refreshingSubscription = this.selectRefreshing$.pipe(filter(({refreshing}) => refreshing)).subscribe(({autoRefresh}) =>\n      this.store.dispatch(getExperimentsHyperParams({experimentsIds: this.taskIds, autoRefresh})));\n\n    this.listOpen = true;\n    window.setTimeout(() => {\n      this.searchMetricRef.nativeElement.focus();\n      this.initView = false;\n    }, 200);\n  }\n\n  ngOnDestroy() {\n    this.routerParamsSubscription.unsubscribe();\n    this.hyperParamsSubscription.unsubscribe();\n    this.metricSubscription.unsubscribe();\n    this.selectMetricSubscription.unsubscribe();\n    this.refreshingSubscription.unsubscribe();\n  }\n\n  private _filterGroup(value: string): MetricOption[] {\n    if (value) {\n      return this.metrics\n        .map(group => ({metricName: group.metricName, variants: _filter(group.variants, value)}))\n        .filter(group => group.variants.length > 0);\n    }\n\n    return this.metrics;\n  }\n\n  metricSelected(metric: VariantOption) {\n    this.updateServer(metric.value, this.selectedHyperParams);\n    this.listOpen = false;\n  }\n\n  selectedParamsChanged({param, value}) {\n    const newSelectedParamsList = this.selectedHyperParams.includes(param) ? this.selectedHyperParams.filter(i => i !== param) : [...this.selectedHyperParams, param];\n    this.updateServer(this.selectedMetric, newSelectedParamsList);\n  }\n\n  clearSelection() {\n    this.updateServer(null, this.selectedHyperParams);\n    this.updateServer(this.selectedMetric, []);\n  }\n\n  showIdenticalParamsToggled() {\n    this.store.dispatch(setShowIdenticalHyperParams());\n  }\n\n  updateServer(selectedMetric, selectedParams) {\n    this.store.dispatch(new SetExperimentSettings({id: ['hyper-param-graph'], changes: {selectedMetric: selectedMetric, selectedHyperParams: selectedParams}}));\n\n  }\n\n  updateMetricsList(event: Event) {\n    this.metricsOptions = this._filterGroup((event.target as HTMLInputElement).value);\n  }\n\n  clearMetricSearchAndSelected() {\n    this.updateServer(null, this.selectedHyperParams);\n    this.selectedMetric = null;\n    this.metricsOptions = this._filterGroup('');\n  }\n\n  clearMetricSearch() {\n    this.metricsOptions = this._filterGroup('');\n  }\n\n  openList() {\n    this.listOpen = true;\n  }\n\n  trackMetricByFn(index: number, item: MetricOption): string {\n    return item.metricName;\n  }\n\n  trackVariantByFn(index: number, item: VariantOption): string {\n    // TODO: validate with @nirla\n    return item.value.path;\n  }\n\n  valueTypeChange($event: MatRadioChange) {\n    this.store.dispatch(setvalueType({valueType: $event.value}));\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\nimport {Store} from '@ngrx/store';\n\n@Injectable({providedIn: 'root'})\nexport class RouterHelperGuard implements CanActivate {\n\n  constructor(public router: Router, public store: Store<any>) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const viewMode = (route.url[0] && route.queryParams[route.url[0].path] || 'values').replace(/.*_/, '') || 'values'; // i.e: graph, min_values\n    const defaultViewMode = route.url[1].path; // usually 'values'\n    if (viewMode !== defaultViewMode) {\n      this.router.navigateByUrl(state.url.replace(defaultViewMode, viewMode), /* Removed unsupported properties by Angular migration: queryParamsHandling. */ {});\n      return false;\n    }\n    return true;\n  }\n}\n","<sm-compare-card-list\n  [experiments]=\"experiments\"\n  [baseExperiment]=\"baseExperiment\"\n  [ngClass]=\"calculatingTree ? 'pending' : ''\"\n  (experimentListChanged)=\"experimentListChanged($event)\"\n>\n  <div *compareCardHeader=\"let experiment; let i = index\">\n    <sm-experiment-compare-general-data\n      [experiment]=\"experiment\"\n      [tags]=\"experimentTags[experiment.id]\"\n      (copyIdClicked)=\"copyIdToClipboard()\">\n    </sm-experiment-compare-general-data>\n  </div>\n  <div class=\"tree-card-body\" *compareCardBody=\"let experiment; let i = index\">\n    <div #section class=\"section h-100\" *ngIf=\"experimentsDataControl[experiment.id]\">\n      <!--      TODO: move is-not-origin class outside nodes tree-->\n      <ng-template let-dataSource=\"dataSource\"\n                   let-treeControl=\"treeControl\"\n                   [ngTemplateOutletContext]=\"{dataSource: experimentsDataControl[experiment.id][0],\n                                               treeControl: experimentsDataControl[experiment.id][1]}\"\n                   [ngTemplateOutlet]=\"selfie\" #selfie>\n        <cdk-virtual-scroll-viewport #virtualScrollRef class=\"virtual-scroll-container\" [class.is-not-origin]=\"i > 0\" itemSize=\"28\" minBufferPx=\"280\" maxBufferPx=\"560\">\n          <ng-container *cdkVirtualFor=\"let node of dataSource; let i = index\">\n            <div class=\"node\" [class.parent]=\"node.hasChildren\">\n              <div *ngIf=\"node.hasChildren\" class=\"section\" [ngClass]=\"'depth-' + node.level\">\n                <div class=\"content\"\n                     (click)=\"toggleNode(node)\"\n                     [ngClass]=\"node?.data?.classStyle\"\n                     [class.selected-diff]=\"checkIfSelectedPath(node.data)\"\n                     [class.identical-row]=\"!allPaths[node.data.path]\">\n                  <i class=\"fas\" [style.margin-left.px]=\"2 + node.level * 20\" [ngClass]=\"treeControl.isExpanded(node) ? 'fa-chevron-down' : 'fa-chevron-right'\"></i>\n                  <span class=\"title-key\" [class.ellipsis]=\"showEllipsis\">{{(renameMap[node.data.key] || node.data.key)}}</span>\n                </div>\n              </div>\n              <div *ngIf=\"!node.hasChildren\" class=\"section\" (click)=\"keyClicked(node.data)\">\n                <div [style.padding-left.px]=\"2 + node.level * 20\" [ngClass]=\"{\n                  'node-item-container': true,\n                  'identical-row': checkIfIdenticalRow(node.data),\n                  'selected-diff': checkIfSelectedPath(node.data),\n                  'not-existing-on-origin': !node.data.existOnOrigin,\n                  'not-existing-on-compared': !node.data.existOnCompared,\n                  'diff-row': !node.data.isValueEqualToOrigin,\n                  'equal-row': node.data.isValueEqualToOrigin,\n                  'hide-identical-mode': hideIdenticalFields\n                }\">\n                  <div *ngIf=\"(node.data.value !== undefined) || (node.data.existOnOrigin && node.data.existOnCompared)\" #row class=\"node-row\">\n                    <pre class=\"node-key\"\n                         [class.no-ellipsis]=\"node.data.key.length < 15\"\n                         [class.ellipsis]=\"showEllipsis\"\n                    >{{node.data.key}}<i  class=\"al-icon sm al-ico-line-expand extend-toggle\" [class.fa-rotate-180]=\"!showEllipsis\" (click)=\"toggleEllipsis(); $event.stopPropagation()\"></i>\n                    </pre>\n                    <pre class=\"node-val\"\n                         [style.width]=\"showEllipsis ? (section.clientWidth - 250) + 'px' : null\"\n                         [class.no-ellipsis]=\"node.data.value.length < 15\"\n                         [class.ellipsis]=\"showEllipsis\">{{node.data.value}}<i  class=\"al-icon sm al-ico-line-expand extend-toggle\" [class.fa-rotate-180]=\"!showEllipsis\" (click)=\"toggleEllipsis(); $event.stopPropagation()\"></i>\n                    </pre>\n                    <i *ngIf=\"node.data.tooltip\" class=\"al-icon sm al-ico-description node-icon\" customClass=\"hyper-parameters-tooltip\" [smTooltip]=\"node.data.tooltip\"></i>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </ng-template>\n    </div>\n  </div>\n</sm-compare-card-list>\n\n\n<sm-portal outletId=\"searchDiff\">\n  <div class=\"btn-group mr-2\" role=\"group\">\n    <sm-search [value]=\"searchText\"\n               [minimumChars]=\"1\"\n               [debounceTime]=\"300\"\n               (keydown.enter)=\"findNext()\"\n               (valueChanged)=\"find($event)\"\n    ></sm-search>\n\n    <button class=\"btn btn-secondary prev\" smTooltip=\"Previous occurrence\" [disabled]=\"foundPaths.length === 0 \" (click)=\"findPrev()\">\n      <i class=\"fas fa-chevron-up\"></i>\n    </button>\n\n    <button class=\"btn btn-secondary next\" smTooltip=\"Next occurrence\" [disabled]=\"foundPaths.length === 0 \" (click)=\"findNext()\">\n      <i class=\"fas fa-chevron-down\"></i>\n    </button>\n  </div>\n  <span [class.hidden]=\"searchText.length === 0 \"> Match {{foundPaths.length === 0 ? '0' : foundIndex + 1}} / {{foundPaths.length}}</span>\n</sm-portal>\n\n<sm-portal outletId=\"nextDiff\">\n  <button class=\"btn btn-secondary btn-arrow mr-3\" smTooltip=\"Previous diff\" (click)=\"goToNextDiff('up')\">\n    <i class=\"fas fa-arrow-up\"></i>\n  </button>\n\n  <button class=\"btn btn-secondary btn-arrow\" smTooltip=\"Next diff\" (click)=\"goToNextDiff('down')\">\n    <i class=\"fas fa-arrow-down\"></i>\n  </button>\n</sm-portal>\n","import {ExperimentsCompareComponent} from './experiments-compare.component';\nimport {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {ExperimentCompareDetailsComponent} from './containers/experiment-compare-details/experiment-compare-details.component';\nimport {ExperimentCompareMetricValuesComponent} from './containers/experiment-compare-metric-values/experiment-compare-metric-values.component';\nimport {ExperimentCompareScalarChartsComponent} from './containers/experiment-compare-metric-charts/experiment-compare-scalar-charts.component';\nimport {ExperimentComparePlotsComponent} from './containers/experiment-compare-plots/experiment-compare-plots.component';\nimport {DebugImagesComponent} from '../debug-images/debug-images.component';\nimport {ExperimentCompareHyperParamsGraphComponent} from './containers/experiment-compare-hyper-params-graph/experiment-compare-hyper-params-graph.component';\nimport {RouterHelperGuard} from './experiment-compare-router-helper.guard';\nimport {ExperimentCompareParamsComponent} from './containers/experiment-compare-params/experiment-compare-params.component';\n\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: ExperimentsCompareComponent,\n    data: {search: false},\n    children: [\n      {path: '', redirectTo: 'details', pathMatch: 'full'},\n      {path: 'metrics-values', redirectTo: 'scalars/values', pathMatch: 'full'},\n      {path: 'metrics-charts', redirectTo: 'scalars/graph', pathMatch: 'full'},\n\n      {path: 'details', component: ExperimentCompareDetailsComponent, data: {mode: 'details'}},\n      {path: 'hyper-params/values', component: ExperimentCompareParamsComponent, canActivate: [RouterHelperGuard], data: {mode: 'hyper-params'}},\n      {path: 'hyper-params/graph', component: ExperimentCompareHyperParamsGraphComponent},\n      {path: 'scalars/values', component: ExperimentCompareMetricValuesComponent, canActivate: [RouterHelperGuard]},\n      {path: 'scalars/graph', component: ExperimentCompareScalarChartsComponent},\n      {path: 'metrics-plots', component: ExperimentComparePlotsComponent},\n      {path: 'debug-images', component: DebugImagesComponent, data: {mergeIterations: true, multiple: true}},\n    ]\n  },\n];\n\n@NgModule({\n  imports: [\n    SMSharedModule,\n    RouterModule.forChild(routes),\n\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class ExperimentsCompareRoutingModule {\n}\n\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {get} from 'lodash/fp';\nimport {selectExperimentsParams} from '../../reducers';\nimport {filter, tap} from 'rxjs/operators';\nimport {\n  ExperimentCompareTree,\n  IExperimentDetail\n} from '../../../../features/experiments-compare/experiments-compare-models';\nimport {ExperimentParams} from '../../shared/experiments-compare-details.model';\nimport {convertExperimentsArraysParams, getAllKeysEmptyObject, isParamsConverted} from '../../jsonToDiffConvertor';\nimport {ExperimentCompareBase} from '../experiment-compare-base';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {IExperimentInfoState} from '../../../../features/experiments/reducers/experiment-info.reducer';\nimport {experimentListUpdated, setExperiments} from '../../actions/experiments-compare-params.actions';\n\n@Component({\n  selector: 'sm-experiment-compare-params',\n  templateUrl: './experiment-compare-params.component.html',\n  styleUrls: ['./experiment-compare-params.component.scss', '../../cdk-drag.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentCompareParamsComponent extends ExperimentCompareBase implements OnInit {\n  public showEllipsis: boolean = true;\n\n  constructor(public router: Router,\n              public store: Store<IExperimentInfoState>,\n              public changeDetection: ChangeDetectorRef,\n              public activeRoute: ActivatedRoute) {\n    super(router, store, changeDetection, activeRoute);\n  }\n\n  experiments$ = this.store.pipe(select(selectExperimentsParams));\n\n  ngOnInit() {\n    this.onInit();\n\n    this.compareTabPage = get('snapshot.routeConfig.data.mode', this.activeRoute);\n\n    this.routerParamsSubscription = this.taskIds$.subscribe((experimentIds: string) => this.store.dispatch(experimentListUpdated({ids: experimentIds.split(',')})));\n\n    this.experimentsSubscription = this.experiments$.pipe(\n      filter(experiments => !!experiments && experiments.length > 0),\n      tap(experiments => {\n        this.syncUrl(experiments);\n        this.extractTags(experiments);\n      }),\n    ).subscribe(experiments => {\n      this.originalExperiments = experiments.reduce((acc, exp) => {\n        acc[exp.id] = isParamsConverted(exp.hyperparams) ? this.originalExperiments[exp.id] : exp;\n        return acc;\n      }, {} as { [id: string]: IExperimentDetail | ExperimentParams });\n      const experimentList = Object.values(this.originalExperiments).map(experiment => convertExperimentsArraysParams(experiment, this.originalExperiments[experiments[0].id]));\n      this.resetComponentState(experimentList);\n      this.calculateTree(experimentList);\n    });\n  }\n\n  buildCompareTree(experiments: Array<ExperimentParams>): ExperimentCompareTree {\n    const mergedExperiment = getAllKeysEmptyObject(experiments);\n    return experiments\n      .reduce((acc, cur) => {\n        acc[cur.id] = {\n          'hyper-params': this.buildSectionTree(cur, 'hyperparams', mergedExperiment)\n        };\n\n        return acc;\n      }, {} as ExperimentCompareTree);\n  }\n\n  experimentListChanged(experiments: IExperimentDetail[]) {\n    this.store.dispatch(setExperiments({experiments: experiments as ExperimentParams[]}));\n  }\n\n  toggleEllipsis() {\n    this.showEllipsis = !this.showEllipsis;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ExperimentReverterService} from '../../../features/experiments/shared/services/experiment-reverter.service';\nimport {get} from 'lodash/fp';\nimport {ExecutionDetails, ModelDetails} from '../shared/experiments-compare-details.model';\nimport {Task} from '../../../business-logic/model/tasks/task';\nimport {ExperimentDetailsReverterServiceBase} from '../../../features/experiments-compare/experiment-details-reverter-service.base';\nimport {ARTIFACTS_TYPES} from '../../tasks/tasks.constants';\nimport {Artifact} from '../../../business-logic/model/tasks/artifact';\nimport {crc32} from '../../shared/utils/shared-utils';\nimport {TaskModelItem} from '../../../business-logic/model/tasks/taskModelItem';\nimport {IModelInfo} from '../../experiments/shared/common-experiment-model.model';\nimport {ITask} from '../../../business-logic/model/al-task';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExperimentDetailsReverterService extends ExperimentDetailsReverterServiceBase {\n\n  constructor(public experimentReverter: ExperimentReverterService) {\n    super(experimentReverter);\n  }\n\n  revertArtifacts(experiment: ITask): any {\n    const result = {\n      ' input models': this.revertModels(experiment.models.input),\n      ' output models': this.revertModels(experiment.models.output)\n    };\n    experiment.execution.artifacts.forEach(artifact => result[artifact.key] = this.revertArtifact(artifact));\n    return result;\n  }\n\n  revertArtifact(artifact: Artifact): any {\n    if (artifact.type === ARTIFACTS_TYPES.AUDIT_LOG) {\n      return this.revertAuditLog(artifact);\n    }\n\n    // Currently we have only audit_log so:\n    return this.revertAuditLog(artifact);\n  }\n\n  revertAuditLog(artifact: Artifact): any {\n    const {uri, content_size, hash, timestamp, display_data, mode, key, type_data, ...restArtifact} = artifact;\n    const result = {\n      ...restArtifact,\n      'file size': content_size,\n      'file hash': hash,\n    };\n\n    if (type_data) {\n      const preview  = type_data.preview && type_data.preview.trim().split('\\n') || [];\n      result['content type'] = type_data['content_type'] || '';\n      result['preview'] = (preview.length < 3000 && preview[0]?.length < 3000) ? preview : [`** Content is too large to display. Hash: ${crc32(type_data.preview)}`];\n      result['data hash'] = type_data.data_hash || '';\n    }\n    display_data.forEach(pair => result[pair[0]] = pair[1]);\n\n    return result;\n  }\n\n  revertModels(models: TaskModelItem[]) {\n    return models.reduce((acc, model) => {\n      acc[model.name] = this.revertModel(model);\n      return acc;\n    }, {});\n  }\n\n  revertModel(model: TaskModelItem): ModelDetails {\n    return {\n      model: this.revertModelInput(model),\n      network_design: this.revertNetworkDesign(model.model),\n    };\n  }\n\n  revertNetworkDesign(model): string {\n    let networkDesign = model?.design?.design || model?.design;\n    networkDesign = typeof networkDesign === 'string' ? networkDesign.split('\\n') : {};\n    return networkDesign;\n  }\n\n  revertExecution(experiment: ITask): ExecutionDetails {\n    let pip = get('script.requirements.pip', experiment);\n    pip = (pip === undefined || Array.isArray(pip)) ? pip : pip.split('\\n');\n    pip = pip?.filter(row => !row.startsWith('#') && row.length > 0); // Should we remove comments????\n\n    let diff = get('script.diff', experiment);\n    if (diff) {\n      diff = (Array.isArray(diff)) ? diff : diff.split('\\n');\n      diff = (diff.length < 3000 && diff[0]?.length < 3000) ? diff : [`** Content is too large to display. Hash: ${crc32(get('script.diff', experiment))}`];\n    }\n\n    return {\n      source: experiment.script ? this.revertExecutionSource(experiment.script) : undefined,\n      uncommitted_changes: diff,\n      installed_packages: pip,\n      container: {\n        image: experiment.container?.image || '',\n        arguments: experiment.container?.arguments || '',\n        setup_shell_script: experiment.container?.setup_shell_script?.split('\\n') || []\n      }\n    };\n  }\n\n\n  public revertModelInput(model: TaskModelItem): IModelInfo {\n    return {\n      id: get('model.id', model),\n      name: get('model.name', model),\n      // taskName: get('name', model),\n      uri: get('model.uri', model),\n      framework: get('framework', model) || get('model.framework', model)\n    };\n  }\n\n  public revertExecutionSource(script: Task['script']) {\n    return {\n      binary: script.binary,\n      repository: script.repository,\n      working_dir: script.working_dir,\n      script_path: script.entry_point,\n      branch: script.branch,\n      commit_id: script.version_num,\n      tag_name: script.tag || '' // In tag_name we want undefined == null == \"\"\n    };\n  }\n\n}\n","import {ISelectedExperiment} from '../experiments/shared/experiment-info.model';\nimport {ConfigurationItem} from '../../business-logic/model/tasks/configurationItem';\nimport {ITask} from '../../business-logic/model/al-task';\n\nexport abstract class ExperimentDetailsReverterServiceBase {\n  public experimentReverter;\n\n  constructor(experimentReverter) {\n    this.experimentReverter = experimentReverter;\n  }\n\n\n  revertExperiments(experimentIds: Array<string>, experiments: ITask[]) {\n    // map the experiment ids to keep the user order.\n    return experimentIds.map(id => {\n      const exp = experiments.find(ex => ex.id === id);\n      return {\n        id: exp.id,\n        name: exp.name,\n        status: exp.status,\n        last_iteration: exp.last_iteration,\n        last_update: exp.last_update,\n        project: exp.project,\n        completed: exp.completed,\n        tags: exp.tags,\n        execution: this.revertExecution(exp),\n        artifacts: this.revertArtifacts(exp),\n        configuration: this.revertconfiguration(exp.configuration)\n      };\n    });\n  }\n\n  protected sortObjectByKey(obj) {\n    const orderedLabels = {};\n    Object.keys(obj).sort().forEach((key) => {\n      orderedLabels[key] = typeof obj[key] === 'string' ? obj[key] : this.sortObjectByKey(obj[key]);\n    });\n\n    return orderedLabels;\n  }\n\n  private revertconfiguration(configuration: {[p: string]: ConfigurationItem}) {\n    if (!configuration) {\n      return {};\n    }\n    return Object.entries(configuration).reduce((acc, [key, value]) => {\n      if (key === 'design' && value.type === 'legacy') {\n        acc['General'] = value;\n      } else {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n  }\n\n  abstract revertArtifacts(exp: ITask);\n\n  abstract revertExecution(exp: ITask);\n}\n","import {COMPARE_DETAILS_ONLY_FIELDS_BASE} from '../../webapp-common/experiments-compare/experiments-compare.constants';\n\nexport const getCompareDetailsOnlyFields = param => COMPARE_DETAILS_ONLY_FIELDS_BASE;\n\nexport const COMPARE_PARAMS_ONLY_FIELDS = [\n  'id',\n  'name',\n  'type',\n  'status',\n  'last_update',\n  'project.name',\n  'tags',\n  'published',\n  'last_iteration',\n  'hyperparams'\n];\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {select, Store} from '@ngrx/store';\nimport {activeLoader, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {catchError, mergeMap, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {ExperimentDetailsReverterService} from '../services/experiment-details-reverter.service';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {selectExperimentIdsDetails, selectExperimentsDetails} from '../reducers';\nimport {Observable, of} from 'rxjs';\nimport {IExperimentDetail} from '../../../features/experiments-compare/experiments-compare-models';\nimport {REFETCH_EXPERIMENT_REQUESTED, refetchExperimentRequested, setRefreshing} from '../actions/compare-header.actions';\nimport {ExperimentCompareDetailsState} from '../reducers/experiments-compare-details.reducer';\nimport {experimentListUpdated, setExperiments} from '../actions/experiments-compare-details.actions';\nimport {getCompareDetailsOnlyFields} from '../../../features/experiments-compare/experiments-compare-consts';\nimport {selectHasDataFeature} from '../../../core/reducers/users.reducer';\n\n@Injectable()\nexport class ExperimentsCompareDetailsEffects {\n\n  constructor(private actions$: Actions, private tasksApi: ApiTasksService, private store: Store<ExperimentCompareDetailsState>,\n              private experimentDetailsReverter: ExperimentDetailsReverterService\n  ) {\n  }\n\n\n  activeLoader$ = createEffect(() => this.actions$.pipe(\n    ofType(experimentListUpdated, REFETCH_EXPERIMENT_REQUESTED),\n    map(action => activeLoader(action.type))\n  ));\n\n  updateExperimentsDetail$ = createEffect(() => this.actions$.pipe(\n    ofType(experimentListUpdated),\n    withLatestFrom(\n      this.store.pipe(select(selectExperimentIdsDetails)),\n      this.store.select(selectHasDataFeature)\n    ),\n    switchMap(([action, oldExperimentIds, hasDataFeature]) => {\n      const newExperimentIds = action.ids.filter(id => !oldExperimentIds.includes(id));\n      return this.fetchExperimentDetails$(newExperimentIds, hasDataFeature)\n        .pipe(\n          withLatestFrom(this.store.pipe(select(selectExperimentsDetails))),\n          // get only the relevant experiments\n          map(([experiments, oldExperiments]) => oldExperiments.filter(exp => action.ids.includes(exp.id)).concat(experiments)),\n          mergeMap(experiments => [\n            deactivateLoader(action.type),\n            setExperiments({experiments})\n          ]),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, 'The attempt to retrieve your experiment data failed. Refresh your browser and try again.')\n          ])\n        );\n    })\n  ));\n\n  refetchExperimentEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(refetchExperimentRequested),\n    withLatestFrom(this.store.select(selectExperimentIdsDetails), this.store.select(selectHasDataFeature)),\n    switchMap(([action, newExperimentIds, hasDataFeature]) => this.fetchExperimentDetails$(newExperimentIds, hasDataFeature).pipe(\n        mergeMap(experiments => [\n          deactivateLoader(action.type),\n          setRefreshing({payload: false}),\n          setExperiments({experiments})\n        ]),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          setRefreshing({payload: false}),\n          setServerError(\n            error, null,\n            'The attempt to retrieve your experiment data failed. Refresh your browser and try again.',\n            action.autoRefresh\n          )\n        ])\n      )),\n  ));\n\n  fetchExperimentDetails$(ids, hasDataFeature: boolean): Observable<Array<IExperimentDetail>> {\n    return ids.length > 0 ?\n      this.tasksApi.tasksGetAllEx({\n        id: ids,\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        only_fields: getCompareDetailsOnlyFields(hasDataFeature)\n      }).pipe(\n        map(res => this.experimentDetailsReverter.revertExperiments(ids, res.tasks))\n      )\n      : of([]);\n  }\n}\n\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {IExperimentCompareDebugImagesState} from '../reducers/experiments-compare-debug-images.reducer';\nimport * as debugImagesActions from '../actions/experiments-compare-debug-images.actions';\nimport {activeLoader} from '../../../webapp-common/core/actions/layout.actions';\nimport {map} from 'rxjs/operators';\n\n\n@Injectable()\nexport class ExperimentsCompareDebugImagesEffects {\n\n  constructor(private actions$: Actions, private store: Store<IExperimentCompareDebugImagesState>) {\n  }\n\n  @Effect()\n  activeLoader = this.actions$.pipe(\n    ofType(debugImagesActions.SET_SOMETHING),\n    map(action => activeLoader(action.type))\n  );\n}\n","import {Action} from '@ngrx/store';\n\nexport const EXPERIMENTS_COMPARE_DEBUG_IMAGES_ = 'EXPERIMENTS_COMPARE_DEBUG_IMAGES_';\n\nexport const SET_SOMETHING = EXPERIMENTS_COMPARE_DEBUG_IMAGES_ + 'SET_SOMETHING';\n\n\nexport class SetSomething implements Action {\n  readonly type = SET_SOMETHING;\n}\n","import {Injectable} from '@angular/core';\nimport {act, Actions, Effect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {IExperimentCompareChartsState} from '../reducers/experiments-compare-charts.reducer';\nimport * as chartActions from '../actions/experiments-compare-charts.actions';\nimport {GetMultiPlotCharts, GetMultiScalarCharts, setAxisCache} from '../actions/experiments-compare-charts.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {catchError, debounceTime, mergeMap, map, withLatestFrom} from 'rxjs/operators';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {ApiAuthService} from '../../../business-logic/api-services/auth.service';\nimport {BlTasksService} from '../../../business-logic/services/tasks.service';\nimport {ApiEventsService} from '../../../business-logic/api-services/events.service';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {selectCompareHistogramCacheAxisType, selectCompareSelectedSettingsxAxisType} from '../reducers';\nimport {setRefreshing} from '../actions/compare-header.actions';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\n\n\n@Injectable()\nexport class ExperimentsCompareChartsEffects {\n\n  constructor(private actions$: Actions, private store: Store<IExperimentCompareChartsState>, private apiTasks: ApiTasksService,\n              private authApi: ApiAuthService, private taskBl: BlTasksService, private eventsApi: ApiEventsService) {\n  }\n\n  @Effect()\n  activeLoader = this.actions$.pipe(\n    ofType(chartActions.GET_MULTI_SCALAR_CHARTS, chartActions.GET_MULTI_PLOT_CHARTS),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  getMultiScalarCharts = this.actions$.pipe(\n    ofType<GetMultiScalarCharts>(chartActions.GET_MULTI_SCALAR_CHARTS),\n    debounceTime(200),\n    withLatestFrom(this.store.select(selectCompareSelectedSettingsxAxisType), this.store.select(selectCompareHistogramCacheAxisType)),\n    mergeMap(([action, axisType, prevAxisType]) => {\n      if ([ScalarKeyEnum.IsoTime, ScalarKeyEnum.Timestamp].includes(prevAxisType) &&\n        [ScalarKeyEnum.IsoTime, ScalarKeyEnum.Timestamp].includes(axisType) &&\n        prevAxisType !== axisType\n      ) {\n        return [setRefreshing({payload: false}), deactivateLoader(action.type), setAxisCache({axis: axisType})];\n      }\n      return this.eventsApi.eventsMultiTaskScalarMetricsIterHistogram({\n        tasks: action.payload.taskIds,\n        key: !axisType || axisType === ScalarKeyEnum.IsoTime ? ScalarKeyEnum.Timestamp : axisType\n      }).pipe(\n        mergeMap(res => [\n          // also here\n          new chartActions.SetExperimentHistogram(res, axisType),\n          setRefreshing({payload: false}),\n          deactivateLoader(action.type)]\n        ),\n        catchError(error => [\n          requestFailed(error), deactivateLoader(action.type), setRefreshing({payload: false}),\n          setServerError(error, null, 'Failed to get Scalar Charts', action.payload.autoRefresh)\n        ])\n      );\n    })\n  );\n\n  @Effect()\n  getMultiPlotCharts = this.actions$.pipe(\n    ofType<GetMultiPlotCharts>(chartActions.GET_MULTI_PLOT_CHARTS),\n    debounceTime(200),\n    mergeMap((action) =>\n      this.eventsApi.eventsGetMultiTaskPlots({tasks: action.payload.taskIds, iters: 1, no_scroll: true})\n        .pipe(\n          map(res => res.plots),\n          mergeMap(res => [\n            new chartActions.SetExperimentPlots(res),\n            setRefreshing({payload: false}),\n            deactivateLoader(action.type)]),\n          catchError(error => [\n            requestFailed(error), deactivateLoader(action.type), setRefreshing({payload: false}),\n            setServerError(error, null, 'Failed to get Plot Charts', action.payload.autoRefresh)\n          ])\n        )\n    )\n  );\n\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {IExperimentCompareMetricsValuesState} from '../reducers/experiments-compare-metrics-values.reducer';\nimport * as metricsValuesActions from '../actions/experiments-compare-metrics-values.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../../../webapp-common/core/actions/layout.actions';\nimport {catchError, mergeMap, map} from 'rxjs/operators';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {setRefreshing} from '../actions/compare-header.actions';\n\n\n@Injectable()\nexport class ExperimentsCompareMetricsValuesEffects {\n\n  constructor(private actions$: Actions, private store: Store<IExperimentCompareMetricsValuesState>, public tasksApiService: ApiTasksService) {\n  }\n\n  @Effect()\n  activeLoader = this.actions$.pipe(\n    ofType(metricsValuesActions.GET_COMPARED_EXPERIMENTS_METRICS_VALUES),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  getComparedExperimentsMetricsValues = this.actions$.pipe(\n    ofType<metricsValuesActions.GetComparedExperimentsMetricsValues>(metricsValuesActions.GET_COMPARED_EXPERIMENTS_METRICS_VALUES),\n    mergeMap((action) => this.tasksApiService.tasksGetAllEx({id: action.payload.taskIds, only_fields: ['last_metrics', 'name', 'status', 'completed', 'last_update', 'last_iteration', 'project.name']})\n      .pipe(\n        map(res => action.payload.taskIds.map(id => res.tasks.find(ex => ex.id === id))),\n        mergeMap(experiments => [\n          new metricsValuesActions.SetComparedExperiments(experiments),\n          setRefreshing({payload: false}),\n          deactivateLoader(action.type)]),\n        catchError(error => [\n          requestFailed(error), deactivateLoader(action.type), setRefreshing({payload: false}),\n          setServerError(error, null, 'Failed to get Compared Experiments', action.payload.autoRefresh)\n        ])\n      )\n    )\n  );\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, Effect, ofType} from '@ngrx/effects';\nimport {debounceTime, filter, map, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {activeLoader, deactivateLoader} from '../../core/actions/layout.actions';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {\n  compareAddDialogSetTableSort,\n  compareAddDialogTableSortChanged,\n  GET_SELECTED_EXPERIMENTS_FOR_COMPARE,\n  getSelectedExperimentsForCompareAddDialog,\n  refreshIfNeeded,\n  setExperimentsUpdateTime,\n  setRefreshing,\n  setSearchExperimentsForCompareResults\n} from '../actions/compare-header.actions';\nimport {select, Store} from '@ngrx/store';\nimport {flatten, get, isEmpty} from 'lodash/fp';\nimport {selectCompareAddTableSortFields, selectExperimentsUpdateTime} from '../reducers';\nimport {EmptyAction} from '../../../app.constants';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {selectAppVisible} from '../../core/reducers/view.reducer';\nimport {MINIMUM_ONLY_FIELDS} from '../../experiments/experiment.consts';\nimport * as exSelectors from '../../experiments/reducers';\nimport {selectExperimentsMetricsCols, selectExperimentsTableCols} from '../../experiments/reducers';\nimport {selectSelectedProjectId} from '../../core/reducers/projects.reducer';\nimport {addMultipleSortColumns} from '../../shared/utils/shared-utils';\n\n@Injectable()\nexport class SelectCompareHeaderEffects {\n\n  constructor(private actions: Actions, public experimentsApi: ApiTasksService, private store: Store<any>) {\n  }\n\n  @Effect()\n  activeLoader = this.actions.pipe(\n    ofType(GET_SELECTED_EXPERIMENTS_FOR_COMPARE),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  refreshIfNeeded = this.actions.pipe(\n    ofType(refreshIfNeeded),\n    withLatestFrom(\n      this.store.select(selectAppVisible),\n      this.store.select(selectRouterParams).pipe(map(params => get('ids', params)?.split(','))),\n      this.store.pipe(select(selectExperimentsUpdateTime)),\n    ),\n    filter(([, isAppVisible, ,]) => isAppVisible),\n    switchMap(([action, , experimentsIds, experimentsUpdateTime]) =>\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      this.experimentsApi.tasksGetAllEx({id: experimentsIds, only_fields: ['last_update']}).pipe(\n        mergeMap((res) => {\n          const updatedExperimentsUpdateTime: { [key: string]: Date } = {};\n          res.tasks.forEach(task => {\n            updatedExperimentsUpdateTime[task.id] = task.last_update;\n          });\n          const experimentsWhereUpdated = !!(experimentsIds.find((id) =>\n            (new Date(experimentsUpdateTime[id]).getTime()) < new Date(updatedExperimentsUpdateTime[id]).getTime()\n          ));\n          const shouldUpdate = ((!action.payload) || (!action.autoRefresh) || experimentsWhereUpdated) && !(isEmpty(experimentsUpdateTime));\n          return [\n            setExperimentsUpdateTime({payload: updatedExperimentsUpdateTime}),\n            (shouldUpdate) ? setRefreshing({\n              payload: action.payload,\n              autoRefresh: action.autoRefresh\n            }) : new EmptyAction()];\n        }))\n    )\n  );\n  tableSortChange = createEffect(() => this.actions.pipe(\n    ofType(compareAddDialogTableSortChanged),\n    withLatestFrom(\n      this.store.select(selectCompareAddTableSortFields),\n      this.store.select(selectSelectedProjectId),\n      this.store.select(selectExperimentsTableCols),\n      this.store.select(selectExperimentsMetricsCols),\n    ),\n    switchMap(([action, oldOrders, projectId, tableCols, metricsCols]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      const colIds = tableCols.map(col => col.id).concat(metricsCols.map(col => col.id));\n      return [compareAddDialogSetTableSort({orders, projectId, colIds})];\n    })\n  ));\n\n  @Effect()\n  searchExperimentsForCompare = this.actions.pipe(\n    ofType(getSelectedExperimentsForCompareAddDialog),\n    withLatestFrom(this.store.select(selectRouterParams).pipe(map(params => get('ids', params)?.split(','))),\n      this.store.select(exSelectors.selectExperimentsTableCols),\n      this.store.select(exSelectors.selectExperimentsMetricsColsForProject)),\n    debounceTime(500),\n    switchMap(([action, tasksIds, cols, metricCols]) => this.experimentsApi.tasksGetAllEx({\n        id: action.tasksIds ? action.tasksIds : tasksIds,\n        only_fields: [...new Set([...MINIMUM_ONLY_FIELDS,\n          ...flatten(cols.filter(col => col.id !== 'selected' && !col.hidden).map(col => col.getter || col.id)),\n          ...(metricCols ? flatten(metricCols.map(col => col.getter || col.id)) : [])])]\n      }).pipe(\n      mergeMap((res) => [setSearchExperimentsForCompareResults({payload: [...res?.tasks]}), deactivateLoader(action.type)]),\n      )\n    ));\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TableDiffComponent} from './table-diff.component';\n\n@NgModule({\n  declarations: [TableDiffComponent],\n  imports     : [\n    CommonModule\n  ],\n  exports     : [TableDiffComponent]\n})\nexport class TableDiffModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CardComponent2} from './card-component2.component';\nimport {SyncScrollDirective} from '../../directives/sync-scroll.directive';\n\n@NgModule({\n  declarations: [CardComponent2, SyncScrollDirective],\n  imports     : [\n    CommonModule\n  ],\n  exports: [CardComponent2, SyncScrollDirective],\n})\nexport class CardModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DrawerComponent} from './drawer.component';\n\n@NgModule({\n  declarations: [DrawerComponent],\n  imports     : [\n    CommonModule\n  ],\n  exports     : [DrawerComponent]\n})\nexport class DrawerModule {\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, Effect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {IExperimentCompareMetricsValuesState} from '../reducers/experiments-compare-metrics-values.reducer';\nimport {activeLoader, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {catchError, mergeMap, map} from 'rxjs/operators';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {getExperimentsHyperParams, setHyperParamsList, setMetricsList, setTasks} from '../actions/experiments-compare-scalars-graph.actions';\nimport {setRefreshing} from '../actions/compare-header.actions';\nimport {GroupedHyperParams, HyperParams} from '../reducers/experiments-compare-charts.reducer';\n\n@Injectable()\nexport class ExperimentsCompareScalarsGraphEffects {\n\n  constructor(private actions$: Actions, private store: Store<IExperimentCompareMetricsValuesState>, public tasksApiService: ApiTasksService) {\n  }\n\n  @Effect()\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(getExperimentsHyperParams),\n    map(action => activeLoader(action.type))\n    )\n  );\n\n  loadMovies$ = createEffect(() => this.actions$.pipe(\n    ofType(getExperimentsHyperParams),\n    mergeMap((action) => this.tasksApiService.tasksGetAllEx({\n      id: action.experimentsIds,\n      only_fields: ['last_metrics', 'name', 'last_iteration', 'hyperparams']\n    })\n      .pipe(\n        // map(res => res.tasks)),\n        mergeMap(res => {\n          const metricsList = this.getMetricOptions(res.tasks);\n          const paramsHasDiffs = this.getParametersHasDiffs(res.tasks);\n          return [\n            setTasks({tasks: res.tasks}),\n            setMetricsList({metricsList: metricsList}),\n            setHyperParamsList({hyperParams: paramsHasDiffs}),\n            setRefreshing({payload: false}),\n            deactivateLoader(action.type)];\n        }),\n        catchError(error => [\n          requestFailed(error), deactivateLoader(action.type), setRefreshing({payload: false}),\n          setServerError(error, null, 'Failed to get Compared Experiments')\n        ])\n      )\n    ))\n  );\n\n  getMetricOptions(tasks) {\n    const metrics = {};\n    for (const task of tasks) {\n      for (const metric in task.last_metrics) {\n        for (const variant in task.last_metrics[metric]) {\n          const metricName = task.last_metrics[metric][variant].metric;\n          const variantName = task.last_metrics[metric][variant].variant;\n          !metrics[metricName] && (metrics[metricName] = {});\n          if (!metrics[metricName][variantName]) {\n            metrics[metricName][variantName] = {};\n            metrics[metricName][variantName]['name'] = `${metricName}/${variantName}`;\n            metrics[metricName][variantName]['path'] = `${metric}.${variant}`;\n          }\n        }\n      }\n    }\n    const metricsList = Object.keys(metrics).sort((a, b) => a.toLowerCase() > b.toLowerCase() ? 1 : -1).map(metricName => ({\n      metricName,\n      variants: Object.keys(metrics[metricName]).sort().map(variant => ({\n        name: variant,\n        value: metrics[metricName][variant]\n      }))\n    }));\n    return metricsList;\n  }\n\n  private getParametersHasDiffs(tasks): GroupedHyperParams {\n    const numberOfTasks = tasks.length;\n    let paramsValues: { [section: string]: { [param: string]: any[] } } = {};\n    tasks.forEach(task => {\n      paramsValues = task.hyperparams ? Object.values(task.hyperparams).reduce((acc, paramsObj) => {\n        Object.values(paramsObj).forEach((paramObj) => {\n          acc[paramObj.section] = acc[paramObj.section] || {};\n          acc[paramObj.section][paramObj.name] = acc[paramObj.section][paramObj.name] || [];\n          acc[paramObj.section][paramObj.name].push(paramObj.value);\n        });\n        return acc;\n      }, paramsValues) as { [section: string]: { [param: string]: any[] } } : paramsValues;\n    });\n\n    const paramsValuesHasDiff: { [section: string]: HyperParams } = {};\n    Object.entries(paramsValues).forEach(([section, params]) => {\n      paramsValuesHasDiff[section] = Object.entries(params).reduce((acc, [paramKey, values]) => {\n        acc[paramKey] = values.every(value => value !== '') && (numberOfTasks != values.length || values.some(val => val !== values[0]));\n        return acc;\n      }, {});\n    });\n    return paramsValuesHasDiff;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {get} from 'lodash/fp';\nimport {ITask} from '../../../business-logic/model/al-task';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExperimentParamsReverterService {\n\n  constructor() {\n  }\n\n  revertExperiments(experimentIds: string[], experiments: ITask[]) {\n    // map the experiment ids to keep the user order.\n    return experimentIds.map(id => {\n      const exp = experiments.find(ex => ex.id === id);\n      return {\n        id: exp.id,\n        name: exp.name,\n        status: exp.status,\n        last_iteration: exp.last_iteration,\n        last_update: exp.last_update,\n        project: exp.project,\n        completed: exp.completed,\n        tags: exp.tags,\n        hyperparams: get('hyperparams', exp) ? exp.hyperparams : {},\n      };\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {select, Store} from '@ngrx/store';\nimport * as paramsActions from '../actions/experiments-compare-params.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {catchError, map, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {ExperimentParamsReverterService} from '../services/experiment-params-reverter.service';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {selectExperimentIdsParams, selectExperimentsParams} from '../reducers';\nimport {Observable, of} from 'rxjs';\nimport {COMPARE_PARAMS_ONLY_FIELDS} from '../../../features/experiments-compare/experiments-compare-consts';\nimport {IExperimentDetail} from '../../../features/experiments-compare/experiments-compare-models';\nimport {REFETCH_EXPERIMENT_REQUESTED, refetchExperimentRequested, setRefreshing} from '../actions/compare-header.actions';\nimport {ExperimentCompareParamsState} from '../reducers/experiments-compare-params.reducer';\nimport {setExperiments} from '../actions/experiments-compare-params.actions';\nimport {ExperimentDetailBase, ExperimentParams} from '../shared/experiments-compare-details.model';\n\n@Injectable()\nexport class ExperimentsCompareParamsEffects {\n\n  constructor(private actions$: Actions, private tasksApi: ApiTasksService, private store: Store<ExperimentCompareParamsState>,\n              private experimentParamsReverter: ExperimentParamsReverterService\n  ) {\n  }\n\n  @Effect()\n  activeLoader$ = this.actions$.pipe(\n    ofType(paramsActions.experimentListUpdated, REFETCH_EXPERIMENT_REQUESTED),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  UpdateExperimentsDetail$ = this.actions$.pipe(\n    ofType(paramsActions.experimentListUpdated),\n    withLatestFrom(this.store.pipe(select(selectExperimentIdsParams))),\n    switchMap(([action, oldExperimentIds]) => {\n      const newExperimentIds = action.ids.filter(id => !oldExperimentIds.includes(id));\n      return this.fetchExperimentParams$(newExperimentIds)\n        .pipe(\n          withLatestFrom(this.store.pipe(select(selectExperimentsParams))),\n          // get only the relevant experiments\n          map(([experiments, oldExperiments]: [ExperimentDetailBase[], ExperimentParams[]]) =>\n            oldExperiments.filter(exp => action.ids.includes(exp.id)).concat(experiments as ExperimentParams[])),\n          mergeMap(experiments => [\n            deactivateLoader(action.type),\n            setExperiments({experiments})\n          ]),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, 'The attempt to retrieve your experiment data failed. Refresh your browser and try again.')\n          ]\n          )\n        );\n    }\n    )\n  );\n\n  @Effect()\n  RefetchExperiment$ = this.actions$.pipe(\n    ofType(refetchExperimentRequested),\n    withLatestFrom(this.store.select(selectExperimentIdsParams)),\n    switchMap(([action, newExperimentIds]) =>\n      this.fetchExperimentParams$(newExperimentIds).pipe(\n        mergeMap(experiments => [\n          deactivateLoader(action.type),\n          setRefreshing({payload: false}),\n          setExperiments({experiments : experiments as ExperimentParams[]})\n        ]),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          setRefreshing({payload: false}),\n          setServerError(\n            error, null,\n            'The attempt to retrieve your experiment data failed. Refresh your browser and try again.',\n            action.autoRefresh\n          )\n        ])\n      )),\n  );\n\n  fetchExperimentParams$(ids): Observable<Array<IExperimentDetail>> {\n    return ids.length > 0 ?\n      this.tasksApi.tasksGetAllEx({\n        id: ids,\n        only_fields: COMPARE_PARAMS_ONLY_FIELDS\n      })\n        .pipe(map(res => this.experimentParamsReverter.revertExperiments(ids, res.tasks)))\n      : of([]);\n  }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ExperimentsCompareComponent} from './experiments-compare.component';\nimport {ExperimentsCompareRoutingModule} from './experiments-compare-routing.module';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {experimentsCompareReducers} from './reducers';\nimport {ExperimentsCompareDetailsEffects} from './effects/experiments-compare-details.effects';\nimport {ExperimentsCompareDebugImagesEffects} from './effects/experiments-compare-debug-images.effects';\nimport {ExperimentsCompareChartsEffects} from './effects/experiments-compare-charts.effects';\nimport {ExperimentsCompareMetricsValuesEffects} from './effects/experiments-compare-metrics-values.effects';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {ExperimentCompareDetailsComponent} from './containers/experiment-compare-details/experiment-compare-details.component';\nimport {ExperimentCompareMetricValuesComponent} from './containers/experiment-compare-metric-values/experiment-compare-metric-values.component';\nimport {ExperimentCompareScalarChartsComponent} from './containers/experiment-compare-metric-charts/experiment-compare-scalar-charts.component';\nimport {ExperimentCompareHeaderComponent} from './dumbs/experiment-compare-header/experiment-compare-header.component';\nimport {ExperimentSharedModule} from '~/features/experiments/shared/experiment-shared.module';\nimport {ExperimentComparePlotsComponent} from './containers/experiment-compare-plots/experiment-compare-plots.component';\nimport {ExperimentGraphsModule} from '../shared/experiment-graphs/experiment-graphs.module';\n\nimport {DebugImagesModule} from '../debug-images/debug-images.module';\nimport {ExperimentCompareSharedModule} from './shared/experiment-compare-shared.module';\nimport {ExperimentCompareGeneralDataComponent} from './dumbs/experiment-compare-general-data/experiment-compare-general-data.component';\nimport {GetKeyValueArrayPipePipe} from './get-key-value-array-pipe.pipe';\nimport {SelectCompareHeaderEffects} from './effects/select-experiment-for-compare-effects.service';\nimport {SelectExperimentsForCompareComponent} from './containers/select-experiments-for-compare/select-experiments-for-compare.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {CompareCardListComponent} from './dumbs/compare-card-list/compare-card-list.component';\nimport {CompareCardBodyDirective} from './dumbs/compare-card-body.directive';\nimport {CompareCardExtraHeaderDirective} from './dumbs/compare-card-extra-header.directive';\nimport {CompareCardHeaderDirective} from './dumbs/compare-card-header.directive';\nimport {CommonExperimentSharedModule} from '../experiments/shared/common-experiment-shared.module';\nimport {TableDiffModule} from '../shared/ui-components/data/table-diff/table-diff.module';\nimport {CardModule} from '../shared/ui-components/panel/card2';\nimport {DrawerModule} from '../shared/ui-components/panel/drawer';\nimport {ParallelCoordinatesGraphComponent} from './dumbs/parallel-coordinates-graph/parallel-coordinates-graph.component';\nimport {ExperimentCompareHyperParamsGraphComponent} from './containers/experiment-compare-hyper-params-graph/experiment-compare-hyper-params-graph.component';\nimport {ExperimentsCompareScalarsGraphEffects} from './effects/experiments-compare-scalars-graph.effects';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {ExperimentCompareParamsComponent} from './containers/experiment-compare-params/experiment-compare-params.component';\nimport {ExperimentsCompareParamsEffects} from './effects/experiments-compare-params.effects';\nimport {FormsModule} from \"@angular/forms\";\nimport {UiComponentsModule} from \"../shared/ui-components/ui-components.module\";\nimport {SMMaterialModule} from \"../shared/material/material.module\";\nimport {ExperimentsCommonModule} from \"../experiments/common-experiments.module\";\n\nexport const compareSyncedKeys = [\n  'charts.settingsList',\n];\n\n\n@NgModule({\n  declarations: [\n    ExperimentsCompareComponent,\n    ExperimentCompareDetailsComponent,\n    ExperimentCompareParamsComponent,\n    ExperimentCompareMetricValuesComponent,\n    ExperimentCompareScalarChartsComponent,\n    ExperimentComparePlotsComponent,\n    ExperimentCompareHeaderComponent,\n    ExperimentCompareGeneralDataComponent,\n    GetKeyValueArrayPipePipe,\n    SelectExperimentsForCompareComponent,\n    CompareCardListComponent,\n    CompareCardBodyDirective,\n    CompareCardExtraHeaderDirective,\n    CompareCardHeaderDirective,\n    ParallelCoordinatesGraphComponent,\n    ExperimentCompareHyperParamsGraphComponent\n  ],\n  exports: [\n    GetKeyValueArrayPipePipe\n  ],\n  imports: [\n    CommonModule,\n    DragDropModule,\n    DebugImagesModule,\n    SMSharedModule,\n    SMMaterialModule,\n    UiComponentsModule,\n    TableDiffModule,\n    ScrollingModule,\n    CardModule,\n    DrawerModule,\n    ExperimentSharedModule,\n    ExperimentsCompareRoutingModule,\n    ExperimentGraphsModule,\n    ExperimentCompareSharedModule,\n    CommonExperimentSharedModule,\n    ExperimentsCommonModule,\n    StoreModule.forFeature('experimentsCompare', experimentsCompareReducers),\n    EffectsModule.forFeature([\n      ExperimentsCompareDetailsEffects,\n      ExperimentsCompareParamsEffects,\n      ExperimentsCompareDebugImagesEffects,\n      ExperimentsCompareChartsEffects,\n      ExperimentsCompareMetricsValuesEffects,\n      SelectCompareHeaderEffects,\n      ExperimentsCompareScalarsGraphEffects]),\n    MatRadioModule,\n    FormsModule,\n  ]\n})\nexport class ExperimentsCompareModule {\n}\n\n","import {resetState, setExperiments} from '../actions/experiments-compare-details.actions';\nimport {IExperimentDetail} from '../../../features/experiments-compare/experiments-compare-models';\nimport {createReducer, on} from '@ngrx/store';\n\nexport interface ExperimentCompareDetailsState {\n  experiments: Array<IExperimentDetail>;\n}\n\nexport const initialState: ExperimentCompareDetailsState = {\n  experiments  : []\n};\n\nconst _experimentsCompareDetailsReducer = createReducer(initialState,\n  on(setExperiments, (state: ExperimentCompareDetailsState, {experiments}) => ({...state, experiments})),\n  on(resetState, () => ({...initialState}))\n);\n\nexport const experimentsCompareDetailsReducer = (state, action) => _experimentsCompareDetailsReducer(state, action);\n\n\n","import {Task} from '../../../business-logic/model/tasks/task';\nimport {\n  RESET_EXPERIMENT_METRICS,\n  SET_EXPERIMENT_HISTOGRAM,\n  SET_EXPERIMENT_METRICS_SEARCH_TERM,\n  SET_EXPERIMENT_PLOTS,\n  SET_SELECTED_EXPERIMENTS,\n  setAxisCache,\n  UPDATE_EXPERIMENT_SETTINGS\n} from '../actions/experiments-compare-charts.actions';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\nimport {GroupByCharts} from '../../experiments/reducers/common-experiment-output.reducer';\nimport {IMultiplot} from '@common/tasks/tasks.utils';\n\nexport type MetricValueType = 'min_value' | 'max_value' | 'value';\n\nexport interface SelectedMetric {\n  name: string;\n  path: string;\n}\n\nexport interface GroupedHyperParams {\n  [section: string]: HyperParams;\n}\n\nexport interface HyperParams {\n  [name: string]: boolean;\n}\n\nexport interface VariantOption {\n  name: string;\n  value: SelectedMetric;\n}\n\nexport interface MetricOption {\n  metricName: string;\n  variants: VariantOption[];\n}\n\nexport interface IExperimentCompareChartsState {\n  metricsMultiScalarsCharts: any;\n  metricsHistogramCharts: any;\n  cachedAxisType: ScalarKeyEnum;\n  metricsPlotsCharts: IMultiplot;\n  settingsList: Array<IExperimentCompareSettings>;\n  searchTerm: string;\n  showSettingsBar: boolean;\n  selectedExperiments: Array<string>;\n}\n\nexport interface IExperimentCompareSettings {\n  id: Array<Task['id']>;\n  hiddenMetricsScalar: Array<string>;\n  hiddenMetricsPlot: Array<string>;\n  selectedHyperParams: Array<string>;\n  selectedMetric: SelectedMetric;\n  selectedScalar: string;\n  selectedPlot: string;\n  smoothWeight: number;\n  xAxisType: ScalarKeyEnum;\n  groupBy: GroupByCharts;\n}\n\nexport const initialState: IExperimentCompareChartsState = {\n  metricsMultiScalarsCharts: null,\n  metricsHistogramCharts: null,\n  cachedAxisType: null,\n  metricsPlotsCharts: null,\n  settingsList: [],  // TODO, Make this an object with ID's as key YK\n  searchTerm: '',\n  showSettingsBar: false,\n  selectedExperiments: [], // TODO: Move this to the general compare reducer\n};\n\nexport function experimentsCompareChartsReducer(state: IExperimentCompareChartsState = initialState, action): IExperimentCompareChartsState {\n  switch (action.type) {\n    case SET_SELECTED_EXPERIMENTS:\n      return {...state, selectedExperiments: action.payload.selectedExperiments};\n    case SET_EXPERIMENT_METRICS_SEARCH_TERM:\n      return {...state, searchTerm: action.payload.searchTerm};\n    case SET_EXPERIMENT_HISTOGRAM:\n      return {...state, metricsHistogramCharts: action.payload, cachedAxisType: action.axisType};\n    case setAxisCache.type:\n      return {...state, cachedAxisType: (action as ReturnType<typeof setAxisCache>).axis};\n    case SET_EXPERIMENT_PLOTS:\n      return {...state, metricsPlotsCharts: action.payload};\n    case UPDATE_EXPERIMENT_SETTINGS: {\n      let newSettings;\n      const isExperimentExists = state.settingsList.find((setting) => setting.id.join() === action.payload.id.join());\n      if (isExperimentExists) {\n        newSettings = state.settingsList.map(setting => setting.id.join() === action.payload.id.join() ? {...setting, ...action.payload.changes} : setting);\n      } else {\n        newSettings = state.settingsList.slice();\n        newSettings.push({id: action.payload.id, ...action.payload.changes});\n      }\n      return {...state, settingsList: newSettings};\n    }\n    case RESET_EXPERIMENT_METRICS:\n      return {\n        ...state,\n        metricsMultiScalarsCharts: initialState.metricsMultiScalarsCharts,\n        metricsHistogramCharts: initialState.metricsHistogramCharts,\n        metricsPlotsCharts: initialState.metricsPlotsCharts,\n        cachedAxisType: initialState.cachedAxisType\n      };\n    default:\n      return state;\n  }\n}\n","import * as actions from '../actions/experiments-compare-metrics-values.actions';\nimport {Task} from '../../../business-logic/model/tasks/task';\n\nexport interface MetricSortBy {\n  keyOrValue?: 'key' | 'value';\n  order?: 'asc' | 'desc';\n  keyOrder?: Array<string>;\n}\n\nexport interface IExperimentCompareMetricsValuesState {\n  experiments: Array<Task>;\n  metricSortBy: MetricSortBy;\n}\n\nexport const initialState: IExperimentCompareMetricsValuesState = {\n  experiments : null,\n  metricSortBy: {}\n};\n\n\nexport function experimentsCompareMetricsValuesReducer(state: IExperimentCompareMetricsValuesState = initialState, action): IExperimentCompareMetricsValuesState {\n  switch (action.type) {\n    case actions.SET_COMPARED_EXPERIMENTS:\n      return {...state, experiments: action.payload.experiments};\n    case actions.RESET_STATE:\n      return {...initialState};\n    case actions.SET_METRIC_VALUES_SORT_BY:\n      return {\n        ...state, metricSortBy: {\n          ...state.metricSortBy,\n          [action.payload.metric]: {keyOrValue: action.payload.keyOrValue, order: action.payload.order, keyOrder: action.payload.keyOrder}\n        }\n      };\n    default:\n      return state;\n  }\n}\n","export interface IExperimentCompareDebugImagesState {\n  bla: string;\n}\n\nexport const initialState: IExperimentCompareDebugImagesState = {\n  bla: null,\n};\n\n\nexport function experimentsCompareDebugImagesReducer(state: IExperimentCompareDebugImagesState = initialState, action): IExperimentCompareDebugImagesState {\n  switch (action.type) {\n    // case SET_EXPERIMENT:\n    //   return { ...state, selectedExperiment: action.payload };\n    default:\n      return state;\n  }\n}\n","import {\n  compareAddDialogSetTableSort, compareAddTableClearAllFilters, compareAddTableFilterChanged, compareAddTableFilterInit,\n  resetSelectCompareHeader,\n  setExperimentsUpdateTime,\n  setHideIdenticalFields,\n  setNavigationPreferences,\n  setRefreshing,\n  setSearchExperimentsForCompareResults,\n  setShowSearchExperimentsForCompare,\n  toggleShowScalarOptions\n} from '../actions/compare-header.actions';\nimport {createReducer, on} from '@ngrx/store';\nimport {Params} from '@angular/router';\nimport {ITableExperiment} from '../../experiments/shared/common-experiment-model.model';\nimport {commonExperimentsInitialState} from '../../experiments/reducers/common-experiments-view.reducer';\nimport {SortMeta} from 'primeng/api';\n\nexport interface CompareHeaderState {\n  searchResultsExperiments: ITableExperiment[];\n  searchTerm: string;\n  showSearch: boolean;\n  hideIdenticalRows: boolean;\n  viewMode: string;\n  showScalarOptions: boolean;\n  refreshing: boolean;\n  autoRefresh: boolean;\n  navigationPreferences: Params;\n  experimentsUpdateTime: { [key: string]: Date };\n  projectColumnsSortOrder: { [projectId: string]: SortMeta[] };\n  projectColumnFilters: { [projectId: string]: { [columnId: string]: { value: any; matchMode: string } } };\n};\n\n\nexport const initialState: CompareHeaderState = {\n  searchResultsExperiments: [],\n  searchTerm: null,\n  showSearch: false,\n  hideIdenticalRows: false,\n  viewMode: 'values',\n  showScalarOptions: false,\n  refreshing: false,\n  autoRefresh: false,\n  navigationPreferences: {},\n  experimentsUpdateTime: {},\n  projectColumnsSortOrder: {},\n  projectColumnFilters: {},\n};\n\nconst _compareHeader = createReducer(initialState,\n  on(setHideIdenticalFields, (state: CompareHeaderState, {payload}) => ({...state, hideIdenticalRows: payload})),\n  on(setSearchExperimentsForCompareResults, (state: CompareHeaderState, {payload}) => ({\n    ...state,\n    searchResultsExperiments: payload\n  })),\n  on(setExperimentsUpdateTime, (state: CompareHeaderState, {payload}) => ({...state, experimentsUpdateTime: payload})),\n  on(setShowSearchExperimentsForCompare, (state: CompareHeaderState, {payload}) => ({...state, showSearch: payload})),\n  on(toggleShowScalarOptions, (state: CompareHeaderState) => ({...state, showScalarOptions: !state.showScalarOptions})),\n  on(setRefreshing, (state: CompareHeaderState, {payload, autoRefresh}) => ({\n    ...state,\n    refreshing: payload,\n    autoRefresh\n  })),\n  on(setNavigationPreferences, (state: CompareHeaderState, {navigationPreferences}) => ({\n    ...state,\n    navigationPreferences: {...state.navigationPreferences, ...navigationPreferences}\n  })),\n  on(resetSelectCompareHeader, () => ({...initialState})),\n  on(compareAddDialogSetTableSort, (state, action) => {\n    let orders = action.orders.filter(order => action.colIds.includes(order.field));\n    orders = orders.length > 0 ? orders : commonExperimentsInitialState.tableOrders;\n    return {...state, projectColumnsSortOrder: {...state.projectColumnsSortOrder, [action.projectId]: orders}};\n  }),\n  on(compareAddTableFilterInit, (state, action) => ({\n    ...state,\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {['project.name']: {value: [action.projectId], matchMode: undefined}}\n    }})),\n  on(compareAddTableClearAllFilters, (state, action) => ({\n    ...state,\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {}\n    }\n  })),\n  on(compareAddTableFilterChanged, (state, action) => ({\n    ...state,\n    // activeParentsFilter: action.filter.col === EXPERIMENTS_TABLE_COL_FIELDS.PARENT ?\n    //   action.filter.value.map(parentId => state.parents.find(parent => parent.id === parentId)).filter(p => !!p) : [],\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {\n        ...state.projectColumnFilters[action.projectId],\n        [action.filter.col]: {value: action.filter.value, matchMode: action.filter.filterMatchMode}\n      }\n    }\n  })),\n);\n\nexport function compareHeader(state, action) {\n  return _compareHeader(state, action);\n}\n","import {createReducer, on} from '@ngrx/store';\nimport {setHyperParamsList, setMetricsList, setShowIdenticalHyperParams, setTasks, setvalueType} from '../actions/experiments-compare-scalars-graph.actions';\nimport {GroupedHyperParams, HyperParams, MetricOption, MetricValueType} from './experiments-compare-charts.reducer';\n\nexport interface ScalarsGraphState {\n  showIdenticalHyperParams: boolean;\n  metrics: MetricOption[];\n  hyperParams: GroupedHyperParams;\n  tasks: any;\n  valueType: MetricValueType;\n}\n\nexport const initialState: ScalarsGraphState = {\n  showIdenticalHyperParams: true,\n  metrics: null,\n  hyperParams: null,\n  tasks: [],\n  valueType: 'value'\n};\n\nconst _scalarsGraphReducer = createReducer(initialState,\n  on(setShowIdenticalHyperParams, (state: ScalarsGraphState) => ({...state, showIdenticalHyperParams: !state.showIdenticalHyperParams})),\n  on(setMetricsList, (state: ScalarsGraphState, {metricsList}) => ({...state, metrics: metricsList})),\n  on(setHyperParamsList, (state: ScalarsGraphState, {hyperParams}) => ({...state, hyperParams: hyperParams})),\n  on(setTasks, (state: ScalarsGraphState, {tasks}) => ({...state, tasks: tasks})),\n  on(setvalueType, (state: ScalarsGraphState, {valueType}) => ({...state, valueType})),\n);\n\nexport function scalarsGraphReducer(state, action) {\n  return _scalarsGraphReducer(state, action);\n}\n","import {ExperimentParams} from '../shared/experiments-compare-details.model';\nimport {resetState, setExperiments} from '../actions/experiments-compare-params.actions';\nimport {createReducer, on} from '@ngrx/store';\n\nexport interface ExperimentCompareParamsState {\n  experiments: Array<ExperimentParams>;\n}\n\nexport const initialState: ExperimentCompareParamsState = {\n  experiments: []\n};\n\n\n\nconst _experimentsCompareParamsReducer = createReducer(initialState,\n  on(setExperiments, (state: ExperimentCompareParamsState, {experiments}) => ({...state, experiments: experiments})),\n  on(resetState, (state: ExperimentCompareParamsState) => ({...initialState}))\n);\n\nexport function experimentsCompareParamsReducer(state, action) {\n  return _experimentsCompareParamsReducer(state, action);\n}\n\n\n","import {ActionReducerMap, createSelector} from '@ngrx/store';\nimport {ExperimentCompareDetailsState, experimentsCompareDetailsReducer} from './experiments-compare-details.reducer';\nimport {experimentsCompareChartsReducer, GroupedHyperParams, IExperimentCompareChartsState, IExperimentCompareSettings, MetricOption, MetricValueType} from './experiments-compare-charts.reducer';\nimport {experimentsCompareMetricsValuesReducer, IExperimentCompareMetricsValuesState, MetricSortBy} from './experiments-compare-metrics-values.reducer';\nimport {experimentsCompareDebugImagesReducer} from './experiments-compare-debug-images.reducer';\nimport {get} from 'lodash/fp';\nimport {Task} from '../../../business-logic/model/tasks/task';\nimport {compareHeader, CompareHeaderState} from './compare-header.reducer';\nimport {IExperimentDetail} from '../../../features/experiments-compare/experiments-compare-models';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\nimport {scalarsGraphReducer, ScalarsGraphState} from './experiments-compare-scalars-graph.reducer';\nimport {ExperimentParams} from '../shared/experiments-compare-details.model';\nimport {ExperimentCompareParamsState, experimentsCompareParamsReducer} from './experiments-compare-params.reducer';\nimport {GroupByCharts} from '../../experiments/reducers/common-experiment-output.reducer';\nimport {ITableExperiment} from '../../experiments/shared/common-experiment-model.model';\nimport {selectSelectedProjectId} from '../../core/reducers/projects.reducer';\nimport {selectRouterConfig} from '../../core/reducers/router-reducer';\nimport {TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport { EXPERIMENTS_TABLE_COL_FIELDS } from '../../../features/experiments/shared/experiments.const';\n\nexport const experimentsCompareReducers: ActionReducerMap<any, any> = {\n  details      : experimentsCompareDetailsReducer,\n  params       : experimentsCompareParamsReducer,\n  metricsValues: experimentsCompareMetricsValuesReducer,\n  charts       : experimentsCompareChartsReducer,\n  debugImages  : experimentsCompareDebugImagesReducer,\n  compareHeader,\n  scalarsGraph : scalarsGraphReducer\n};\n\nexport const experimentsCompare = state => state.experimentsCompare;\n\n// Details\nexport const experimentsDetails = createSelector(experimentsCompare, (state): ExperimentCompareDetailsState => state ? state.details : {});\nexport const selectExperimentsDetails = createSelector(experimentsDetails, (state): Array<IExperimentDetail> => state.experiments);\nexport const selectExperimentIdsDetails = createSelector(selectExperimentsDetails,\n  (experiments): Array<IExperimentDetail['id']> => experiments.map(exp => exp.id));\n\n// Params\nexport const experimentsParams = createSelector(experimentsCompare, (state): ExperimentCompareParamsState => state ? state.params : {});\nexport const selectExperimentsParams = createSelector(experimentsParams, (state): Array<ExperimentParams> => state.experiments);\nexport const selectExperimentIdsParams = createSelector(selectExperimentsParams,\n  (experiments): Array<IExperimentDetail['id']> => experiments.map(exp => exp.id));\n\n\n// select experiments for compare and header\nexport const selectCompareHeader = createSelector(experimentsCompare, (state): CompareHeaderState => state ? state.compareHeader : {});\nexport const selectIsCompare = createSelector(selectRouterConfig, (config): boolean => config?.includes('compare-experiments'));\n\nexport const selectCompareAddTableSortFields = createSelector(selectCompareHeader, selectSelectedProjectId,\n  (state, projectId) => state.projectColumnsSortOrder?.[projectId] ||  [{field: EXPERIMENTS_TABLE_COL_FIELDS.LAST_UPDATE, order: TABLE_SORT_ORDER.DESC}]);\nexport const selectCompareAddTableFilters = createSelector(selectCompareHeader, selectSelectedProjectId,\n  (state, projectId) => state.projectColumnFilters?.[projectId] || {});\nexport const selectSelectedExperimentsForCompareAdd = createSelector(selectCompareHeader, (state): ITableExperiment[] => state ? state.searchResultsExperiments : []);\nexport const selectExperimentsForCompareSearchTerm = createSelector(selectCompareHeader, (state) => state?.searchTerm);\nexport const selectShowAddExperimentsForCompare = createSelector(selectCompareHeader, (state) => state?.showSearch);\nexport const selectHideIdenticalFields = createSelector(selectCompareHeader, (state) => state?.hideIdenticalRows);\nexport const selectShowScalarsOptions = createSelector(selectCompareHeader, (state) => state?.showScalarOptions);\nexport const selectRefreshing = createSelector(selectCompareHeader, (state) => state ? {refreshing: state.refreshing, autoRefresh: state.autoRefresh} : {refreshing: false, autoRefresh: false});\nexport const selectExperimentsUpdateTime = createSelector(selectCompareHeader, (state) => state ? state.experimentsUpdateTime : {});\nexport const selectNavigationPreferences = createSelector(selectCompareHeader, (state) => state ? state.navigationPreferences : {});\n\n// Metric Values\nexport const compareMetricsValues = createSelector(experimentsCompare, (state): IExperimentCompareMetricsValuesState => state ? state.metricsValues : {});\nexport const selectCompareMetricsValuesExperiments = createSelector(compareMetricsValues, (state): Array<Task> => state.experiments);\nexport const selectCompareMetricsValuesSortConfig = createSelector(compareMetricsValues, (state): MetricSortBy => state.metricSortBy);\n\n// Charts\nexport const compareCharts = createSelector(experimentsCompare, (state): IExperimentCompareChartsState => state ? state.charts : {});\nexport const selectSelectedExperiments = createSelector(compareCharts, (state): Array<string> => state ? state.selectedExperiments : []);\nexport const selectCompareHistogramCacheAxisType = createSelector(compareCharts, (state) => state.cachedAxisType);\nexport const selectCompareTasksPlotCharts = createSelector(compareCharts, state => state.metricsPlotsCharts);\n\nexport const selectSelectedExperimentSettings = createSelector(compareCharts, selectSelectedExperiments,\n  (output, currentExperiments): IExperimentCompareSettings => output.settingsList && output.settingsList.find((setting) => currentExperiments && setting.id.join() === currentExperiments.join()));\n\nexport const selectSelectedSettingsHiddenPlot = createSelector(selectSelectedExperimentSettings,\n  (settings): Array<string> => get('hiddenMetricsPlot', settings) || []);\n\nexport const selectSelectedSettigsHyperParams = createSelector(selectSelectedExperimentSettings,\n  (settings): Array<string> => get('selectedHyperParams', settings) || []);\n\nexport const selectSelectedSettigsMetric = createSelector(selectSelectedExperimentSettings,\n  (settings) => get('selectedMetric', settings) || null);\n\nexport const selectSelectedSettingsHiddenScalar = createSelector(selectSelectedExperimentSettings,\n  (settings): Array<string> => get('hiddenMetricsScalar', settings) || []);\n\nexport const selectExperimentMetricsSearchTerm = createSelector(compareCharts, (state) => state.searchTerm);\nexport const selectCompareSelectedSettingsSmoothWeight = createSelector(selectSelectedExperimentSettings,\n  (settings): number => get('smoothWeight', settings) || 0);\n\nexport const selectCompareSelectedSettingsxAxisType = createSelector(selectSelectedExperimentSettings,\n  (settings): ScalarKeyEnum => get('xAxisType', settings) || ScalarKeyEnum.Iter);\n\nexport const selectCompareSelectedSettingsGroupBy = createSelector(selectSelectedExperimentSettings,\n  (settings): GroupByCharts => settings?.groupBy || GroupByCharts.None);\n\n\nexport const selectScalarsGraph = createSelector(experimentsCompare, (state): ScalarsGraphState => state ? state.scalarsGraph : {});\nexport const selectScalarsGraphShowIdenticalHyperParams = createSelector(selectScalarsGraph, (state): boolean => state ? state.showIdenticalHyperParams : true);\nexport const selectScalarsGraphMetrics = createSelector(selectScalarsGraph, (state): MetricOption[] => state.metrics);\nexport const selectScalarsGraphHyperParams = createSelector(selectScalarsGraph, (state): GroupedHyperParams => state ? state.hyperParams : {});\nexport const selectScalarsGraphTasks = createSelector(selectScalarsGraph, (state): any[] => state ? state.tasks : []);\nexport const selectMetricValueType = createSelector(selectScalarsGraph, (state): MetricValueType => state ? state.valueType : 'value');\n\nexport const selectCompareTasksScalarCharts = createSelector(\n  selectCompareSelectedSettingsxAxisType,\n  compareCharts,\n  (axisType, state) => {\n    if (state?.metricsHistogramCharts?.metrics && (!axisType || axisType === ScalarKeyEnum.IsoTime)) {\n      return  {\n        metrics: Object.keys(state.metricsHistogramCharts.metrics).reduce((metricAcc, metricName) => {\n          const metric = state.metricsHistogramCharts.metrics[metricName];\n          metricAcc[metricName] = Object.keys(metric).reduce((groupAcc, groupName) => {\n            const group = metric[groupName];\n            groupAcc[groupName] = Object.keys(group).reduce((graphAcc, graphName) => {\n              const graph = group[graphName];\n              graphAcc[graphName] = {...graph, x: graph.x.map(ts => new Date(ts))};\n              return graphAcc;\n            }, {});\n            return groupAcc;\n          }, {});\n          return metricAcc;\n        }, {})\n      };\n    }\n    return state.metricsHistogramCharts;\n  });\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ExperimentSettingsComponent} from '../../shared/components/experiment-settings/experiment-settings';\nimport {SMSharedModule} from '../../shared/shared.module';\n\nconst _declerations = [\n  ExperimentSettingsComponent,\n];\n\n@NgModule({\n  imports        : [\n    CommonModule,\n    SMSharedModule\n  ],\n  declarations   : [_declerations],\n  exports        : [..._declerations]\n})\nexport class ExperimentCompareSharedModule {\n}\n","import {Action, createAction, props} from '@ngrx/store';\nimport {ISelectedExperiment} from '../../../features/experiments/shared/experiment-info.model';\nimport {IExperimentSettings} from '../reducers/common-experiment-output.reducer';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\nimport {MetricsPlotEvent} from '../../../business-logic/model/events/metricsPlotEvent';\nimport {EventsScalarMetricsIterRawRequest} from '../../../business-logic/model/events/eventsScalarMetricsIterRawRequest';\nimport {EventsScalarMetricsIterRawResponse} from '../../../business-logic/model/events/eventsScalarMetricsIterRawResponse';\n\nexport const EXPERIMENTS_OUTPUT_PREFIX = 'EXPERIMENTS_OUTPUT_';\n\n\nexport const GET_EXPERIMENT_LOG = EXPERIMENTS_OUTPUT_PREFIX + 'GET_EXPERIMENT_LOG';\nexport const SET_EXPERIMENT_LOG = EXPERIMENTS_OUTPUT_PREFIX + 'SET_EXPERIMENT_LOG';\nexport const SET_EXPERIMENT_METRICS_SEARCH_TERM = EXPERIMENTS_OUTPUT_PREFIX + 'SET_EXPERIMENT_METRICS_SEARCH_TERM';\nexport const SET_EXPERIMENT_HISTOGRAM = EXPERIMENTS_OUTPUT_PREFIX + 'SET_EXPERIMENT_HISTOGRAM';\nexport const SET_EXPERIMENT_PLOTS = EXPERIMENTS_OUTPUT_PREFIX + 'SET_EXPERIMENT_PLOTS';\nexport const RESET_OUTPUT = EXPERIMENTS_OUTPUT_PREFIX + 'RESET_OUTPUT';\n\n\n// EVENTS:\n\nexport const EXPERIMENT_METRICS_REQUESTED = EXPERIMENTS_OUTPUT_PREFIX + 'EXPERIMENT_METRICS_REQUESTED';\nexport const EXPERIMENT_PLOTS_REQUESTED = EXPERIMENTS_OUTPUT_PREFIX + 'EXPERIMENT_PLOTS_REQUESTED';\nexport const EXPERIMENT_SCALAR_REQUESTED = EXPERIMENTS_OUTPUT_PREFIX + 'EXPERIMENT_SCALAR_REQUESTED';\n\nexport const CHANGE_PROJECT_REQUESTED = EXPERIMENTS_OUTPUT_PREFIX + 'CHANGE_PROJECT_REQUESTED';\nexport const UPDATE_EXPERIMENT_SETTINGS = EXPERIMENTS_OUTPUT_PREFIX + 'UPDATE_EXPERIMENT_SETTINGS';\nexport const RESET_EXPERIMENT_METRICS = EXPERIMENTS_OUTPUT_PREFIX + 'RESET_EXPERIMENT_METRICS';\nexport const RESET_EXPERIMENT_SCALARS = EXPERIMENTS_OUTPUT_PREFIX + 'RESET_EXPERIMENT_SCALARS';\nexport const RESET_EXPERIMENT_PLOTS = EXPERIMENTS_OUTPUT_PREFIX + 'RESET_EXPERIMENT_PLOTS';\n\nexport const SET_LOG_FILTER = EXPERIMENTS_OUTPUT_PREFIX + 'SET_LOG_FILTER';\nexport const RESET_LOG_FILTER = EXPERIMENTS_OUTPUT_PREFIX + 'RESET_LOG_FILTER';\n\n\nexport class ResetOutput implements Action {\n  readonly type = RESET_OUTPUT;\n}\n\n\nexport class ExperimentMetricsRequested implements Action {\n  readonly type = EXPERIMENT_METRICS_REQUESTED;\n\n  constructor(public payload: ISelectedExperiment) {\n  }\n}\n\nexport const experimentPlotsRequested = createAction(\n  EXPERIMENT_PLOTS_REQUESTED,\n  props<{ task: string }>()\n);\n\nexport const getGraphDisplayFullDetailsScalars = createAction(\n  EXPERIMENTS_OUTPUT_PREFIX + 'GET_FULL_DETAILS_SCALAR',\n  props<EventsScalarMetricsIterRawRequest>()\n);\n\nexport const convertXtypeGraphDisplayFullDetailsScalars = createAction(\n  EXPERIMENTS_OUTPUT_PREFIX + 'convertXtype_FULL_DETAILS_SCALAR',\n  props<{xAxisType: ScalarKeyEnum}>()\n);\n\nexport const setXtypeGraphDisplayFullDetailsScalars = createAction(\n  EXPERIMENTS_OUTPUT_PREFIX + 'SET_Xtype_FULL_DETAILS_SCALAR',\n  props<{xAxisType: ScalarKeyEnum}>()\n);\n\nexport const setGraphDisplayFullDetailsScalars = createAction(\n  EXPERIMENTS_OUTPUT_PREFIX + 'SET_FULL_DETAILS_SCALAR',\n  props<{ data }>()\n);\n\nexport const setGraphDisplayFullDetailsScalarsIsOpen = createAction(\n  EXPERIMENTS_OUTPUT_PREFIX + 'SET_FULL_DETAILS_SCALAR_IS_OPEN',\n  props<{ isOpen: boolean }>()\n);\n\nexport const mergeGraphDisplayFullDetailsScalars = createAction(\n  EXPERIMENTS_OUTPUT_PREFIX + 'MERGE_FULL_DETAILS_SCALAR',\n  props<{ data: EventsScalarMetricsIterRawResponse }>()\n);\n\nexport class ExperimentScalarRequested implements Action {\n  readonly type = EXPERIMENT_SCALAR_REQUESTED;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class SetExperimentHistogram implements Action {\n  readonly type = SET_EXPERIMENT_HISTOGRAM;\n\n  constructor(public payload: { [metric: string]: { [variant: string]: unknown } }, public axisType: ScalarKeyEnum) {\n  }\n}\n\nexport class SetExperimentPlots implements Action {\n  readonly type = SET_EXPERIMENT_PLOTS;\n\n  constructor(public payload: MetricsPlotEvent[]) {\n  }\n}\n\nexport const getExperimentLog = createAction(\n  GET_EXPERIMENT_LOG,\n  props<{ id: string; direction?: string; refresh?: boolean; from?: number }>()\n);\n\nexport const setExperimentLog = createAction(\n  SET_EXPERIMENT_LOG,\n  props<{ events: any[]; direction?: string; total: number; refresh?: boolean }>()\n);\n\nexport class SetExperimentSettings implements Action {\n  readonly type = UPDATE_EXPERIMENT_SETTINGS;\n\n  constructor(public payload: { id: string; changes: Partial<IExperimentSettings> }) {\n  }\n}\n\nexport class SetExperimentMetricsSearchTerm implements Action {\n  readonly type = SET_EXPERIMENT_METRICS_SEARCH_TERM;\n\n  constructor(public payload: { searchTerm: string }) {\n  }\n}\n\nexport class ResetExperimentMetrics implements Action {\n  readonly type = RESET_EXPERIMENT_METRICS;\n}\n\nexport class SetLogFilter implements Action {\n  readonly type = SET_LOG_FILTER;\n\n  constructor(public filterString: string) {\n  }\n}\n\nexport class ResetLogFilter implements Action {\n  readonly type = RESET_LOG_FILTER;\n\n}\n\nexport const downloadFullLog = createAction(EXPERIMENTS_OUTPUT_PREFIX + 'DOWNLOAD_FULL_LOG', props<{ experimentId: string }>());\nexport const toggleSettings = createAction(EXPERIMENTS_OUTPUT_PREFIX + 'TOGGLE_SETTINGS');\n\n","import {Action, createAction, props} from '@ngrx/store';\nimport {Task} from '../../../business-logic/model/tasks/task';\nimport {IExperimentInfo, ISelectedExperiment} from '../../../features/experiments/shared/experiment-info.model';\nimport {Model} from '../../../business-logic/model/models/model';\nimport {ITableExperiment} from '../shared/common-experiment-model.model';\nimport {ParamsItem} from '../../../business-logic/model/tasks/paramsItem';\nimport {ConfigurationItem} from '../../../business-logic/model/tasks/configurationItem';\nimport {IExperimentInfoState} from '../../../features/experiments/reducers/experiment-info.reducer';\nimport {experimentSectionsEnum} from '../../../features/experiments/shared/experiments.const';\nimport {ActivatedRoute} from '@angular/router';\nimport {ITask} from '../../../business-logic/model/al-task';\n\nexport const EXPERIMENTS_INFO_PREFIX = 'EXPERIMENTS_INFO_';\nexport const GET_EXPERIMENT_INFO = EXPERIMENTS_INFO_PREFIX + 'GET_EXPERIMENT_INFO';\nexport const AUTO_REFRESH_EXPERIMENT_INFO = EXPERIMENTS_INFO_PREFIX + 'AUTO_REFRESH_EXPERIMENT_INFO';\nexport const SET_EXPERIMENT = EXPERIMENTS_INFO_PREFIX + 'SET_EXPERIMENT';\nexport const EXPERIMENT_UPDATED_SUCCESSFULLY = EXPERIMENTS_INFO_PREFIX + 'EXPERIMENT_UPDATED_SUCCESSFULLY';\nexport const SET_EXPERIMENT_INFO_DATA = EXPERIMENTS_INFO_PREFIX + 'SET_EXPERIMENT_INFO_DATA';\nexport const RESET_EXPERIMENT_INFO = EXPERIMENTS_INFO_PREFIX + 'RESET_EXPERIMENT_INFO';\nexport const UPDATE_EXPERIMENT_INFO_DATA = EXPERIMENTS_INFO_PREFIX + 'UPDATE_EXPERIMENT_INFO_DATA';\nexport const MODEL_SELECTED = EXPERIMENTS_INFO_PREFIX + 'MODEL_SELECTED';\n\nexport const SET_EXPERIMENT_FORM_ERRORS = EXPERIMENTS_INFO_PREFIX + 'SET_EXPERIMENT_FORM_ERRORS';\nexport const SET_EXPERIMENT_ERRORS = EXPERIMENTS_INFO_PREFIX + 'SET_EXPERIMENT_ERRORS';\nexport const ACTIVATE_EDIT = EXPERIMENTS_INFO_PREFIX + 'ACTIVATE_EDIT';\nexport const DEACTIVATE_EDIT = EXPERIMENTS_INFO_PREFIX + 'DEACTIVATE_EDIT';\nexport const RESET_STATE = EXPERIMENTS_INFO_PREFIX + 'RESET_STATE';\n// EVENTS:\nexport const EXPERIMENT_DATA_UPDATED = EXPERIMENTS_INFO_PREFIX + 'EXPERIMENT_DATA_UPDATED';\nexport const EXPERIMENT_SAVE = EXPERIMENTS_INFO_PREFIX + 'EXPERIMENT_SAVE';\nexport const EXPERIMENT_SAVE_SECTION = EXPERIMENTS_INFO_PREFIX + 'EXPERIMENT_SAVE_SECTION';\nexport const EXPERIMENT_CANCEL_EDIT = EXPERIMENTS_INFO_PREFIX + 'EXPERIMENT_CANCEL_EDIT';\nexport const EXPERIMENT_DETAILS_UPDATED = EXPERIMENTS_INFO_PREFIX + 'EXPERIMENT_DETAILS_UPDATED';\n\nexport class GetExperimentInfo implements Action {\n  readonly type = GET_EXPERIMENT_INFO;\n  constructor(public payload: Task['id']) {\n  }\n}\n\nexport class ResetExperimentInfo implements Action {\n  readonly type = RESET_EXPERIMENT_INFO;\n}\n\nexport class AutoRefreshExperimentInfo implements Action {\n  readonly type = AUTO_REFRESH_EXPERIMENT_INFO;\n\n  constructor(public payload: Task['id']) {\n  }\n}\n\nexport class SetExperiment implements Action {\n  readonly type = SET_EXPERIMENT;\n\n  constructor(public payload: ISelectedExperiment) {\n  }\n}\n\nexport class ExperimentUpdatedSuccessfully implements Action {\n  readonly type = EXPERIMENT_UPDATED_SUCCESSFULLY;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class SetExperimentInfoData implements Action {\n  readonly type = SET_EXPERIMENT_INFO_DATA;\n\n  constructor(public payload: IExperimentInfo) {\n  }\n}\n\nexport const getExperiment = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[set experiment]',\n  props<{ experimentId: string }>()\n);\n\nexport const getExperimentUncommittedChanges = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[get uncommitted change]',\n  props<{ experimentId: string; autoRefresh?: boolean }>()\n);\n\nexport const setExperimentUncommittedChanges = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[set uncommitted change]',\n  props<{ diff: string }>()\n);\n\nexport class UpdateExperimentInfoData implements Action {\n  readonly type = UPDATE_EXPERIMENT_INFO_DATA;\n\n  constructor(public payload: { id: ITableExperiment['id']; changes: Partial<IExperimentInfo> }) {\n  }\n}\nexport const saveExperimentInputModel = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[save input model]', props<{ modelId: string; modelName: string; route: ActivatedRoute}>());\n\nexport const saveHyperParamsSection = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'SAVE_HYPERPARAMS', props<{ hyperparams: ParamsItem[] }>());\n\nexport const saveExperimentConfigObj = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'SAVE_CONFIG_OBJ', props<{ configuration: ConfigurationItem[] }>());\n\nexport const deleteHyperParamsSection = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'DELETE_HYPERPARAMS_SECTION', props<{ section: string }>());\n\nexport const hyperParamsSectionUpdated = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'UPDATE_HYPERPARAMS', props<{ section: string; hyperparams: ParamsItem[] }>());\n\nexport const getExperimentConfigurationNames = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'GET_CONFIGURATION', props<{ experimentId: string }>());\n\nexport const setExperimentSaving = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'SET_SAVING', props<{ saving: boolean }>());\n\nexport const getExperimentConfigurationObj = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'GET_CONFIGURATION_OBJ');\n\nexport const updateExperimentAtPath = createAction(\n  EXPERIMENTS_INFO_PREFIX + 'UPDATE_EXPERIMENT_AT_PATH',\n  props<{ path: string; value: any }>()\n);\n\n// COMMANDS:\n\nexport class ExperimentDataUpdated implements Action {\n  readonly type = EXPERIMENT_DATA_UPDATED;\n\n  constructor(public payload: { id: Task['id']; changes: Partial<IExperimentInfo> }) {\n  }\n}\n\nexport class SaveExperiment implements Action {\n  readonly type = EXPERIMENT_SAVE;\n}\n\nexport const saveExperimentSection = createAction(EXPERIMENT_SAVE_SECTION, props<Task>());\n\nexport class CancelExperimentEdit implements Action {\n  readonly type = EXPERIMENT_CANCEL_EDIT;\n}\n\nexport class ExperimentDetailsUpdated implements Action {\n  readonly type = EXPERIMENT_DETAILS_UPDATED;\n\n  constructor(public payload: { id: Task['id']; changes: any }) {\n  }\n}\n\nexport class SetExperimentErrors implements Action {\n  readonly type = SET_EXPERIMENT_ERRORS;\n\n  constructor(public payload: { [key: string]: IExperimentInfoState['errors'] }) {\n  }\n}\n\nexport class ActivateEdit implements Action {\n  readonly type = ACTIVATE_EDIT;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class DeactivateEdit implements Action {\n  readonly type = DEACTIVATE_EDIT;\n\n}\n\nexport class SetExperimentFormErrors implements Action {\n  readonly type = SET_EXPERIMENT_FORM_ERRORS;\n\n  constructor(public payload: { [key: string]: any } | null) {\n  }\n}\n","import {Action, createAction, props} from '@ngrx/store';\nimport {ISelectedExperiment} from '../../../features/experiments/shared/experiment-info.model';\nimport {Project} from '../../../business-logic/model/projects/project';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {CloneExperimentPayload, ITableExperiment} from '../shared/common-experiment-model.model';\n\nexport const EXPERIMENTS_INFO_PREFIX = 'EXPERIMENTS_INFO_';\n\n// EVENTS:\nexport const CLONE_EXPERIMENT_CLICKED = EXPERIMENTS_INFO_PREFIX + 'CLONE_EXPERIMENT_CLICKED';\n\n\nexport const publishClicked = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[publish experiments]',\n  props<{ selectedEntities: ISelectedExperiment[] }>()\n);\n\nexport const stopClicked = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[stop experiments]',\n  props<{ selectedEntities: ISelectedExperiment[] }>()\n);\n\nexport const changeProjectRequested = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[change project requested]',\n  props<{ selectedEntities: ISelectedExperiment[]; project: Project }>()\n);\n\nexport const dequeueClicked = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[dequeue experiments]',\n  props<{ selectedEntities: ISelectedExperiment[] }>()\n);\n\nexport class CloneExperimentClicked implements Action {\n  readonly type = CLONE_EXPERIMENT_CLICKED;\n\n  constructor(public payload: { originExperiment: ISelectedExperiment; cloneData: CloneExperimentPayload }) {\n  }\n}\n\nexport const addTag = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[add tag to experiment]',\n  props<{ experiments: Partial<ITableExperiment>[]; tag: string }>()\n);\n\nexport const getAllTasksChildren = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[get all tasks children]',\n  props<{ experiments: string[]}>()\n);\n\nexport const setAllTasksChildren = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[set all tasks children]',\n  props<{ experiments: ITableExperiment[]}>()\n);\n\nexport const removeTag = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[remove tag from experiment]',\n  props<{ experiments: Partial<ITableExperiment>[]; tag: string }>()\n);\nexport const shareSelectedExperiments = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[share experiments]',\n  props<{ share: boolean; task: string }>()\n);\n\nexport const navigateToQueue = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[navigate to queue]',\n  props<{ experimentId: string }>()\n);\n\nexport const resetClicked = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[reset experiments]',\n  props<{ selectedEntities: ISelectedExperiment[] }>()\n);\n\nexport const enqueueClicked = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[enqueue experiments]',\n  props<{ selectedEntities: ISelectedExperiment[]; queue: Queue }>()\n);\n\nexport const archiveSelectedExperiments = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[archive selected experiments]',\n  props<{ selectedEntities: ISelectedExperiment[]; skipUndo?: boolean }>()\n);\n\nexport const restoreSelectedExperiments = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[restore selected experiments]',\n  props<{ selectedEntities: ISelectedExperiment[]; skipUndo?: boolean }>()\n);\n","import {createAction, props} from '@ngrx/store';\nimport {ITableExperiment} from '../shared/common-experiment-model.model';\nimport {ISmCol} from '../../shared/ui-components/data/table/table.consts';\nimport {MetricVariantResult} from '../../../business-logic/model/projects/metricVariantResult';\nimport {TableFilter} from '../../shared/utils/tableParamEncode';\nimport {User} from '../../../business-logic/model/users/user';\nimport {ProjectsGetTaskParentsResponseParents} from '../../../business-logic/model/projects/projectsGetTaskParentsResponseParents';\nimport {SortMeta} from 'primeng/api';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '@common/shared/entity-page/items.utils';\nimport {TasksEnqueueManyResponseSucceeded} from '../../../business-logic/model/tasks/tasksEnqueueManyResponseSucceeded';\nimport {EXPERIMENTS_INFO_PREFIX} from '@common/experiments/actions/common-experiments-menu.actions';\n\nexport const EXPERIMENTS_PREFIX = 'EXPERIMENTS_';\n\n// COMMANDS:\nexport const getExperiments = createAction(EXPERIMENTS_PREFIX + ' [get experiments]');\nexport const getExperimentsWithPageSize = createAction(EXPERIMENTS_PREFIX + ' [get experiments with size]',\n  props<{pageSize: number}>());\nexport const getNextExperiments = createAction(EXPERIMENTS_PREFIX + '[get next experiments]');\n\nexport const refreshExperiments = createAction(\n  EXPERIMENTS_PREFIX + ' [refresh experiment]',\n  props<{ hideLoader: boolean; autoRefresh?: boolean}>()\n);\n\nexport const setExperiments = createAction(\n  EXPERIMENTS_PREFIX + ' [set experiments]',\n  props<{experiments: ITableExperiment[]}>()\n);\n\nexport const setExperimentInPlace = createAction(\n  EXPERIMENTS_PREFIX + '[set experiment in place]',\n  props<{ experiments: ITableExperiment[] }>()\n);\n\nexport const setNoMoreExperiments =createAction(\n  EXPERIMENTS_PREFIX + ' [set no more experiments]',\n  props<{payload: boolean}>()\n);\n\nexport const addExperiments = createAction(\n  EXPERIMENTS_PREFIX + ' [add many experiments]',\n  props<{experiments: ITableExperiment[]}>()\n);\n\nexport const removeExperiments = createAction(\n  EXPERIMENTS_PREFIX + ' [remove many experiments]',\n  props<{experiments: string[]}>()\n);\n\nexport const updateExperiment = createAction(\n  EXPERIMENTS_PREFIX + ' [update experiment]',\n  props<{id: string; changes: Partial<ITableExperiment>}>()\n);\n\nexport const updateManyExperiment = createAction(\n  EXPERIMENTS_PREFIX + 'update many experiments',\n  props<{changeList: TasksEnqueueManyResponseSucceeded[] }>()\n);\n\nexport const setSelectedExperiments = createAction(\n  EXPERIMENTS_PREFIX + ' [set selected experiments]',\n  props<{experiments: ITableExperiment[]}>()\n);\n\nexport const setSelectedExperiment = createAction(\n  EXPERIMENTS_PREFIX + ' [set selected experiment]',\n  props<{experiment: ITableExperiment}>()\n);\n\nexport const experimentSelectionChanged = createAction(\n  EXPERIMENTS_PREFIX + ' [experiment selection changed]',\n  props<{experiment: {id?: string}; project?: string}>()\n);\n\nexport const selectAllExperiments = createAction(\n  EXPERIMENTS_PREFIX + ' [select all experiments]',\n  props<{filtered: boolean}>()\n);\n\nexport const toggleColHidden = createAction(\n  EXPERIMENTS_PREFIX + ' [toggle column hidden state]',\n  props<{columnId: string; projectId: string}>()\n);\n\nexport const setHiddenColumns = createAction(\n  EXPERIMENTS_PREFIX + 'SET_HIDDEN_COLS',\n  props<{ visibleColumns: string[]; projectId: string }>()\n);\n\nexport const setUsers = createAction(\n  EXPERIMENTS_PREFIX + 'SET_USERS',\n  props<{ users: User[] }>()\n);\n\nexport const setParents = createAction(\n  EXPERIMENTS_PREFIX + '[set project experiment parents]',\n  props<{ parents: ProjectsGetTaskParentsResponseParents[]}>()\n);\n\nexport const setActiveParentsFilter = createAction(\n  EXPERIMENTS_PREFIX + '[set active parents filter]',\n  props<{ parents: ProjectsGetTaskParentsResponseParents[]}>()\n);\n\nexport const getUsers = createAction(EXPERIMENTS_PREFIX + 'GET_USERS');\nexport const getParents = createAction(EXPERIMENTS_PREFIX + '[get project experiments parents]');\nexport const getFilteredUsers = createAction(EXPERIMENTS_PREFIX + 'GET_FILTERED_USERS');\n\nexport const tableFilterChanged = createAction(\n  EXPERIMENTS_PREFIX + '[table filter changed]',\n  props<{filter: TableFilter; projectId: string}>()\n);\n\nexport const tableSortChanged = createAction(\n  EXPERIMENTS_PREFIX + ' [table sort changed]',\n  props<{ isShift: boolean; colId: ISmCol['id'] }>()\n);\n\nexport const setTableSort = createAction(\n  EXPERIMENTS_PREFIX + ' [set table sort]',\n  props<{ orders: SortMeta[]; projectId: string }>()\n);\n\nexport const setTableFilters = createAction(\n  EXPERIMENTS_PREFIX + ' [set table filters]',\n  props<{ filters: TableFilter[]; projectId: string }>()\n);\n\nexport const setProjectsTypes = createAction(\n  EXPERIMENTS_PREFIX + 'SET_PROJECT_TYPES',\n  props<{ types?: Array<string> }>()\n);\n\nexport const getProjectTypes = createAction(EXPERIMENTS_PREFIX + 'GET_PROJECT_TYPES');\n\nexport const showOnlySelected = createAction(\n  EXPERIMENTS_PREFIX + ' [show only selected]',\n  props<{active: boolean; projectId: string}>()\n);\n\nexport const globalFilterChanged = createAction(\n  EXPERIMENTS_PREFIX + 'GLOBAL_FILTER_CHANGED',\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport const resetGlobalFilter = createAction(EXPERIMENTS_PREFIX + 'RESET_GLOBAL_FILTER');\n\nexport const setCurrentScrollId = createAction(\n  EXPERIMENTS_PREFIX + ' [set current scrollId]',\n  props<{scrollId: string}>()\n);\n\nexport const resetExperiments = createAction(EXPERIMENTS_PREFIX + ' [reset experiments]');\nexport const getCustomMetrics = createAction(EXPERIMENTS_PREFIX + ' [get custom metrics]');\nexport const getCustomHyperParams = createAction(EXPERIMENTS_PREFIX + ' [get custom hyper parameter]');\n\nexport const setCustomMetrics = createAction(\n  EXPERIMENTS_PREFIX + ' [set custom metrics]',\n  props<{metrics: MetricVariantResult[]}>()\n);\nexport const setCustomHyperParams = createAction(\n  EXPERIMENTS_PREFIX + ' [set custom hyper params]',\n  props<{params: any[]}>()\n);\n\nexport const setExtraColumns = createAction(\n  EXPERIMENTS_PREFIX + 'SET_EXTRA_COLUMNS',\n  props<{ columns: any[] ; projectId: string }>()\n);\n\nexport const addColumn = createAction(\n  EXPERIMENTS_PREFIX + ' [ add column]',\n  props<{col: ISmCol}>()\n);\n\nexport const removeCol = createAction(\n  EXPERIMENTS_PREFIX + ' [remove column]',\n  props<{ id: string; projectId: string }>()\n);\n\nexport const setColumnWidth = createAction(\n  EXPERIMENTS_PREFIX + ' [set column width]',\n  props<{projectId: string; columnId: string; widthPx: number}>()\n);\n\nexport const setColsOrderForProject = createAction(\n  EXPERIMENTS_PREFIX + ' [set cols order]',\n  props<{ cols: string[]; project: string; fromUrl?: boolean }>()\n);\n\nexport const clearHyperParamsCols = createAction(\n  EXPERIMENTS_PREFIX + ' [Clear HyperParam Cols]',\n  props<{projectId: string}>()\n);\n\nexport const resetSortOrder = createAction(\n  EXPERIMENTS_PREFIX + 'RESET_SORT_ORDER',\n  props<{sortIndex: number; projectId: string}>()\n);\n\nexport const setArchive = createAction(\n  EXPERIMENTS_PREFIX + 'SET_ARCHIVE',\n  props<{ archive: boolean }>()\n);\n\nexport const afterSetArchive = createAction(EXPERIMENTS_PREFIX + 'AFTER_SET_ARCHIVE');\n\nexport const setSplitSize = createAction(EXPERIMENTS_PREFIX + 'SET_SPLIT_SIZE', props<{ splitSize: number }>());\n\nexport const hyperParamSelectedInfoExperiments = createAction(\n  EXPERIMENTS_PREFIX + '[hyper param option add filter experiments]',\n  props<{ col: ISmCol; values: string[] }>()\n);\n\nexport const hyperParamSelectedExperiments = createAction(\n  EXPERIMENTS_INFO_PREFIX + '[hyper param selected in the menu filter experiments]',\n  props<{ col: ISmCol }>()\n);\n\nexport const getTags = createAction(EXPERIMENTS_PREFIX + ' [get experiments tags]');\n\nexport const setTags = createAction(\n  EXPERIMENTS_PREFIX + 'SET_TAGS',\n  props<{ tags: string[] }>()\n);\nexport const setSelectedExperimentsDisableAvailable = createAction(\n  EXPERIMENTS_PREFIX + 'setSelectedExperimentsDisableAvailable',\n  props<{ selectedExperimentsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> }>()\n);\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {catchError, filter, map, mergeMap, shareReplay, switchMap, take, tap, withLatestFrom} from 'rxjs/operators';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {getExperimentInfoOnlyFields} from '../../../features/experiments/experiments.consts';\nimport {selectExperimentFormValidity, selectExperimentInfoData, selectExperimentInfoDataFreeze, selectSelectedExperiment} from '../../../features/experiments/reducers';\nimport {IExperimentInfoState} from '../../../features/experiments/reducers/experiment-info.reducer';\nimport {ExperimentReverterService} from '../../../features/experiments/shared/services/experiment-reverter.service';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {activeLoader, deactivateLoader, setBackdrop, setServerError} from '../../core/actions/layout.actions';\nimport {selectAppVisible} from '../../core/reducers/view.reducer';\nimport * as commonInfoActions from '../actions/common-experiments-info.actions';\nimport {\n  CancelExperimentEdit, deleteHyperParamsSection, EXPERIMENT_DETAILS_UPDATED, EXPERIMENT_SAVE,\n  ExperimentDetailsUpdated, getExperimentConfigurationNames, getExperimentConfigurationObj,\n  SaveExperiment, saveExperimentConfigObj, saveHyperParamsSection, saveExperimentSection,\n  DeactivateEdit, setExperimentSaving\n} from '../actions/common-experiments-info.actions';\nimport {updateExperiment} from '../actions/common-experiments-view.actions';\nimport {\n  selectExperimentConfiguration, selectExperimentHyperParamsSelectedSectionFromRoute, selectExperimentSelectedConfigObjectFromRoute, selectExperimentsList, selectSelectedExperimentFromRouter,\n  selectSelectedTableExperiment\n} from '../reducers';\nimport {convertStopToComplete} from '../shared/common-experiments.utils';\nimport {ExperimentConverterService} from '../../../features/experiments/shared/services/experiment-converter.service';\nimport {of} from 'rxjs';\nimport {EmptyAction} from '../../../app.constants';\nimport {ReplaceHyperparamsEnum} from '../../../business-logic/model/tasks/replaceHyperparamsEnum';\nimport {Router} from '@angular/router';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {cloneDeep, get} from 'lodash/fp';\nimport {CommonExperimentReverterService} from '../shared/services/common-experiment-reverter.service';\nimport {setExperimentLog} from '../actions/common-experiment-output.actions';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {selectHasDataFeature} from '../../../core/reducers/users.reducer';\nimport {selectSelectedProject} from '../../core/reducers/projects.reducer';\n\n\n@Injectable()\nexport class CommonExperimentsInfoEffects {\n  private previousSelectedLastUpdate: Date = null;\n  private previousSelectedId: string;\n\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<IExperimentInfoState>,\n    private apiTasks: ApiTasksService,\n    private reverter: ExperimentReverterService,\n    private converter: ExperimentConverterService,\n    private router: Router,\n    private commonExperimentReverterService: CommonExperimentReverterService\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(commonInfoActions.GET_EXPERIMENT_INFO),\n    map(action => activeLoader(action.type))\n  ));\n\n  getExperimentConfigurationNames$ = createEffect(() => this.actions$.pipe(\n    ofType(getExperimentConfigurationNames),\n    withLatestFrom(\n      this.store.select(selectSelectedExperimentFromRouter),\n      this.store.select(selectExperimentConfiguration),\n      this.store.select(selectExperimentSelectedConfigObjectFromRoute)\n    ),\n    filter(([action, experimentId, configuration, selectedConfiguration]) => !!experimentId),\n    switchMap(([action, experimentId, configuration, selectedConfiguration]) => this.apiTasks.tasksGetConfigurationNames({tasks: [experimentId]})\n      .pipe(\n        mergeMap(res => {\n          let configurations = cloneDeep(configuration);\n          if (configurations) {\n            Object.keys(configurations).forEach(name => {\n              if (!res.configurations[0]?.names.includes(name)) {\n                delete configurations.name;\n              }\n            });\n          } else {\n            configurations = {};\n          }\n          res.configurations[0]?.names.forEach(name => {\n            if (!(name in configurations)) {\n              configurations[name] = null;\n            }\n          });\n          return [\n            new commonInfoActions.UpdateExperimentInfoData({id: experimentId, changes: {configuration: configurations}}),\n            selectedConfiguration ? getExperimentConfigurationObj() : new EmptyAction(),\n            deactivateLoader(action.type),\n          ];\n        }),\n        catchError(error => {\n          console.log(error);\n          return [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, 'Fetch configuration names failed',\n              action.type === commonInfoActions.AUTO_REFRESH_EXPERIMENT_INFO)\n          ];\n        })\n      )\n    )\n  ));\n\n  getExperimentConfigurationObj$ = createEffect(() => this.actions$.pipe(\n    ofType(getExperimentConfigurationObj),\n    withLatestFrom(\n      this.store.select(selectSelectedExperimentFromRouter),\n      this.store.select(selectExperimentConfiguration),\n      this.store.select(selectExperimentSelectedConfigObjectFromRoute)\n    ),\n    filter(([action, experimentId, configuration, configObj]) => configuration && configObj && (configObj in configuration)),\n    switchMap(([action, experimentId, configuration, configObj]) => this.apiTasks.tasksGetConfigurations({tasks: [experimentId], names: [configObj]})\n      .pipe(\n        mergeMap((res: any) => {\n          const configurationObj = {\n            ...configuration,\n            [configObj]: res.configurations[0].configuration[0]\n          };\n          return [\n            new commonInfoActions.UpdateExperimentInfoData({id: experimentId, changes: {configuration: configurationObj}}),\n            deactivateLoader(action.type),\n            setBackdrop({payload: false}),\n            new DeactivateEdit(),\n            setExperimentSaving({saving: false})\n          ];\n        }),\n        catchError(error => {\n          console.log(error);\n          return [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setBackdrop({payload: false}),\n            new DeactivateEdit(),\n            setExperimentSaving({saving: false}),\n            setServerError(error, null, 'Fetch configuration failed',\n              action.type === commonInfoActions.AUTO_REFRESH_EXPERIMENT_INFO)\n          ];\n        })\n      )\n    )\n  ));\n\n  getExperimentInfo$ = createEffect(() => this.actions$.pipe(\n    ofType<commonInfoActions.GetExperimentInfo>(commonInfoActions.GET_EXPERIMENT_INFO, commonInfoActions.AUTO_REFRESH_EXPERIMENT_INFO, commonInfoActions.EXPERIMENT_UPDATED_SUCCESSFULLY),\n    withLatestFrom(\n      this.store.select(selectSelectedTableExperiment),\n      this.store.select(selectSelectedExperiment),\n      this.store.select(selectExperimentsList),\n      this.store.select(selectExperimentInfoData),\n      this.store.select(selectAppVisible),\n    ),\n    switchMap(([action, tableSelected, selected, experiments, infoData, visible]) => {\n      const currentSelected = tableSelected || selected;\n      if (this.previousSelectedId && currentSelected?.id != this.previousSelectedId) {\n        this.previousSelectedLastUpdate = null;\n      }\n      this.previousSelectedId = currentSelected?.id;\n\n      if (!infoData || !currentSelected || !visible) {\n        return of([action, null, tableSelected, selected]);\n      }\n\n      const listed = experiments.find(e => e.id === currentSelected?.id);\n      return (listed ? of(listed) :\n        this.apiTasks.tasksGetByIdEx({id: [selected.id], only_fields: ['last_change']}).pipe(map(res => res.tasks[0])))\n        .pipe(map(task => [action, task?.last_change ?? task?.last_update, task, selected]));\n    }),\n    filter(([action, , tableSelected, selected]) => (action.type !== commonInfoActions.AUTO_REFRESH_EXPERIMENT_INFO || (!tableSelected) || (tableSelected?.id === selected?.id))),\n    // Can't have filter here because we need to deactivate loader\n    // filter(([action, selected, updateTime]) => !selected || new Date(selected.last_change) < new Date(updateTime)),\n    switchMap(([action, updateTime, tableSelected, selected]) => {\n      // else will deactivate loader\n      if (!updateTime || (new Date(this.previousSelectedLastUpdate) < new Date(updateTime)) || action.type === commonInfoActions.EXPERIMENT_UPDATED_SUCCESSFULLY) {\n        return [\n          commonInfoActions.getExperiment({experimentId: action.payload}),\n          commonInfoActions.getExperimentUncommittedChanges({\n            experimentId: action.payload,\n            autoRefresh: action.type === commonInfoActions.AUTO_REFRESH_EXPERIMENT_INFO\n          }),\n          // clear log data if experiment was restarted\n          ...(selected?.started && tableSelected?.started && selected.started != tableSelected?.started ? [setExperimentLog({direction: null, events: [], total: 0})] : [])\n        ];\n      } else {\n        return [deactivateLoader(action.type)];\n      }\n    })\n  ));\n\n  fetchExperiment$ = createEffect(() => this.actions$.pipe(\n    ofType(commonInfoActions.getExperiment),\n    switchMap(action => this.store.select(selectSelectedProject).pipe(\n      filter(project => !!project),\n      take(1),\n      map(() => action))),\n    withLatestFrom(this.store.select(selectHasDataFeature)),\n    switchMap(([action, hasDataFeature]) =>\n      this.apiTasks.tasksGetByIdEx({id: [action.experimentId], only_fields: getExperimentInfoOnlyFields(hasDataFeature)})\n        .pipe(\n          mergeMap((res: any) => {\n            let experiment = res.tasks[0];\n            if (experiment) {\n              this.previousSelectedLastUpdate = experiment.last_change;\n              experiment = convertStopToComplete([experiment])[0];\n              experiment = this.commonExperimentReverterService.revertReadOnly(experiment);\n              return [\n                new commonInfoActions.SetExperimentInfoData(this.reverter.revertExperiment(experiment)),\n                new commonInfoActions.SetExperiment(experiment),\n                updateExperiment({id: action.experimentId, changes: experiment}),\n                deactivateLoader(action.type),\n                deactivateLoader(commonInfoActions.GET_EXPERIMENT_INFO),\n                setBackdrop({payload: false}),\n                new DeactivateEdit(),\n                setExperimentSaving({saving: false})\n              ];\n            } else {\n              this.router.navigate(['dashboard']);\n              return [deactivateLoader(action.type)];\n            }\n          }),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            deactivateLoader(commonInfoActions.GET_EXPERIMENT_INFO),\n            setServerError(error, null, 'Fetch experiment failed',\n              action.type === commonInfoActions.AUTO_REFRESH_EXPERIMENT_INFO)\n          ])\n        )\n    )\n  ));\n\n  fetchDiff$ = createEffect(() => this.actions$.pipe(\n    ofType(commonInfoActions.getExperimentUncommittedChanges),\n    switchMap((action) =>\n      this.apiTasks.tasksGetByIdEx({id: [action.experimentId], only_fields: ['script.diff']})\n        .pipe(\n          mergeMap(res => {\n            const experiment = res.tasks[0];\n            return [commonInfoActions.setExperimentUncommittedChanges({diff: experiment?.script?.diff})];\n          }),\n          catchError(() => [commonInfoActions.setExperimentUncommittedChanges({diff: ''})])\n        )\n    )\n  ));\n\n  // Changes fields which can be applied regardless of experiment draft state i.e name, comments, tags\n  updateExperimentDetails$ = createEffect(() => this.actions$.pipe(\n    ofType<ExperimentDetailsUpdated>(EXPERIMENT_DETAILS_UPDATED),\n    withLatestFrom(\n      this.store.select(selectExperimentInfoData),\n      this.store.select(selectSelectedExperiment),\n      this.store.select(selectExperimentFormValidity)\n    ),\n    filter(([action, infoData, selectedExperiment, valid]) => valid),\n    mergeMap(([action, infoData, selectedExperiment]) =>\n      this.apiTasks.tasksUpdate({task: action.payload.id, ...action.payload.changes})\n        .pipe(\n          mergeMap((res) => {\n            const changes = res?.fields || action.payload.changes;\n            return [\n              new commonInfoActions.ExperimentUpdatedSuccessfully(action.payload.id),\n              updateExperiment({id: action.payload.id, changes}),\n              selectedExperiment?.id === action.payload.id ? new commonInfoActions.UpdateExperimentInfoData({id: action.payload.id, changes}) : new EmptyAction()\n            ];\n          }),\n          catchError((err: HttpErrorResponse) => [\n            requestFailed(err),\n            setServerError(err, null, 'Update Experiment failed'),\n            new commonInfoActions.GetExperimentInfo(action.payload.id)\n          ])\n        )\n    )\n  ));\n\n  saveExperimentData$ = createEffect(() => this.actions$.pipe(\n    ofType<SaveExperiment>(EXPERIMENT_SAVE),\n    // Changes fields which can be applied Only on draft mode experiment\n    withLatestFrom(\n      this.store.select(selectExperimentInfoData),\n      this.store.select(selectSelectedExperiment),\n      this.store.select(selectExperimentInfoDataFreeze),\n      this.store.select(selectExperimentFormValidity),\n    ),\n    filter(([action, infoData, selectedExperiment, infoFreeze, valid]) => valid),\n    switchMap(([action, infoData, selectedExperiment, infoFreeze]) =>\n      this.apiTasks.tasksEdit(this.converter.convertExperiment(infoData, selectedExperiment, infoFreeze))\n        .pipe(\n          mergeMap(() => [\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err),\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n            new CancelExperimentEdit(),\n            setBackdrop({payload: false})\n          ])\n        )\n    ),\n    shareReplay(1)\n  ));\n\n  saveExperimentSectionData$ = createEffect(() => this.actions$.pipe(\n    ofType(saveExperimentSection),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(([action, selectedExperiment]) => {\n      const {type, parent, ...changes} = action;\n      return this.apiTasks.tasksEdit({task: selectedExperiment.id, ...changes, ...(parent && {parent: parent.id})})\n        .pipe(\n          mergeMap(() => [\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err),\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n            new CancelExperimentEdit(),\n            setBackdrop({payload: false})\n          ])\n        );\n    }),\n  ));\n\n  saveExperimentHyperParams$ = createEffect(() => this.actions$.pipe(\n    ofType(saveHyperParamsSection),\n    withLatestFrom(\n      this.store.select(selectSelectedExperiment),\n      this.store.select(selectExperimentFormValidity),\n      this.store.select(selectExperimentHyperParamsSelectedSectionFromRoute)\n    ),\n    filter(([action, selectedExperiment, valid, section]) => valid),\n    switchMap(([action, selectedExperiment, valid, section]) =>\n      this.apiTasks.tasksEditHyperParams({\n        task: selectedExperiment.id,\n        hyperparams: action.hyperparams.length > 0 ? action.hyperparams : [{section}],\n        replace_hyperparams: ReplaceHyperparamsEnum.Section\n      })\n        .pipe(\n          mergeMap(() => [\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err),\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n            new CancelExperimentEdit(),\n            setBackdrop({payload: false})\n          ])\n        )\n    ),\n  ));\n\n  saveExperimentConfigObj$ = createEffect(() => this.actions$.pipe(\n    ofType(saveExperimentConfigObj),\n    withLatestFrom(\n      this.store.select(selectSelectedExperimentFromRouter),\n    ),\n    switchMap(([action, selectedExperiment]) =>\n      this.apiTasks.tasksEditConfiguration({task: selectedExperiment, configuration: action.configuration})\n        .pipe(\n          mergeMap(() => [\n            commonInfoActions.getExperimentConfigurationObj(),\n            // commonInfoActions.setExperimentSaving({saving: false}),\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err),\n            commonInfoActions.getExperimentConfigurationObj(),\n            commonInfoActions.setExperimentSaving({saving: false}),\n            new CancelExperimentEdit(),\n            setBackdrop({payload: false})\n          ])\n        )\n    ),\n  ));\n\n  deleteExperimentHyperParamsSection$ = createEffect(() => this.actions$.pipe(\n    ofType(deleteHyperParamsSection),\n    withLatestFrom(\n      this.store.select(selectExperimentInfoData),\n      this.store.select(selectSelectedExperiment),\n      this.store.select(selectExperimentInfoDataFreeze),\n      this.store.select(selectExperimentFormValidity),\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectExperimentHyperParamsSelectedSectionFromRoute)\n    ),\n    filter(([action, infoData, selectedExperiment, infoFreeze, valid, projectId, section]) => valid),\n    switchMap(([action, infoData, selectedExperiment, infoFreeze, valid, projectId, section]) =>\n      this.apiTasks.tasksDeleteHyperParams({task: selectedExperiment.id, hyperparams: [{section: action.section}]})\n        .pipe(\n          tap(() => this.router.navigateByUrl(this.router.url.replace('/hyper-param/' + section, ''))),\n          mergeMap((res) => [\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err),\n            new commonInfoActions.ExperimentUpdatedSuccessfully(selectedExperiment.id),\n            new CancelExperimentEdit(),\n            setBackdrop({payload: false})\n          ])\n        )\n    ),\n  ));\n\n}\n","/**\n * tasks\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\n\nexport type ReplaceHyperparamsEnum = 'none' | 'section' | 'all';\n\nexport const ReplaceHyperparamsEnum = {\n    None: 'none' as ReplaceHyperparamsEnum,\n    Section: 'section' as ReplaceHyperparamsEnum,\n    All: 'all' as ReplaceHyperparamsEnum\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {ApiAuthService} from '../../../business-logic/api-services/auth.service';\nimport {BlTasksService} from '../../../business-logic/services/tasks.service';\nimport {ApiEventsService} from '../../../business-logic/api-services/events.service';\nimport {catchError, expand, filter, map, mergeMap, reduce, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {activeLoader, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport * as outputActions from '../actions/common-experiment-output.actions';\nimport {\n  mergeGraphDisplayFullDetailsScalars,\n  setXtypeGraphDisplayFullDetailsScalars\n} from '../actions/common-experiment-output.actions';\nimport {ExperimentOutputState} from '../../../features/experiments/reducers/experiment-output.reducer';\nimport {LOG_BATCH_SIZE} from '../shared/common-experiments.const';\nimport {\n  selectFullScreenChart,\n  selectFullScreenChartIsOpen,\n  selectFullScreenChartXtype,\n  selectSelectedSettingsxAxisType\n} from '../reducers';\nimport {refreshExperiments} from '../actions/common-experiments-view.actions';\nimport {EventsGetTaskLogResponse} from '../../../business-logic/model/events/eventsGetTaskLogResponse';\nimport {HTTP} from '../../../app.constants';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\nimport {EMPTY} from 'rxjs';\nimport {getOr} from 'lodash/fp';\nimport {selectCompareHistogramCacheAxisType} from '../../experiments-compare/reducers';\n\n\n@Injectable()\nexport class CommonExperimentOutputEffects {\n\n  constructor(\n    private actions$: Actions, private store: Store<ExperimentOutputState>, private apiTasks: ApiTasksService,\n    private authApi: ApiAuthService, private taskBl: BlTasksService, private eventsApi: ApiEventsService\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(outputActions.CHANGE_PROJECT_REQUESTED, outputActions.getExperimentLog, outputActions.EXPERIMENT_SCALAR_REQUESTED, outputActions.experimentPlotsRequested),\n    filter(action => !action?.['from']),\n    map(action => activeLoader(action.type))\n  ));\n\n  getLog$ = createEffect(() => this.actions$.pipe(\n    ofType(outputActions.getExperimentLog),\n    switchMap((action) =>\n      this.eventsApi.eventsGetTaskLog({\n        /* eslint-disable @typescript-eslint/naming-convention */\n        task: action.id,\n        batch_size: LOG_BATCH_SIZE,\n        navigate_earlier: action.direction !== 'next',\n        from_timestamp: action.refresh ? null : action.from,\n        /* eslint-enable @typescript-eslint/naming-convention */\n      }).pipe(\n        mergeMap((res: EventsGetTaskLogResponse) => [\n          outputActions.setExperimentLog({\n            events: res.events,\n            total: res.total,\n            direction: action.direction,\n            refresh: action.refresh\n          }),\n          deactivateLoader(action.type),\n          deactivateLoader(refreshExperiments.type)\n        ]),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          deactivateLoader(refreshExperiments.type),\n          setServerError(error, null, 'Failed to fetch log')\n        ])\n      )\n    )\n  ));\n\n  fetchExperimentScalarFullDetails$ = createEffect(() => this.actions$.pipe(\n    ofType(outputActions.getGraphDisplayFullDetailsScalars),\n    withLatestFrom(this.store.select(selectFullScreenChart), this.store.select(selectFullScreenChartXtype)),\n    switchMap(([action, fullScreenData, chartType]) => this.eventsApi.eventsScalarMetricsIterRaw({\n      task: action.task,\n      metric: action.metric,\n      key: action.key? action.key : chartType,\n      count_total: true,\n      batch_size: 200000,\n    })\n      .pipe(\n        withLatestFrom(this.store.select(selectFullScreenChartIsOpen)),\n        map(([res, isOpen]) => [res.returned, res, isOpen]),\n        expand(([returnedTillNow, data, isOpen]) => (returnedTillNow < data.total) && isOpen ? this.eventsApi.eventsScalarMetricsIterRaw({\n            task: action.task,\n            metric: action.metric,\n            scroll_id: data.scroll_id,\n            key: action.key? action.key : chartType,\n            count_total: true,\n            batch_size: 200000,\n          }).pipe(\n          withLatestFrom(this.store.select(selectFullScreenChartIsOpen)),\n          map(([res, isOpen]) => [returnedTillNow + res.returned, res, isOpen])\n          )\n          : EMPTY\n        ),\n        reduce((acc, [, data]) => {\n            const graphData = acc ? acc : fullScreenData.data;\n            return graphData.map((item) => ({\n                ...item,\n                y: !acc ? getOr([], `variants[${item.name}].y`, data) : (item.y).concat(getOr([], `variants[${item.name}].y`, data)),\n                x: !acc ? getOr([], `variants[${item.name}][${action.key? action.key : chartType}]`, data) : (item.x).concat(getOr([], `variants[${item.name}][${action.key? action.key : chartType}]`, data))\n              }));\n          }\n          , null)\n      ,\n    mergeMap( (data: any) => [\n        ... action.key ? [setXtypeGraphDisplayFullDetailsScalars({xAxisType: action.key})]:[],\n      mergeGraphDisplayFullDetailsScalars({data}),\n      deactivateLoader(outputActions.getGraphDisplayFullDetailsScalars.type),\n    ]),\n    catchError(error => [\n      requestFailed(error),\n      deactivateLoader(outputActions.getGraphDisplayFullDetailsScalars.type),\n      setServerError(error, null, 'Failed to get full detailed Chart')\n    ])))\n  ));\n\n  fetchExperimentPlots$ = createEffect(() => this.actions$.pipe(\n    ofType(outputActions.experimentPlotsRequested),\n    switchMap(action => this.eventsApi.eventsGetTaskPlots({task: action.task, iters: 5}).pipe(\n      map(res => [res.plots.length, res]),\n      expand(([plotsLength, data]) => plotsLength < data.total\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        ? this.eventsApi.eventsGetTaskPlots({task: action.task, iters: 5, scroll_id: data.scroll_id}).pipe(\n          map(res => [plotsLength + res.plots.length, res])\n        )\n        : EMPTY\n      ),\n      reduce((acc, [, data]) => acc.concat(data.plots), [])\n    )),\n    mergeMap((allPlots: any) => [\n      new outputActions.SetExperimentPlots(allPlots),\n      deactivateLoader(refreshExperiments.type),\n      deactivateLoader(outputActions.experimentPlotsRequested.type),\n    ]),\n    catchError(error => [\n      requestFailed(error),\n      deactivateLoader(outputActions.experimentPlotsRequested.type),\n      deactivateLoader(refreshExperiments.type),\n      setServerError(error, null, 'Failed to get Plot Charts')\n    ])\n  ));\n\n  fetchExperimentScalar$ = createEffect(() => this.actions$.pipe(\n    ofType<outputActions.ExperimentScalarRequested>(outputActions.EXPERIMENT_SCALAR_REQUESTED),\n    withLatestFrom(this.store.select(selectSelectedSettingsxAxisType), this.store.select(selectCompareHistogramCacheAxisType)),\n    switchMap(([action, axisType, prevAxisType]) => {\n        if ([ScalarKeyEnum.IsoTime, ScalarKeyEnum.Timestamp].includes(prevAxisType) &&\n          [ScalarKeyEnum.IsoTime, ScalarKeyEnum.Timestamp].includes(axisType)) {\n          return [\n            deactivateLoader(refreshExperiments.type),\n            deactivateLoader(action.type)\n          ];\n        }\n\n        return this.eventsApi.eventsScalarMetricsIterHistogram({\n          task: action.payload,\n          key: axisType === ScalarKeyEnum.IsoTime ? ScalarKeyEnum.Timestamp : axisType\n        })\n          .pipe(\n            mergeMap(res => [\n              new outputActions.SetExperimentHistogram(res, axisType),\n              deactivateLoader(refreshExperiments.type),\n              deactivateLoader(action.type)\n            ]),\n            catchError(error => [\n              requestFailed(error),\n              deactivateLoader(action.type),\n              deactivateLoader(refreshExperiments.type),\n              setServerError(error, null, 'Failed to get Scalar Charts')\n            ])\n          );\n      }\n    )\n  ));\n\n  downloadFullLog$ = createEffect(() => this.actions$.pipe(\n    ofType(outputActions.downloadFullLog),\n    filter(action => !!action.experimentId),\n    map(action => {\n      const a = document.createElement('a');\n      a.href = `${HTTP.API_BASE_URL}/events.download_task_log?line_type=text&task=${action.experimentId}`;\n      a.target = '_blank';\n      a.download = 'Log';\n      a.click();\n    })\n  ), {dispatch: false});\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {ApiAuthService} from '../../../business-logic/api-services/auth.service';\nimport {BlTasksService} from '../../../business-logic/services/tasks.service';\nimport {ApiEventsService} from '../../../business-logic/api-services/events.service';\nimport {Router} from '@angular/router';\nimport {catchError, map, mergeMap, switchMap, tap, withLatestFrom} from 'rxjs/operators';\nimport {activeLoader, addMessage, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport * as menuActions from '../actions/common-experiments-menu.actions';\nimport {of} from 'rxjs';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {IExperimentInfoState} from '../../../features/experiments/reducers/experiment-info.reducer';\nimport {ExperimentConverterService} from '../../../features/experiments/shared/services/experiment-converter.service';\nimport * as exSelectors from '../reducers';\nimport {selectSelectedExperiments} from '../reducers';\nimport {selectSelectedExperiment} from '../../../features/experiments/reducers';\nimport * as infoActions from '../actions/common-experiments-info.actions';\nimport {AutoRefreshExperimentInfo, ExperimentDetailsUpdated} from '../actions/common-experiments-info.actions';\nimport {EmptyAction, MESSAGES_SEVERITY} from '../../../app.constants';\nimport * as viewActions from '../actions/common-experiments-view.actions';\nimport {IExperimentInfo, ISelectedExperiment} from '../../../features/experiments/shared/experiment-info.model';\nimport {ResetOutput} from '../actions/common-experiment-output.actions';\nimport {ApiProjectsService} from '../../../business-logic/api-services/projects.service';\nimport {TasksGetAllExResponse} from '../../../business-logic/model/tasks/tasksGetAllExResponse';\nimport {ITask} from '../../../business-logic/model/al-task';\nimport {TasksResetManyResponse} from '../../../business-logic/model/tasks/tasksResetManyResponse';\nimport {RouterState, selectRouterConfig, selectRouterParams} from '../../core/reducers/router-reducer';\nimport {TasksArchiveManyResponse} from '../../../business-logic/model/tasks/tasksArchiveManyResponse';\nimport {EntityTypeEnum} from '../../../shared/constants/non-common-consts';\nimport {TasksEnqueueManyResponse} from '../../../business-logic/model/tasks/tasksEnqueueManyResponse';\nimport {getNotificationAction, MenuItems, MoreMenuItems} from '../../shared/entity-page/items.utils';\nimport {getAllSystemProjects} from '../../core/actions/projects.actions';\nimport { TaskStatusEnum } from '../../../business-logic/model/tasks/taskStatusEnum';\nimport {setAllTasksChildren} from '../actions/common-experiments-menu.actions';\n\n\n@Injectable()\nexport class CommonExperimentsMenuEffects {\n  private selectedExperiment: IExperimentInfo;\n\n  constructor(private actions$: Actions, private store: Store<IExperimentInfoState>, private apiTasks: ApiTasksService,\n              private authApi: ApiAuthService, private taskBl: BlTasksService, private eventsApi: ApiEventsService,\n              private projectApi: ApiProjectsService,\n              private converter: ExperimentConverterService,\n              private router: Router\n  ) {\n    store.select(selectSelectedExperiment).subscribe(exp => this.selectedExperiment = exp);\n  }\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(\n      menuActions.restoreSelectedExperiments,\n      menuActions.archiveSelectedExperiments,\n      menuActions.resetClicked,\n      menuActions.publishClicked,\n      menuActions.stopClicked,\n      menuActions.changeProjectRequested,\n      menuActions.getAllTasksChildren,\n      ),\n    map(action => activeLoader(action.type))));\n\n  enqueueExperiment$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.enqueueClicked),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(([action, selectedEntity]: [ReturnType<typeof menuActions.enqueueClicked>, IExperimentInfo]) => {\n        const ids = action.selectedEntities.map(exp => exp.id);\n        return this.apiTasks.tasksEnqueueMany({ids, queue: action.queue.id, validate_tasks: true})\n          .pipe(\n            mergeMap(res => this.updateExperimentsSuccess(action, MenuItems.enqueue, ids, selectedEntity, res)),\n            catchError(error => this.updateExperimentFailed(action.type, error))\n          );\n      }\n    )\n  ));\n\n\n  dequeueExperiment$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.dequeueClicked),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(([action, selectedEntity]) => {\n        const ids = action.selectedEntities.map(exp => exp.id);\n        return this.apiTasks.tasksDequeueMany({ids})\n          .pipe(\n            mergeMap(res => this.updateExperimentsSuccess(action, MenuItems.dequeue, ids, selectedEntity, res)),\n            catchError(error => this.updateExperimentFailed(action.type, error))\n          );\n      }\n    )\n  ));\n\n\n  cloneExperimentRequested$ = createEffect(() => this.actions$.pipe(\n    ofType<menuActions.CloneExperimentClicked>(menuActions.CLONE_EXPERIMENT_CLICKED),\n    switchMap(action => this.apiTasks.tasksClone({\n        task: action.payload.originExperiment.id,\n        new_task_project: action.payload.cloneData.project,\n        new_task_comment: action.payload.cloneData.comment,\n        new_task_name: action.payload.cloneData.name,\n        new_project_name: action.payload.cloneData.newProjectName\n      })\n        .pipe(\n          mergeMap(res => [\n            viewActions.getExperiments(),\n            viewActions.setSelectedExperiments({experiments: []}),\n            deactivateLoader(action.type),\n            ...action.payload.cloneData.newProjectName ? [getAllSystemProjects()] : [],\n            viewActions.experimentSelectionChanged({\n              experiment: {id: res.id},\n              project: action.payload.cloneData.project ? action.payload.cloneData.project : res?.new_project?.id\n            }),\n          ]),\n          catchError(error => [\n            deactivateLoader(action.type),\n            setServerError(error, null, 'Clone Experiment failed'),\n            requestFailed(error)\n          ])\n        )\n    )\n  ));\n\n  resetExperiment$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.resetClicked),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(\n      ([action, selectedExp]) => {\n        const ids = action.selectedEntities.map(exp => exp.id);\n        return this.apiTasks.tasksResetMany({ids})\n          .pipe(\n            mergeMap((res: TasksResetManyResponse) =>\n              [new ResetOutput(), ...this.updateExperimentsSuccess(action, MenuItems.reset, ids, selectedExp, res)]),\n            catchError(error => this.updateExperimentFailed(action.type, error))\n          );\n      }\n    )\n  ));\n\n  publishExperiment$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.publishClicked),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(([action, selectedEntity]) => {\n      const ids = action.selectedEntities.map(exp => exp.id);\n      return this.apiTasks.tasksPublishMany({ids})\n        .pipe(\n          mergeMap(res => this.updateExperimentsSuccess(action, MenuItems.publish, ids, selectedEntity, res)),\n          catchError(error => this.updateExperimentFailed(action.type, error))\n        );\n    })\n  ));\n\n\n  getAllTasksChildren$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.getAllTasksChildren),\n    switchMap((action) => this.apiTasks.tasksGetAllEx({only_fields: ['name', 'status'], parent: action.experiments, status:[TaskStatusEnum.InProgress, TaskStatusEnum.Queued]})\n      .pipe(\n        mergeMap((res) => [setAllTasksChildren({experiments: res.tasks}), deactivateLoader(action.type)]),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error),\n          addMessage(MESSAGES_SEVERITY.ERROR, 'Failed to fetch tasks running children')])\n\n      ))\n  ));\n\n\n  stopExperiment$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.stopClicked),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(([action, selectedEntity]) => {\n        const ids = action.selectedEntities.map(exp => exp.id);\n        return this.apiTasks.tasksStopMany({ids})\n          .pipe(\n            mergeMap(res => this.updateExperimentsSuccess(action, MenuItems.abort, ids, selectedEntity, res)),\n            catchError(error => this.updateExperimentFailed(action.type, error))\n          );\n      }\n    )\n  ));\n\n\n  changeProject$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.changeProjectRequested),\n    switchMap(\n      action => this.apiTasks.tasksMove({\n        ids: action.selectedEntities.map(exp => exp.id),\n        project: action.project.id,\n        project_name: action.project.name\n      })\n        .pipe(\n          tap((res) => this.router.navigate([`projects/${action.project.id ? action.project.id : res.project_id}/experiments/${action.selectedEntities.length === 1 ? action.selectedEntities[0].id : ''}`], {queryParamsHandling: 'merge'})),\n          mergeMap(() => [\n            viewActions.resetExperiments(),\n            viewActions.setSelectedExperiments({experiments: []}),\n            ...action.selectedEntities.map(exp => this.setExperimentIfSelected(exp.id, {project: action.project})),\n            deactivateLoader(action.type),\n            viewActions.getExperiments()\n          ]),\n          catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n        )\n    )\n  ));\n\n  private updateExperimentsSuccess(action, operationName: MenuItems, ids: string[], selectedEntity, res: TasksEnqueueManyResponse): Action[] {\n    const actions = [\n      // new RefreshExperiments({autoRefresh: false, hideLoader: true}),\n      viewActions.updateManyExperiment({changeList: res.succeeded}),\n      deactivateLoader(action.type)] as Action[];\n    if (ids.includes(selectedEntity?.id)) {\n      actions.push(new AutoRefreshExperimentInfo(selectedEntity.id));\n    }\n    actions.push(getNotificationAction(res, action, operationName, EntityTypeEnum.experiment));\n    return actions;\n  }\n\n  updateExperimentFailed(actionType, error) {\n    return [\n      requestFailed(error),\n      deactivateLoader(actionType),\n      setServerError(error)\n    ];\n  }\n\n  setExperimentIfSelected(experimentId, payload) {\n    if (this.selectedExperiment?.id === experimentId) {\n      return new infoActions.SetExperiment({...this.selectedExperiment, ...payload});\n    }\n    return new EmptyAction();\n  }\n\n  addTag$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.addTag),\n    withLatestFrom(this.store.select(selectSelectedExperiments), this.store.select(selectSelectedExperiment)),\n    switchMap(([action, selectedExperiments, selectedExperimentInfo]) => {\n      const experimentsFromState = selectedExperimentInfo ? selectedExperiments.concat(selectedExperimentInfo) as ISelectedExperiment[] : selectedExperiments;\n      return action.experiments.map(experiment => {\n        const experimentFromState = experimentsFromState.find(exp => exp.id === experiment.id);\n        return new ExperimentDetailsUpdated({\n          id: experiment.id,\n          changes: {tags: Array.from(new Set((experimentFromState?.tags || experiment.tags || []).concat([action.tag]))).sort()}\n        });\n      });\n    })\n  ));\n\n\n  removeTag$ = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.removeTag),\n    switchMap((action) =>\n      action.experiments.filter(experiment => experiment.tags.includes(action.tag)).map(experiment =>\n        new ExperimentDetailsUpdated({\n          id: experiment.id,\n          changes: {tags: experiment.tags.filter(tag => tag !== action.tag)}\n        })\n      ).concat(addMessage('success', `“${action.tag}” tag has been removed from “${action.experiments[0]?.name}” experiment`, [\n        {\n          name: 'Undo',\n          actions: [\n            addMessage('success', `“${action.tag}” tag has been restored`),\n            ...action.experiments.map(() => menuActions.addTag({\n              experiments: action.experiments,\n              tag: action.tag\n            }))\n          ]\n        }]\n      ) as any)\n    )\n  ));\n\n\n  archiveExperiments = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.archiveSelectedExperiments),\n    withLatestFrom(\n      this.store.select(selectRouterParams),\n      this.store.select(exSelectors.selectSelectedTableExperiment)),\n    tap(([action, routerParams, selectedExperiment]) => {\n      if (this.isSelectedExpInCheckedExps(action.selectedEntities, selectedExperiment)) {\n        this.router.navigate([`projects/${routerParams.projectId}/experiments/`]);\n      }\n    }),\n    switchMap(([action, routerParams]) => this.apiTasks.tasksArchiveMany({ids: action.selectedEntities.map(exp => exp.id)})\n      .pipe(\n        withLatestFrom(this.store.select(selectRouterConfig)),\n        mergeMap(([res, routerConfig]: [TasksArchiveManyResponse, RouterState['config']]) => {\n          const experiments = action.selectedEntities;\n          const allFailed = res.failed.length === experiments.length;\n          const undoAction = [\n            {\n              name: 'Undo', actions: [\n                viewActions.setSelectedExperiments({experiments}),\n                menuActions.restoreSelectedExperiments({selectedEntities: experiments, skipUndo: true})\n              ]\n            }\n          ];\n          let actions: Action[] = [\n            deactivateLoader(action.type),\n            viewActions.setSelectedExperiments({experiments: []}),\n            getNotificationAction(res, action, MenuItems.archive, EntityTypeEnum.experiment, (action.skipUndo || allFailed) ? [] : undoAction)\n          ];\n          if (routerConfig.includes('experiments')) {\n            const failedIds = res.failed.map(fail => fail.id);\n            const successExperiments = experiments.map(exp => exp.id).filter(id => !failedIds.includes(id));\n            actions = actions.concat([\n              viewActions.removeExperiments({experiments: successExperiments}),\n              viewActions.getExperiments()\n            ]);\n          }\n          if (routerConfig.includes('output') && routerParams?.experimentId === experiments[0].id) {\n            actions.push(new ExperimentDetailsUpdated({\n              id: experiments[0].id,\n              changes: {system_tags: [...experiments[0]?.system_tags.filter(t => t !== 'shared'), 'archived'].sort()}\n            }));\n          }\n          return actions;\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          setServerError(error, null, 'Failed To Archive Experiments')\n        ])\n      )\n    )\n  ));\n\n\n  restoreExperiments = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.restoreSelectedExperiments),\n    withLatestFrom(\n      this.store.select(selectRouterParams),\n      this.store.select(exSelectors.selectSelectedTableExperiment)),\n    tap(([action, routerParams, selectedExperiment]) => {\n      if (this.isSelectedExpInCheckedExps(action.selectedEntities, selectedExperiment)) {\n        this.router.navigate([`projects/${routerParams.projectId}/experiments/`]);\n      }\n    }),\n    switchMap(([action, routerParams]) => this.apiTasks.tasksUnarchiveMany({ids: action.selectedEntities.map(exp => exp.id)})\n      .pipe(\n        withLatestFrom(this.store.select(selectRouterConfig)),\n        mergeMap(([res, routerConfig]: [TasksArchiveManyResponse, RouterState['config']]) => {\n          const experiments = action.selectedEntities;\n          const allFailed = res.failed.length === experiments.length;\n          const undoAction = [\n            {\n              name: 'Undo', actions: [\n                viewActions.setSelectedExperiments({experiments}),\n                menuActions.archiveSelectedExperiments({selectedEntities: experiments, skipUndo: true})\n              ]\n            }\n          ];\n          let actions: Action[] = [\n            deactivateLoader(action.type),\n            viewActions.setSelectedExperiments({experiments: []}),\n            getNotificationAction(res, action, MoreMenuItems.restore, EntityTypeEnum.experiment, (action.skipUndo || allFailed) ? [] : undoAction)\n          ];\n          if (routerConfig.includes('experiments')) {\n            const failedIds = res.failed.map(fail => fail.id);\n            const successExperiments = experiments.map(exp => exp.id).filter(id => !failedIds.includes(id));\n            actions = actions.concat([\n              viewActions.removeExperiments({experiments: successExperiments}),\n              viewActions.getExperiments(),\n            ]);\n          }\n          if (routerConfig.includes('output') && routerParams?.experimentId === experiments[0].id) {\n            actions.push(new ExperimentDetailsUpdated({\n              id: experiments[0].id,\n              changes: {system_tags: experiments[0]?.system_tags.filter(tag => tag !== 'archived')}\n            }));\n          }\n          return actions;\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          setServerError(error, null, 'Failed To Restore Experiments')\n        ])\n      )\n    )\n  ));\n\n\n  navigateToQueue = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.navigateToQueue),\n    withLatestFrom(this.store.select(selectSelectedExperiment)),\n    switchMap(([action, info]) => {\n      if (action.experimentId === info?.id && info?.execution?.queue?.id) {\n        return of({tasks: [info]});\n      } else {\n        return this.apiTasks.tasksGetAllEx({\n          id: [action.experimentId],\n          only_fields: ['execution.queue.id']\n        });\n      }\n    }),\n    map((res: TasksGetAllExResponse) => {\n      const queue = (res.tasks[0] as unknown as ITask).execution.queue;\n      return this.router.navigate(['/workers-and-queues/queues'], {queryParams: {id: queue.id}});\n    })\n  ), {dispatch: false});\n\n\n  isSelectedExpInCheckedExps(checked: ISelectedExperiment[], selected: ISelectedExperiment): boolean {\n    return selected && checked.some(exp => exp.id === selected.id);\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-1 d-flex align-items-start justify-content-around content-row\">\n    <sm-experiment-type-icon-label [type]=\"experiment?.type\" [showLabel]=\"false\"></sm-experiment-type-icon-label>\n  </div>\n  <div class=\"col-23\">\n    <div class=\"row d-flex content-row justify-content-between\">\n      <div class=\"ellipsis name\">\n        {{experiment.name}}\n      </div>\n      <i *ngIf=\"experiment?.system_tags.includes('shared')\" class=\"fas fa-link p-1 ml-1\"></i>\n      <sm-experiment-status-icon-label [status]=\"experiment?.status\"></sm-experiment-status-icon-label>\n    </div>\n    <div class=\"row content-row justify-content-between\">\n      {{experiment?.user?.name}}\n    </div>\n    <div class=\"row d-flex content-row justify-content-between\">\n      <div>\n        {{experiment.created | date : TIME_FORMAT_STRING}}\n      </div>\n      <div>\n        {{experiment.completed | date : TIME_FORMAT_STRING}} {{experimentDuration(experiment.created, experiment.completed) | msToHours}}\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ITask} from '../../../../business-logic/model/al-task';\nimport {TIME_FORMAT_STRING} from '../../../constants';\n\n@Component({\n  selector   : 'sm-experiment-table-card',\n  templateUrl: './experiment-table-card.component.html',\n  styleUrls  : ['./experiment-table-card.component.scss']\n})\nexport class ExperimentTableCardComponent implements OnInit {\n  @Input() experiment: ITask;\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  experimentDuration(created, completed) {\n\n    const createdDate = new Date(created).getTime();\n    const completedDate = new Date(completed).getTime();\n\n    return completed ? (completedDate - createdDate) : '';\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ExperimentOutputLogComponent} from '../../containers/experiment-output-log/experiment-output-log.component';\nimport {ExperimentLogInfoComponent} from '../../dumb/experiment-log-info/experiment-log-info.component';\nimport {SMSharedModule} from '../../../shared/shared.module';\nimport {UiComponentsModule} from '../../../shared/ui-components/ui-components.module';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport {SharedPipesModule} from '../../../shared/pipes/shared-pipes.module';\n\n\n\n@NgModule({\n  declarations: [ExperimentOutputLogComponent, ExperimentLogInfoComponent],\n  exports: [ExperimentOutputLogComponent],\n  imports: [\n    CommonModule,\n    SMSharedModule,\n    MatProgressSpinnerModule,\n    UiComponentsModule,\n    SharedPipesModule\n  ]\n})\nexport class ExperimentOutputLogModule { }\n","import {NgModule} from '@angular/core';\nimport {CommonModule, TitleCasePipe} from '@angular/common';\nimport {ExperimentTypeIconLabelComponent} from './dumb/experiment-type-icon-label/experiment-type-icon-label.component';\nimport {SharedPipesModule} from '../shared/pipes/shared-pipes.module';\nimport {EffectsModule} from '@ngrx/effects';\nimport {CommonExperimentsViewEffects} from './effects/common-experiments-view.effects';\nimport {CommonExperimentsInfoEffects} from './effects/common-experiments-info.effects';\nimport {CommonExperimentOutputEffects} from './effects/common-experiment-output.effects';\nimport {CommonExperimentsMenuEffects} from './effects/common-experiments-menu.effects';\nimport {ExperimentHeaderComponent} from './dumb/experiment-header/experiment-header.component';\nimport {ExperimentInfoHeaderComponent} from './dumb/experiment-info-header/experiment-info-header.component';\nimport {ExperimentInfoGeneralComponent} from './containers/experiment-info-general/experiment-info-general.component';\nimport {ExperimentGeneralInfoComponent} from './dumb/experiment-general-info/experiment-general-info.component';\nimport {ExperimentNetworkDesignFormComponent} from './dumb/experiment-network-design-form/experiment-network-design-form.component';\nimport {ExperimentModelsFormViewComponent} from './dumb/experiment-models-form-view/experiment-models-form-view.component';\nimport {ExperimentExecutionSourceCodeComponent} from './dumb/experiment-execution-source-code/experiment-execution-source-code.component';\nimport {ExperimentExecutionParametersComponent} from './dumb/experiment-execution-parameters/experiment-execution-parameters.component';\nimport {ExperimentOutputPlotsComponent} from './containers/experiment-output-plots/experiment-output-plots.component';\nimport {ExperimentOutputScalarsComponent} from './containers/experiment-output-scalars/experiment-output-scalars.component';\nimport {ModelAutoPopulateDialogComponent} from './dumb/model-auto-populate-dialog/model-auto-populate-dialog.component';\nimport {ExperimentTableCardComponent} from './dumb/experiment-table-card/experiment-table-card.component';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {CommonLayoutModule} from '../layout/layout.module';\nimport {ExperimentSharedModule} from '../../features/experiments/shared/experiment-shared.module';\nimport {CommonExperimentSharedModule} from './shared/common-experiment-shared.module';\nimport {RouterModule} from '@angular/router';\nimport {SMMaterialModule} from '../shared/material/material.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ExperimentGraphsModule} from '../shared/experiment-graphs/experiment-graphs.module';\nimport {ExperimentsComponent} from './experiments.component';\nimport {AngularSplitModule} from 'angular-split';\nimport {ExperimentCompareSharedModule} from '../experiments-compare/shared/experiment-compare-shared.module';\nimport {ExperimentCustomColsMenuComponent} from './dumb/experiment-custom-cols-menu/experiment-custom-cols-menu.component';\nimport {SelectMetricForCustomColComponent} from './dumb/select-metric-for-custom-col/select-metric-for-custom-col.component';\nimport {ExperimentInfoHyperParametersComponent} from './containers/experiment-info-hyper-parameters/experiment-info-hyper-parameters.component';\nimport {SelectHyperParamsForCustomColComponent} from './dumb/select-hyper-params-for-custom-col/select-hyper-params-for-custom-col.component';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {ExperimentArtifactsNavbarComponent} from './dumb/experiment-artifacts-navbar/experiment-artifacts-navbar.component';\nimport {ExperimentOutputModelViewComponent} from './dumb/experiment-output-model-view/experiment-output-model-view.component';\nimport {ExperimentInfoArtifactsComponent} from './containers/experiment-info-aritfacts/experiment-info-artifacts.component';\nimport {ExperimentInfoArtifactItemComponent} from './containers/experiment-info-artifact-item/experiment-info-artifact-item.component';\nimport {ExperimentArtifactItemViewComponent} from './dumb/experiment-artifact-item-view/experiment-artifact-item-view.component';\nimport {ExperimentInfoModelComponent} from './containers/experiment-info-model/experiment-info-model.component';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {BaseClickableArtifactComponent} from './dumb/base-clickable-artifact.component';\nimport {NoUnderscorePipe} from '../shared/pipes/no-underscore.pipe';\nimport {ExperimentHyperParamsNavbarComponent} from './dumb/experiment-hyper-params-navbar/experiment-hyper-params-navbar.component';\nimport {ExperimentInfoTaskModelComponent} from './containers/experiment-info-task-model/experiment-info-task-model.component';\nimport {ExperimentInfoHyperParametersFormContainerComponent} from './containers/experiment-info-hyper-parameters-form-container/experiment-info-hyper-parameters-form-container.component';\nimport {SharedModule} from '../../shared/shared.module';\nimport {CommonDeleteDialogModule} from '../shared/entity-page/entity-delete/common-delete-dialog.module';\nimport {ExperimentInfoEditDescriptionComponent} from './dumb/experiment-info-edit-description/experiment-info-edit-description.component';\nimport {ExperimentOutputLogModule} from './shared/experiment-output-log/experiment-output-log.module';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {ExperimentsTableComponent} from \"./dumb/experiments-table/experiments-table.component\";\nimport { HyperParamMetricColumnComponent } from './dumb/experiments-table/hyper-param-metric-column/hyper-param-metric-column.component';\nimport { GetParamMetricValuePipe } from './dumb/experiments-table/hyper-param-metric-column/get-param-metric-value.pipe';\nimport { GetVariantWithoutRoundPipe } from './dumb/experiments-table/hyper-param-metric-column/get-variant-without-round.pipe';\n\n@NgModule({\n  declarations: [\n    SelectMetricForCustomColComponent,\n    SelectHyperParamsForCustomColComponent,\n    BaseClickableArtifactComponent,\n    ExperimentsComponent,\n    ExperimentTypeIconLabelComponent,\n    ExperimentHeaderComponent,\n    ExperimentInfoHeaderComponent,\n    ExperimentsTableComponent,\n    ExperimentInfoModelComponent,\n    ExperimentInfoTaskModelComponent,\n    ExperimentInfoGeneralComponent,\n    ExperimentGeneralInfoComponent,\n    ExperimentNetworkDesignFormComponent,\n    ExperimentModelsFormViewComponent,\n    ExperimentOutputModelViewComponent,\n    ExperimentExecutionSourceCodeComponent,\n    ExperimentExecutionParametersComponent,\n    ExperimentOutputPlotsComponent,\n    ExperimentOutputScalarsComponent,\n    ModelAutoPopulateDialogComponent,\n    ExperimentCustomColsMenuComponent,\n    ExperimentTableCardComponent,\n    ExperimentInfoHyperParametersComponent,\n    ExperimentInfoHyperParametersFormContainerComponent,\n    ExperimentArtifactsNavbarComponent,\n    ExperimentInfoArtifactsComponent,\n    ExperimentHyperParamsNavbarComponent,\n    ExperimentInfoArtifactItemComponent,\n    ExperimentArtifactItemViewComponent,\n    ExperimentInfoEditDescriptionComponent,\n    HyperParamMetricColumnComponent,\n    GetParamMetricValuePipe,\n    GetVariantWithoutRoundPipe\n  ],\n  exports: [ExperimentTypeIconLabelComponent,\n    ExperimentsComponent,\n    ExperimentInfoHeaderComponent,\n    ExperimentExecutionSourceCodeComponent,\n    SelectMetricForCustomColComponent,\n    ExperimentExecutionParametersComponent,ExperimentsTableComponent],\n  imports: [\n    AngularSplitModule,\n    ScrollingModule,\n    ExperimentGraphsModule,\n    CommonDeleteDialogModule,\n    SMMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ExperimentCompareSharedModule,\n    CommonExperimentSharedModule,\n    CommonLayoutModule,\n    ExperimentSharedModule,\n    SMSharedModule,\n    SharedPipesModule,\n    RouterModule,\n    CommonModule,\n    EffectsModule.forFeature([CommonExperimentsViewEffects, CommonExperimentsInfoEffects, CommonExperimentOutputEffects, CommonExperimentsMenuEffects]),\n    MatProgressSpinnerModule,\n    SharedModule,\n    ExperimentOutputLogModule,\n    MatRadioModule,\n  ],\n  providers: [ExperimentTableCardComponent, NoUnderscorePipe, TitleCasePipe]\n})\nexport class ExperimentsCommonModule {\n}\n","<i class=\"al-icon\" [class]=\"iconClass + ' al-ico-type-' + (type ? (type.toString()).replace('_', '-') : 'training')\"></i>\n<span class=\"ml-2 ellipsis\" [ngClass]=\"type\" *ngIf=\"showLabel\">\n  {{type?.length < 4 ? type.toUpperCase() : (type | noUnderscore | titlecase)}}\n</span>\n\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TaskTypeEnum} from '../../../../business-logic/model/tasks/taskTypeEnum';\n\n\n@Component({\n  selector: 'sm-experiment-type-icon-label',\n  templateUrl: './experiment-type-icon-label.component.html',\n  styleUrls: ['./experiment-type-icon-label.component.scss']\n})\nexport class ExperimentTypeIconLabelComponent implements OnInit {\n  @Input() type: TaskTypeEnum;\n  @Input() iconClass = 'md';\n  @Input() showLabel = true;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {get} from 'lodash/fp';\n\n@Pipe({\n  name: 'getVariantWithoutRound'\n})\nexport class GetVariantWithoutRoundPipe implements PipeTransform {\n\n  transform(col, metrics): number {\n    return get(`${col.metric_hash}.${col.variant_hash}.${col.valueType}`, metrics);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {get} from 'lodash/fp';\nimport {ISmCol} from '../../../../shared/ui-components/data/table/table.consts';\nimport {ITask} from '../../../../../business-logic/model/al-task';\nimport {GetVariantWithoutRoundPipe} from './get-variant-without-round.pipe';\nimport {getRoundedNumber} from '../../../shared/common-experiments.utils';\n\n@Pipe({\n  name: 'getParamMetricValue'\n})\nexport class GetParamMetricValuePipe implements PipeTransform {\n\n  transform(col: ISmCol, experiment: ITask, roundedMetricValue: any): string {\n    return col.isParam ? this.getHyperParam(experiment?.hyperparams, col) : (col.metric_hash ? this.getVariant(experiment?.last_metrics, col, roundedMetricValue) : experiment[col.id]);\n  }\n\n  getHyperParam(params, col) {\n\n    if (params && col.isParam) {\n      const param = col.id.replace('hyperparams.', '');\n      return get(`${param}.value`, params);\n    }\n    return '';\n  }\n\n  getVariant(metrics, col, roundedMetricValue) {\n    return (roundedMetricValue?.noRound ? new GetVariantWithoutRoundPipe().transform(col, metrics) : this.getVariantRound(metrics, col)) || '';\n  }\n\n  getVariantRound(metrics, col) {\n    const value = new GetVariantWithoutRoundPipe().transform(col, metrics);\n    return value ? getRoundedNumber(value) : value;\n  }\n}\n\n\n","<span matTooltipPosition=\"above\" class=\"metric-cell ellipsis\"\n      [smTooltip]=\"roundedMetricValue?.[experiment.id] && !roundedMetricValue?.noRound ? (col | getVariantWithoutRound:experiment?.last_metrics) : ''\">\n            {{col | getParamMetricValue:experiment:roundedMetricValue}}\n</span>\n<i *ngIf=\"roundedMetricValue && roundedMetricValue[experiment.id]\"\n   class=\"al-icon sm ml-2 al-ico-line-expand\"\n   [class.fa-rotate-180]=\"roundedMetricValue.noRound\"\n   (click)=\"expandColToggle($event, col)\"></i>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ISmCol} from '@common/shared/ui-components/data/table/table.consts';\n\n@Component({\n  selector: 'sm-hyper-param-metric-column',\n  templateUrl: './hyper-param-metric-column.component.html',\n  styleUrls: ['./hyper-param-metric-column.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HyperParamMetricColumnComponent {\n\n  @Input() roundedMetricValue: { [expId: string]: boolean } = {};\n  @Input() col: any;\n  @Input() experiment: any;\n  @Output() expandClicked = new EventEmitter<{ columnId: string; width: number }>();\n\n  expandColToggle(event, col: ISmCol) {\n    event.stopPropagation();\n    this.roundedMetricValue.noRound = !this.roundedMetricValue.noRound;\n    const cellCurrentWidth = event.target.parentElement.parentElement.clientWidth || 0;\n    this.expandClicked.emit({columnId: col.id, width: this.roundedMetricValue.noRound ? Math.max(cellCurrentWidth + 1, 200) : 110});\n  }\n\n}\n","<script src=\"../../../models/shared/models-table/models-table.component.ts\"></script>\n<sm-experiment-menu-extended #contextMenuExtended\n                    *ngIf=\"!disableContextMenu\"\n                    [experiment]=\"contextExperiment\"\n                    [selectedExperiment]=\"selectedExperiment\"\n                    [selectedExperiments]=\"selectedExperiments\"\n                    [selectedDisableAvailable]=\"selectedExperimentsDisableAvailable\"\n                    [numSelected]=\"selectedExperiments.length\"\n                    [tagsFilterByProject]=\"tagsFilterByProject$ | async\"\n                    [projectTags]=\"projectTags$ | async\"\n                    [companyTags]=\"companyTags$ | async\"\n                    (tagSelected)=\"addTag($event)\"\n                    (menuOpened)=\"setContextMenuStatus(true)\"\n                    (menuClosed)=\"setContextMenuStatus(false)\"\n                    [activateFromMenuButton]=\"false\"\n                    [minimizedView]=\"true\"\n></sm-experiment-menu-extended>\n<div class=\"table-container\" [class.card-view]=\"minimizedView\" #tableContainer>\n  <sm-table\n    [selectionMode]=\"selectionMode\"\n    [tableData]=\"experiments\"\n    [columnsOrder]=\"colsOrder\"\n    [reorderableColumns]=\"reorderableColumns\"\n    [resizableColumns]=\"true\"\n    [columns]=\"tableCols\"\n    [lazyLoading]=\"true\"\n    [minimizedView]=\"minimizedView\"\n    [minimizedTableHeader]=\"'EXPERIMENT LIST'\"\n    [noMoreData]=\"noMoreExperiments\"\n    [selection]=\"selectedExperiment\"\n    [activeContextRow]=\"contextExperiment\"\n    [contextMenuOpen]=\"contextMenuActive\"\n    [checkedItems]=\"selectedExperiments\"\n    [keyboardControl]=\"true\"\n    [sortFields]=\"tableSortFields\"\n    (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n    (loadMoreClicked)=\"onLoadMoreClicked()\"\n    (onRowRightClick)=\"onContextMenu($event)\"\n    (colReordered)=\"columnsReordered.emit($event)\"\n    (sortChanged)=\"onSortChanged($event.isShift, $event.field)\"\n    (columnResized)=\"columnResized.emit($event)\"\n  >\n    <!--HEADER TEMPLATE-->\n    <ng-template let-col pTemplate=\"cardFilter\">\n      <sm-table-card-filter-template [options]=\"filtersOptions\"\n                                     [filterMatch]=\"filtersMatch\"\n                                     [value]=\"filtersValues\"\n                                     [subValue]=\"filtersSubValues[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]\"\n                                     [columns]=\"initialColumns\"\n                                     fixedOptionsSubheader=\"System tags\"\n                                     (subFilterChanged)=\"tableFilterChanged({id:'system_tags'}, $event)\"\n                                     (filterChanged)=\"tableAllFiltersChanged($event)\"\n                                     (menuOpened)=\"columnFilterOpened($event)\"\n                                     (menuClosed)=\"columnFilterClosed($event)\"\n      ></sm-table-card-filter-template>\n    </ng-template>\n\n    <ng-template let-col pTemplate=\"checkbox\">\n      <sm-checkbox-control\n        *ngIf=\"col.headerType === colHeaderTypeEnum.checkBox\"\n        class=\"checkbox-col header\"\n        fieldName=\"selected\"\n        [formData]=\"selectionState\"\n        (formDataChanged)=\"headerCheckboxClicked()\"\n        inputClassName=\"table-check-box select-col-checkbox\"\n      ></sm-checkbox-control>\n      <div class=\"al-icon al-ico-dropdown-arrow sm drop-down\" [matMenuTriggerFor]=\"selectionMenu\"></div>\n      <mat-menu class=\"light-theme\" #selectionMenu=\"matMenu\">\n        <div class=\"menu-title\">Select from project</div>\n        <button mat-menu-item (click)=\"selectAll()\">All</button>\n        <button mat-menu-item (click)=\"emitSelection([])\">None</button>\n        <button mat-menu-item (click)=\"selectAll(true)\">All matching filter</button>\n      </mat-menu>\n    </ng-template>\n    <!--FILTER TEMPLATE-->\n\n    <ng-template let-col pTemplate=\"sort-filter\">\n      <sm-table-filter-sort-template\n        [column]=\"col\"\n        [value]=\"filtersValues[col.id]\"\n        [searchValue]=\"searchValues[col.id]\"\n        [options]=\"filtersOptions[col.id] | filter:searchValues[col.id]:'label'\"\n        [sortOrder]=\"tableSortFieldsObject[col.id]\"\n        [tooltip]=\"col.metric_hash || col.isParam\"\n        [fixedOptionsSubheader]=\"col.id === EXPERIMENTS_TABLE_COL_FIELDS.TAGS ? 'System tags' : ''\"\n        [andFilter]=\"col.andFilter ? filtersMatch[col.id] === 'AND' : null\"\n        (sortOrderChanged)=\"onSortChanged($event, col.id)\"\n        (filterChanged)=\"tableFilterChanged(col, $event);\"\n        (searchValueChanged)=\"searchValueChanged($event, col.id)\"\n        (menuOpened)=\"columnFilterOpened(col)\"\n        (menuClosed)=\"columnFilterClosed(col)\"\n      >\n      </sm-table-filter-sort-template>\n    </ng-template>\n\n    <!--BODY TEMPLATE-->\n\n    <ng-template let-col\n                 let-experiment=\"rowData\"\n                 pTemplate=\"body\">\n      <ng-container [ngSwitch]=\"col.id\">\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.TYPE\">\n          <sm-experiment-type-icon-label class=\"w-100\" [type]=\"experiment?.type\"></sm-experiment-type-icon-label>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.NAME\">\n          <div class=\"d-flex align-items-center pr-3\">\n            <div\n              class=\"experiment-name\"\n              [class.italic]=\"isDevelopment(experiment)\"\n              matTooltipPosition=\"above\"\n              [smTooltip]=\"experiment.name\">\n              {{experiment.name}}\n            </div>\n            <i *ngIf=\"experiment?.system_tags.includes('shared')\" class=\"fas fa-link p-1 ml-1\"></i>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.TAGS\">\n          <sm-tag-list [tags]=\"experiment.tags\" [sysTags]=\"getSystemTags(experiment)\"></sm-tag-list>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.USER\">\n          {{experiment.user?.name ? experiment.user?.name : 'Unknown User'}}\n        </ng-container>\n        <span *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.PROJECT\"\n              matTooltipPosition=\"above\"\n              [smTooltip]=\"experiment.project?.name\">\n          {{experiment.project?.name}}\n        </span>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.STARTED\">\n          <span matTooltipPosition=\"above\"\n                [smTooltip]=\"experiment.started | date : TIME_FORMAT_STRING\">{{experiment.started | timeAgo}}</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.LAST_UPDATE\">\n          <span matTooltipPosition=\"above\"\n                [smTooltip]=\"experiment.last_update | date : TIME_FORMAT_STRING\">{{experiment.last_update | timeAgo}}</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.ACTIVE_DURATION\">\n          {{experiment.active_duration | duration}}\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.COMMENT\">\n          <span matTooltipPosition=\"above\" [smTooltip]=\"experiment.comment\">{{experiment.comment}}</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.SELECTED\">\n          <sm-checkbox-control\n            class=\"checkbox-col\"\n            fieldName=\"selected\"\n            [smTooltip]=\"selectionReachedLimit && !isRowSelected(experiment)? 'Reached selection limit': null\"\n            [disabled]=\"selectionReachedLimit && !isRowSelected(experiment)\"\n            [formData]=\"isRowSelected(experiment)\"\n            (formDataChanged)=\"rowSelectedChanged($event, experiment)\"\n            inputClassName=\"table-check-box table-body\">\n          </sm-checkbox-control>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.STATUS\">\n          <sm-experiment-status-icon-label [status]=\"experiment?.status\"></sm-experiment-status-icon-label>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"EXPERIMENTS_TABLE_COL_FIELDS.PARENT\">\n          <span\n            class=\"parent-name\"\n            *ngIf=\"experiment?.parent?.id\"\n            matTooltipPosition=\"above\"\n            [smTooltip]=\"experiment.parent.project?.name? experiment.parent.project.name + ' / ' + experiment.parent.name : experiment.parent.name\"\n          >{{experiment.parent.name}}</span>\n        </ng-container>\n        <!--  Case for hyper params and custom metrics/variants  -->\n        <ng-container *ngSwitchDefault>\n          <sm-hyper-param-metric-column [roundedMetricValue]=\"roundedMetricValues[col.id]\"\n                                        [col]=\"col\"\n                                        [experiment]=\"experiment\"\n                                        (expandClicked)=\"columnsWidthChanged($event)\">\n          </sm-hyper-param-metric-column>\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template let-experiment=\"rowData\" let-selected=\"selected\" let-rowNumber=\"rowNumber\" pTemplate=\"card\">\n      <sm-table-card class=\"flex-grow-1\" [selected]=\"selected\"\n                     [rowNumber]=\"rowNumber\"\n                     [cardName]=\"experiment.name\"\n                     [columns]=\"tableCols\"\n                     [rowData]=\"experiment\"\n                     [checked]=\"isRowSelected(experiment)\"\n                     [activeContextRow]=\"contextExperiment\"\n                     [contextMenuOpen]=\"contextMenuActive\"\n      >\n        <div sm-name-icon><i *ngIf=\"experiment?.system_tags.includes('shared')\" class=\"fas fa-link p-1 ml-1\"></i></div>\n        <sm-tag-list class=\"mb-2\" [sysTags]=\"getSystemTags(experiment)\" [tags]=\"experiment?.tags\"></sm-tag-list>\n        <div class=\"d-flex justify-content-between compact-columns-data\" compact-columns-data>\n          <span class=\"ellipsis\">Updated {{experiment.last_update | timeAgo}}<span class=\"dot\">●</span>Created by {{experiment.user?.name || 'Unknown User'}}\n          </span>\n          <ng-container *ngIf=\"experiment.last_iteration\">\n            <span>{{experiment.last_iteration}} Iterations</span>\n          </ng-container>\n        </div>\n        <sm-experiment-type-icon-label [type]=\"experiment?.type\" [showLabel]=\"false\"></sm-experiment-type-icon-label>\n        <sm-experiment-status-icon-label [status]=\"experiment?.status\"></sm-experiment-status-icon-label>\n        <sm-checkbox-control fieldName=\"selected\" [formData]=\"isRowSelected(experiment)\" class=\"checkbox-align-top\"\n                             (formDataChanged)=\"rowSelectedChanged($event, experiment)\"\n                             [inputClassName]=\"'table-check-box table-body' + (selected ? ' row-selected' : '')\"></sm-checkbox-control>\n      </sm-table-card>\n    </ng-template>\n  </sm-table>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {ICONS, TIME_FORMAT_STRING} from '../../../constants';\nimport {ColHeaderTypeEnum, ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {FILTERED_EXPERIMENTS_STATUS_OPTIONS} from '../../shared/common-experiments.const';\nimport {get, uniq} from 'lodash/fp';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {ITableExperiment} from '../../shared/common-experiment-model.model';\nimport {EXPERIMENTS_TABLE_COL_FIELDS,} from '../../../../features/experiments/shared/experiments.const';\nimport {BaseTableView} from '../../../shared/ui-components/data/table/base-table-view';\nimport {getSystemTags, isDevelopment} from '../../../../features/experiments/shared/experiments.utils';\nimport {User} from '../../../../business-logic/model/users/user';\nimport {sortByArr} from '../../../shared/pipes/show-selected-first.pipe';\nimport {Observable} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {selectCompanyTags, selectProjectTags, selectTagsFilterByProject} from '../../../core/reducers/projects.reducer';\nimport {addTag} from '../../actions/common-experiments-menu.actions';\nimport {NoUnderscorePipe} from '../../../shared/pipes/no-underscore.pipe';\nimport {TitleCasePipe} from '@angular/common';\nimport {INITIAL_EXPERIMENT_TABLE_COLS} from '../../experiment.consts';\nimport {ProjectsGetTaskParentsResponseParents} from '../../../../business-logic/model/projects/projectsGetTaskParentsResponseParents';\nimport {Router} from '@angular/router';\nimport {IOption} from '../../../shared/ui-components/inputs/select-autocomplete-for-template-forms/select-autocomplete-for-template-forms.component';\nimport {createFiltersFromStore} from '../../effects/common-experiments-view.effects';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '../../../shared/entity-page/items.utils';\nimport {hyperParamSelectedExperiments, selectAllExperiments} from '../../actions/common-experiments-view.actions';\nimport {excludedKey, uniqueFilterValueAndExcluded} from '../../../shared/utils/tableParamEncode';\nimport {getRoundedNumber} from '../../shared/common-experiments.utils';\nimport {isReadOnly} from '../../../shared/utils/shared-utils';\nimport {ExperimentMenuExtendedComponent} from '../../../../features/experiments/containers/experiment-menu-extended/experiment-menu-extended.component';\n\n@Component({\n  selector: 'sm-experiments-table',\n  templateUrl: './experiments-table.component.html',\n  styleUrls: ['./experiments-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentsTableComponent extends BaseTableView implements OnDestroy {\n  readonly EXPERIMENTS_TABLE_COL_FIELDS = EXPERIMENTS_TABLE_COL_FIELDS;\n  readonly FILTERED_EXPERIMENTS_STATUS_OPTIONS = FILTERED_EXPERIMENTS_STATUS_OPTIONS;\n  public filtersOptions: { [colId: string]: IOption[] } = {\n    [EXPERIMENTS_TABLE_COL_FIELDS.STATUS]: this.FILTERED_EXPERIMENTS_STATUS_OPTIONS,\n    [EXPERIMENTS_TABLE_COL_FIELDS.TYPE]: [],\n    [EXPERIMENTS_TABLE_COL_FIELDS.USER]: [],\n    [EXPERIMENTS_TABLE_COL_FIELDS.TAGS]: [],\n    [EXPERIMENTS_TABLE_COL_FIELDS.PARENT]: [],\n    [EXPERIMENTS_TABLE_COL_FIELDS.PROJECT]: [],\n  };\n  readonly ICONS = ICONS;\n  readonly getSystemTags = getSystemTags;\n  public isDevelopment = isDevelopment;\n  private _selectedExperiments: ITableExperiment[] = [];\n  readonly colHeaderTypeEnum = ColHeaderTypeEnum;\n  public readonly initialColumns = INITIAL_EXPERIMENT_TABLE_COLS;\n  @Input() disableContextMenu = false;\n\n  @Input() tableCols: ISmCol[];\n  private _experiments: Array<ITableExperiment> = [];\n  private _selectedExperiment: ITableExperiment;\n  public searchValues: { [colId: string]: string } = {};\n  public roundedMetricValues: { [colId: string]: { [expId: string]: boolean } } = {};\n\n  @Input() set experiments(experiments: Array<ITableExperiment>) {\n    this._experiments = experiments;\n\n    this.tableCols?.filter(tableCol => tableCol.id.startsWith('last_metrics')).forEach(col => experiments.forEach(exp => {\n      const value = get(col.id, exp);\n      this.roundedMetricValues[col.id] = this.roundedMetricValues[col.id] || {};\n      this.roundedMetricValues[col.id][exp.id] = value && getRoundedNumber(value) !== value;\n    }));\n\n    if (this.contextExperiment) {\n      this.contextExperiment = this._experiments.find(experiment => experiment.id === this.contextExperiment.id);\n    }\n  }\n\n  get experiments(): Array<ITableExperiment> {\n    return this._experiments;\n  }\n\n  public contextExperiment: ITableExperiment;\n  public tagsFilterByProject$: Observable<boolean>;\n  public projectTags$: Observable<string[]>;\n  public companyTags$: Observable<string[]>;\n  public filtersValues: { [colId: string]: any } = {};\n  public filtersMatch: { [colId: string]: string } = {};\n  public filtersSubValues: { [colId: string]: any } = {};\n  @Input() selectedExperimentsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered>;\n\n  @Input() set users(users: User[]) {\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.USER] = users?.map(user => ({\n      label: user.name ? user.name : 'Unknown User',\n      value: user.id\n    }));\n    this.sortOptionalUsersList();\n  }\n\n  @Input() set hyperParamsOptions(hyperParamsOptions: Record<ISmCol['id'], string[]>) {\n    Object.entries(hyperParamsOptions).forEach(([id, values]) => {\n      this.filtersOptions[id] = [{label: '(No Value)', value: null}].concat(values.map(value => ({\n        label: value,\n        value\n      })));\n    });\n  }\n\n  @Input() activeParentsFilter: ProjectsGetTaskParentsResponseParents[];\n\n\n\n  @Input() set parents(parents: ProjectsGetTaskParentsResponseParents[]) {\n    const parentsAndActiveFilter = Array.from(new Set(parents.concat(this.activeParentsFilter || [])));\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.PARENT] = parentsAndActiveFilter.map(parent => ({\n      label: parent.name ? parent.name : 'Unknown Experiment',\n      value: parent.id,\n      tooltip: `${parent.project?.name} / ${parent.name}`\n    }));\n    this.sortOptionalParentsList();\n  }\n\n  @Input() set selectedExperiments(experiments: ITableExperiment[]) {\n    this._selectedExperiments = experiments;\n    this.updateSelectionState();\n  }\n\n  get selectedExperiments(): ITableExperiment[] {\n    return this._selectedExperiments;\n  }\n\n  @Input() set selectedExperiment(experiment: ITableExperiment) {\n    if (this._selectedExperiment?.id !== experiment?.id) {\n      window.setTimeout(() => !this.contextMenuActive && this.table?.focusSelected());\n    }\n    this._selectedExperiment = experiment;\n  }\n\n  get selectedExperiment() {\n    return this._selectedExperiment;\n  }\n\n  @Input() noMoreExperiments: boolean;\n\n  @Input() set tags(tags) {\n    const tagsAndActiveFilter = uniqueFilterValueAndExcluded(tags, this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]);\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.TAGS] = tagsAndActiveFilter.map(tag => ({\n      label: tag === null ? '(No tags)' : tag,\n      value: tag\n    }) as IOption);\n    this.sortOptionalTagsList();\n  }\n\n  @Input() set experimentTypes(types: string[]) {\n    const typesAndActiveFilter = uniq(types.concat(this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.TYPE]));\n    // under 4 letters assume an acronym and capitalize.\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.TYPE] = typesAndActiveFilter.map((type: string) =>\n      ({\n        label: (type?.length < 4 ? type.toUpperCase() : this.titleCasePipe.transform(this.noUnderscorePipe.transform(type))),\n        value: type\n      })\n    );\n  }\n\n  @Input() systemTags = [] as string[];\n  @Input() reorderableColumns: boolean = true;\n  @Input() selectionReachedLimit: boolean;\n\n  get validSystemTags() {\n    return this.systemTags.filter(tag => tag !== 'archived');\n  }\n\n  @Input() set tableFilters(filters: { [s: string]: FilterMetadata }) {\n    this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.STATUS] = get([EXPERIMENTS_TABLE_COL_FIELDS.STATUS, 'value'], filters) || [];\n    this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.TYPE] = get([EXPERIMENTS_TABLE_COL_FIELDS.TYPE, 'value'], filters) || [];\n    this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.USER] = get([EXPERIMENTS_TABLE_COL_FIELDS.USER, 'value'], filters) || [];\n    this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.TAGS] = get([EXPERIMENTS_TABLE_COL_FIELDS.TAGS, 'value'], filters) || [];\n    this.filtersMatch[EXPERIMENTS_TABLE_COL_FIELDS.TAGS] = filters?.[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]?.matchMode || '';\n    this.filtersSubValues[EXPERIMENTS_TABLE_COL_FIELDS.TAGS] = (get(['system_tags', 'value'], filters) || []);\n    this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.PARENT] = get([EXPERIMENTS_TABLE_COL_FIELDS.PARENT, 'value'], filters) || [];\n    this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.PROJECT] = get([EXPERIMENTS_TABLE_COL_FIELDS.PROJECT, 'value'], filters) || [];\n    this.sortOptionalProjectsList();\n\n    // handle dynamic filters;\n    const filtersValues = createFiltersFromStore(filters || {}, false);\n    this.filtersValues = Object.assign({}, {...this.filtersValues}, {...filtersValues});\n  }\n  @Input() set projects(projects) {\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.PROJECT] = projects.map(project => ({\n      label: project.name,\n      value: project.id,\n      tooltip: `${project.name}`\n    }));\n    this.sortOptionalProjectsList();\n  }\n\n  @Output() experimentSelectionChanged = new EventEmitter<ITableExperiment>();\n  @Output() experimentsSelectionChanged = new EventEmitter<Array<ITableExperiment>>();\n  @Output() loadMoreExperiments = new EventEmitter();\n  @Output() sortedChanged = new EventEmitter<{ isShift: boolean; colId: ISmCol['id'] }>();\n  @Output() tagsMenuOpened = new EventEmitter();\n  @Output() typesMenuOpened = new EventEmitter();\n  @Output() columnResized = new EventEmitter<{ columnId: string; widthPx: number }>();\n  @ViewChild('contextMenuExtended') contextMenuExtended: ExperimentMenuExtendedComponent;\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private store: Store<any>,\n    private noUnderscorePipe: NoUnderscorePipe,\n    private titleCasePipe: TitleCasePipe,\n    private router: Router\n  ) {\n    super();\n    this.tagsFilterByProject$ = this.store.select(selectTagsFilterByProject);\n    this.projectTags$ = this.store.select(selectProjectTags);\n    this.companyTags$ = this.store.select(selectCompanyTags);\n    this.entitiesKey = 'experiments';\n    this.selectedEntitiesKey = 'selectedExperiments';\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    if (this.contextMenuExtended?.contextMenu) {\n      this.contextMenuExtended.contextMenu = null;\n    }\n  }\n\n  onRowSelectionChanged(event) {\n    this.experimentSelectionChanged.emit(event.data);\n  }\n\n  sortOptionalUsersList() {\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.USER]\n      .sort((a, b) => sortByArr(a.value, b.value, this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.USER]));\n  }\n\n  sortOptionalParentsList() {\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.PARENT]\n      .sort((a, b) => sortByArr(a.value, b.value, this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.PARENT]));\n  }\n\n  sortOptionalProjectsList() {\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.PROJECT]\n      .sort((a, b) => sortByArr(a.value, b.value, this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.PROJECT]));\n  }\n\n  sortOptionalTagsList() {\n    const selectedTags = (this.filtersValues[EXPERIMENTS_TABLE_COL_FIELDS.TAGS] || [])\n      .map(tag => typeof tag === 'string' ? tag.replace(excludedKey, '') : tag);\n    const tagsWithNull = [null].concat(selectedTags);\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.TAGS].sort((a, b) => sortByArr(a.value, b.value, tagsWithNull));\n    this.filtersOptions = {\n      ...this.filtersOptions,\n      [EXPERIMENTS_TABLE_COL_FIELDS.TAGS]: [...this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]]\n    };\n  }\n\n  scrollTableToTop() {\n    this.table?.table?.scrollTo({top: 0});\n  }\n\n  onLoadMoreClicked() {\n    this.loadMoreExperiments.emit();\n  }\n\n  onSortChanged(isShift: boolean, colId: ISmCol['id']) {\n    this.sortedChanged.emit({isShift, colId});\n    this.scrollTableToTop();\n  }\n\n  rowSelectedChanged(change: { field: string; value: boolean; event: Event }, experiment: ITableExperiment) {\n    if (change.value) {\n      const addList = this.getSelectionRange<ITableExperiment>(change, experiment);\n      this.experimentsSelectionChanged.emit([...this.selectedExperiments, ...addList]);\n    } else {\n      this.experimentsSelectionChanged.emit(this.selectedExperiments.filter((selectedExperiment) => selectedExperiment.id !== experiment.id));\n    }\n  }\n\n  emitSelection(selection: any[]) {\n    this.experimentsSelectionChanged.emit(selection);\n  }\n\n  searchValueChanged($event: string, colId) {\n    this.searchValues[colId] = $event;\n    if (colId === EXPERIMENTS_TABLE_COL_FIELDS.TAGS) {\n      this.sortOptionalTagsList();\n    }\n  }\n\n  addTag(tag: string) {\n    this.store.dispatch(addTag({\n      tag,\n      experiments: this.selectedExperiments.length > 1 ? this.selectedExperiments.filter(_selected => !isReadOnly(_selected)) : [this.contextExperiment]\n    }));\n    this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.TAGS] = [];\n  }\n\n  onContextMenu(data) {\n    this.contextExperiment = this._experiments.find(experiment => experiment.id === data.rowData.id);\n    if (!this.selectedExperiments.map(exp => exp.id).includes(this.contextExperiment.id)) {\n      this.prevSelected = this.contextExperiment;\n      this.emitSelection([this.contextExperiment]);\n    }\n    const event = data.e as MouseEvent;\n    event.preventDefault();\n    this.contextMenuExtended?.contextMenu?.openMenu({x: event.clientX, y: event.clientY});\n  }\n\n\n  navigateToParent(event: MouseEvent, experiment: ITableExperiment) {\n    event.stopPropagation();\n    return this.router.navigate(['projects', experiment.parent.project?.id || '*', 'experiments', experiment.parent.id],\n      {queryParams: {filter: []}});\n  }\n\n  columnsWidthChanged({columnId, width}) {\n    const colIndex = this.tableCols.findIndex(col => col.id === columnId);\n    const delta = width - parseInt(this.tableCols[colIndex].style.width, 10);\n    this.table?.updateColumnsWidth(columnId, width, delta);\n  }\n\n  columnFilterOpened(col: ISmCol) {\n    if (col.id === EXPERIMENTS_TABLE_COL_FIELDS.TAGS) {\n      if (!this.filtersOptions[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]?.length) {\n        this.tagsMenuOpened.emit();\n      }\n    } else if (col.id.includes('hyperparams')) {\n      this.store.dispatch(hyperParamSelectedExperiments({col}));\n    }\n  }\n\n  columnFilterClosed(col: ISmCol) {\n    switch (col.id) {\n      case EXPERIMENTS_TABLE_COL_FIELDS.TAGS:\n        this.sortOptionalTagsList();\n        break;\n      case EXPERIMENTS_TABLE_COL_FIELDS.USER:\n        this.sortOptionalUsersList();\n        break;\n      case EXPERIMENTS_TABLE_COL_FIELDS.PROJECT:\n        this.sortOptionalProjectsList();\n        break;\n    }\n  }\n\n  selectAll(filtered?: boolean) {\n    this.store.dispatch(selectAllExperiments({filtered}));\n  }\n}\n","<div class=\"modal-container\">\n  <div class=\"viewer-header\">\n    <div class=\"image-title third\">\n      {{currentDebugImage?.metric? (currentDebugImage?.metric + ' - ' + currentDebugImage?.variant) : ''}}\n      <input #fakeInput name=\"Don't remove - it take the autofocus from slider\" width=\"0\" height=\"0\" style=\"opacity: 0\">\n    </div>\n    <div class=\"third iteration\">\n      <div *ngIf=\"minMaxIterations$| async as minMaxIterations\">\n        Iteration <span class=\"number\">{{iteration}}</span>\n        <mat-slider\n          [invert]=\"!(minMaxIterations.max_iteration > minMaxIterations.min_iteration)\"\n          thumbLabel\n          [value]=\"iteration\"\n          [max]=\"minMaxIterations.max_iteration\"\n          [min]=\"minMaxIterations.min_iteration\"\n          [step]=\"1\"\n          (input)=\"changeIteration($event.value)\"\n          (mouseup)=\"fakeInput.focus()\"\n        >\n        </mat-slider>\n      </div>\n    </div>\n    <div class=\"d-flex third\">\n      <div (click)=\"downloadImage()\" smTooltip=\"Download\" class=\"download icon-container\"\n           [style.visibility]=\"(url | isVideo) ? 'hidden' : 'visible'\">\n        <i class=\"al-icon al-ico-download al-color light-grey-blue\"></i>\n      </div>\n      <div (click)=\"closeImageDisplayer()\" smTooltip=\"Close\" class=\"icon-container\">\n        <i class=\"al-icon al-ico-dialog-x al-color blue-400 light-grey-blue\"></i>\n      </div>\n    </div>\n  </div>\n  <div class=\"debug-image-container\" #imageContainer>\n    <div #sizeCont class=\"sizeable-container\"\n         (dragstart)=\"disableNativeDrag()\"\n         (mousemove)=\"dragImage($event)\"\n         (wheel)=\"wheelZoom($event)\"\n         [style.height.px]=\"imageHeight\"\n         [style.transform]=\"'translate(' +imageTranslateX +'px, '+ imageTranslateY + 'px)'\"\n         [style.width.px]=\"imageWidth\" [style.top.px]=\"this.imageTop\" [style.left.px]=\"this.imageLeft\"\n         [style.visibility]=\"isPlayer || !imageLoaded ? 'hidden' : 'visible'\">\n      <img #debugImage [src]=\"url\" (mousemove)=\"changeCords($event)\"\n           (load)=\"fitToScreen(); resetDrag(); showImage()\" (mousedown)=\"setDragging(true)\"\n           (mouseup)=\"setDragging(false)\" (mouseout)=\"setDragging(false); resetCords()\" [class.dragging]=\"dragging\">\n    </div>\n    <video #debugVideo [src]=\"url\" autoplay controls\n           [style.visibility]=\"isPlayer ? 'visible' : 'hidden'\"></video>\n    <div class=\"d-flex flex-column controllers\"\n         [style.visibility]=\"isPlayer ? 'hidden' : 'visible'\">\n      <div (click)=\"fitToScreen()\"\n           class=\"fit-to-screen d-flex flex-column justify-content-around align-items-center controller icon-container\"\n           smTooltip=\"Fit to window\" matTooltipPosition=\"left\"\n           [class.disabled]=\"scale===autoFitScale\">\n        <i class=\"al-icon al-ico-fit al-color light-grey-blue\"></i>\n      </div>\n\n      <div class=\"zoom controller d-flex flex-column justify-content-around align-items-center\">\n        <div class=\"icon-container\">\n          <i class=\"al-icon al-ico-plus al-color light-grey-blue\" (click)=\"calculateNewScale(true)\" smTooltip=\"Zoom in\"\n             matTooltipPosition=\"left\"></i>\n        </div>\n        <div class=\"d-flex flex-column justify-content-around align-items-center icon-container\" (click)=\"resetScale()\"\n             smTooltip=\"Zoom to 1:1\" matTooltipPosition=\"left\"\n             [class.disabled]=\"scale===1\">\n          <i class=\"al-icon al-ico-zoom-1-to-1 al-color light-grey-blue sm-md\"></i>\n        </div>\n        <div class=\"icon-container\">\n          <div class=\"al-icon al-ico-minus al-color light-grey-blue\" (click)=\"calculateNewScale(false)\"\n               smTooltip=\"Zoom out\" matTooltipPosition=\"left\"></div>\n        </div>\n      </div>\n    </div>\n    <div class=\"navigation\">\n      <div class=\"icon-container controller d-flex flex-column justify-content-around align-items-center next\"\n           (click)=\"canGoNext() && next()\" [class.disabled]=\"endOfTime$ | async\">\n        <i class=\"al-icon al-ico-next al-color light-grey-blue\"></i></div>\n      <div class=\"icon-container controller d-flex flex-column justify-content-around align-items-center previous\"\n           (click)=\"canGoBack() && previous()\" [class.disabled]=\"beginningOfTime$ | async\">\n        <i class=\"al-icon al-ico-previous al-color light-grey-blue\"></i></div>\n    </div>\n  </div>\n\n  <div class=\"footer-info d-flex align-items-center justify-content-between\"\n       [style.visibility]=\"isPlayer ? 'hidden' : 'visible'\">\n    <div class=\"d-flex justify-content-center params\" smTooltip=\"Image Width & Height in pixels\">\n      <div class=\"single-parameter\"><label>w: </label>{{debugImage.naturalWidth}}</div>\n      <div class=\"single-parameter\"><label>h: </label>{{debugImage.naturalHeight}}</div>\n    </div>\n    <div class=\"d-flex justify-content-center params\" smTooltip=\"Tracks cursor coordinates\">\n      <div class=\"single-parameter\"><label>x: </label> <span\n        [style.visibility]=\"dragging?'hidden':'visible'\">{{xCord}}</span></div>\n      <div class=\"single-parameter\"><label>y: </label><span\n        [style.visibility]=\"dragging?'hidden':'visible'\">{{yCord}}</span></div>\n    </div>\n    <div class=\"d-flex justify-content-center params\" smTooltip=\"Image zoom\">\n      <div class=\"double-parameter\"><label>Zoom: </label>{{this.scale | toPercentage}}%</div>\n    </div>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  Inject,\n  OnDestroy,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {last} from 'lodash/fp';\nimport {Store} from '@ngrx/store';\nimport {\n  getDebugImageSample,\n  getNextDebugImageSample,\n  resetDisplayer,\n  setDebugImageViewerScrollId,\n  setDisplayerEndOfTime\n} from '../../../debug-images/debug-images-actions';\nimport {\n  selectCurrentImageViewerDebugImage,\n  selectDisplayerBeginningOfTime,\n  selectDisplayerEndOfTime,\n  selectMinMaxIterations\n} from '../../../debug-images/debug-images-reducer';\nimport {interval, Observable, Subscription} from 'rxjs';\nimport {EventsGetDebugImageIterationsResponse} from '../../../../business-logic/model/events/eventsGetDebugImageIterationsResponse';\nimport {filter, map, switchMap, tap, withLatestFrom} from 'rxjs/operators';\nimport {selectAppVisible, selectAutoRefresh} from '../../../core/reducers/view.reducer';\nimport {isFileserverUrl} from '../../../../shared/utils/url';\nimport {getSignedUrl} from '../../../core/actions/common-auth.actions';\nimport {getSignedUrlOrOrigin$} from '../../../core/reducers/common-auth-reducer';\nimport {IsVideoPipe} from '../../../shared/pipes/is-video.pipe';\nimport {IsAudioPipe} from '../../../shared/pipes/is-audio.pipe';\n\nconst DISPLAYER_AUTO_REFRESH_INTERVAL = 60 * 1000;\n\n@Component({\n  selector: 'sm-image-displayer',\n  templateUrl: './image-displayer.component.html',\n  styleUrls: ['./image-displayer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ImageDisplayerComponent implements OnInit, OnDestroy {\n\n  public imageSources: Array<any>;\n  public xCord: number;\n  public yCord: number;\n  public scale = 1;\n  readonly scaleStep = 0.1;\n  public autoFitScale: number;\n  @ViewChild('imageContainer', {static: true}) imageContainer: ElementRef;\n  @ViewChild('debugImage', {static: true}) debugImage: ElementRef;\n  @ViewChild('sizeCont', {static: true}) sizeCont: ElementRef;\n  public imageHeight: number;\n  public imageWidth: number;\n  public imageTop: string | number;\n  public imageLeft: number;\n  public imageTranslateY = 0;\n  public imageTranslateX = 0;\n  public dragging: boolean;\n  public minMaxIterations$: Observable<EventsGetDebugImageIterationsResponse>;\n  public currentDebugImage$: Observable<any>;\n  public currentDebugImage: any;\n  public iteration: number;\n  public beginningOfTime$: Observable<boolean>;\n  public endOfTime$: Observable<boolean>;\n  public url: string;\n  public isPlayer: boolean;\n  private currentDebugImageSubscription: Subscription;\n  private autoRefreshState$: Observable<boolean>;\n  private isAppVisible$: Observable<boolean>;\n  private autoRefreshSub: Subscription;\n  public imageLoaded: boolean = false;\n  private beginningOfTime: boolean = false;\n  private endOfTime: boolean = false;\n  private begOfTimeSub: Subscription;\n  private endOfTimeSub: Subscription;\n\n\n  @HostListener('document:keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent) {\n    switch (e.key) {\n      case 'ArrowRight':\n        this.next();\n        break;\n      case 'ArrowLeft':\n        this.previous();\n        break;\n      case '+':\n        this.calculateNewScale(true);\n        break;\n      case '-':\n        this.calculateNewScale(false);\n        break;\n    }\n  }\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { imageSources: Array<any>; index: number; snippetsMetaData: any },\n    public dialogRef: MatDialogRef<ImageDisplayerComponent>,\n    public changeDetector: ChangeDetectorRef,\n    private store: Store<any>\n  ) {\n    const reqData = {\n      task: data.snippetsMetaData[data.index].task,\n      metric: data.snippetsMetaData[data.index].metric,\n      variant: data.snippetsMetaData[data.index].variant,\n      iteration: data.snippetsMetaData[data.index].iter\n    };\n    this.store.dispatch(getDebugImageSample(reqData));\n    this.minMaxIterations$ = this.store.select(selectMinMaxIterations);\n    this.beginningOfTime$ = this.store.select(selectDisplayerBeginningOfTime);\n    this.endOfTime$ = this.store.select(selectDisplayerEndOfTime);\n    this.autoRefreshState$ = this.store.select(selectAutoRefresh);\n    this.isAppVisible$ = this.store.select(selectAppVisible);\n    this.currentDebugImage$ = store.select(selectCurrentImageViewerDebugImage)\n      .pipe(\n        filter(event => !!event),\n        map(event => {\n          this.store.dispatch(getSignedUrl({url: event.url, config: {disableCache: event.timestamp}}));\n          return event;\n        })\n      );\n\n    this.autoRefreshSub = interval(DISPLAYER_AUTO_REFRESH_INTERVAL).pipe(\n      withLatestFrom(this.autoRefreshState$, this.isAppVisible$),\n      filter(([, autoRefreshState, isVisible]) => isVisible && autoRefreshState)\n    ).subscribe(() => {\n      if (this.currentDebugImage) {\n        this.store.dispatch(setDisplayerEndOfTime({endOfTime: false}));\n        this.store.dispatch(setDebugImageViewerScrollId({scrollId: null}));\n        this.store.dispatch(getDebugImageSample({\n          task: this.currentDebugImage.task,\n          metric: this.currentDebugImage.metric,\n          variant: this.currentDebugImage.variant,\n          iteration: this.currentDebugImage.iter\n        }));\n      }\n    });\n  }\n\n  canGoNext() {\n    return !this.endOfTime;\n  }\n\n  canGoBack() {\n    return !this.beginningOfTime;\n  }\n\n  calculateNewScale(scaleUp: boolean) {\n    const scaleFactor = scaleUp ? 1 : -1;\n    this.scale = Math.max(this.scale + (this.scale * scaleFactor * this.scaleStep), 0.1);\n    this.changeScale();\n  }\n\n  changeScale() {\n    this.imageHeight = Math.floor(this.debugImage.nativeElement.naturalHeight * this.scale);\n    this.imageWidth = Math.floor(this.debugImage.nativeElement.naturalWidth * this.scale);\n  }\n\n  resetScale() {\n    this.scale = 1;\n    this.resetDrag();\n    this.changeScale();\n  }\n\n  changeCords($event: MouseEvent) {\n    this.xCord = Math.floor($event.offsetX / this.scale);\n    this.yCord = Math.floor($event.offsetY / this.scale);\n  }\n\n  next() {\n    if (this.canGoNext() && this.currentDebugImage) {\n      this.imageLoaded = false;\n      this.store.dispatch(getNextDebugImageSample({task: this.currentDebugImage.task, navigateEarlier: false}));\n    }\n  }\n\n  previous() {\n    if (this.canGoBack() && this.currentDebugImage) {\n      this.imageLoaded = false;\n      this.store.dispatch(getNextDebugImageSample({task: this.currentDebugImage.task, navigateEarlier: true}));\n    }\n  }\n\n  closeImageDisplayer() {\n    this.store.dispatch(resetDisplayer());\n    this.dialogRef.close();\n  }\n\n  fitToScreen() {\n    const heightScaleFit = (this.imageContainer.nativeElement.clientHeight - 120) / this.debugImage.nativeElement.naturalHeight;\n    const widthScaleFit = (this.imageContainer.nativeElement.clientWidth - 120) / this.debugImage.nativeElement.naturalWidth;\n    this.scale = Math.min(heightScaleFit, widthScaleFit);\n    this.autoFitScale = this.scale;\n    this.resetDrag();\n    this.changeScale();\n  }\n\n  resetDrag() {\n    this.imageTranslateY = 0;\n    this.imageTranslateX = 0;\n  }\n\n\n  dragImage($event: MouseEvent) {\n    if (this.dragging) {\n      this.imageTranslateX += $event.movementX;\n      this.imageTranslateY += $event.movementY;\n    }\n  }\n\n  resetCords() {\n    this.xCord = null;\n    this.yCord = null;\n  }\n\n  disableNativeDrag() {\n    return false;\n  }\n\n  setDragging(b: boolean) {\n    this.dragging = b;\n  }\n\n\n  wheelZoom($event: WheelEvent) {\n    this.scale = Math.max(this.scale - (0.005 * $event.deltaY), 0.1);\n    this.changeScale();\n  }\n\n  downloadImage() {\n    if (this.currentDebugImage) {\n      const src = new URL(this.currentDebugImage.url);\n      if (isFileserverUrl(this.currentDebugImage.url)) {\n        src.searchParams.set('download', '');\n      }\n      const a = document.createElement('a') as HTMLAnchorElement;\n      a.href = src.toString();\n      a.download = last(src.pathname.split('/'));\n      a.target = '_blank';\n      a.click();\n    }\n  }\n\n  changeIteration(value: number) {\n    this.iteration = value;\n    if (this.currentDebugImage) {\n      const reqData = {\n        task: this.currentDebugImage.task,\n        metric: this.currentDebugImage.metric,\n        variant: this.currentDebugImage.variant,\n        iteration: value\n      };\n      this.store.dispatch(getDebugImageSample(reqData));\n    }\n  }\n\n  ngOnInit(): void {\n    this.currentDebugImageSubscription = this.currentDebugImage$\n      .pipe(\n        tap(currentDebugImage => {\n          this.currentDebugImage = currentDebugImage;\n          this.iteration = currentDebugImage.iter;\n        }),\n        switchMap(currentDebugImage => getSignedUrlOrOrigin$(currentDebugImage.url, this.store))\n      )\n      .subscribe(signed => {\n        this.url = signed;\n        this.isPlayer = (new IsVideoPipe().transform(signed) || new IsAudioPipe().transform(signed));\n        this.changeDetector.detectChanges();\n      });\n    this.begOfTimeSub = this.beginningOfTime$.subscribe(beg => {\n      this.beginningOfTime = beg;\n      if (beg) {\n        this.imageLoaded = true;\n      }\n    });\n    this.endOfTimeSub = this.endOfTime$.subscribe(end => {\n      this.endOfTime = end;\n      if (end) {\n        this.imageLoaded = true;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(setDebugImageViewerScrollId({scrollId: null}));\n    this.currentDebugImageSubscription.unsubscribe();\n    this.begOfTimeSub.unsubscribe();\n    this.endOfTimeSub.unsubscribe();\n    this.autoRefreshSub.unsubscribe();\n  }\n\n  showImage() {\n    this.imageLoaded = true;\n  }\n}\n","<div smClickStopPropagation class=\"w-100 h-100\">\n  <div *ngIf=\"goBack?.observers.length > 0\" class=\"d-flex justify-content-between p-3\">\n    <i (click)=\"goBack.emit()\" class=\"al-icon sm-md al-ico-back pointer\" smClickStopPropagation></i>\n    <div class=\"title\">SELECT METRIC TO DISPLAY\n    </div>\n    <hr class=\"m-0\" style=\"margin: 0\">\n  </div>\n  <sm-search\n          class=\"underline-search\"\n          [value]=\"searchText\"\n          [minimumChars]=\"0\"\n          [debounceTime]=\"0\"\n          placeholder=\"Search metric\"\n          (valueChanged)=\"searchQ($event)\"\n  ></sm-search>\n  <div class=\"metrics\" [class.has-title]=\"goBack?.observers.length > 0\">\n    <mat-expansion-panel *ngFor=\"let metric of metrics\"\n                         [expanded]=\"searchText?.length>0 || hasSelectedVariant(metric)\"\n                         [hidden]=\"(metricTree[metric] | advancedFilter:searchText).length===0\">\n      <mat-expansion-panel-header class=\"py-2\" expandedHeight=\"42px\" collapsedHeight=\"42px\">\n        <mat-panel-title>\n          <span class=\"panel-title\">{{metric}}</span>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <ng-template matExpansionPanelContent>\n        <div class=\"metric-expansion-content\" *ngFor=\"let variant of metricTree[metric] | advancedFilter:searchText\">\n          <ng-container *ngIf=\"multiSelect; else single\">\n            <div class=\"variant-label\">\n              <sm-checkbox-control #metricVariant\n                                   (formDataChanged)=\"toggleAllMetricsToDisplay(variant, metricVariant.formData)\"\n                                   [formData]=\"metricsCols[variant.metric_hash + variant.variant_hash] !== undefined\"\n                                   [label]=\"variant.variant\"\n              ></sm-checkbox-control>\n            </div>\n            <div *ngIf=\"metricVariant.formData\" class=\"value-type\">\n              <sm-checkbox-control #last label=\"LAST\"\n                                   [formData]=\"metricsCols[variant.metric_hash + variant.variant_hash]?.includes('value')\"\n                                   (formDataChanged)=\"toggleMetricToDisplay(variant, last.formData, 'value')\"\n              ></sm-checkbox-control>\n              <sm-checkbox-control #min label=\"MIN\"\n                                   [formData]=\"metricsCols[variant.metric_hash + variant.variant_hash]?.includes('min_value')\"\n                                   (formDataChanged)=\"toggleMetricToDisplay(variant, min.formData, 'min_value')\"\n              ></sm-checkbox-control>\n              <sm-checkbox-control #max label=\"MAX\"\n                                   [formData]=\"metricsCols[variant.metric_hash + variant.variant_hash]?.includes('max_value')\"\n                                   (formDataChanged)=\"toggleMetricToDisplay(variant, max.formData, 'max_value')\"\n              ></sm-checkbox-control>\n            </div>\n          </ng-container>\n          <ng-template #single>\n            <div class=\"variant-label\">\n              <mat-radio-button\n                #metricVariant\n                (change)=\"toggleAllMetricsToDisplay(variant, false)\"\n                [checked]=\"metricsCols[variant.metric_hash + variant.variant_hash] !== undefined\"\n              >{{variant.variant}}</mat-radio-button>\n            </div>\n            <div *ngIf=\"metricVariant.checked\" class=\"value-type\">\n              <mat-radio-group\n                [ngModel]=\"metricsCols[variant.metric_hash + variant.variant_hash][0]\"\n                (change)=\"toggleMetricToDisplay(variant, true, $event.value)\"\n              >\n                <mat-radio-button class=\"pr-4\" value=\"value\">LAST</mat-radio-button>\n                <mat-radio-button class=\"pr-4\" value=\"min_value\">MIN</mat-radio-button>\n                <mat-radio-button value=\"max_value\">MAX</mat-radio-button>\n              </mat-radio-group>\n            </div>\n          </ng-template>\n        </div>\n      </ng-template>\n    </mat-expansion-panel>\n  </div>\n</div>\n","import {ChangeDetectorRef, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {MetricVariantResult} from '../../../../business-logic/model/projects/metricVariantResult';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {MetricValueType} from '../../../experiments-compare/reducers/experiments-compare-charts.reducer';\n\n@Component({\n  selector   : 'sm-select-metric-for-custom-col',\n  templateUrl: './select-metric-for-custom-col.component.html',\n  styleUrls  : ['./select-metric-for-custom-col.component.scss']\n})\nexport class SelectMetricForCustomColComponent {\n  public metricTree;\n  public metrics: string[];\n  public metricsCols: {[metVar: string]: string[]};\n  public searchText: any;\n\n  // private _searchTerm: string;\n\n  @Input() set metricVariants(metricVar: Array<MetricVariantResult>) {\n    this.metricTree = metricVar.reduce((result, metric) => {\n      result[metric.metric] ? result[metric.metric].push(metric) : result[metric.metric] = [metric];\n      return result;\n    }, {});\n    this.metrics    = Object.keys(this.metricTree);\n  }\n\n  @Input() set tableCols(tableCols) {\n    this.metricsCols = {};\n    tableCols.filter(tableCol => tableCol.metric_hash).forEach(tableCol => {\n      this.metricsCols[tableCol.metric_hash + tableCol.variant_hash] ?\n        this.metricsCols[tableCol.metric_hash + tableCol.variant_hash].push(tableCol.valueType) :\n        this.metricsCols[tableCol.metric_hash + tableCol.variant_hash] = [tableCol.valueType];\n    });\n  }\n  @Input() multiSelect: boolean = true;\n\n  // @Input() set searchTerm(searchTerm: string) {\n  //   this.filteredList = this.list ? this.filterList(this.list, searchTerm) : [];\n  //   this._searchTerm  = searchTerm;\n  // }\n  //\n  // get searchTerm() {\n  //   return this._searchTerm;\n  // }\n\n  @Output() getMetricsToDisplay  = new EventEmitter();\n  @Output() selectedMetricToShow = new EventEmitter<{\n    variant: MetricVariantResult;\n    addCol: boolean;\n    valueType: MetricValueType;\n  }>();\n  @Output() goBack               = new EventEmitter();\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  toggleAllMetricsToDisplay(variant: any, on: boolean) {\n    if (!on) {\n      this.toggleMetricToDisplay(variant, on, null);\n      this.multiSelect ?\n        this.metricsCols[variant.metric_hash + variant.variant_hash] = [] :\n        this.metricsCols = {[variant.metric_hash + variant.variant_hash]: []};\n    } else {\n      this.toggleMetricToDisplay(variant, on, 'value');\n      this.toggleMetricToDisplay(variant, on, 'min_value');\n      this.toggleMetricToDisplay(variant, on, 'max_value');\n    }\n  }\n\n  public toggleMetricToDisplay(variant: ISmCol, value: boolean, valueType: MetricValueType) {\n    this.selectedMetricToShow.emit({variant, addCol: !value, valueType});\n  }\n\n  public searchQ(value: string) {\n    this.searchText = value;\n    this.changeDetectorRef.detectChanges();\n  }\n\n  public isArray(obj: unknown) {\n    return Array.isArray(obj);\n  }\n\n  hasSelectedVariant = (metric: string) =>\n    this.metricTree[metric].some(variant => this.metricsCols[variant.metric_hash + variant.variant_hash] !== undefined);\n}\n","/**\n * projects\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\n\nexport interface ProjectsGetTaskParentsRequest {\n    /**\n     * The list of projects which task parents are retieved. If not passed or empty   then all the projects are searched\n     */\n    projects?: Array<string>;\n    /**\n     * Return parents for tasks in the specified state. If Null is provided, parents   for all task states will be returned.\n     */\n    tasks_state?: ProjectsGetTaskParentsRequest.TasksStateEnum;\n    /**\n     * If set to \\'true\\' and the projects field is not empty then the result includes   tasks parents from the subproject tasks\n     */\n    include_subprojects?: boolean;\n}\nexport namespace ProjectsGetTaskParentsRequest {\n    export type TasksStateEnum = 'active' | 'archived';\n    export const TasksStateEnum = {\n        Active: 'active' as TasksStateEnum,\n        Archived: 'archived' as TasksStateEnum\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {cloneDeep, flatten, get, getOr, isEqual, uniq} from 'lodash/fp';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {\n  auditTime,\n  catchError,\n  expand,\n  filter,\n  map,\n  mergeMap, reduce,\n  switchMap,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport {ApiProjectsService} from '../../../business-logic/api-services/projects.service';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {BlTasksService} from '../../../business-logic/services/tasks.service';\nimport {GET_ALL_QUERY_ANY_FIELDS} from '../../../features/experiments/experiments.consts';\nimport {selectSelectedExperiment} from '../../../features/experiments/reducers';\nimport {IExperimentsViewState} from '../../../features/experiments/reducers/experiments-view.reducer';\nimport {EXPERIMENTS_TABLE_COL_FIELDS} from '../../../features/experiments/shared/experiments.const';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {activeLoader, addMessage, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {setArchive as setProjectArchive} from '../../core/actions/projects.actions';\nimport {setURLParams} from '../../core/actions/router.actions';\nimport {selectIsArchivedMode, selectIsDeepMode, selectSelectedProjectId} from '../../core/reducers/projects.reducer';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {selectAppVisible} from '../../core/reducers/view.reducer';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {ISmCol} from '../../shared/ui-components/data/table/table.consts';\nimport {addMultipleSortColumns, escapeRegex, getRouteFullUrl} from '../../shared/utils/shared-utils';\nimport {addExcludeFilters, decodeHyperParam, encodeColumns, encodeOrder} from '../../shared/utils/tableParamEncode';\nimport {AutoRefreshExperimentInfo, GetExperimentInfo} from '../actions/common-experiments-info.actions';\nimport * as exActions from '../actions/common-experiments-view.actions';\nimport {\n  setActiveParentsFilter,\n  setParents,\n  updateManyExperiment\n} from '../actions/common-experiments-view.actions';\nimport * as exSelectors from '../reducers/index';\nimport {ITableExperiment} from '../shared/common-experiment-model.model';\nimport {EXPERIMENTS_PAGE_SIZE} from '../shared/common-experiments.const';\nimport {convertStopToComplete} from '../shared/common-experiments.utils';\nimport {ApiUsersService} from '../../../business-logic/api-services/users.service';\nimport {sortByField} from '../../tasks/tasks.utils';\nimport {MODEL_TAGS} from '../../models/shared/models.const';\nimport {EmptyAction, MESSAGES_SEVERITY} from '../../../app.constants';\nimport {selectExperimentsList, selectExperimentsUsers, selectTableFilters, selectTableSortFields} from '../reducers';\nimport {ProjectsGetTaskParentsResponse} from '../../../business-logic/model/projects/projectsGetTaskParentsResponse';\nimport {ProjectsGetTaskParentsRequest} from '../../../business-logic/model/projects/projectsGetTaskParentsRequest';\nimport {ICommonSearchState} from '../../common-search/common-search.reducer';\nimport {SortMeta} from 'primeng/api';\nimport {hasValue} from '../../shared/utils/helpers.util';\nimport {ProjectsGetHyperParametersResponse} from '../../../business-logic/model/projects/projectsGetHyperParametersResponse';\nimport {\n  CountAvailableAndIsDisableSelectedFiltered, MenuItems,\n  selectionDisabledAbort, selectionDisabledAbortAllChildren, selectionDisabledArchive,\n  selectionDisabledDelete,\n  selectionDisabledDequeue,\n  selectionDisabledEnqueue,\n  selectionDisabledMoveTo,\n  selectionDisabledPublishExperiments,\n  selectionDisabledQueue,\n  selectionDisabledReset,\n  selectionDisabledTags,\n  selectionDisabledViewWorker\n} from '../../shared/entity-page/items.utils';\nimport {MINIMUM_ONLY_FIELDS} from '../experiment.consts';\nimport {ProjectsGetHyperparamValuesResponse} from '../../../business-logic/model/projects/projectsGetHyperparamValuesResponse';\nimport {selectShowHidden} from '../../../features/projects/projects.reducer';\nimport {TasksGetAllExRequest} from '../../../business-logic/model/tasks/tasksGetAllExRequest';\nimport {TasksGetAllExResponse} from '../../../business-logic/model/tasks/tasksGetAllExResponse';\nimport {selectIsCompare} from '../../experiments-compare/reducers';\nimport {\n  compareAddDialogTableSortChanged,\n  compareAddTableClearAllFilters,\n  compareAddTableFilterChanged,\n  compareAddTableFilterInit\n} from '../../experiments-compare/actions/compare-header.actions';\n\n\nexport const createFiltersFromStore = (_tableFilters: { [key: string]: FilterMetadata }, removeEmptyValues = true) => {\n  if (!_tableFilters) {\n    return [];\n  }\n  return Object.keys(_tableFilters).reduce((returnTableFilters, currentFilterName) => {\n    const value = get([currentFilterName, 'value'], _tableFilters);\n    if (removeEmptyValues && (!hasValue(value) || value?.length === 0)) {\n      return returnTableFilters;\n    }\n    returnTableFilters[currentFilterName] = value;\n    return returnTableFilters;\n  }, {});\n};\n\n@Injectable()\nexport class CommonExperimentsViewEffects {\n  /* eslint-disable @typescript-eslint/naming-convention */\n  constructor(\n    private actions$: Actions, private store: Store<IExperimentsViewState>,\n    private apiTasks: ApiTasksService, private projectsApi: ApiProjectsService, private usersApi: ApiUsersService,\n    private taskBl: BlTasksService, private router: Router, private route: ActivatedRoute\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(\n      exActions.getNextExperiments, exActions.getExperiments, exActions.globalFilterChanged, exActions.tableSortChanged,\n      exActions.tableFilterChanged, compareAddDialogTableSortChanged, compareAddTableFilterChanged,\n      compareAddTableFilterInit, compareAddTableClearAllFilters, exActions.refreshExperiments,\n      exActions.afterSetArchive, exActions.selectAllExperiments\n    ),\n    filter((action) => !(action as ReturnType<typeof exActions.refreshExperiments>).hideLoader),\n    map(() => activeLoader('EXPERIMENTS_LIST'))\n  ));\n\n  tableSortChange = createEffect(() => this.actions$.pipe(\n    ofType(exActions.tableSortChanged),\n    withLatestFrom(\n      this.store.select(selectTableSortFields),\n      this.store.select(selectSelectedProjectId)\n    ),\n    switchMap(([action, oldOrders, projectId]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [exActions.setTableSort({orders, projectId})];\n    })\n  ));\n\n  reFetchParents = createEffect(() => this.actions$.pipe(\n    ofType(exActions.afterSetArchive.type),\n    map(() => exActions.getParents())\n  ));\n\n  reFetchExperiment = createEffect(() => this.actions$.pipe(\n    ofType(\n      exActions.getExperiments, exActions.getExperimentsWithPageSize, exActions.globalFilterChanged, exActions.setTableSort,\n      compareAddDialogTableSortChanged, compareAddTableFilterChanged, compareAddTableFilterInit, compareAddTableClearAllFilters,\n      exActions.tableFilterChanged, exActions.setTableFilters, exActions.afterSetArchive,\n      exActions.showOnlySelected\n    ),\n    auditTime(50),\n    switchMap((action) => this.fetchExperiments$(null, false, (action as any).pageSize as number)\n      .pipe(\n        mergeMap(res => {\n          res.tasks = convertStopToComplete(res.tasks);\n          return [\n            exActions.setNoMoreExperiments({payload: (res.tasks.length < EXPERIMENTS_PAGE_SIZE)}),\n            exActions.setExperiments({experiments: res.tasks as ITableExperiment[]}),\n            exActions.setCurrentScrollId({scrollId: res.scroll_id}),\n            deactivateLoader('EXPERIMENTS_LIST')\n          ];\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader('EXPERIMENTS_LIST'),\n          setServerError(error, null, 'Fetch Experiments failed', getOr(false, 'payload.autoRefresh', action))\n        ])\n      )\n    )\n  ));\n\n  refreshExperiments = createEffect(() => this.actions$.pipe(\n    ofType<ReturnType<typeof exActions.refreshExperiments>>(exActions.refreshExperiments, exActions.addColumn, exActions.toggleColHidden),\n    withLatestFrom(\n      this.store.select(exSelectors.selectCurrentScrollId),\n      this.store.select(selectSelectedExperiment),\n      this.store.select(selectExperimentsList),\n      this.store.select(selectAppVisible),\n      this.store.select(exSelectors.selectExperimentsHiddenTableCols)),\n    filter(([action, , , , visible, hiddenCols]) => {\n      const isToggleToHiddenCol = action.type !== exActions.toggleColHidden.type || !hiddenCols[(action as any).payload];\n      return visible && isToggleToHiddenCol;\n    }),\n    switchMap(([action, currentScrollId, selectedExperiment, experiments]) => this.fetchExperiments$(currentScrollId, true)\n      .pipe(\n        mergeMap(res => {\n          res.tasks = convertStopToComplete(res.tasks);\n          const actions: Action[] = [deactivateLoader('EXPERIMENTS_LIST')];\n          if (selectedExperiment && action.autoRefresh && isEqual(experiments.map(exp => exp.id).sort(), res.tasks.map(exp => exp.id).sort())) {\n            actions.push(exActions.setExperimentInPlace({experiments: res.tasks as ITableExperiment[]}));\n          } else {\n            // SetExperiments must be before GetExperimentInfo!\n            actions.push(exActions.setExperiments({experiments: res.tasks as ITableExperiment[]}));\n          }\n          if (selectedExperiment) {\n            if (action.autoRefresh) {\n              actions.push(new AutoRefreshExperimentInfo(selectedExperiment.id));\n            } else {\n              // SetExperiments must be before GetExperimentInfo!\n              actions.push(new GetExperimentInfo(selectedExperiment.id));\n            }\n          }\n          return actions;\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader('EXPERIMENTS_LIST'),\n          setServerError(error, null, 'Fetch Experiments failed', action.autoRefresh)\n        ])\n      )\n    )\n  ));\n\n  getNextExperiments = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getNextExperiments),\n    withLatestFrom(\n      this.store.select(exSelectors.selectCurrentScrollId),\n      this.store.select(selectExperimentsList)\n    ),\n    switchMap(([, scrollId, tasks]) => this.fetchExperiments$(scrollId)\n      .pipe(\n        mergeMap(res => {\n          res.tasks = convertStopToComplete(res.tasks);\n          const addTasksAction = scrollId === res.scroll_id\n            ? [exActions.addExperiments({experiments: res.tasks as ITableExperiment[]})]\n            : [exActions.getExperimentsWithPageSize({pageSize: tasks.length}), addMessage(MESSAGES_SEVERITY.WARN, 'Session expired')];\n\n          return [\n            exActions.setNoMoreExperiments({payload: (res.tasks.length < EXPERIMENTS_PAGE_SIZE)}),\n            ...addTasksAction,\n            exActions.setCurrentScrollId({scrollId: res.scroll_id}),\n            deactivateLoader('EXPERIMENTS_LIST'),\n          ];\n        }),\n        catchError(error => [\n          requestFailed(error), deactivateLoader('EXPERIMENTS_LIST'), setServerError(error, null, 'Fetch Experiments failed')])\n      )\n    )\n  ));\n\n  experimentSelectionChanged = createEffect(() => this.actions$.pipe(\n    ofType(exActions.experimentSelectionChanged),\n    tap(action => this.navigateAfterExperimentSelectionChanged(action.experiment as ITableExperiment, action.project)),\n    mergeMap(() => [])\n    // map(action => new exActions.SetSelectedExperiment(action.payload.experiment))\n  ));\n\n\n  getTypesEffect = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getProjectTypes),\n    withLatestFrom(this.store.select(selectRouterParams).pipe(map(params => get('projectId', params)))),\n    switchMap(([action, projectId]) => this.apiTasks.tasksGetTypes({projects: (projectId !== '*' ? [projectId] : [])}).pipe(\n      withLatestFrom(this.store.select(exSelectors.selectTableFilters)),\n      mergeMap(([res, tableFilters]) => {\n        let shouldFilterFilters: boolean;\n        let filteredTableFilters: any = {};\n        if (tableFilters?.type?.value) {\n          filteredTableFilters = {\n            col: 'type',\n            value: tableFilters.type.value.filter(filterType => res.types.includes(filterType))\n          };\n          shouldFilterFilters = filteredTableFilters.value.length !== tableFilters.type.value.length;\n        }\n        return [\n          shouldFilterFilters ? exActions.tableFilterChanged({\n            filter: filteredTableFilters,\n            projectId\n          }) : new EmptyAction(),\n          exActions.setProjectsTypes(res),\n          deactivateLoader(action.type)\n        ];\n      }),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader(action.type),\n        setServerError(error, null, 'Fetch types failed')]\n      )\n    ))));\n\n  getFilteredUsersEffect = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getFilteredUsers),\n    withLatestFrom(this.store.select(selectExperimentsUsers), this.store.select(selectTableFilters)),\n    switchMap(([action, users, filters]) => this.usersApi.usersGetAllEx({\n      order_by: ['name'],\n      only_fields: ['name'],\n      id: getOr([], ['user.name', 'value'], filters)\n    }).pipe(\n      mergeMap(res => [\n        exActions.setUsers({users: uniq(res.users.concat(users))}),\n        deactivateLoader(action.type)\n      ]),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader(action.type),\n        setServerError(error, null, 'Fetch users failed')]\n      )\n    ))\n  ));\n\n  getUsersEffect = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getUsers),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectTableFilters)),\n    switchMap(([, projectId, filters]) => this.usersApi.usersGetAllEx({\n      order_by: ['name'],\n      only_fields: ['name'],\n      active_in_projects: projectId !== '*' ? [projectId] : []\n    }).pipe(\n      mergeMap(res => {\n        const userFiltersValue = get([EXPERIMENTS_TABLE_COL_FIELDS.USER, 'value'], filters) || [];\n        const resIds = res.users.map(user => user.id);\n        const shouldGetFilteredUsersNames = !(userFiltersValue.every(id => resIds.includes(id)));\n        return [\n          exActions.setUsers(res),\n          shouldGetFilteredUsersNames ? exActions.getFilteredUsers() : new EmptyAction(),\n        ];\n      }),\n      catchError(error => [\n        requestFailed(error),\n        setServerError(error, null, 'Fetch users failed')]\n      )\n    ))\n  ));\n\n  getParentsEffect = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getParents),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectIsArchivedMode)\n    ),\n    switchMap(([, projectId, isArchive]) => this.projectsApi.projectsGetTaskParents({\n      projects: projectId !== '*' ? [projectId] : [],\n      tasks_state: isArchive ?\n        ProjectsGetTaskParentsRequest.TasksStateEnum.Archived :\n        ProjectsGetTaskParentsRequest.TasksStateEnum.Active\n    }).pipe(\n      withLatestFrom(this.store.select(selectTableFilters).pipe(map(filters => filters?.['parent.name']?.value || []))),\n      mergeMap(([res, filteredParentIds]: [ProjectsGetTaskParentsResponse, string[]]) => {\n        const missingParentsIds = filteredParentIds.filter(parentId => !res.parents.find(parent => (parent as any).id === parentId));\n        return (missingParentsIds.length ? this.apiTasks.tasksGetAllEx({\n          id: missingParentsIds,\n          only_fields: ['name', 'project.name']\n        }) : of({tasks: []})).pipe(\n          mergeMap((parentsTasks) => [\n            setActiveParentsFilter({parents: parentsTasks.tasks || []}),\n            setParents({parents: res.parents})])\n        );\n      }),\n      catchError(error => [\n        requestFailed(error),\n        setServerError(error, null, 'Fetch parents failed')]\n      )\n    ))\n  ));\n\n  getCustomMetrics = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getCustomMetrics),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectIsDeepMode)\n    ),\n    switchMap(([action, projectId, isDeep]) => this.projectsApi.projectsGetUniqueMetricVariants({\n        project: projectId === '*' ? null : projectId,\n        include_subprojects: isDeep\n      })\n        .pipe(\n          mergeMap(res => [\n            exActions.setCustomMetrics({metrics: sortByField(res.metrics, 'metric')}),\n            deactivateLoader(action.type)\n          ]),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, 'Fetch custom metrics failed'),\n            exActions.setCustomHyperParams({params: []})])\n        )\n    )\n  ));\n\n  getCustomHyperParams = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getCustomHyperParams),\n    withLatestFrom(this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))), this.store.select(selectIsDeepMode)),\n    switchMap(([action, projectId, isDeep]) => this.projectsApi.projectsGetHyperParameters({\n        project: projectId === '*' ? null : projectId,\n        page_size: 5000,\n        include_subprojects: isDeep\n      })\n        .pipe(\n          mergeMap((res: ProjectsGetHyperParametersResponse) => [\n            exActions.setCustomHyperParams({params: res.parameters}),\n            deactivateLoader(action.type)\n          ]),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, 'Fetch hyper parameters failed'),\n            exActions.setCustomHyperParams({params: []})])\n        )\n    )\n  ));\n\n  hyperParameterMenuClicked = createEffect(() => this.actions$.pipe(\n    ofType(exActions.hyperParamSelectedExperiments),\n    withLatestFrom(this.store.select(selectIsDeepMode)),\n    switchMap(([action, isDeep]) => {\n      const {projectId, id} = action.col;\n      const {section, name} = decodeHyperParam(id);\n      return this.projectsApi.projectsGetHyperparamValues({\n        include_subprojects: isDeep, section, name,\n        ...(projectId !== '*' && {projects: [projectId]})\n      }).pipe(\n        map((data: ProjectsGetHyperparamValuesResponse) => {\n          const values = data.values.filter(x => hasValue(x) && x !== '');\n          return exActions.hyperParamSelectedInfoExperiments({col: action.col, values});\n        }),\n      );\n    })\n  ));\n\n  setArchiveMode = createEffect(() => this.actions$.pipe(\n    ofType(exActions.setArchive),\n    switchMap(action => [setProjectArchive(action), exActions.afterSetArchive()])\n  ));\n\n  selectAll = createEffect(() => this.actions$.pipe(\n    ofType(exActions.selectAllExperiments),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectIsArchivedMode),\n      this.store.select(exSelectors.selectGlobalFilter),\n      this.store.select(exSelectors.selectTableFilters),\n      this.store.select(selectIsDeepMode),\n      this.store.select(selectShowHidden),\n    ),\n    switchMap(([action, projectId, archived, globalSearch, tableFilters, deep, showHidden]) => {\n      const pageSize = 1000;\n      const query = this.getGetAllQuery({\n        projectId, searchQuery: globalSearch, archived, tableFilters: action.filtered ? tableFilters : [],\n        deep, showHidden, pageSize});\n      query.only_fields = [EXPERIMENTS_TABLE_COL_FIELDS.NAME, EXPERIMENTS_TABLE_COL_FIELDS.PARENT,\n        EXPERIMENTS_TABLE_COL_FIELDS.STATUS, EXPERIMENTS_TABLE_COL_FIELDS.TYPE, 'company.id', 'system_tags'];\n      return this.apiTasks.tasksGetAllEx(query).pipe(\n        expand((res: TasksGetAllExResponse)  => res.tasks.length === pageSize ? this.apiTasks.tasksGetAllEx({...query, scroll_id: res.scroll_id}): EMPTY),\n        reduce((acc, res) => acc.concat(res.tasks), [])\n      );\n    }),\n    switchMap(experiments => [exActions.setSelectedExperiments({experiments}), deactivateLoader('EXPERIMENTS_LIST')]),\n    catchError(error => [\n      requestFailed(error),\n      deactivateLoader('EXPERIMENTS_LIST'),\n      setServerError(error, null, 'Fetch experiments for selection failed'),\n    ])\n  ));\n\n  setURLParams = createEffect(() => this.actions$.pipe(\n    ofType(exActions.removeCol, exActions.toggleColHidden, exActions.setColsOrderForProject),\n    filter(action => !(action as ReturnType<typeof exActions.setColsOrderForProject>)?.fromUrl),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectIsArchivedMode),\n      this.store.select(exSelectors.selectGlobalFilter),\n      this.store.select(exSelectors.selectTableSortFields),\n      this.store.select(exSelectors.selectTableFilters),\n      this.store.select(exSelectors.selectExperimentsTableCols),\n      this.store.select(exSelectors.selectExperimentsHiddenTableCols),\n      this.store.select(exSelectors.selectExperimentsMetricsCols),\n      this.store.select(exSelectors.selectExperimentsTableColsOrder),\n      this.store.select(selectIsDeepMode),\n      this.route.queryParams\n    ),\n    map(([, projectId, isArchived, , sortFields, filters,\n           cols, hiddenCols, metricsCols, colsOrder, isDeep, queryParams\n         ]) => {\n      const columns = encodeColumns(cols, hiddenCols, this.filterColumns(projectId, metricsCols), colsOrder ? colsOrder : queryParams.columns);\n      return setURLParams({\n        columns,\n        filters,\n        orders: sortFields,\n        isArchived,\n        isDeep\n      });\n    })\n  ));\n\n  navigateAfterExperimentSelectionChanged(selectedExperiment: ITableExperiment, experimentProject: string) {\n    // wow angular really suck...\n    const activeChild = get('firstChild.firstChild.firstChild.firstChild.firstChild.firstChild', this.route);\n    const activeChildUrl = activeChild ? getRouteFullUrl(activeChild) : '';\n    const baseUrl = 'projects/' + experimentProject + '/experiments';\n    selectedExperiment ?\n      this.router.navigate([baseUrl + '/' + selectedExperiment.id + '/' + activeChildUrl], {queryParamsHandling: 'preserve'}) : this.router.navigate([baseUrl], {queryParamsHandling: 'preserve'});\n  }\n\n  getGetAllQuery({refreshScroll = false, scrollId = null, projectId, searchQuery, archived, orderFields = [],\n                   tableFilters, selectedIds = [], cols = [], metricCols = [], deep = false, showHidden = false, isCompare,\n                   pageSize = EXPERIMENTS_PAGE_SIZE}: {\n    refreshScroll?: boolean;\n    scrollId?: string;\n    projectId: string;\n    searchQuery?: ICommonSearchState['searchQuery'];\n    archived: boolean;\n    orderFields?: SortMeta[];\n    tableFilters: { [key: string]: FilterMetadata };\n    selectedIds?: string[];\n    cols?: ISmCol[];\n    metricCols?: ISmCol[];\n    deep?: boolean;\n    showHidden?: boolean;\n    isCompare?: boolean;\n    pageSize?: number;\n  }): TasksGetAllExRequest {\n    const typeFilter = get([EXPERIMENTS_TABLE_COL_FIELDS.TYPE, 'value'], tableFilters);\n    const statusFilter = get([EXPERIMENTS_TABLE_COL_FIELDS.STATUS, 'value'], tableFilters);\n    const userFilter = get([EXPERIMENTS_TABLE_COL_FIELDS.USER, 'value'], tableFilters);\n    const tagsFilter = tableFilters?.[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]?.value;\n    const tagsFilterAnd = tableFilters?.[EXPERIMENTS_TABLE_COL_FIELDS.TAGS]?.matchMode === 'AND';\n    const parentFilter = get([EXPERIMENTS_TABLE_COL_FIELDS.PARENT, 'value'], tableFilters);\n    const systemTags = get(['system_tags', 'value'], tableFilters);\n    const systemTagsFilter = (archived ? [MODEL_TAGS.HIDDEN] : ['-' + MODEL_TAGS.HIDDEN])\n      .concat(systemTags ? systemTags : []);\n\n    let filters = createFiltersFromStore(tableFilters, true);\n    filters = Object.keys(filters).reduce((acc, colId) => {\n      const col = metricCols.find(c => c.id === colId);\n      let key = col?.getter || colId;\n      if (Array.isArray(key)) {\n        key = key[0];\n      }\n      acc[key] = filters[colId];\n      return acc;\n    }, {});\n\n    orderFields = orderFields.map(field => {\n      const col = metricCols.find(c => c.id === field.field);\n      const getter = Array.isArray(col?.getter) ? col.getter[0] : col?.getter;\n      return getter ? {...field, field: getter} : field;\n    });\n\n    const colsFilters = flatten(cols.filter(col => col.id !== 'selected' && !col.hidden).map(col => col.getter || col.id));\n    const metricColsFilters = metricCols ? flatten(metricCols.map(col => col.getter || col.id)) : [];\n    const only_fields = [...new Set([...MINIMUM_ONLY_FIELDS, ...colsFilters, ...metricColsFilters])];\n    return {\n      ...filters,\n      id: selectedIds,\n      ...(searchQuery?.query && {\n        _any_: {\n          pattern: searchQuery.regExp ? searchQuery.query : escapeRegex(searchQuery.query),\n          fields: GET_ALL_QUERY_ANY_FIELDS\n        }\n      }),\n      project: ((!filters['project.name'] && (!projectId || projectId === '*'))) ? undefined : isCompare ? ((filters['project.name'] || undefined)): [projectId],\n      scroll_id: scrollId || null, // null to create new scroll (undefined doesn't generate scroll)\n      refresh_scroll: refreshScroll,\n      size: pageSize,\n      order_by: encodeOrder(orderFields),\n      status: (statusFilter && statusFilter.length > 0) ? statusFilter : undefined,\n      type: (typeFilter && typeFilter.length > 0) ? typeFilter : ['__$not', 'annotation_manual', '__$not', 'annotation', '__$not', 'dataset_import'],\n      user: (userFilter && userFilter.length > 0) ? userFilter : [],\n      ...(parentFilter?.length > 0 && {parent: parentFilter}),\n      system_tags: (systemTagsFilter && systemTagsFilter.length > 0) ? systemTagsFilter : [],\n      ...(tagsFilter?.length > 0 && {tags: [(tagsFilterAnd ? '__$and' : '__$or'), ...addExcludeFilters(tagsFilter)] }),\n      include_subprojects: deep,\n      search_hidden: showHidden,\n      only_fields\n    };\n  }\n\n  fetchExperiments$(scrollId1: string, refreshScroll: boolean = false, pageSize = EXPERIMENTS_PAGE_SIZE): Observable<TasksGetAllExResponse> {\n    return of(scrollId1)\n      .pipe(\n        withLatestFrom(\n          this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n          this.store.select(selectIsArchivedMode),\n          this.store.select(exSelectors.selectGlobalFilter),\n          this.store.select(exSelectors.selectTableSortFields),\n          this.store.select(exSelectors.selectTableFilters),\n          this.store.select(exSelectors.selectSelectedExperiments),\n          this.store.select(exSelectors.selectShowAllSelectedIsActive),\n          this.store.select(exSelectors.selectExperimentsTableCols),\n          this.store.select(exSelectors.selectExperimentsHiddenTableCols),\n          this.store.select(exSelectors.selectExperimentsMetricsColsForProject),\n          this.store.select(exSelectors.selectExperimentsTableColsOrder),\n          this.store.select(selectIsDeepMode),\n          this.store.select(selectShowHidden),\n          this.route.queryParams,\n          this.store.select(selectIsCompare),\n        ),\n        switchMap(([\n                     scrollId, projectId, isArchived, gb, orderFields, filters, selectedExperiments,\n                     showAllSelectedIsActive, cols, hiddenCols, metricCols, colsOrder, deep, showHidden, queryParams, isCompare\n                   ]) => {\n          const tableFilters = cloneDeep(filters) || {} as { [key: string]: FilterMetadata };\n          if (tableFilters && tableFilters.status && tableFilters.status.value.includes('completed')) {\n            tableFilters.status.value.push('closed');\n          }\n          const selectedIds = showAllSelectedIsActive ? selectedExperiments.map(exp => exp.id) : [];\n          const columns = encodeColumns(cols, hiddenCols, this.filterColumns(projectId, metricCols), colsOrder ? colsOrder : queryParams.columns);\n          this.store.dispatch(setURLParams({\n            columns,\n            filters,\n            orders: orderFields,\n            isArchived,\n            isDeep: deep\n          }));\n          return this.apiTasks.tasksGetAllEx(this.getGetAllQuery({\n            refreshScroll, scrollId, projectId, searchQuery: gb, archived: isArchived, orderFields,\n            tableFilters, selectedIds, cols, metricCols, deep, showHidden, isCompare, pageSize\n          }));\n        })\n      );\n  }\n\n  private filterColumns(projectId: string, metricsCols: any) {\n    return metricsCols.filter(col => col.projectId === projectId);\n  }\n\n  getTagsEffect = createEffect(() => this.actions$.pipe(\n    ofType(exActions.getTags),\n    withLatestFrom(this.store.select(selectRouterParams).pipe(map(params => get('projectId', params)))),\n    switchMap(([action, projectId]) => this.projectsApi.projectsGetTaskTags({\n      projects: projectId === '*' ? [] : [projectId]\n    }).pipe(\n      mergeMap(res => [\n        exActions.setTags({tags: res.tags.concat(null)}),\n        deactivateLoader(action.type)\n      ]),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader(action.type),\n        setServerError(error, null, 'Fetch tags failed')]\n      )\n    ))\n  ));\n\n  setSelectedExperiments = createEffect(() => this.actions$.pipe(\n    ofType(exActions.setSelectedExperiments, exActions.updateExperiment, updateManyExperiment.type),\n    withLatestFrom(\n      this.store.select(exSelectors.selectSelectedExperiments),\n    ),\n    switchMap(([action, selectSelectedExperiments]) => {\n      const payload = action.type === exActions.setSelectedExperiments.type ?\n        (action as ReturnType<typeof exActions.setSelectedExperiments>).experiments : selectSelectedExperiments;\n      const selectedExperimentsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> = {\n        [MenuItems.abort]: selectionDisabledAbort(payload),\n        [MenuItems.abortAllChildren]: selectionDisabledAbortAllChildren(payload),\n        [MenuItems.publish]: selectionDisabledPublishExperiments(payload),\n        [MenuItems.reset]: selectionDisabledReset(payload),\n        [MenuItems.delete]: selectionDisabledDelete(payload),\n        [MenuItems.moveTo]: selectionDisabledMoveTo(payload),\n        [MenuItems.enqueue]: selectionDisabledEnqueue(payload),\n        [MenuItems.dequeue]: selectionDisabledDequeue(payload),\n        [MenuItems.queue]: selectionDisabledQueue(payload),\n        [MenuItems.viewWorker]: selectionDisabledViewWorker(payload),\n        [MenuItems.archive]: selectionDisabledArchive(payload),\n        [MenuItems.tags]: selectionDisabledTags(payload),\n      };\n      //allHasExamples: selectionAllExamples(action.payload),\n      // allArchive: selectionAllIsArchive(action.payload),\n      return [exActions.setSelectedExperimentsDisableAvailable({selectedExperimentsDisableAvailable})];\n    })\n    )\n  );\n}\n","import {ColHeaderFilterTypeEnum, ColHeaderTypeEnum, ISmCol} from '../shared/ui-components/data/table/table.consts';\nimport {EXPERIMENTS_TABLE_COL_FIELDS} from '../../features/experiments/shared/experiments.const';\n\nexport const INITIAL_EXPERIMENT_TABLE_COLS: ISmCol[] = [\n  {\n    id              : EXPERIMENTS_TABLE_COL_FIELDS.SELECTED,\n    sortable        : false,\n    filterable      : false,\n    headerType      : ColHeaderTypeEnum.checkBox,\n    header          : '',\n    hidden          : false,\n    static          : true,\n    bodyStyleClass  : 'selected-col-body type-col',\n    headerStyleClass: 'selected-col-header',\n    style           : {width: '65px'},\n    disableDrag     : true,\n    disablePointerEvents: true\n  },\n  {\n    id            : EXPERIMENTS_TABLE_COL_FIELDS.TYPE,\n    headerType    : ColHeaderTypeEnum.sortFilter,\n    sortable      : true,\n    filterable    : true,\n    static        : true,\n    header        : 'TYPE',\n    bodyStyleClass: 'type-col',\n    style         : {width: '115px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.NAME,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : true,\n    static      : true,\n    header      : 'NAME',\n    style       : {width: '400px'},\n  },\n  {\n    id: EXPERIMENTS_TABLE_COL_FIELDS.TAGS,\n    headerType      : ColHeaderTypeEnum.sortFilter,\n    filterable: true,\n    searchableFilter: true,\n    sortable: false,\n    static: true,\n    header: 'TAGS',\n    style: {width: '300px'},\n    excludeFilter: true,\n    andFilter: true,\n    columnExplain: 'Click to include tag. Click again to exclude.'\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.STATUS,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    filterable  : true,\n    static      : true,\n    header      : 'STATUS',\n    style       : {width: '115px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.PROJECT,\n    headerType  : ColHeaderTypeEnum.title,\n    static      : true,\n    header      : 'PROJECT',\n    style       : {width: '150px'},\n  },\n  {\n    id              : EXPERIMENTS_TABLE_COL_FIELDS.USER,\n    getter          : 'user.name',\n    headerType      : ColHeaderTypeEnum.sortFilter,\n    searchableFilter: true,\n    filterable      : true,\n    sortable        : false,\n    static          : true,\n    header          : 'USER',\n    style           : {width: '115px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.STARTED,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable  : true,\n    filterType    : ColHeaderFilterTypeEnum.durationDate,\n    filterable: true,\n    searchableFilter: false,\n    static        : true,\n    header      : 'STARTED',\n    style       : {width: '150px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.LAST_UPDATE,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable  : true,\n    filterType    : ColHeaderFilterTypeEnum.durationDate,\n    filterable: false,\n    searchableFilter: false,\n    static        : true,\n    header      : 'UPDATED',\n    label       : 'Updated',\n    style       : {width: '150px'},\n  },\n  {\n    id          : EXPERIMENTS_TABLE_COL_FIELDS.LAST_ITERATION,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : true,\n    filterType    : ColHeaderFilterTypeEnum.durationNumeric,\n    filterable  : true,\n    searchableFilter: false,\n    static        : true,\n    header      : 'ITERATION',\n    label       : 'Iterations:',\n    style       : {width: '115px'},\n  },\n  {\n    id        : EXPERIMENTS_TABLE_COL_FIELDS.COMMENT,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable  : true,\n    header    : 'DESCRIPTION',\n    style     : {width: '300px'}\n  },\n  {\n    id        : EXPERIMENTS_TABLE_COL_FIELDS.ACTIVE_DURATION,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable  : true,\n    filterable: true,\n    filterType    : ColHeaderFilterTypeEnum.duration,\n    searchableFilter: false,\n    static        : true,\n    bodyStyleClass: 'type-col',\n    header    : 'RUN TIME',\n    style     : {width: '150px'}\n  },\n  {\n    id        : EXPERIMENTS_TABLE_COL_FIELDS.PARENT,\n    getter    : [EXPERIMENTS_TABLE_COL_FIELDS.PARENT, 'parent.project.id', 'parent.project.name'],\n    headerType: ColHeaderTypeEnum.sortFilter,\n    searchableFilter: true,\n    filterable      : true,\n    sortable        : false,\n    header    : 'PARENT TASK',\n    style     : {width: '200px'}\n  }\n];\n\nexport const EXPERIMENT_INFO_ONLY_FIELDS_BASE = [\n  'id',\n  'name',\n  'user.name',\n  'company',\n  'type',\n  'status',\n  'status_changed',\n  'status_message',\n  'status_reason',\n  'comment',\n  'created',\n  'last_update',\n  'last_change',\n  'completed',\n  'started',\n  'parent.name',\n  'parent.project.name',\n  'project.name',\n  'output',\n  'models',\n  'models.output.model.name',\n  'models.output.model.project',\n  'models.output.model.design',\n  'models.output.model.uri',\n  'models.output.model.framework',\n  'models.output.model.created',\n  'models.output.model.task',\n  'models.output.model.task.name',\n  'models.output.model.task.project.name',\n  'models.output.model.task.user.name',\n  'models.input.model.user',\n  'models.input.model.user.name',\n  'models.input.model.project',\n  'models.input.model.name',\n  'models.input.model.created',\n  'models.input.model.labels',\n  'models.input.model.design',\n  'models.input.model.uri',\n  'models.input.model.framework',\n  'models.input.model.task',\n  'models.input.model.task.name',\n  'models.input.model.task.project',\n  'models.input.model.task.project.name',\n  'execution',\n  'hyperparams',\n  'execution.queue.name',\n  'script.binary',\n  'script.repository',\n  'script.tag',\n  'script.branch',\n  'script.version_num',\n  'script.entry_point',\n  'script.working_dir',\n  'script.requirements',\n  'system_tags',\n  'published',\n  'last_iteration',\n  'last_worker',\n  'tags',\n  'active_duration',\n  'container',\n  'runtime'\n];\n\nexport const MINIMUM_ONLY_FIELDS = ['system_tags', 'project', 'company', 'last_change', 'started', 'last_iteration', 'tags', 'user.name'];\n","import {Task} from '../../../business-logic/model/tasks/task';\nimport * as actions from '../actions/common-experiment-output.actions';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\nimport {sortBy, reverse, set} from 'lodash/fp';\nimport {LOG_BATCH_SIZE} from '../shared/common-experiments.const';\nimport {MetricsPlotEvent} from '../../../business-logic/model/events/metricsPlotEvent';\nimport {EventsScalarMetricsIterRawResponse} from '../../../business-logic/model/events/eventsScalarMetricsIterRawResponse';\nimport {ExtFrame} from '@common/shared/experiment-graphs/single-graph/plotly-graph-base';\n\nexport type GroupByCharts = 'metric' | 'none';\n\nexport const GroupByCharts = {\n  Metric: 'metric' as GroupByCharts,\n  None: 'none' as GroupByCharts\n};\n\nexport interface Log {\n  timestamp: number;\n  type: 'log';\n  task: Task['id'];\n  level: 'debug' | 'info' | 'warning' | 'error' | 'critical';\n  worker: string;\n  msg: string;\n  metric: string;\n  variant: string;\n}\n\nexport interface SeriesData {\n  name: string;\n  x: number[];\n  y: number[];\n}\n\nexport interface HistogramCharts {\n  [metric: string]: { [variant: string]: SeriesData };\n}\n\n\nexport interface CommonExperimentOutputState {\n  metricsMultiScalarsCharts: any;\n  metricsHistogramCharts: HistogramCharts;\n  fullScreenDetailedChart: ExtFrame;\n  fetchingFullScreenData: boolean;\n  fullScreenXtype: ScalarKeyEnum;\n  isFullScreenOpen: boolean;\n  cachedAxisType: ScalarKeyEnum;\n  metricsPlotsCharts: MetricsPlotEvent[];\n  experimentLog: Log[];\n  totalLogLines: number;\n  beginningOfLog: boolean;\n  settingsList: Array<IExperimentSettings>;\n  searchTerm: string;\n  logFilter: string;\n  showSettings: boolean;\n}\n\nexport interface IExperimentSettings {\n  id: Task['id'];\n  hiddenMetricsScalar: Array<string>;\n  hiddenMetricsPlot: Array<string>;\n  selectedHyperParams: Array<string>;\n  selectedMetric: string;\n  selectedScalar: string;\n  selectedPlot: string;\n  smoothWeight: number;\n  xAxisType: ScalarKeyEnum;\n  groupBy: GroupByCharts;\n}\n\nexport const initialCommonExperimentOutputState: CommonExperimentOutputState = {\n  metricsMultiScalarsCharts: null,\n  metricsHistogramCharts: null,\n  fullScreenDetailedChart: null,\n  fullScreenXtype: null,\n  fetchingFullScreenData: false,\n  cachedAxisType: null,\n  metricsPlotsCharts: null,\n  isFullScreenOpen: false,\n  experimentLog: [],\n  totalLogLines: null,\n  beginningOfLog: false,\n  settingsList: [],\n  searchTerm: '',\n  logFilter: null,\n  showSettings: false\n};\n\nexport function commonExperimentOutputReducer(state = initialCommonExperimentOutputState, action): CommonExperimentOutputState {\n  switch (action.type) {\n    case actions.RESET_OUTPUT:\n      return {\n        ...state,\n        experimentLog: initialCommonExperimentOutputState.experimentLog,\n        metricsMultiScalarsCharts: initialCommonExperimentOutputState.metricsMultiScalarsCharts,\n        metricsHistogramCharts: initialCommonExperimentOutputState.metricsHistogramCharts,\n        metricsPlotsCharts: initialCommonExperimentOutputState.metricsPlotsCharts\n      };\n    case actions.setGraphDisplayFullDetailsScalars.type:\n      return {...state, fullScreenDetailedChart: action.data};\n    case actions.setGraphDisplayFullDetailsScalarsIsOpen.type:\n      return {...state, isFullScreenOpen: action.isOpen};\n    case actions.getGraphDisplayFullDetailsScalars.type:\n      return {...state, fetchingFullScreenData: true};\n    case actions.setXtypeGraphDisplayFullDetailsScalars.type:\n      return {...state, fullScreenXtype: action.xAxisType};\n    case actions.mergeGraphDisplayFullDetailsScalars.type:\n      return {\n        ...state,\n        fullScreenDetailedChart: {...state.fullScreenDetailedChart, data: action.data},\n        fetchingFullScreenData: false\n      };\n    case actions.setExperimentLog.type: {\n      const events = reverse(action.events);\n      let currLog: any[];\n      let atStart = false;\n      if (action.direction) {\n        if (action.refresh) {\n          currLog = events;\n        } else if (action.direction === 'prev') {\n          if (action.events < LOG_BATCH_SIZE) {\n            atStart = true;\n          }\n          currLog = sortBy('timestamp', events.concat(state.experimentLog));\n          if (currLog.length > 300) {\n            currLog = currLog.slice(0, 300);\n          }\n        } else {\n          currLog = sortBy('timestamp', state.experimentLog.concat(events));\n          if (currLog.length > 300) {\n            currLog = currLog.slice(currLog.length - 300, currLog.length);\n          }\n        }\n      } else {\n        currLog = events;\n      }\n      return {\n        ...state,\n        experimentLog: currLog,\n        totalLogLines: action.total,\n        beginningOfLog: atStart\n      };\n    }\n    case actions.SET_EXPERIMENT_METRICS_SEARCH_TERM:\n      return {...state, searchTerm: action.payload.searchTerm};\n    case actions.SET_EXPERIMENT_HISTOGRAM:\n      return {...state, metricsHistogramCharts: action.payload, cachedAxisType: action.axisType};\n    case actions.SET_EXPERIMENT_PLOTS:\n      return {...state, metricsPlotsCharts: action.payload};\n    case actions.UPDATE_EXPERIMENT_SETTINGS: {\n      let newSettings;\n      const experimentExists = state.settingsList.find(setting => setting.id === action.payload.id);\n      if (experimentExists) {\n        newSettings = state.settingsList.map(setting => setting.id === action.payload.id ? {...setting, ...action.payload.changes} : setting);\n      } else {\n        newSettings = state.settingsList.slice();\n        newSettings.push({id: action.payload.id, ...action.payload.changes});\n      }\n      return {...state, settingsList: newSettings};\n    }\n    case actions.RESET_EXPERIMENT_METRICS:\n      return {\n        ...state,\n        metricsMultiScalarsCharts: initialCommonExperimentOutputState.metricsMultiScalarsCharts,\n        metricsHistogramCharts: initialCommonExperimentOutputState.metricsHistogramCharts,\n        metricsPlotsCharts: initialCommonExperimentOutputState.metricsPlotsCharts,\n        cachedAxisType: initialCommonExperimentOutputState.cachedAxisType,\n        searchTerm: ''\n      };\n    case actions.SET_LOG_FILTER:\n      return {...state, logFilter: (action as actions.SetLogFilter).filterString};\n    case actions.RESET_LOG_FILTER:\n      return {...state, logFilter: null};\n    case actions.toggleSettings.type:\n      return {...state, showSettings: !state.showSettings};\n    default:\n      return state;\n  }\n}\n","import {ITableExperiment} from '../shared/common-experiment-model.model';\nimport {INITIAL_EXPERIMENT_TABLE_COLS} from '../experiment.consts';\nimport {ISmCol, TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport {EXPERIMENTS_TABLE_COL_FIELDS} from '../../../features/experiments/shared/experiments.const';\nimport * as actions from '../actions/common-experiments-view.actions';\nimport {MetricVariantResult} from '../../../business-logic/model/projects/metricVariantResult';\nimport {TableFilter} from '../../shared/utils/tableParamEncode';\nimport {User} from '../../../business-logic/model/users/user';\nimport {ProjectsGetTaskParentsResponseParents} from '../../../business-logic/model/projects/projectsGetTaskParentsResponseParents';\nimport {ICommonSearchState} from '../../common-search/common-search.reducer';\nimport {SortMeta} from 'primeng/api';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '../../shared/entity-page/items.utils';\nimport {setSelectedProject} from '@common/core/actions/projects.actions';\nimport {createReducer, on} from '@ngrx/store';\nimport {modelsInitialState} from '@common/models/reducers/models-view.reducer';\nimport {setAllTasksChildren} from '../actions/common-experiments-menu.actions';\n\n\nexport interface ICommonExperimentsViewState {\n  tableCols: ISmCol[];\n  colsOrder: { [Project: string]: string[] };\n  tableFilters: any;\n  tempFilters: {[columnId: string]: {value: any; matchMode: string}};\n  projectColumnFilters: {[projectId: string]: {[columnId: string]: {value: any; matchMode: string}}};\n  tableOrders: SortMeta[];\n  projectColumnsSortOrder: {[projectId: string]: SortMeta[]};\n  projectColumnsWidth: {[projectId: string]: {[colId: string]: number}};\n  metricsCols: ISmCol[];\n  hiddenTableCols: {[colName: string]: boolean};\n  hiddenProjectTableCols: {[projectId: string]: {[colName: string]: boolean | undefined}};\n  experiments: Array<ITableExperiment>;\n  noMoreExperiment: boolean;\n  selectedExperiment: ITableExperiment;\n  selectedExperiments: Array<ITableExperiment>;\n  selectedExperimentsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered>;\n  selectedExperimentSource: string;\n  experimentToken: string;\n  scrollId: string;\n  globalFilter: ICommonSearchState['searchQuery'];\n  showAllSelectedIsActive: boolean;\n  metricVariants: Array<MetricVariantResult>;\n  hyperParams: Array<any>;\n  hyperParamsOptions: Record<ISmCol['id'], string[]>;\n  metricsLoading: boolean;\n  users: User[];\n  projectTags: string[];\n  parents: ProjectsGetTaskParentsResponseParents[];\n  activeParentsFilter: ProjectsGetTaskParentsResponseParents[];\n  types: string[];\n  splitSize: number;\n  allRunningChildrenForAbortChildrenDialog: ITableExperiment[];\n}\n\nexport const commonExperimentsInitialState: ICommonExperimentsViewState = {\n  tableCols: INITIAL_EXPERIMENT_TABLE_COLS,\n  colsOrder: {},\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  hiddenTableCols: {comment: true, active_duration: true},\n  hiddenProjectTableCols: {},\n  experiments: [],\n  tableFilters: {},\n  tempFilters: {},\n  projectColumnFilters: {},\n  tableOrders: [{field: EXPERIMENTS_TABLE_COL_FIELDS.LAST_UPDATE, order: TABLE_SORT_ORDER.DESC}],\n  projectColumnsSortOrder: {},\n  projectColumnsWidth: {},\n  noMoreExperiment: false,\n  selectedExperiment: null,\n  selectedExperiments: [],\n  selectedExperimentsDisableAvailable: {},\n  selectedExperimentSource: null,\n  experimentToken: null,\n  scrollId: null, // -1 so the \"getNextExperiments\" will send 0.\n  globalFilter: null,\n  showAllSelectedIsActive: false,\n  metricsCols: [],\n  metricVariants: [],\n  hyperParams: [],\n  hyperParamsOptions: {},\n  metricsLoading: false,\n  projectTags: [],\n  users: [],\n  parents: [],\n  activeParentsFilter: [],\n  types: [],\n  splitSize: 75,\n  allRunningChildrenForAbortChildrenDialog: null,\n};\n\nconst setExperimentsAndUpdateSelectedExperiments = (state: ICommonExperimentsViewState, payload): ICommonExperimentsViewState => ({\n  ...state,\n  experiments: state.experiments.map(ex => ex.id === payload.id ? {...ex, ...payload.changes} : ex),\n  ...(state.selectedExperiment?.id === payload.id && {selectedExperiment: {...state.selectedExperiment, ...payload.changes}}),\n  ...(state.selectedExperiments.find(ex => ex.id === payload.id) && {selectedExperiments: state.selectedExperiments.map(ex => ex.id === payload.id ? {...ex, ...payload.changes} : ex)})\n});\n\nexport const commonExperimentsViewReducer = createReducer(\n  commonExperimentsInitialState,\n  on(actions.resetExperiments, state => ({\n    ...state,\n    experiments: commonExperimentsInitialState.experiments,\n    selectedExperiment: commonExperimentsInitialState.selectedExperiment,\n    metricVariants: commonExperimentsInitialState.metricVariants,\n    showAllSelectedIsActive: commonExperimentsInitialState.showAllSelectedIsActive\n  })),\n  on(setSelectedProject, state => ({\n    ...state,\n    selectedExperiments: commonExperimentsInitialState.selectedExperiments,\n    metricVariants: commonExperimentsInitialState.metricVariants,\n    hyperParamsOptions: commonExperimentsInitialState.hyperParamsOptions\n  })),\n  on(actions.showOnlySelected, (state, action) => ({\n    ...state,\n    showAllSelectedIsActive: action.active,\n    globalFilter: commonExperimentsInitialState.globalFilter,\n    tempFilters: state.projectColumnFilters[action.projectId] || {},\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: action.active ? modelsInitialState.tableFilters : state.tempFilters\n    }\n  })),\n  on(actions.addExperiments, (state, action) => ({...state, experiments: state.experiments.concat(action.experiments)})),\n  // on(actions.freezeTableState, (state) => ({...state, freeze: cloneDeep(state)})),\n  // on(actions.defrostTableState, (state) => ({...cloneDeep(state.freeze), freeze: null})),\n  on(actions.removeExperiments, (state, action) => ({...state, experiments: state.experiments.filter(exp => !action.experiments.includes(exp.id))})),\n  on(actions.updateExperiment, (state, action) => setExperimentsAndUpdateSelectedExperiments(state, action)),\n  on(actions.updateManyExperiment, (state, action) =>\n    action.changeList.reduce((acc, change) => {\n      acc = setExperimentsAndUpdateSelectedExperiments(acc, {id: change.id, changes: change.fields});\n      return acc;\n    }, state as ICommonExperimentsViewState)\n  ),\n  on(actions.setExperiments, (state, action) => ({...state, experiments: action.experiments})),\n  on(actions.setExperimentInPlace, (state, action) => ({\n    ...state, experiments: state.experiments\n      .map(currExp => action.experiments.find(newExp => newExp.id === currExp.id))\n      .filter(e => e)\n  })),\n  on(actions.setNoMoreExperiments, (state, action) => ({...state, noMoreExperiment: action.payload})),\n  on(actions.setCurrentScrollId, (state, action) => ({...state, scrollId: action.scrollId})),\n  on(actions.setSelectedExperiment, (state, action) => ({...state, selectedExperiment: action.experiment})),\n  on(actions.setSelectedExperiments, (state, action) => ({...state, selectedExperiments: action.experiments})),\n  on(actions.setSelectedExperimentsDisableAvailable, (state, action) =>\n    ({...state, selectedExperimentsDisableAvailable: action.selectedExperimentsDisableAvailable})),\n  on(actions.globalFilterChanged, (state, action) =>\n    ({...state, globalFilter: action as ReturnType<typeof actions.globalFilterChanged>, showAllSelectedIsActive: false})),\n  on(actions.resetGlobalFilter, state => ({...state, globalFilter: commonExperimentsInitialState.globalFilter})),\n  on(actions.setTableSort, (state, action) => {\n    const colIds = state.tableCols.map(col => col.id).concat(state.metricsCols.map(col => col.id));\n    let orders = action.orders.filter(order => colIds.includes(order.field));\n    orders = orders.length > 0 ? orders : commonExperimentsInitialState.tableOrders;\n    return { ...state, projectColumnsSortOrder: {...state.projectColumnsSortOrder, [action.projectId]: orders} };\n  }),\n  on(actions.resetSortOrder, (state, action) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {[action.projectId]: remove, ...order} = state.projectColumnsSortOrder;\n    return {...state, projectColumnsSortOrder: order};\n  }),\n  on(actions.setColumnWidth, (state, action) => ({\n    ...state,\n    projectColumnsWidth: {\n      ...state.projectColumnsWidth,\n      [action.projectId]: {\n        ...state.projectColumnsWidth[action.projectId],\n        [action.columnId]: action.widthPx\n      }\n    }\n  })),\n  on(actions.toggleColHidden, (state, action) => ({\n    ...state,\n    hiddenProjectTableCols: {\n      ...state.hiddenProjectTableCols,\n      [action.projectId]: {\n        ...(state.hiddenProjectTableCols[action.projectId] || commonExperimentsInitialState.hiddenTableCols),\n        [action.columnId]: state.hiddenProjectTableCols?.[action.projectId]?.[action.columnId] ? undefined : true\n      }\n    }\n  })),\n  on(actions.setHiddenColumns, (state, action) => {\n    const visibleColumns = ['selected'].concat(action['visibleColumns']) as string[];\n    return {\n      ...state,\n      hiddenProjectTableCols: {\n        ...state.hiddenProjectTableCols,\n        [action.projectId]: {\n          ...state.tableCols\n            .filter(col => !visibleColumns.includes(col.id))\n            .reduce((obj, col) => ({...obj, [col.id]: true}), {})\n        }\n      }\n    };\n  }),\n  on(actions.tableFilterChanged, (state, action) => ({\n    ...state,\n    activeParentsFilter: action.filter.col === EXPERIMENTS_TABLE_COL_FIELDS.PARENT ?\n      action.filter.value.map(parentId => state.parents.find(parent => parent.id === parentId)).filter(p => !!p) : [],\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {\n        ...state.projectColumnFilters[action.projectId],\n        [action.filter.col]: {value: action.filter.value, matchMode: action.filter.filterMatchMode}\n      }\n    }\n  })),\n  on(actions.setTableFilters, (state, action) => ({\n    ...state,\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {\n        ...action.filters.reduce((obj, filter: TableFilter) => {\n          obj[filter.col] = {value: filter.value, matchMode: filter.filterMatchMode};\n          return obj;\n        }, {} as {[columnId: string]: {value: any; matchMode: string}})\n      }\n    }\n  })),\n  on(actions.setExtraColumns, (state, action) =>\n    ({...state, metricsCols: [...state.metricsCols.filter(tableCol => !(tableCol.projectId === action['projectId'])), ...action['columns']]})),\n  on(actions.addColumn, (state, action) => ({...state, metricsCols: [...state.metricsCols, action.col]})),\n  on(actions.removeCol, (state, action) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: removedCol, ...remainingColsWidth} = state.projectColumnsWidth[action.projectId] || {};\n      return {\n        ...state,\n        metricsCols: [...state.metricsCols.filter(tableCol => !(tableCol.id === action.id && tableCol.projectId === action.projectId))],\n        projectColumnsSortOrder: {\n          ...state.projectColumnsSortOrder,\n          [action.projectId]: state.projectColumnsSortOrder[action.projectId]?.filter(order => order.field !== action.id) || commonExperimentsInitialState.tableOrders\n        },\n        projectColumnsWidth: {...state.projectColumnsWidth, [action.projectId]: remainingColsWidth},\n        colsOrder: {...state.colsOrder, [action.projectId]: state.colsOrder[action.projectId] ? state.colsOrder[action.projectId].filter(colId => colId !== action.id) : null}\n      };\n    }),\n  on(actions.setTags, (state, action) => ({...state, projectTags: action.tags})),\n  on(setAllTasksChildren, (state, action) => ({...state, allRunningChildrenForAbortChildrenDialog: action.experiments})),\n  on(actions.setUsers, (state, action) => ({...state, users: action.users})),\n  on(actions.setParents, (state, action) => ({...state, parents: action.parents})),\n  on(actions.setActiveParentsFilter, (state, action) => ({...state, activeParentsFilter: action.parents})),\n  on(actions.setProjectsTypes, (state, action) => ({...state, types: action.types})),\n  on(actions.clearHyperParamsCols, (state, action) => ({\n    ...state,\n    metricsCols: [...state.metricsCols.filter(tableCol => !(tableCol.id.startsWith('hyperparams') && tableCol.projectId === action.projectId))],\n    projectColumnsSortOrder: {\n      ...state.projectColumnsSortOrder,\n      [action.projectId]: state.projectColumnsSortOrder[action.projectId].filter(order => order.field.startsWith('hyperparams'))\n    }\n  })),\n  on(actions.setCustomMetrics, (state, action) =>\n    ({...state, metricVariants: action.metrics, metricsLoading: false})),\n  on(actions.setColsOrderForProject, (state, action) =>\n    ({...state, colsOrder: {...state.colsOrder, [action.project]: action.cols}})),\n  on(actions.setCustomHyperParams, (state, action) => ({...state, hyperParams: action.params, metricsLoading: false})),\n  on(actions.hyperParamSelectedInfoExperiments, (state, action) =>\n    ({...state, hyperParamsOptions: {...state.hyperParamsOptions, [action.col.id]: action.values}})),\n  on(actions.getCustomMetrics, state => ({...state, metricsLoading: true})),\n  on(actions.getCustomHyperParams, state => ({...state, metricsLoading: true})),\n  on(actions.setSplitSize, (state, action) => ({...state, splitSize: action.splitSize})),\n);\n","import {createSelector} from '@ngrx/store';\nimport {IExperimentModelInfo, ITableExperiment} from '../shared/common-experiment-model.model';\nimport {ISmCol} from '../../shared/ui-components/data/table/table.consts';\nimport {\n  experimentInfo,\n  experimentOutput,\n  experimentsView,\n  selectExperimentInfoData,\n  selectSelectedExperiment\n} from '../../../features/experiments/reducers';\nimport {IExperimentInfo} from '~/features/experiments/shared/experiment-info.model';\nimport {EXPERIMENTS_TABLE_COL_FIELDS, experimentSectionsEnum} from '~/features/experiments/shared/experiments.const';\nimport {GroupByCharts, IExperimentSettings} from './common-experiment-output.reducer';\nimport {get, getOr} from 'lodash/fp';\nimport {TaskStatusEnum} from '~/business-logic/model/tasks/taskStatusEnum';\nimport {IExecutionForm} from '~/features/experiments/shared/experiment-execution.model';\nimport {ICommonExperimentInfoState} from './common-experiment-info.reducer';\nimport {ScalarKeyEnum} from '~/business-logic/model/events/scalarKeyEnum';\nimport {ParamsItem} from '~/business-logic/model/tasks/paramsItem';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '../../shared/entity-page/items.utils';\nimport {commonExperimentsInitialState} from '@common/experiments/reducers/common-experiments-view.reducer';\nimport {\n  selectCompareAddTableFilters,\n  selectCompareAddTableSortFields,\n  selectIsCompare\n} from '../../experiments-compare/reducers';\n\nexport const selectExperimentsList = createSelector(experimentsView, (state): ITableExperiment[] => state.experiments);\nexport const selectSelectedTableExperiment = createSelector(experimentsView, (state): ITableExperiment => state.selectedExperiment);\n\nexport const selectExperimentsTableColsWidth = createSelector(experimentsView, selectRouterParams,\n  (state, params) => state.projectColumnsWidth?.[params?.projectId] || {});\nexport const selectExperimentsHiddenTableCols = createSelector(experimentsView, selectRouterParams,\n  (state, params) => state.hiddenProjectTableCols?.[params?.projectId] || commonExperimentsInitialState.hiddenTableCols);\nexport const selectRawExperimentsTableCols = createSelector(experimentsView, (state) => state.tableCols);\nexport const selectExperimentsTableCols = createSelector(selectRawExperimentsTableCols, selectExperimentsHiddenTableCols, selectExperimentsTableColsWidth,\n  (cols, hidden, colWidth) =>\n    cols?.map(col => ({\n      ...col,\n      hidden: !!hidden[col.id],\n      style: {...col.style, ...(col.id !== EXPERIMENTS_TABLE_COL_FIELDS.SELECTED && colWidth[col.id] && {width: `${colWidth[col.id]}px`})}\n    } as ISmCol)));\nexport const selectExperimentsTags = createSelector(experimentsView, (state) => state.projectTags);\nexport const selectExperimentsUsers = createSelector(experimentsView, (state) => state.users);\nexport const selectExperimentsParents = createSelector(experimentsView, (state) => state.parents);\nexport const selectActiveParentsFilter = createSelector(experimentsView, (state) => state.activeParentsFilter);\nexport const selectExperimentsTypes = createSelector(experimentsView, (state) => state.types);\n\nexport const selectExperimentsTableColsOrder = createSelector([experimentsView, selectRouterParams], (state, params): string[] => (state.colsOrder && params?.projectId) ? state.colsOrder[params?.projectId] : undefined);\nexport const selectExperimentsMetricsCols = createSelector(experimentsView, (state) => state.metricsCols);\nexport const selectExperimentsMetricsColsForProject = createSelector([experimentsView, selectRouterParams, selectExperimentsHiddenTableCols, selectExperimentsTableColsWidth], (state, params, hidden, colWidth) =>\n  state.metricsCols\n    .filter(metricCol => metricCol.projectId === params?.projectId)\n    .map(col => ({\n      ...col,\n      hidden: !!hidden[col.id],\n      style: {...col.style, ...(colWidth[col.id] && {width: `${colWidth[col.id]}px`})}\n    } as ISmCol))\n);\nexport const selectCurrentScrollId = createSelector(experimentsView, (state): string => state.scrollId);\nexport const selectSplitSize = createSelector(experimentsView, (state): number => state.splitSize);\n\nexport const selectGlobalFilter = createSelector(experimentsView, (state) => state.globalFilter);\nexport const selectTableOrders = createSelector(experimentsView, (state) => state.tableOrders);\n\nexport const selectTableSortFields = createSelector(experimentsView, selectRouterParams, selectIsCompare,selectCompareAddTableSortFields,\n  (state, params, isCompare, compareSortFields) => isCompare ? compareSortFields : (state.projectColumnsSortOrder?.[params?.projectId] || state.tableOrders));\nexport const selectTableFilters = createSelector(experimentsView, selectRouterParams, selectIsCompare,selectCompareAddTableFilters,\n  (state, params, isCompare, compareFilters) => isCompare ? compareFilters : state.projectColumnFilters?.[params?.projectId] || {});\nexport const selectSelectedExperiments = createSelector(experimentsView, state => state.selectedExperiments);\nexport const selectedExperimentsDisableAvailable = createSelector(experimentsView, (state) => state.selectedExperimentsDisableAvailable);\nexport const selectShowAllSelectedIsActive = createSelector(experimentsView, (state): boolean => state.showAllSelectedIsActive);\nexport const selectNoMoreExperiments = createSelector(experimentsView, (state): boolean => state.noMoreExperiment);\nexport const selectAllRunningTasksChildrenForAbort = createSelector(experimentsView, (state): ITableExperiment[] => state.allRunningChildrenForAbortChildrenDialog);\n\nexport const selectExperimentInfoDataFreeze = createSelector(experimentInfo, (state): IExperimentInfo => state.infoDataFreeze);\nexport const selectExperimentInfoErrors = createSelector(experimentInfo, (state): ICommonExperimentInfoState['errors'] => state.errors);\nexport const selectIsSelectedExperimentInDev = createSelector(experimentInfo, () => false);\nexport const selectIsExperimentSaving = createSelector(experimentInfo, (state): boolean => state.saving);\nexport const selectIsExperimentInEditMode = createSelector(experimentInfo, (state): boolean => state.activeSectionEdit);\nexport const selectCurrentActiveSectionEdit = createSelector(experimentInfo, (state): string => state.currentActiveSectionEdit);\n\nexport const selectExperimentLog = createSelector(experimentOutput, (state) => state.experimentLog);\nexport const selectExperimentBeginningOfLog = createSelector(experimentOutput, (state) => state.beginningOfLog);\nexport const selectExperimentInfoPlots = createSelector(experimentOutput, (state) => state.metricsPlotsCharts);\nexport const selectExperimentHistogramCacheAxisType = createSelector(experimentOutput, (state) => state.cachedAxisType);\nexport const selectExperimentMetricsSearchTerm = createSelector(experimentOutput, (state) => state.searchTerm);\nexport const selectHyperParamsVariants = createSelector(experimentsView, (state): Array<any> => state.hyperParams);\nexport const selectHyperParamsOptions = createSelector(experimentsView, (state): Record<ISmCol['id'], string[]> => state.hyperParamsOptions);\n\nexport const selectExperimentUserKnowledge = createSelector(experimentInfo,\n  (state): Map<experimentSectionsEnum, boolean> => state.userKnowledge);\n\nexport const selectLogFilter = createSelector(experimentOutput, (state) => state.logFilter);\nexport const selectTotalLogLines = createSelector(experimentOutput, (state) => state.totalLogLines);\n\nexport const selectShowSettings = createSelector(experimentOutput, (state) => state.showSettings);\nexport const selectSelectedExperimentSettings = createSelector(experimentOutput, selectSelectedExperiment,\n  (output, currentExperiment): IExperimentSettings => output.settingsList && output.settingsList.find((setting) => currentExperiment && setting.id === currentExperiment.id));\nexport const selectSelectedSettingsHiddenPlot = createSelector(selectSelectedExperimentSettings,\n  (settings): Array<string> => get('hiddenMetricsPlot', settings) || []);\nexport const selectSelectedSettingsHiddenScalar = createSelector(selectSelectedExperimentSettings,\n  (settings): Array<string> => get('hiddenMetricsScalar', settings) || []);\nexport const selectSelectedSettingsSmoothWeight = createSelector(selectSelectedExperimentSettings,\n  (settings): number => get('smoothWeight', settings) || 0);\n\nexport const selectSelectedSettingsxAxisType = createSelector(selectSelectedExperimentSettings,\n  (settings): ScalarKeyEnum => get('xAxisType', settings) || ScalarKeyEnum.Iter as ScalarKeyEnum);\nexport const selectSelectedSettingsGroupBy = createSelector(selectSelectedExperimentSettings,\n  (settings): GroupByCharts => settings?.groupBy || 'metric');\nexport const selectIsExperimentInProgress = createSelector(selectSelectedExperiment,\n  (experiment): boolean => experiment && (experiment.status === TaskStatusEnum.InProgress));\n\nexport const selectExperimentModelInfoData = createSelector(selectExperimentInfoData,\n  (info: IExperimentInfo): IExperimentModelInfo => get('model', info));\n\nexport const selectExperimentExecutionInfoData = createSelector(selectExperimentInfoData,\n  (info: IExperimentInfo): IExecutionForm => get('execution', info));\n\nexport const selectExperimentHyperParamsInfoData = createSelector(selectExperimentInfoData,\n  (info: IExperimentInfo): IExperimentInfo['hyperparams'] => info?.hyperparams);\n\nexport const selectExperimentConfiguration = createSelector(selectExperimentInfoData,\n  (info: IExperimentInfo): IExperimentInfo['configuration'] => info?.configuration);\n\nexport const selectExperimentHyperParamsSelectedSectionFromRoute = createSelector(selectRouterParams,\n  (params): string => params?.hyperParamId && decodeURIComponent(params?.hyperParamId));\n\nexport const selectExperimentSelectedConfigObjectFromRoute = createSelector(selectRouterParams,\n  (params): string => params?.configObject && decodeURIComponent(params?.configObject));\n\n\nexport const selectSelectedExperimentFromRouter = createSelector(selectRouterParams,\n  (params): string => get('experimentId', params));\n\nexport const selectExperimentConfigObj =\n  createSelector(selectExperimentConfiguration, selectExperimentSelectedConfigObjectFromRoute,\n    (configuration: IExperimentInfo['configuration'], configObj: string): any => getOr(null, configObj, configuration));\n\n\nexport const selectExperimentHyperParamsSelectedSectionParams =\n  createSelector(selectExperimentHyperParamsInfoData, selectExperimentHyperParamsSelectedSectionFromRoute,\n    (hyperparams: IExperimentInfo['hyperparams'], section: string): ParamsItem[] => Object.entries(getOr({}, section, hyperparams)).map(([, value]) => value));\nexport const selectFullScreenChartIsOpen = createSelector(experimentOutput, (state): boolean => state.isFullScreenOpen);\nexport const selectFullScreenChartIsFetching = createSelector(experimentOutput, (state): boolean => state.fetchingFullScreenData);\nexport const selectFullScreenChartXtype = createSelector(experimentOutput, (state): ScalarKeyEnum => state.fullScreenXtype);\nexport const selectFullScreenChart = createSelector(selectFullScreenChartXtype,selectFullScreenChartIsFetching, experimentOutput, (axisType, isFetching ,state) => {\n    if (axisType === ScalarKeyEnum.IsoTime && state.fullScreenDetailedChart) {\n      return {\n        ...state.fullScreenDetailedChart,\n        data: state.fullScreenDetailedChart.data.reduce((graphAcc, graph) => {\n          graphAcc.push({...graph, x: graph.x.map(ts => new Date(ts) as any)});\n          return graphAcc;\n        }, [])\n      };\n    }\n    return state.fullScreenDetailedChart;\n  }\n);\n\nexport const selectExperimentInfoHistograms = createSelector(\n  selectSelectedSettingsxAxisType,\n  experimentOutput,\n  (axisType, state) => {\n    if (axisType === ScalarKeyEnum.IsoTime && state.metricsHistogramCharts) {\n      return Object.keys(state.metricsHistogramCharts).reduce((groupAcc, groupName) => {\n        const group = state.metricsHistogramCharts[groupName];\n        groupAcc[groupName] = Object.keys(group).reduce((graphAcc, graphName) => {\n          const graph = group[graphName];\n          graphAcc[graphName] = {...graph, x: graph.x.map(ts => new Date(ts))};\n          return graphAcc;\n        }, {});\n        return groupAcc;\n      }, {});\n    }\n    return state.metricsHistogramCharts;\n  });\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../../shared/shared.module';\nimport {ExperimentStatusIconLabelComponent} from './components/experiment-status-icon-label/experiment-status-icon-label.component';\nimport {ChangeProjectDialogComponent} from './components/change-project-dialog/change-project-dialog.component';\nimport {CommonExperimentConverterService} from './services/common-experiment-converter.service';\nimport {ExperimentSystemTagsComponent} from './components/experiments-system-tags/experiment-system-tags.component';\nimport {CloneDialogComponent} from './components/clone-dialog/clone-dialog.component';\nimport {SelectQueueModule} from './components/select-queue/select-queue.module';\nimport {FormsModule} from '@angular/forms';\nimport {AbortAllChildrenDialogComponent} from './components/abort-all-children-dialog/abort-all-children-dialog.component';\n\nconst DECLARATIONS = [ExperimentStatusIconLabelComponent, ExperimentSystemTagsComponent, ChangeProjectDialogComponent, CloneDialogComponent,AbortAllChildrenDialogComponent\n];\n\n@NgModule({\n    imports: [\n        SMSharedModule,\n        CommonModule,\n        SelectQueueModule,\n        FormsModule,\n    ],\n  declarations   : [...DECLARATIONS],\n  providers      : [CommonExperimentConverterService],\n  exports        : [...DECLARATIONS]\n})\nexport class CommonExperimentSharedModule {\n}\n","import {TaskStatusEnum} from '../../../business-logic/model/tasks/taskStatusEnum';\nimport {TaskTypeEnum} from '../../../business-logic/model/tasks/taskTypeEnum';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../features/experiments/shared/experiments.const';\n\nexport type ExperimentWizardMethodsEnum = 'create' | 'edit' | 'clone' | 'extend';\n\nexport const EXPERIMENTS_STORE_KEY = 'experiments';\n\nexport const WIZARD_METHODS = {\n  CREATE: 'create' as ExperimentWizardMethodsEnum,\n  CLONE : 'clone' as ExperimentWizardMethodsEnum,\n  EDIT  : 'edit' as ExperimentWizardMethodsEnum,\n  EXTEND: 'extend' as ExperimentWizardMethodsEnum,\n};\n\nexport type ExperimentsViewModesEnum = 'table' | 'tree';\nexport const EXPERIMENTS_VIEW_MODES = {\n  TABLE: 'table' as ExperimentsViewModesEnum,\n  TREE : 'tree' as ExperimentsViewModesEnum,\n};\nexport const HELP_TEXTS = {\n  MODEL_INPUT               : 'Here you see the an overview of the input models, its location and framework.',\n  MODEL_SOURCE              : 'The overview of the experiment, project directory, user and timestamp.',\n  MODEL_OUTPUT              : 'The new models evolved out of the experiment, provide a name for it.',\n  MODEL_NETWORK_DESIGN      : 'A visual representation of the network design: the layers and operations which connect them.\\n' +\n    'The analysis provides a report on the resources consumed by each layer in the experiment in memory and flops.\\n',\n  EXECUTION_SOURCE_CODE     : 'Here you define the code of the experiment. Specify the git or mercurial repository, working directory and path to the initial commit of the code to ensure that your experiment runs the right code.\\n',\n  EXECUTION_HYPER_PARAMETERS: 'These are the variation parameters defined in your code where you want to easily change values per experiment. The key is the name used in your code, and the value which it will insert.',\n  EXECUTION_OUTPUT          : 'The destination for the results of your experiment. Credentials are defined in your config file.',\n};\nexport const EXPERIMENTS_METRICS_TYPES = {\n  SCALAR: 'scalar',\n  PLOTS : 'plots'\n};\nexport const EXPERIMENTS_PAGE_SIZE = 15;\nexport const EXPERIMENT_TABLE_ONLY_FIELDS = ['id', 'type', 'name', 'started', 'completed', 'status', 'system_tags', 'user.name', 'last_metrics', 'last_update', 'active_duration'];\n\nexport const FILTERED_EXPERIMENTS_STATUS_OPTIONS = Object.entries(EXPERIMENTS_STATUS_LABELS)\n  .filter(([key, val]: [TaskStatusEnum, string]) => ![TaskStatusEnum.Closed].includes(key))\n  .map(([key, val]) => ({label: val, value: key}));\nexport const EXPERIMENTS_TYPES_LABELS = {\n  [TaskTypeEnum.Training]: 'Training',\n  [TaskTypeEnum.Testing] : 'Testing',\n};\nexport const EXPERIMENT_GRAPH_ID_PREFIX = 'metric_name_';\nexport const SINGLE_GRAPH_ID_PREFIX = 'single_graph_name_';\n\n// temp, will be taken from the generated code.\nexport type TaskTagsEnum = 'archived';\n\nexport const TASK_TAGS = {\n  HIDDEN: 'archived' as TaskTagsEnum\n};\n\nexport const LOG_BATCH_SIZE = 100;\n\nexport enum ThemeEnum {\n  Dark = 'dark',\n  Light = 'light'\n}\n\nexport enum CustomColumnMode {\n  Metrics = 'dark',\n  HyperParams = 'light'\n}\n\nexport const NONE_USER_TASK_TYPES = ['-dataset_import', '-annotation', '-annotation_manual'];\n","import {DIGITS_AFTER_DECIMAL} from '../../../features/experiments/shared/experiments.const';\n\nexport const convertStopToComplete = (tasks) => tasks.map(task => {\n  if (task.status === 'closed') {\n    task.status = 'completed';\n  }\n  return task;\n});\n\nexport const filterArchivedExperiments = (experiments, showArchived) => {\n  if (showArchived) {\n    return experiments.filter(ex => ex?.system_tags?.includes('archived'));\n  } else {\n    return experiments.filter(ex => !(ex?.system_tags?.includes('archived')));\n  }\n};\n\nexport const getRoundedNumber = (value: number) => Math.round(value * Math.pow(10, DIGITS_AFTER_DECIMAL)) / Math.pow(10, DIGITS_AFTER_DECIMAL);\n","<sm-dialog-template header=\"ABORT CHILD TASKS\" [iconClass]=\"'al-ico-abort-all'\">\n  <div *ngIf=\"shouldBeAbortedTasks!==null; else lookingForRunningTasks\">\n    <div class=\"message\" [ngPlural]=\"shouldBeAbortedTasks?.length\">\n      <ng-template ngPluralCase=\"=0\">Couldn't find any child running tasks</ng-template>\n      <ng-template ngPluralCase=\"=1\">this will abort one running child task</ng-template>\n      <ng-template ngPluralCase=\"other\">This will abort all {{shouldBeAbortedTasks?.length}} running child tasks</ng-template>\n    </div>\n  </div>\n  <ng-template #lookingForRunningTasks>\n    Looking for child running tasks...\n  </ng-template>\n  <div class=\"buttons\">\n    <button (click)=\"closeDialog(true)\" [disabled]=\"!(shouldBeAbortedTasks?.length>0)\"\n            class=\"btn btn-neon yes-button\">\n      ABORT\n    </button>\n    <button (click)=\"closeDialog(false)\" class=\"btn btn-outline-neon\">\n      CANCEL\n    </button>\n  </div>\n</sm-dialog-template>\n","import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Component, Inject} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {ISelectedExperiment} from '../../../../../features/experiments/shared/experiment-info.model';\nimport {ITableExperiment} from '../../common-experiment-model.model';\n\n@Component({\n  selector: 'sm-abort-all-children-dialog',\n  templateUrl: './abort-all-children-dialog.component.html',\n  styleUrls: ['./abort-all-children-dialog.component.scss']\n})\nexport class AbortAllChildrenDialogComponent {\n  public experiments: ISelectedExperiment[];\n  shouldBeAbortedTasks: ITableExperiment[] = null;\n\n\n  constructor(\n    private store: Store<any>, public dialogRef: MatDialogRef<AbortAllChildrenDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data: {\n      tasks: ISelectedExperiment[];\n      shouldBeAbortedTasks: ISelectedExperiment[];\n    }\n  ) {\n    this.experiments = data.tasks;\n    this.shouldBeAbortedTasks = data.shouldBeAbortedTasks;\n\n  }\n\n  closeDialog(isConfirmed) {\n    if (isConfirmed) {\n      this.dialogRef.close({shouldBeAbortedTasks: this.shouldBeAbortedTasks});\n    } else {\n      this.dialogRef.close(null);\n    }\n  }\n}\n","<sm-dialog-template header=\"MOVE TO PROJECT\" [iconClass]=\"'al-ico-move-to'\">\n  <div class=\"message\">\n    <b *ngIf=\"reference\" [smTooltip]=\"reference.length > 80 ? reference : undefined\">\n      {{reference.length > 80 ? (reference | slice:0:77) + '...' : reference }}\n    </b> will be moved\n    <span *ngIf=\"currentProjectInstance\"> from\n      <b\n        [smTooltip]=\"currentProjectInstance.name.length > 80 ? currentProjects[0] : undefined\">\n        {{currentProjectInstance.name.length > 80 ? (currentProjectInstance.name | slice:0:77) + '...' : currentProjectInstance.name}}\n      </b>\n    </span> to the selected project.\n  </div>\n  <ng-form #moveToForm=\"ngForm\" (submit)=\"closeDialog(true)\" class=\"light-theme\">\n    <mat-form-field class=\"w-100\" appearance=\"outline\">\n      <mat-label>Project</mat-label>\n      <input matInput\n             type=\"text\"\n             [matAutocomplete]=\"auto\"\n             [(ngModel)]=\"formData.project\"\n             name=\"projectName\"\n             placeholder=\"Search for project path\"\n             #projectInputRef\n             #projectInput=\"ngModel\"\n             required\n             minlength=\"3\"\n             (keydown.enter)=\"projectInput.control.markAsTouched() \"\n             smUniqueNameValidator\n             [existingNames]=\"readOnlyProjects$ | async\"\n             (click)=\"filterText && clear(); projectInputRef.blur(); projectInputRef.focus()\"\n      >\n      <span matSuffix *ngIf=\"(!isAutoCompleteOpen) && (!formData.project?.value) && formData.project\" class=\"creat-new-suffix\">(Create New)</span>\n      <i matSuffix [class]=\"'fa mr2 ' + (filterText ? 'fa-times pointer' :  'fa-search')\" (click)=\"filterText && clear(); projectInputRef.focus();\"\n         smClickStopPropagation></i>\n      <mat-error *ngIf=\"projectInput?.errors?.required\">Please provide a Project</mat-error>\n      <mat-error *ngIf=\"projectInput?.errors?.minlength\">Please provide a name longer than 3 characters</mat-error>\n      <mat-error *ngIf=\"projectInput?.errors?.uniqueName && !currentProjects.includes(formData.project?.value)\">Please provide a different name as this project name is taken as an Example project</mat-error>\n<!--      TODO: Need another validator for this val error-->\n      <mat-error *ngIf=\"formData.project && currentProjects.includes(formData.project.value)\">{{isMulti? (type | titlecase)+'s are' : (type| titlecase) + ' is'}} already in the selected project</mat-error>\n      <mat-autocomplete #auto=\"matAutocomplete\"\n                        name=\"ExperimentProject\"\n                        class=\"light-theme\"\n                        classList=\"light-theme\"\n                        (opened)=\"setIsAutoCompleteOpen(true)\"\n                        (closed)=\"setIsAutoCompleteOpen(false)\"\n                        [displayWith]=\"displayFn\"\n                        autoActiveFirstOption\n      >\n        <mat-option\n          class=\"item\"\n          *ngIf=\"filterText && isNewName\"\n          [value]=\"filterText\"\n        >\"{{filterText}}\" <span class=\"new\">(Create New)</span></mat-option>\n        <mat-option *ngFor=\"let project of filteredProjects | async\" [value]=\"project\" > <div [innerHTML]=\"project.label | highlightSearchText:projectInput.value\"></div></mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n  </ng-form>\n  <div class=\"buttons\">\n    <button [disabled]=\"moveToForm.invalid\" (click)=\"closeDialog(true)\" cdkFocusInitial\n            class=\"btn btn-neon yes-button\" #moveButton>\n      MOVE\n    </button>\n    <button (click)=\"closeDialog(false)\" class=\"btn btn-outline-neon\">\n      CANCEL\n    </button>\n\n  </div>\n</sm-dialog-template>\n","import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Project} from '../../../../../business-logic/model/projects/project';\nimport {Component, Inject, OnInit, ViewChild} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {asyncScheduler, Observable, Subscription} from 'rxjs';\nimport {selectRootProjects} from '../../../../core/reducers/projects.reducer';\nimport {getAllSystemProjects} from '../../../../core/actions/projects.actions';\nimport {map, startWith} from 'rxjs/operators';\nimport {isReadOnly} from '../../../../shared/utils/shared-utils';\nimport {isEqual} from 'lodash/fp';\nimport {NgForm} from '@angular/forms';\nimport {EntityTypeEnum} from '../../../../../shared/constants/non-common-consts';\n\n@Component({\n  selector: 'sm-change-project-dialog',\n  templateUrl: './change-project-dialog.component.html',\n  styleUrls: ['./change-project-dialog.component.scss']\n})\nexport class ChangeProjectDialogComponent implements OnInit {\n\n  public projects$: Observable<Project[]>;\n  public selectedProjectId: Project['id'];\n  public currentProjects: string[];\n  public projects: { label: string; value: string }[];\n  public filteredProjects: Observable<{ label: string; value: string }[]>;\n  public formData: { project: any } = {\n    project: null\n  };\n  public reference: string;\n  private projectsSub: Subscription;\n  filterText: string = '';\n  isNewName: boolean = false;\n\n  @ViewChild('moveToForm', {static: true}) moveToForm: NgForm;\n  public readOnlyProjects$: Observable<string[]>;\n  public isAutoCompleteOpen: boolean;\n  public currentProjectInstance: Project;\n  public isMulti: boolean;\n  type: EntityTypeEnum;\n\n  constructor(\n    private store: Store<any>, public dialogRef: MatDialogRef<ChangeProjectDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data: {\n      currentProjects: Project['id'] | Project['id'][];\n      defaultProject: Project['id'];\n      reference?: string | any[];\n      type: EntityTypeEnum;\n    }\n  ) {\n    this.selectedProjectId = data.defaultProject;\n    this.currentProjects = Array.isArray(data.currentProjects) ? data.currentProjects : [data.currentProjects];\n    this.isMulti = !!Array.isArray(data.reference);\n    this.type = data.type;\n    this.reference = Array.isArray(data.reference) ? `${data.reference.length} ${data.type}s` : data.reference;\n    this.readOnlyProjects$ = this.store.select(selectRootProjects)\n      .pipe(map(projects => projects.filter(project => isReadOnly(project)).map(project=> project.name).concat(this.currentProjectInstance?.name)));\n    this.projects$ = this.store.select(selectRootProjects).pipe(\n      map(projects => projects.filter((project) => !isReadOnly(project)))\n    );\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(getAllSystemProjects());\n    this.projectsSub = this.projects$.subscribe(projects => {\n      if (this.currentProjects.length === 1) {\n        this.currentProjectInstance = projects.find(proj => proj.id === this.currentProjects[0]);\n      }\n      const projectList = projects.map(project => ({value: project.id, label: project.name}));\n      if (!isEqual(projectList, this.projects)) {\n        this.projects = projectList;\n      }\n    });\n    setTimeout(() => {\n      if (!this.moveToForm?.controls['projectName']) {\n        return;\n      }\n      this.filteredProjects = this.moveToForm.controls['projectName'].valueChanges\n        .pipe(\n          map(value => typeof value === 'string' ? value : value.label),\n          map(value => this._filter(value)),\n          startWith(this.projects, asyncScheduler)\n        );\n    }, 1000);\n  }\n\n  ngOnDestroy(): void {\n    this.projectsSub.unsubscribe();\n  }\n\n  closeDialog(isConfirmed) {\n    if (isConfirmed) {\n      if (typeof this.formData.project === 'string') {\n        this.formData.project = {label: this.formData.project, value: ''};\n      }\n      this.dialogRef.close({id: this.formData.project.value, name: this.formData.project.label});\n    } else {\n      this.dialogRef.close(null);\n    }\n  }\n\n  private _filter(value: string) {\n    this.filterText = value;\n    const projectsNames = this.projects.map(project => project.label);\n    this.isNewName = !projectsNames.includes(value);\n    const filterValue = value.toLowerCase();\n    return this.projects.filter((project: any) => project.label.toLowerCase().includes(filterValue.toLowerCase()));\n  }\n\n  displayFn(project: any ): string {\n    return project && project.label ? project.label : project ;\n  }\n\n  clear() {\n    this.filterText = '';\n    this.formData.project = '';\n  }\n  setIsAutoCompleteOpen(focus: boolean) {\n    this.isAutoCompleteOpen = focus;\n  }\n}\n","<sm-dialog-template [iconClass]=\"'al-icon ' + (extend ? 'al-ico-extend' : 'al-ico-clone')\" [header]=\"header\">\n  <div *ngIf=\"!extend; else extendMessage\" class=\"reference\">\n    A draft copy of <b *ngIf=\"reference\"\n                       [smTooltip]=\"reference.length > 80 ? reference : undefined\">{{reference.length > 80 ? (reference | slice:0:77) + '...' : reference }}</b>\n    will be created.\n  </div>\n  <ng-template #extendMessage>\n    <div class=\"reference\">\n      A draft copy of <b *ngIf=\"reference\" [smTooltip]=\"reference.length > 80 ? reference : undefined\">{{reference.length > 80 ? (reference | slice:0:77) + '...' : reference }}</b> will be created,\n      with it's input model set to the output model of <b *ngIf=\"reference\">{{reference}}</b>.\n    </div>\n  </ng-template>\n  <form #cloneForm=\"ngForm\">\n    <div class=\"form-container\">\n      <mat-form-field class=\"w-100\"\n                      appearance=\"outline\"\n                      hideRequiredMarker=\"true\"\n                      (click)=\"filterText && clear(); projectInputRef.blur(); projectInputRef.focus()\">\n        <mat-label>Project</mat-label>\n        <input matInput type=\"text\"\n               autocomplete=\"off\"\n               (focusin)=\"clearOnFirstFocus($event);\"\n               [matAutocomplete]=\"auto\"\n               [(ngModel)]=\"formData.project\"\n               name=\"projectName\"\n               #projectInput=\"ngModel\"\n               #projectInputRef\n               required\n               minlength=\"3\"\n               (keydown.enter)=\"projectInput.control.markAsTouched()\"\n               smUniqueNameValidator\n               [existingNames]=\"readOnlyProjects$ | async\"\n        >\n        <span matSuffix *ngIf=\"(!isAutoCompleteOpen) && (!formData.project?.value) && formData.project\"\n              class=\"creat-new-suffix\">(Create New)</span>\n        <i matSuffix [class]=\"'fa mr2 ' + (filterText? 'fa-times pointer':'fa-search')\"\n           (click)=\"filterText && clear(); projectInputRef.focus()\"\n           smClickStopPropagation></i>\n        <mat-error *ngIf=\"projectInput?.errors?.required\">Please provide a Project</mat-error>\n        <mat-error *ngIf=\"projectInput?.errors?.minlength\">Please provide a name longer than 3 characters</mat-error>\n        <mat-error *ngIf=\"projectInput?.errors?.uniqueName\">Please provide a different name as this project name is\n          taken as an Example project\n        </mat-error>\n\n        <mat-autocomplete #auto=\"matAutocomplete\"\n                          name=\"ExperimentProject\"\n                          class=\"light-theme\"\n                          [displayWith]=\"displayFn\"\n                          (opened)=\"setIsAutoCompleteOpen(true)\"\n                          (closed)=\"setIsAutoCompleteOpen(false)\"\n                          autoActiveFirstOption\n        >\n          <mat-option\n            class=\"item\"\n            *ngIf=\"filterText && isNewName\"\n            [value]=\"filterText\"\n          >\"{{filterText}}\" <span class=\"new\">(Create New)</span></mat-option>\n          <mat-option *ngFor=\"let project of filteredProjects | async\" [value]=\"project\">{{project.label}}</mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\n        <mat-label>Name</mat-label>\n        <input\n          required\n          matInput\n          autocomplete=\"off\"\n          #experimentName=\"ngModel\"\n          name=\"ExperimentName\"\n          [(ngModel)]=\"formData.name\"\n        />\n        <mat-error *ngIf=\"experimentName?.errors?.required\">Please provide a name</mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"w-100\" appearance=\"outline\"\n                      hideRequiredMarker=\"true\">\n        <mat-label>Description</mat-label>\n        <textarea\n          name=\"ExperimentComment\"\n          matInput\n          [rows]=\"7\"\n          [(ngModel)]=\"formData.comment\"></textarea>\n      </mat-form-field>\n\n      <div class=\"buttons\">\n        <button cdkFocusInitial (click)=\"closeDialog(true)\" [disabled]=\"!cloneForm.valid\"\n                class=\"btn btn-neon yes-button\" #cloneButton>\n          {{extend ? 'EXTEND' : 'CLONE'}}\n        </button>\n        <button (click)=\"closeDialog(false)\" class=\"btn btn-outline-neon\">\n          CANCEL\n        </button>\n\n      </div>\n    </div>\n  </form>\n</sm-dialog-template>\n","import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Project} from '../../../../../business-logic/model/projects/project';\nimport {Component, ElementRef, Inject, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {NgForm} from '@angular/forms';\nimport {Observable, Subscription} from 'rxjs';\nimport {selectRootProjects} from '../../../../core/reducers/projects.reducer';\nimport {getAllSystemProjects} from '../../../../core/actions/projects.actions';\nimport {map} from 'rxjs/operators';\nimport {isReadOnly} from '../../../../shared/utils/shared-utils';\nimport {CloneForm} from '../../common-experiment-model.model';\nimport {isEqual} from 'lodash/fp';\n\n@Component({\n  selector: 'sm-clone-dialog',\n  templateUrl: './clone-dialog.component.html',\n  styleUrls: ['./clone-dialog.component.scss']\n})\nexport class CloneDialogComponent implements OnInit, OnDestroy {\n\n  CLONE_NAME_PREFIX;\n  public reference: string;\n  public header: string;\n  public type: string;\n  public projects$: Observable<Project[]>;\n  public formData = {\n    project: null,\n    name: null,\n    comment: null\n  } as CloneForm;\n\n  private readonly defaultProjectId: string;\n  private projectsSub: Subscription;\n  public projects: { label: string; value: string }[];\n\n  @ViewChild('cloneForm', {static: true}) cloneForm: NgForm;\n  @ViewChild('cloneButton', {static: true}) cloneButton: ElementRef;\n  public filteredProjects: Observable<{ label: string; value: string }[]>;\n  filterText: string = '';\n  isNewName: boolean = false;\n  isAutoCompleteOpen: boolean;\n  public readOnlyProjects$: Observable<string[]>;\n  public extend: boolean;\n\n  constructor(\n    private store: Store<any>,\n    @Inject(MAT_DIALOG_DATA) data: {\n      type: string;\n      defaultProject: string;\n      defaultName: string;\n      defaultComment: string;\n      extend: boolean;\n    },\n    public dialogRef: MatDialogRef<CloneDialogComponent>\n  ) {\n    this.readOnlyProjects$ = this.store.select(selectRootProjects)\n      .pipe(map(projects => projects.filter(project => isReadOnly(project)).map(project => project.name)));\n    this.projects$ = this.store.select(selectRootProjects)\n      .pipe(map(projects => projects.filter(project => !isReadOnly(project))));\n    this.defaultProjectId = data.defaultProject;\n    this.header = `${data.extend ? 'Extend' : 'Clone'} ${data.type}`;\n    this.CLONE_NAME_PREFIX = data.extend ? '' : 'Clone Of ';\n    this.type = data.type.toLowerCase();\n    this.reference = data.defaultName;\n    this.extend = data.extend;\n    this.formData.name = this.CLONE_NAME_PREFIX;\n    setTimeout(() => {\n      this.formData = {\n        ...this.formData,\n        name: this.extend ? '' : this.CLONE_NAME_PREFIX + data.defaultName,\n        comment: data.defaultComment || '',\n      };\n    });\n  }\n\n\n  ngOnDestroy(): void {\n    this.projectsSub.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(getAllSystemProjects());\n    this.projectsSub = this.projects$.subscribe(projects => {\n      const projectList = projects.map(project => ({value: project.id, label: project.name}));\n      if (!isEqual(projectList, this.projects)) {\n        this.projects = projectList;\n        const defaultProject = this.projects.find(project => project.value === this.defaultProjectId);\n        setTimeout(() => {\n          this.formData.project = defaultProject ? defaultProject : projects[0] ? this.projects[0] : null;\n          this.filterText = this.formData.project?.label;\n        }, 0);\n      }\n    });\n    setTimeout(() => {\n      if (!this.cloneForm?.controls['projectName']) {\n        return;\n      }\n      this.filteredProjects = this.cloneForm.controls['projectName'].valueChanges\n        .pipe(\n          map(value => typeof value === 'string' ? value : value?.label || ''),\n          map(value => this._filter(value))\n        );\n    }, 1000);\n\n  }\n\n  displayFn(project: any ): string {\n    return project && project.label ? project.label : project ;\n  }\n\n  private _filter(value: string) {\n    this.filterText = value;\n    const projectsNames = this.projects.map(project => project.label);\n    this.isNewName = !projectsNames.includes(value);\n    const filterValue = value.toLowerCase();\n    return this.projects.filter((project: any) => project.label.toLowerCase().includes(filterValue.toLowerCase()));\n  }\n\n  closeDialog(isConfirmed) {\n    if (isConfirmed) {\n      if (typeof this.formData.project === 'string') {\n        this.formData.project = {label: this.formData.project, value: ''};\n      }\n      this.dialogRef.close(this.formData);\n    } else {\n      this.dialogRef.close(null);\n    }\n  }\n\n  clear() {\n    this.filterText = '';\n    this.formData.project = '';\n  }\n\n  clearOnFirstFocus($event: FocusEvent) {\n    if (this.cloneForm.controls['projectName'].untouched) {\n      this.clear();\n    }\n  }\n\n  setIsAutoCompleteOpen(focus: boolean) {\n    this.isAutoCompleteOpen = focus;\n  }\n}\n","import {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Store} from '@ngrx/store';\nimport {get} from 'lodash/fp';\nimport {filter, take, withLatestFrom} from 'rxjs/operators';\nimport {ICONS} from '../../../../constants';\nimport {Queue} from '../../../../../business-logic/model/queues/queue';\nimport {TaskStatusEnum} from '../../../../../business-logic/model/tasks/taskStatusEnum';\nimport {TaskTypeEnum} from '../../../../../business-logic/model/tasks/taskTypeEnum';\nimport {BlTasksService} from '../../../../../business-logic/services/tasks.service';\nimport {IExperimentInfoState} from '../../../../../features/experiments/reducers/experiment-info.reducer';\nimport {CloneForm} from '../../common-experiment-model.model';\nimport {selectRouterParams} from '../../../../core/reducers/router-reducer';\nimport {SmSyncStateSelectorService} from '../../../../core/services/sync-state-selector.service';\nimport {ConfirmDialogComponent} from '../../../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {htmlTextShorte, isReadOnly} from '../../../../shared/utils/shared-utils';\nimport * as commonMenuActions from '../../../actions/common-experiments-menu.actions';\nimport {archiveSelectedExperiments, getAllTasksChildren} from '../../../actions/common-experiments-menu.actions';\nimport {ChangeProjectDialogComponent} from '../change-project-dialog/change-project-dialog.component';\nimport {CloneDialogComponent} from '../clone-dialog/clone-dialog.component';\nimport {SelectQueueComponent} from '../select-queue/select-queue.component';\nimport {ISelectedExperiment} from '../../../../../features/experiments/shared/experiment-info.model';\nimport {GetQueuesForEnqueue} from '../select-queue/select-queue.actions';\nimport {selectQueuesList} from '../select-queue/select-queue.reducer';\nimport {isDevelopment} from '../../../../../features/experiments/shared/experiments.utils';\nimport {Component, ElementRef, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {BaseContextMenuComponent} from '../../../../shared/components/base-context-menu/base-context-menu.component';\nimport * as experimentsActions from '../../../actions/common-experiments-view.actions';\nimport {ShareDialogComponent} from '../../../../shared/ui-components/overlay/share-dialog/share-dialog.component';\nimport {ConfigurationService} from '../../../../shared/services/configuration.service';\nimport {selectNeverShowPopups} from '../../../../core/reducers/view.reducer';\nimport {CommonDeleteDialogComponent} from '../../../../shared/entity-page/entity-delete/common-delete-dialog.component';\nimport {EntityTypeEnum} from '../../../../../shared/constants/non-common-consts';\nimport {DeactivateEdit, SetExperiment} from '../../../actions/common-experiments-info.actions';\nimport {neverShowPopupAgain} from '../../../../core/actions/layout.actions';\nimport {\n  selectionDisabledAbort,\n  selectionDisabledAbortAllChildren,\n  selectionDisabledArchive,\n  selectionDisabledDequeue,\n  selectionDisabledEnqueue,\n  selectionDisabledMoveTo,\n  selectionDisabledPublishExperiments,\n  selectionDisabledReset\n} from '../../../../shared/entity-page/items.utils';\nimport {WelcomeMessageComponent} from '../../../../dashboard/dumb/welcome-message/welcome-message.component';\nimport {AbortAllChildrenDialogComponent} from '../abort-all-children-dialog/abort-all-children-dialog.component';\nimport {selectAllRunningTasksChildrenForAbort} from '../../../reducers';\n\n\n@Component({\n  selector: 'sm-experiment-menu',\n  templateUrl: './experiment-menu.component.html',\n  styleUrls: ['./experiment-menu.component.scss']\n})\nexport class ExperimentMenuComponent extends BaseContextMenuComponent implements OnInit {\n  readonly ICONS = ICONS;\n  readonly TaskStatusEnum = TaskStatusEnum;\n  readonly TaskTypeEnum = TaskTypeEnum;\n\n  public open: boolean;\n  public isExample: boolean;\n  public isArchive: boolean;\n  public selectionHasExamples: boolean;\n  protected _experiment: ISelectedExperiment = null;\n  //public selectedExperiment\n  private _selectedExperiments: ISelectedExperiment[];\n  @Input() selectedExperiment: ISelectedExperiment;\n  @Input() isSharedAndNotOwner = false;\n  @Input() tagsFilterByProject: boolean;\n  @Input() projectTags: string[];\n  @Input() companyTags: string[];\n  @Input() numSelected = 0;\n  @Input() activateFromMenuButton = true;\n\n  @Input() set experiment(experiment: ISelectedExperiment) {\n    this._experiment = experiment;\n    this.isExample = isReadOnly(experiment);\n    this.isArchive = experiment?.system_tags?.includes('archived');\n  }\n\n\n  @Output() tagSelected = new EventEmitter<string>();\n  @Input() neverShowPopups;\n  @Input() minimizedView: boolean;\n\n  @Input() set selectedExperiments(experiments: ISelectedExperiment[]) {\n    this._selectedExperiments = experiments;\n    this.selectionHasExamples = experiments && experiments.some((exp => isReadOnly(exp)));\n  }\n\n  get selectedExperiments(): ISelectedExperiment[] {\n    return this._selectedExperiments;\n  }\n\n  get experiment() {\n    return this._experiment;\n  }\n\n  public isCommunity: boolean;\n\n  constructor(\n    protected blTaskService: BlTasksService,\n    protected dialog: MatDialog,\n    protected router: Router,\n    protected store: Store<IExperimentInfoState>,\n    protected syncSelector: SmSyncStateSelectorService,\n    protected eRef: ElementRef,\n    protected configService: ConfigurationService,\n    protected route?: ActivatedRoute\n  ) {\n    super(store, eRef);\n  }\n\n\n  ngOnInit(): void {\n    this.isCommunity = this.configService.getStaticEnvironment().communityServer;\n  }\n\n  public getProjectId() {\n    const params = this.syncSelector.selectSync(selectRouterParams);\n    return get('projectId', params);\n  }\n\n  public restoreArchive() {\n    // info header case\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledArchive(this.selectedExperiments).selectedFiltered : [this._experiment];\n\n    if (selectedExperiments[0].system_tags?.includes('archived')) {\n      this.store.dispatch(commonMenuActions.restoreSelectedExperiments({selectedEntities: selectedExperiments}));\n    } else {\n      const showShareWarningDialog = selectedExperiments.find(item => item?.system_tags.includes('shared')) &&\n        !this.syncSelector.selectSync(selectNeverShowPopups)?.includes('archive-shared-task');\n      if (showShareWarningDialog) {\n        this.showConfirmArchiveExperiments(this.store, this.dialog, selectedExperiments);\n      } else {\n        this.store.dispatch(commonMenuActions.archiveSelectedExperiments({selectedEntities: selectedExperiments}));\n      }\n    }\n  }\n\n  toggleFullScreen(showFullScreen: boolean) {\n    if (showFullScreen) {\n      if (!this.selectedExperiment) {\n        this.router.navigateByUrl(`projects/${this.getProjectId()}/experiments/${this._experiment.id}/output/execution`);\n      } else {\n        if (window.location.pathname.includes('info-output')) {\n          const resultsPath = window.location.pathname.split('info-output/')[1];\n          this.router.navigateByUrl(`projects/${this.getProjectId()}/experiments/${this._experiment.id}/output/${resultsPath}`);\n        } else {\n          const parts = this.router.url.split('/');\n          parts.splice(5, 0, 'output');\n          this.router.navigateByUrl(parts.join('/'));\n        }\n      }\n    } else {\n      const part = this.route.firstChild.routeConfig.path;\n      if (['log', 'metrics/scalar', 'metrics/plots', 'debugImages'].includes(part)) {\n        this.router.navigateByUrl(`projects/${this.getProjectId()}/experiments/${this._experiment.id}/info-output/${part}`);\n      } else {\n        this.router.navigateByUrl(`projects/${this.getProjectId()}/experiments/${this._experiment.id}/${part}`);\n      }\n    }\n  }\n\n  enqueuePopup() {\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledEnqueue(this.selectedExperiments).selectedFiltered : [this._experiment];\n\n    const selectQueueDialog: MatDialogRef<SelectQueueComponent, { confirmed: boolean; queue: Queue }> =\n      this.dialog.open(SelectQueueComponent, {\n        data: {taskIds: selectedExperiments.map(exp => exp.id), reference: selectedExperiments[0].name}\n      });\n\n    selectQueueDialog.afterClosed().pipe(withLatestFrom(this.store.select(selectNeverShowPopups))).subscribe(([res, neverShowAgainPopups]) => {\n      if (res && res.confirmed) {\n        this.enqueueExperiment(res.queue, selectedExperiments);\n        this.blTaskService.setPreviouslyUsedQueue(res.queue);\n        if (res.queue.workers.length === 0 && (!neverShowAgainPopups.includes('orphanedQueue'))) {\n          const orphanedQueueDialog: MatDialogRef<WelcomeMessageComponent> = this.dialog.open(WelcomeMessageComponent, {\n            data: {\n              queue: res.queue,\n              step: 2\n            }\n          });\n          orphanedQueueDialog.afterClosed().subscribe((doNotShowAgain) => {\n            if (doNotShowAgain) {\n              this.store.dispatch(neverShowPopupAgain({popupId: 'orphanedQueue'}));\n            }\n          });\n        }\n      }\n    });\n  }\n\n  dequeuePopup() {\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledDequeue(this.selectedExperiments).selectedFiltered : [this._experiment];\n\n    const getBody = (queueName: string) => `<b>${selectedExperiments.length === 1 ? htmlTextShorte(this._experiment.name) : selectedExperiments.length + 'experiments'}</b> will be removed from the ${queueName ? '<b>' + queueName + '</b> ' : ''}execution queue.`;\n    this.store.dispatch(new GetQueuesForEnqueue());\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'Dequeue Experiment',\n        body: getBody(null),\n        yes: 'Dequeue',\n        no: 'Cancel',\n        iconClass: 'i-alert',\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.dequeueExperiment(selectedExperiments);\n      }\n    });\n    this.store.select(selectQueuesList)\n      .pipe(filter(qs => !!qs), take(2))\n      .subscribe((queues: Queue[]) => {\n        const queue = queues.find(q => q.entries.some(entry => (entry.task as any).id === this._experiment.id));\n        if (confirmDialogRef.componentInstance && queue) {\n          confirmDialogRef.componentInstance.body = getBody(queue.name);\n        }\n      });\n\n  }\n\n  private enqueueExperiment(queue, selectedExperiments) {\n    this.store.dispatch(commonMenuActions.enqueueClicked({selectedEntities: selectedExperiments, queue}));\n  }\n\n  private dequeueExperiment(selectedExperiments) {\n    this.store.dispatch(commonMenuActions.dequeueClicked({selectedEntities: selectedExperiments}));\n  }\n\n  public enqueueDequeueDisabled() {\n    return !(this.blTaskService.canEnqueue(this._experiment as any) || this.blTaskService.canDequeue(this._experiment as any));\n  }\n\n  public resetPopup() {\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledReset(this.selectedExperiments).selectedFiltered : [this._experiment];\n    const devWarning: boolean = selectedExperiments.some(exp => isDevelopment(exp));\n    // const devWarning: boolean = isDevelopment(this._experiment);\n    const body = `<b>${selectedExperiments.length === 1 ? htmlTextShorte(selectedExperiments[0]?.name || '') : selectedExperiments.length + ' experiments'}</b>\nwill be reset.<br>\nResetting an experiment deletes all of its data, including statistics, debug samples, logs, and temporary models.` +\n      (devWarning ? `<br><br><b>Note: resetting a DEV experiment</b> Any subsequent runs of the experiment will overwrite any changes made to it in the Web-App.<br>\nTo avoid this, <b>clone the experiment</b> and work with the cloned experiment.` : '');\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'RESET EXPERIMENTS',\n        body,\n        yes: 'Reset',\n        no: 'Cancel',\n        iconClass: 'i-alert',\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.resetExperiment(selectedExperiments);\n      }\n    });\n  }\n\n  private resetExperiment(selectedExperiments) {\n    this.store.dispatch(commonMenuActions.resetClicked({selectedEntities: selectedExperiments}));\n  }\n\n  public stopPopup() {\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledAbort(this.selectedExperiments).selectedFiltered : [this._experiment];\n\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'ABORT',\n        body: `<b>${selectedExperiments.length === 1 ? htmlTextShorte(selectedExperiments[0]?.name || '') : selectedExperiments.length + ' experiments'}</b>\n will be stopped and additional model updates will not be allowed.<br>\n                `,\n        yes: 'Abort',\n        no: 'Cancel',\n        iconClass: 'al-icon al-ico-archive al-color',\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.stopExperiment(selectedExperiments);\n      }\n    });\n  }\n\n  stopExperiment(selectedExperiments) {\n    this.store.dispatch(commonMenuActions.stopClicked({selectedEntities: selectedExperiments}));\n  }\n\n\n  public publishPopup() {\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledPublishExperiments(this.selectedExperiments).selectedFiltered : [this._experiment];\n    const publishPopupBody = `<b>${selectedExperiments.length === 1 ? htmlTextShorte(selectedExperiments[0]?.name || '') : selectedExperiments.length + ' experiments'}</b>\n status will be set to Published.<br><br>\n Published experiments are read-only and cannot be reset. The experiment's output, including models will also be published so that other experiments can use it.`;\n\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'PUBLISH EXPERIMENTS',\n        body: publishPopupBody,\n        yes: 'Publish',\n        no: 'Cancel',\n        iconClass: 'd-block fas fa-cloud-upload-alt fa-7x w-auto',\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.publishExperiment(selectedExperiments);\n      }\n    });\n  }\n\n  publishExperiment(selectedExperiments) {\n    this.store.dispatch(commonMenuActions.publishClicked({selectedEntities: selectedExperiments}));\n  }\n\n  shareExperimentPopup() {\n    this.dialog.open(ShareDialogComponent, {\n      data: {\n        title: 'SHARE EXPERIMENT PUBLICLY',\n        link: `${window.location.origin}/projects/${this._experiment.project.id}/experiments/${this._experiment.id}/output/execution`,\n        alreadyShared: this._experiment?.system_tags.includes('shared'),\n        task: this._experiment?.id\n      }\n    });\n  }\n\n  public moveToProjectPopup() {\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledMoveTo(this.selectedExperiments).selectedFiltered : [this._experiment];\n    const currentProjects = Array.from(new Set(selectedExperiments.map(exp => exp.project?.id).filter(p => p)));\n    const dialog = this.dialog.open(ChangeProjectDialogComponent, {\n      data: {\n        currentProjects: currentProjects.length > 0 ? currentProjects : [this.getProjectId()],\n        defaultProject: get('project.id', this._experiment),\n        reference: selectedExperiments.length > 1 ? selectedExperiments : selectedExperiments[0]?.name,\n        type: 'experiment'\n      }\n    });\n    dialog.afterClosed().pipe(filter(project => !!project)).subscribe(project => {\n      this.moveToProjectClicked(project, selectedExperiments);\n    });\n  }\n\n  moveToProjectClicked(project, selectedExperiments) {\n    this.store.dispatch(commonMenuActions.changeProjectRequested({\n      selectedEntities: selectedExperiments,\n      project: project\n    }));\n  }\n\n  viewWorkerClicked() {\n    this.router.navigateByUrl('/workers-and-queues/workers');\n  }\n\n  manageQueueClicked() {\n    this.store.dispatch(commonMenuActions.navigateToQueue({experimentId: this._experiment?.id}));\n  }\n\n  clonePopup() {\n    const confirmDialogRef = this.dialog.open(CloneDialogComponent, {\n      data: {\n        type: 'Experiment',\n        defaultProject: this._experiment?.project?.id,\n        defaultName: this._experiment.name\n      }\n    });\n\n    confirmDialogRef.afterClosed().pipe(\n      filter(res => !!res),\n      take(1)\n    ).subscribe((res: CloneForm) => {\n      this.cloneExperiment(res);\n    });\n  }\n\n  cloneExperiment(cloneData) {\n    this.store.dispatch(new commonMenuActions.CloneExperimentClicked({\n      originExperiment: this._experiment,\n      cloneData: {\n        ...cloneData,\n        project: cloneData.project.value,\n        newProjectName: cloneData.project.value ? undefined : cloneData.project.label\n      }\n    }));\n  }\n\n  deleteExperimentPopup() {\n    const confirmDialogRef = this.dialog.open(CommonDeleteDialogComponent, {\n      data: {\n        entity: this._experiment,\n        numSelected: this.numSelected,\n        entityType: EntityTypeEnum.experiment,\n        useCurrentEntity: this.activateFromMenuButton\n      },\n      width: '600px',\n      disableClose: true\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        this.store.dispatch(experimentsActions.setSelectedExperiments({experiments: []}));\n        this.store.dispatch(new SetExperiment(null));\n        this.store.dispatch(experimentsActions.getExperiments());\n        this.store.dispatch(new DeactivateEdit());\n        if (this.activateFromMenuButton || this.selectedExperiments.map(e => e.id).includes(this.selectedExperiment?.id)) {\n          window.setTimeout(() => this.router.navigate([`projects/${this.getProjectId()}/experiments`], {queryParamsHandling: 'preserve'}));\n        }\n      }\n    });\n  }\n\n  showConfirmArchiveExperiments(store: Store, dialog: MatDialog, selectedExperiments: ISelectedExperiment[]): void {\n    const confirmDialogRef = dialog.open(ConfirmDialogComponent, {\n      data: {\n        title: 'ARCHIVE A PUBLICLY SHARED TASK',\n        body: `This task is accessible through a public access link.\n            Archiving will disable public access`,\n        yes: 'OK',\n        no: 'Cancel',\n        iconClass: 'al-icon al-ico-archive al-color',\n        showNeverShowAgain: true\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe((confirmed) => {\n      if (confirmed) {\n        store.dispatch(archiveSelectedExperiments({selectedEntities: selectedExperiments}));\n        if (confirmed.neverShowAgain) {\n          store.dispatch(neverShowPopupAgain({popupId: 'archive-shared-task'}));\n        }\n      }\n    });\n  }\n\n\n  setMenuOpenStatus(status: boolean) {\n    this.open = status;\n  }\n\n\n  stopAllChildrenPopup() {\n    let stopAllChildrenPopup;\n    const selectedExperiments = this.selectedExperiments ? selectionDisabledAbortAllChildren(this.selectedExperiments).selectedFiltered : [this._experiment];\n    const shouldBeAbortedTasksSub = this.store.select(selectAllRunningTasksChildrenForAbort).subscribe((shouldBeAbortedTasks) => {\n      if (!!shouldBeAbortedTasks) {\n        stopAllChildrenPopup = this.dialog.open(AbortAllChildrenDialogComponent, {\n          data: {tasks: selectedExperiments, shouldBeAbortedTasks}\n        });\n        stopAllChildrenPopup.afterClosed().subscribe((confirmed) => {\n          if (confirmed) {\n            this.store.dispatch(commonMenuActions.stopClicked({selectedEntities: confirmed.shouldBeAbortedTasks}));\n          }\n          shouldBeAbortedTasksSub.unsubscribe();\n          this.store.dispatch(commonMenuActions.setAllTasksChildren({experiments: null}));\n        });\n      }\n    });\n    this.store.dispatch(getAllTasksChildren({experiments: selectedExperiments.map(exp => exp.id)}));\n  }\n}\n","<div [ngClass]=\"showIcon && status\" class=\"d-flex align-items-center w-100\">\n  <i *ngIf=\"showIcon\" class=\"icon xs\" [class]=\"'i-'+ status\" ></i>\n  <div class=\" ellipsis label\" *ngIf=\"showLabel\">{{EXPERIMENTS_STATUS_LABELS[status]}}</div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../../../features/experiments/shared/experiments.const';\n\n@Component({\n  selector   : 'sm-experiment-status-icon-label',\n  templateUrl: './experiment-status-icon-label.component.html',\n  styleUrls  : ['./experiment-status-icon-label.component.scss']\n})\nexport class ExperimentStatusIconLabelComponent implements OnInit {\n  @Input() showLabel               = true;\n  @Input() showIcon                = true;\n  @Input() status;\n  @Input() type;\n  public EXPERIMENTS_STATUS_LABELS = EXPERIMENTS_STATUS_LABELS;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Action} from '@ngrx/store';\nimport {Queue} from '../../../../../business-logic/model/queues/queue';\nimport {Task} from '../../../../../business-logic/model/tasks/task';\n\nexport const SELECT_QUEUE_PREFIX = 'SELECT_QUEUE_';\n\nexport const GET_QUEUES_FOR_ENQUEUE = SELECT_QUEUE_PREFIX + 'GET_QUEUES_FOR_ENQUEUE';\nexport const GET_TASK_FOR_ENQUEUE = SELECT_QUEUE_PREFIX + 'GET_TASK_FOR_ENQUEUE';\nexport const SET_TASK_FOR_ENQUEUE = SELECT_QUEUE_PREFIX + 'SET_TASK_FOR_ENQUEUE';\nexport const SET_QUEUES_FOR_ENQUEUE = SELECT_QUEUE_PREFIX + 'SET_QUEUES_FOR_ENQUEUE';\n\nexport class GetQueuesForEnqueue implements Action {\n  readonly type = GET_QUEUES_FOR_ENQUEUE;\n}\n\nexport class GetTaskForEnqueue implements Action {\n  readonly type = GET_TASK_FOR_ENQUEUE;\n  public payload: { taskIds: string[] };\n\n  constructor(taskIds: string[]) {\n    this.payload = {taskIds};\n  }\n}\n\nexport class SetTaskForEnqueue implements Action {\n  readonly type = SET_TASK_FOR_ENQUEUE;\n  public payload: { tasks: Task[] };\n\n  constructor(tasks: Task[]) {\n    this.payload = {tasks};\n  }\n}\n\n\nexport class SetQueuesForEnqueue implements Action {\n  readonly type = SET_QUEUES_FOR_ENQUEUE;\n  public payload: { queues: Array<Queue> };\n\n  constructor(queues: Array<Queue>) {\n    this.payload = {queues};\n  }\n}\n","<sm-dialog-template [closeOnX]=\"false\" (xClicked)=\"closeDialog(false)\" header=\"Enqueue Experiment\" iconClass=\"al-color blue-300 al-ico-enqueue\">\n  <ng-form #enqueueForm=\"ngForm\" class=\"d-flex flex-column light-theme\">\n    <p *ngIf=\"reference\">\n      <b [smTooltip]=\"reference.length > 80 ? reference : undefined\">{{reference.length > 80 ? (reference | slice:0:77) + '...' : reference }}</b>\n      will be scheduled for execution through the selected queue.\n    </p>\n\n    <p class=\"mt-4 mb-4 text-danger enqueue-warning\" *ngIf=\"enqueueWarning$ | async\">\n      <b>Note: Some experiments seems to not contain any executable code.\n        <br>If enqueued to run, they might produce no results.</b>\n    </p>\n    <mat-form-field appearance=\"outline\" class=\"w-100\">\n      <mat-label>Queue</mat-label>\n      <mat-select [(ngModel)]=\"selectedQueue\" name=\"queue\" panelClass=\"light-theme\">\n        <mat-option *ngFor=\"let queue of queues\" [value]=\"queue\">\n          {{queue.name}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </ng-form>\n  <div class=\"buttons\">\n    <button (click)=\"closeDialog(false)\" class=\"btn btn-outline-neon\">\n      CANCEL\n    </button>\n    <button (click)=\"closeDialog(true)\" class=\"btn btn-neon yes-button\" [disabled]=\"enqueueForm.invalid\">\n      ENQUEUE\n    </button>\n  </div>\n</sm-dialog-template>\n","import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {GetQueuesForEnqueue, GetTaskForEnqueue, SetTaskForEnqueue} from './select-queue.actions';\nimport {selectQueuesList, selectTaskForEnqueue} from './select-queue.reducer';\nimport {Queue} from '../../../../../business-logic/model/queues/queue';\nimport {ConfirmDialogComponent} from '../../../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {BlTasksService} from '../../../../../business-logic/services/tasks.service';\nimport {filter} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\n\n@Component({\n  selector: 'sm-select-queue',\n  templateUrl: './select-queue.component.html',\n  styleUrls: ['./select-queue.component.scss']\n})\nexport class SelectQueueComponent implements OnInit, OnDestroy {\n  public queues: Array<Queue>;\n  public selectedQueue: Queue;\n  public queues$ = this.store.select(selectQueuesList);\n  public tasks$ = this.store.select(selectTaskForEnqueue);\n  public enqueueWarning$ = this.tasks$.pipe(filter(tasks => tasks?.some(task => !(task && task.script && (task.script.diff || (task.script.repository && task.script.entry_point))))));\n  public reference: string;\n  private queuesSub: Subscription;\n\n  constructor(\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>,\n    private store: Store<any>, private blTaskService: BlTasksService,\n    @Inject(MAT_DIALOG_DATA) public data: {\n      taskIds?: string[];\n      reference?: string;\n    }\n  ) {\n\n    if (data && data.taskIds?.length > 0) {\n      this.store.dispatch(new GetTaskForEnqueue(data.taskIds));\n      this.reference = data.taskIds.length < 2 ?  data.reference : `${data.taskIds.length} experiments `;\n    }\n    this.queuesSub = this.queues$.subscribe(queues => {\n      if (queues) {\n        this.queues = queues;\n        this.selectedQueue = this.blTaskService.getDefaultQueue(this.queues) || queues[0];\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new GetQueuesForEnqueue());\n  }\n\n  closeDialog(confirmed) {\n    this.dialogRef.close({confirmed, queue: this.selectedQueue});\n  }\n\n  ngOnDestroy(): void {\n    this.queuesSub.unsubscribe();\n    this.store.dispatch(new SetTaskForEnqueue(null));\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {mergeMap, map, switchMap} from 'rxjs/operators';\nimport {GetQueuesForEnqueue, GET_QUEUES_FOR_ENQUEUE, SetQueuesForEnqueue, GET_TASK_FOR_ENQUEUE, GetTaskForEnqueue, SetTaskForEnqueue} from './select-queue.actions';\nimport {ApiQueuesService} from '../../../../../business-logic/api-services/queues.service';\nimport {activeLoader} from '../../../../core/actions/layout.actions';\nimport {ApiTasksService} from '../../../../../business-logic/api-services/tasks.service';\n\n@Injectable()\nexport class SelectQueueEffects {\n\n  constructor(private actions$: Actions, private store: Store<any>, private apiQueues: ApiQueuesService, private tasksApi: ApiTasksService) {\n  }\n\n  @Effect()\n  activeLoader = this.actions$.pipe(\n    ofType(),\n    map((action: any) => activeLoader(action.type))\n  );\n\n  @Effect()\n  getQueuesForEnqueue$ = this.actions$.pipe(\n    ofType<GetQueuesForEnqueue>(GET_QUEUES_FOR_ENQUEUE),\n    switchMap(action => this.apiQueues.queuesGetAllEx({}).pipe(\n      mergeMap((res) => [new SetQueuesForEnqueue(res.queues)])\n      )\n    ));\n\n  @Effect()\n  getTaskForEnqueue$ = this.actions$.pipe(\n    ofType<GetTaskForEnqueue>(GET_TASK_FOR_ENQUEUE),\n    switchMap(action => this.tasksApi.tasksGetAllEx({id: action.payload.taskIds, only_fields: ['status', 'script.repository', 'script.entry_point', 'script.diff']}).pipe(\n      mergeMap((res) => [new SetTaskForEnqueue(res.tasks)])\n      )\n    ));\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {EffectsModule} from '@ngrx/effects';\nimport {StoreModule} from '@ngrx/store';\nimport {SelectQueueComponent} from './select-queue.component';\nimport {SelectQueueEffects} from './select-queue.effects';\nimport {selectQueueReducer} from './select-queue.reducer';\nimport {SMSharedModule} from '../../../../shared/shared.module';\nimport {FormsModule} from \"@angular/forms\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        SMSharedModule,\n        EffectsModule.forFeature([SelectQueueEffects]),\n        StoreModule.forFeature('selectQueue', selectQueueReducer),\n        FormsModule\n    ],\n  providers      : [],\n  declarations   : [SelectQueueComponent],\n  exports        : [SelectQueueComponent]\n})\nexport class SelectQueueModule {\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {SET_QUEUES_FOR_ENQUEUE, SET_TASK_FOR_ENQUEUE} from './select-queue.actions';\nimport {Queue} from '../../../../../business-logic/model/queues/queue';\nimport {Task} from '../../../../../business-logic/model/tasks/task';\n\nexport interface ISelectQueueState {\n  queues: Array<Queue>;\n  tasks: Task[];\n}\n\nconst selectQueueInitState: ISelectQueueState = {\n  queues: null,\n  tasks: null\n};\n\n\nexport function selectQueueReducer<ActionReducer>(state: ISelectQueueState = selectQueueInitState, action): ISelectQueueState {\n  switch (action.type) {\n    case SET_QUEUES_FOR_ENQUEUE:\n      return {...state, queues: action.payload.queues};\n    case SET_TASK_FOR_ENQUEUE:\n      return {...state, tasks: action.payload.task};\n    default:\n      return state;\n  }\n}\n\n\nexport const queues = createFeatureSelector<ISelectQueueState>('selectQueue');\nexport const selectQueuesList = createSelector(queues, (state) => state ? state.queues : []);\nexport const selectTaskForEnqueue = createSelector(queues, (state) => state ? state.tasks : []);\n\n","import {Injectable} from '@angular/core';\nimport {IExperimentInfo, ISelectedExperiment} from '../../../../features/experiments/shared/experiment-info.model';\nimport {TasksEditRequest} from '../../../../business-logic/model/tasks/tasksEditRequest';\nimport {get, getOr, isEqual} from 'lodash/fp';\nimport {IExecutionForm} from '../../../../features/experiments/shared/experiment-execution.model';\nimport {Execution} from '../../../../business-logic/model/tasks/execution';\nimport {IExperimentModelInfo} from '../common-experiment-model.model';\n\n\n@Injectable()\nexport class CommonExperimentConverterService {\n\n  constructor() {\n  }\n\n  convertCommonExperiment(experimentInfo: IExperimentInfo, selectedExperiment: IExperimentInfo, experimentInfoBeforeChange: IExperimentInfo): TasksEditRequest {\n    const convertedExperiment: TasksEditRequest = {\n      task: selectedExperiment.id,\n      type: selectedExperiment.type,\n    };\n    if (!isEqual(experimentInfo.name, experimentInfoBeforeChange.name)) {\n      convertedExperiment.name = experimentInfo.name;\n    }\n    if (!isEqual(experimentInfo.comment, experimentInfoBeforeChange.comment)) {\n      convertedExperiment.comment = experimentInfo.comment;\n    }\n    return convertedExperiment;\n  }\n\n  commonConvertExecution(execution: IExecutionForm, model: IExperimentModelInfo): Execution {\n    return {\n      framework : get('input.framework', model),\n      docker_cmd: get('docker_cmd', execution)\n    };\n  }\n}\n\n\n","import {Injectable} from '@angular/core';\nimport {IExperimentInfo} from '../../../../features/experiments/shared/experiment-info.model';\nimport {IExecutionForm, sourceTypesEnum} from '../../../../features/experiments/shared/experiment-execution.model';\nimport {get, getOr} from 'lodash/fp';\nimport {Execution} from '../../../../business-logic/model/tasks/execution';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {Script} from '../../../../business-logic/model/tasks/script';\nimport {IExperimentModelInfo} from '../common-experiment-model.model';\nimport {Store} from '@ngrx/store';\nimport {IExperimentsViewState} from '../../../../features/experiments/reducers/experiments-view.reducer';\nimport {selectActiveWorkspace} from '../../../core/reducers/users-reducer';\nimport {Observable, Subscription} from 'rxjs';\nimport {isExample, isSharedAndNotOwner} from '../../../shared/utils/shared-utils';\nimport {ITask} from '../../../../business-logic/model/al-task';\n\n@Injectable({providedIn: 'root'})\nexport class CommonExperimentReverterService {\n  private activeWorkSpace$: Observable<any>;\n  private activeWorkSpace: any;\n  private activeWorkSpaceSubscription: Subscription;\n\n  constructor(private store: Store<IExperimentsViewState>) {\n    this.activeWorkSpace$ = this.store.select(selectActiveWorkspace);\n    this.activeWorkSpaceSubscription = this.activeWorkSpace$.subscribe(activeWorkSpace => {\n      this.activeWorkSpace = activeWorkSpace;\n    });\n  }\n\n  public revertReadOnly(experiment): Task {\n    experiment.readOnly = isExample(experiment) || isSharedAndNotOwner(experiment, this.activeWorkSpace);\n    return experiment;\n  }\n\n  commonRevertExperiment(experiment: ITask): IExperimentInfo {\n    return {\n      id: experiment.id,\n      name: experiment.name,\n      comment: experiment.comment,\n      readonly: isExample(experiment) || isSharedAndNotOwner(experiment, this.activeWorkSpace),\n      execution: this.revertExecution(experiment),\n      model: this.revertModel(experiment),\n      hyperparams: this.revertHyperParams(experiment.hyperparams),\n      status: experiment.status,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      container: experiment.container || {image: '', setup_shell_script: '', arguments: ''}\n    };\n  }\n\n  revertHyperParams(hyperparams) {\n    if (!hyperparams) {\n      hyperparams = {};\n    }\n    if (!('properties' in hyperparams)) {\n      hyperparams['properties'] = {};\n    }\n    return hyperparams;\n  }\n\n\n  revertExecution(experiment: ITask): IExecutionForm {\n    return {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      source: this.revertExecutionSource(experiment.script),\n      output: {\n        destination: get('destination', experiment.output) || '',\n        logLevel: 'basic'// TODO: should be enum from gencode.\n      },\n      requirements: experiment.script ? this.revertRequirements(experiment.script) : {pip: ''},\n      diff: get('diff', experiment.script) || '',\n      docker_cmd: get('docker_cmd', experiment.execution),\n      queue: experiment.execution?.queue,\n      container: experiment.container || {setup_shell_script: '', arguments: '', image: ''}\n      /* eslint-enable @typescript-eslint/naming-convention */\n    };\n  }\n\n  revertExecutionParameters(parameters: Execution['parameters']): Array<{ label: any; key: string }> {\n    return parameters ?\n      Object.entries(parameters).map(([key, val]) => ({label: val, key}))\n        .sort((p, c) => p.key < c.key ? -1 : 1) :\n      [];\n  }\n\n  revertExecutionSource(script: Task['script']): IExecutionForm['source'] {\n    return {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      repository: get('repository', script) || '',\n      tag: get('tag', script) || '',\n      version_num: get('version_num', script) || '',\n      branch: get('branch', script) || '',\n      entry_point: get('entry_point', script) || '',\n      working_dir: get('working_dir', script) || '',\n      scriptType: this.revertScriptType(script)\n      /* eslint-enable @typescript-eslint/naming-convention */\n    };\n  }\n\n  revertScriptType(script: Task['script']) {\n    switch (true) {\n      case !!get('tag', script):\n        return sourceTypesEnum.Tag;\n      case !!get('version_num', script):\n        return sourceTypesEnum.VersionNum;\n      default:\n        return sourceTypesEnum.Branch;\n    }\n  }\n\n  revertModel(experiment: ITask): IExperimentModelInfo {\n    return {\n      input: experiment.models?.input?.map(modelEx => ({...modelEx.model, taskName: modelEx.name})) || [],\n      output: experiment.models?.output?.map(modelEx => ({...modelEx.model, taskName: modelEx.name})) || [],\n      artifacts: get('artifacts', experiment.execution) || []\n    };\n  }\n\n  private revertRequirements(script: Script) {\n    const pip = getOr([], 'requirements.pip', script);\n    return {\n      ...script.requirements,\n      pip: (Array.isArray(pip) ? pip.join('\\n') : pip) || ''\n    };\n  }\n\n}\n","import {IBreadcrumbsLink} from './breadcrumbs.component';\nimport {isExample} from '../../shared/utils/shared-utils';\n\nexport function prepareLinkData(crumb, supportsExamples = false): IBreadcrumbsLink {\n\n  const crumbName = crumb ? crumb.name : '';\n  const preparedName = (supportsExamples === true) ? addSuffixForExamples(crumb) : crumbName;\n  return crumb ? {name: preparedName, url: crumb.id} : {name: '', url: ''};\n}\n\nfunction addSuffixForExamples(crumb) {\n  if (!crumb?.name) {\n    return;\n  }\n  if (isExample(crumb) && crumb.id !== '*') {\n    return crumb.name + ' (Example)';\n  } else {\n    return crumb.name;\n  }\n}\n\nexport function formatStaticCrumb(crumb: string): IBreadcrumbsLink {\n  if (!crumb) {\n    return {url: null, name: null};\n  }\n  let name: string;\n  switch (crumb) {\n    case 'workers-and-queues':\n      name = 'Workers & Queues';\n      break;\n    case 'output':\n      name = 'Results';\n      break;\n    case 'compare-experiments':\n      name = 'Compare Experiments';\n      break;\n    case 'hyper-params':\n      name = 'Configuration';\n      break;\n    case 'general':\n      name = 'Info';\n      break;\n    case 'account-administration':\n      name = 'Access Controls';\n      break;\n    default:\n      name = crumb.charAt(0).toUpperCase() + crumb.slice(1);\n      break;\n  }\n  return {url: crumb, name};\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {ProjectContextNavbarComponent} from './project-context-navbar/project-context-navbar.component';\nimport {LoggedOutAlertComponent} from './logged-out-alert/logged-out-alert.component';\nimport {S3AccessDialogComponent} from './s3-access-dialog/s3-access-dialog.component';\nimport {S3AccessResolverComponent} from './s3-access-resolver/s3-access-resolver.component';\nimport {StoreModule} from '@ngrx/store';\nimport {LayoutReducer} from './layout.reducer';\nimport {ServerNotificationDialogContainerComponent} from './server-notification-dialog-container/server-notification-dialog-container.component';\nimport {BreadcrumbsComponent} from './breadcrumbs/breadcrumbs.component';\nimport {CommonSearchModule} from '../common-search/common-search.module';\nimport {HeaderComponent} from './header/header.component';\nimport { UiUpdateDialogComponent } from './ui-update-dialog/ui-update-dialog.component';\nimport {SharedModule} from '~/shared/shared.module';\nimport {TipOfTheDayModalComponent} from './tip-of-the-day-modal/tip-of-the-day-modal.component';\nimport {HeaderUserMenuActionsComponent} from '~/layout/header/header-user-menu-actions/header-user-menu-actions.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        SMSharedModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CommonSearchModule,\n        RouterModule,\n        StoreModule.forFeature('layout', LayoutReducer),\n        SharedModule,\n    ],\n  declarations: [\n    HeaderComponent, BreadcrumbsComponent, ProjectContextNavbarComponent, LoggedOutAlertComponent,\n    S3AccessResolverComponent, S3AccessDialogComponent, ServerNotificationDialogContainerComponent,\n    UiUpdateDialogComponent, TipOfTheDayModalComponent, HeaderUserMenuActionsComponent\n  ],\n  exports: [HeaderComponent, BreadcrumbsComponent, ProjectContextNavbarComponent, LoggedOutAlertComponent, S3AccessResolverComponent, S3AccessDialogComponent, ServerNotificationDialogContainerComponent, UiUpdateDialogComponent]\n})\nexport class CommonLayoutModule {\n}\n","import {selectBreadcrumbsStringsBase} from '../../layout/breadcrumbs/breadcrumbs.utils';\n\n\nexport const selectBreadcrumbsStrings = selectBreadcrumbsStringsBase;\n\nexport function LayoutReducer(state = {}, action) {\n}\n\n\n","<div class=\"navbar-header-container\">\n  <div class=\"nav-bar-items-container\">\n    <ng-container *ngFor=\"let route of routes; trackBy:trackByFn\">\n      <sm-navbar-item\n        *smCheckPermission=\"route.permissionCheck\"\n        direction=\"top\"\n        [header]=\"route.header\"\n        [active]=\"activeFeature === route.header\"\n        (click)=\"tabClicked(route.header)\"\n        [subHeader]=\"archivedMode && route.subHeader\"\n      >\n      </sm-navbar-item>\n    </ng-container>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {PROJECT_ROUTES, ProjectRoute} from '~/features/projects/projects.consts';\n\n@Component({\n  selector   : 'sm-project-context-navbar',\n  templateUrl: './project-context-navbar.component.html',\n  styleUrls  : ['./project-context-navbar.component.scss']\n})\nexport class ProjectContextNavbarComponent {\n  @Output() backToProjectClicked = new EventEmitter();\n  @Output() onNameChanged        = new EventEmitter();\n\n  @Input() activeFeature: string;\n  @Input() archivedMode: boolean;\n\n  public readonly routes = this.projectId === '*' ? PROJECT_ROUTES.slice(1) : PROJECT_ROUTES;\n  get projectId() {\n    return this.activatedRoute.parent.snapshot.params.projectId;\n  }\n\n  constructor(private router: Router,\n              public activatedRoute: ActivatedRoute) {\n  }\n\n  public tabClicked(feature) {\n    this.router.navigate([`projects/${this.projectId}/${feature}`]);\n  }\n\n  public onBackToProjectClicked() {\n    this.backToProjectClicked.emit();\n  }\n\n  trackByFn(index, route: ProjectRoute) {\n    return route.header;\n  }\n}\n","import {createReducer, createSelector, on, ReducerTypes} from '@ngrx/store';\nimport {setTOU} from './login.actions';\n\nexport interface LoginState {\n  inviteId: string;\n  error: string;\n\n  terms: string;\n  crmForm: any;\n}\n\nexport const initLogin: LoginState = {\n  inviteId: null,\n  error: null,\n  terms: '',\n  crmForm: null\n};\n\nexport const login = state => state.login as LoginState;\n\nexport const selectInviteId = createSelector(login, state => state?.inviteId);\nexport const selectLoginError = createSelector(login, state => state?.error);\nexport const selectTerms = createSelector(login, state => state.terms);\nexport const selectCrmForm = createSelector(login, state => state.crmForm);\n\nexport const loginReducers = [\n  on(setTOU, (state, action) => ({...state, terms: action.terms})),\n] as ReducerTypes<LoginState, any>[];\n","import {createAction, props} from '@ngrx/store';\nimport {User} from '../../business-logic/model/users/user';\n\n\nexport const setUserLoginState = createAction(\n  '[login] set user login state',\n  props<{ user: User; inviteId: string; crmForm: any }>()\n);\n\nexport const getTOU = createAction('[login] get TOU');\n\nexport const setTOU = createAction(\n  '[login] set TOU',\n  props<{terms: string}>()\n);\n","import {Action, createAction, props} from '@ngrx/store';\nimport {Model} from '../../../business-logic/model/models/model';\nimport {SelectedModel, TableModel} from '../shared/models.model';\nimport {ModelsUpdateRequest} from '../../../business-logic/model/models/modelsUpdateRequest';\n\n\nconst MODELS_PREFIX = 'MODELS_INFO_';\n\n\n// COMMANDS:\nexport const GET_MODEL_INFO             = MODELS_PREFIX + 'GET_MODEL_INFO';\nexport const REFRESH_MODEL_INFO         = MODELS_PREFIX + 'REFRESH_MODEL_INFO';\nexport const SET_MODEL                  = MODELS_PREFIX + 'SET_MODEL';\nexport const ACTIVATE_MODEL_EDIT        = MODELS_PREFIX + 'ACTIVATE_EDIT';\nexport const MODEL_CANCEL_EDIT          = MODELS_PREFIX + 'MODEL_CANCEL_EDIT';\nexport const SET_IS_MODEL_SAVING        = MODELS_PREFIX + 'SET_IS_MODEL_SAVING';\n\n\n// EVENTS:\nexport const MODEL_DETAILS_UPDATED      = MODELS_PREFIX + 'MODEL_DETAILS_UPDATED';\nexport const EDIT_MODEL                 = MODELS_PREFIX + 'EDIT_MODEL';\n\n\nexport class GetModelInfo implements Action {\n  readonly type = GET_MODEL_INFO;\n\n  constructor(public payload: Model['id']) {\n  }\n}\nexport class ActivateModelEdit implements Action {\n  readonly type = ACTIVATE_MODEL_EDIT;\n\n  constructor(public payload: string) {\n  }\n}\nexport class CancelModelEdit implements Action {\n  readonly type = MODEL_CANCEL_EDIT;\n\n  constructor() {\n  }\n}\nexport class RefreshModelInfo implements Action {\n  readonly type = REFRESH_MODEL_INFO;\n\n  constructor(public payload: Model['id']) {\n  }\n}\n\nexport class SetModel implements Action {\n  readonly type = SET_MODEL;\n\n  constructor(public payload: SelectedModel) {\n  }\n}\nexport class EditModel implements Action {\n  readonly type = EDIT_MODEL;\n\n  constructor(public payload: SelectedModel) {\n  }\n}\nexport class SetIsModelSaving implements Action {\n  readonly type = SET_IS_MODEL_SAVING;\n\n  constructor(public payload: boolean) {\n  }\n}\nexport class ModelDetailsUpdated implements Action {\n  readonly type = MODEL_DETAILS_UPDATED;\n\n  constructor(public payload: { id: Model['id']; changes: Partial<ModelsUpdateRequest> }) {\n  }\n}\n\nexport const updateModelDetails = createAction(\n  MODELS_PREFIX + '[update model details]',\n  props<{id: string; changes: Partial<ModelsUpdateRequest>}>()\n);\n","import {Action, createAction, props} from '@ngrx/store';\nimport {SelectedModel} from '../shared/models.model';\nimport {Project} from '../../../business-logic/model/projects/project';\nimport {ModelsPublishManyResponse} from '../../../business-logic/model/models/modelsPublishManyResponse';\nimport {ModelsArchiveManyResponse} from '../../../business-logic/model/models/modelsArchiveManyResponse';\nimport {ModelsDeleteManyResponse} from '../../../business-logic/model/models/modelsDeleteManyResponse';\n\nconst MODELS_PREFIX = 'MODELS_MENU_';\n\nexport const publishModelClicked = createAction(\n  MODELS_PREFIX + '[publish model]',\n  props<{selectedModels: SelectedModel[]}>()\n);\n\nexport const changeProjectRequested = createAction(\n  MODELS_PREFIX + '[change project requested]',\n  props<{ selectedModels: SelectedModel[]; project: Project }>()\n);\n\nexport const addTag = createAction(\n  MODELS_PREFIX + '[add tag to model]',\n  props<{models: SelectedModel[]; tag: string}>()\n);\n\nexport const removeTag = createAction(\n  MODELS_PREFIX + '[remove tag from model]',\n  props<{models: SelectedModel[]; tag: string}>()\n);\n\nexport const archivedSelectedModels = createAction(\n  MODELS_PREFIX + '[archive selected models]',\n  props<{selectedEntities: SelectedModel[],  skipUndo: boolean }>()\n);\n\nexport const restoreSelectedModels = createAction(\n  MODELS_PREFIX + '[restore selected models]',\n  props<{selectedEntities: SelectedModel[],  skipUndo: boolean }>()\n);\n\n","import {createAction, props} from '@ngrx/store';\nimport {ISmCol} from '../../shared/ui-components/data/table/table.consts';\nimport {SelectedModel} from '../shared/models.model';\nimport {TableFilter} from '../../shared/utils/tableParamEncode';\nimport {User} from '~/business-logic/model/users/user';\nimport {SortMeta} from 'primeng/api';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '@common/shared/entity-page/items.utils';\nconst MODELS_PREFIX = 'MODELS_';\n\nexport const fetchModelsRequested = createAction(MODELS_PREFIX + '[fetch models requested]');\n\nexport const refreshModels = createAction(\n  MODELS_PREFIX + '[refresh models]',\n  props<{ hideLoader: boolean; autoRefresh: boolean }>()\n);\n\nexport const getNextModels = createAction(MODELS_PREFIX + '[get next model]');\nexport const getNextModelsWithPageSize = createAction(MODELS_PREFIX + '[get next model with page size]',\n  props<{pageSize: number}>());\nexport const setModels = createAction(\n  MODELS_PREFIX + '[set models]',\n  props<{models: SelectedModel[]}>()\n);\n\nexport const setModelsInPlace = createAction(\n  MODELS_PREFIX + '[set models in place]',\n  props<{ models: SelectedModel[] }>()\n);\n\nexport const setNoMoreModels = createAction(\n  MODELS_PREFIX + '[set no more models]',\n  props<{ payload: boolean }>()\n);\n\nexport const toggleColHidden = createAction(\n  MODELS_PREFIX + 'TOGGLE_COL_HIDDEN',\n  props<{columnId: string; projectId: string}>()\n);\n\nexport const getTags = createAction(\n  MODELS_PREFIX + 'GET_TAGS');\n\nexport const setTags = createAction(\n  MODELS_PREFIX + 'SET_TAGS',\n  props<{ tags: string[] }>()\n);\n\nexport const setHiddenCols = createAction(\n  MODELS_PREFIX + 'SET_HIDDEN_COLS',\n  props<{ hiddenCols: { [key: string]: boolean } }>()\n);\n\nexport const setColsOrderForProject = createAction(\n  MODELS_PREFIX + 'SET_COLS_ORDER',\n  props<{ cols: string[]; project: string; fromUrl?: boolean }>()\n);\n\nexport const setUsers = createAction(\n  MODELS_PREFIX + 'SET_USERS',\n  props<{ users: User[] }>()\n);\n\nexport const getUsers = createAction(MODELS_PREFIX + 'GET_USERS');\n\nexport const setFrameworks = createAction(\n  MODELS_PREFIX + 'SET_FRAMEWORKS',\n  props<{ frameworks: string[] }>()\n);\n\nexport const getFrameworks = createAction(\n  MODELS_PREFIX + 'GET_FRAMEWORKS');\n\nexport const getFilteredUsers = createAction(\n  MODELS_PREFIX + 'GET_FILTERED_USERS');\n\nexport const addModels = createAction(\n  MODELS_PREFIX + '[add models]',\n  props<{models: SelectedModel[] }>()\n);\n\nexport const removeModels = createAction(\n  MODELS_PREFIX + '[remove models]',\n  props<{modelIds: string[] }>()\n);\n\nexport const updateModel = createAction(\n  MODELS_PREFIX + '[update model]',\n  props<{id: SelectedModel['id']; changes: Partial<SelectedModel>}>()\n);\n\nexport const setSelectedModels = createAction(\n  MODELS_PREFIX + '[set selected models]',\n  props<{models: SelectedModel[] }>()\n);\n\nexport const setSelectedModel = createAction(\n  MODELS_PREFIX + '[set selected model]',\n  props<{model: SelectedModel }>()\n);\n\nexport const selectAllModels = createAction(\n  MODELS_PREFIX + ' [select all models]',\n  props<{filtered: boolean}>()\n);\n\nexport const tableSortChanged = createAction(\n  MODELS_PREFIX + 'TABLE_SORT_CHANGED',\n  props<{ isShift: boolean; colId: ISmCol['id'] }>()\n);\n\nexport const setTableSort = createAction(\n  MODELS_PREFIX + 'SET_TABLE_SORT',\n  props<{orders: SortMeta[]; projectId: string}>()\n);\n\nexport const tableFilterChanged= createAction(\n  MODELS_PREFIX + '[table filters changed]',\n  props<{filter: TableFilter; projectId: string}>()\n);\n\nexport const setTableFilters = createAction(\n  MODELS_PREFIX + 'SET_TABLE_FILTERS',\n  props<{filters: TableFilter[]; projectId: string}>()\n);\n\nexport const setColumnWidth = createAction(\n  MODELS_PREFIX + ' [set column width]',\n  props<{projectId: string; columnId: string; widthPx: number}>()\n);\n\n\nexport const modelSelectionChanged = createAction(\n  MODELS_PREFIX + '[model selection changed]',\n  props<{ model: SelectedModel; project?: string }>()\n);\n\nexport const showSelectedOnly = createAction(\n  MODELS_PREFIX + '[show selected only]',\n  props<{ active: boolean; projectId: string }>()\n);\n\nexport const globalFilterChanged = createAction(\n  MODELS_PREFIX + 'GLOBAL_FILTER_CHANGED',\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport const resetGlobalFilter = createAction(MODELS_PREFIX + 'RESET_GLOBAL_FILTER');\nexport const resetState = createAction(MODELS_PREFIX + '[reset state]');\n\nexport const setCurrentScrollId = createAction(\n  MODELS_PREFIX + ' [set current scrollId]',\n  props<{scrollId: string}>()\n);\nexport const setArchive = createAction(\n  MODELS_PREFIX + 'SET_ARCHIVE',\n  props<{ archive: boolean }>()\n);\n\nexport const afterSetArchive = createAction(MODELS_PREFIX + 'AFTER_SET_ARCHIVE');\n\nexport const setSplitSize = createAction(MODELS_PREFIX + 'SET_SPLIT_SIZE', props<{ splitSize: number }>());\nexport const setSelectedModelsDisableAvailable = createAction(\n  MODELS_PREFIX + 'setSelectedModelsDisableAvailable',\n  props<{ selectedModelsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> }>()\n);\n","import {TableModel} from './shared/models.model';\nimport {isExample} from '../shared/utils/shared-utils';\n\nexport function getSysTags(model: TableModel) {\n  return (model?.system_tags?.filter(tag => (tag !== 'archived') && (tag !== 'shared')) || []).concat(isExample(model) ? 'example' : []);\n}\n","import {ColHeaderTypeEnum, ISmCol} from '../shared/ui-components/data/table/table.consts';\nimport {MODELS_TABLE_COL_FIELDS} from './shared/models.const';\n\nexport type ModelWizardMethodsEnum = 'create' | 'edit' | 'clone' | 'extend';\nexport const WIZARD_METHODS = {\n  CREATE: 'create' as ModelWizardMethodsEnum,\n  CLONE : 'clone' as ModelWizardMethodsEnum,\n  EDIT  : 'edit' as ModelWizardMethodsEnum,\n  EXTEND: 'extend' as ModelWizardMethodsEnum,\n};\n\nexport type ModelsViewModesEnum = 'table' | 'tree';\nexport const MODELS_VIEW_MODES = {\n  TABLE: 'table' as ModelsViewModesEnum,\n  TREE : 'tree' as ModelsViewModesEnum,\n};\n\nexport const MODELS_PAGE_SIZE = 15;\nexport const MODELS_STORE_KEY = 'models';\n\nexport const MODELS_PREFIX_INFO = 'MODELS_INFO_';\nexport const MODELS_PREFIX_MENU = 'MODELS_MENU_';\nexport const MODELS_PREFIX_VIEW = 'MODELS_';\n\n\nexport const STATUS = {\n  PUBLISHED: 'Published',\n  DRAFT    : 'Draft'\n};\n\nexport const VIEWS = {\n  TREE : 'TREE',\n  TABLE: 'TABLE'\n};\n\nexport const ASC = 1;\nexport const DESC = -1;\nexport const MODELS_TABLE_COLS: ISmCol[] = [\n  {\n    id              : MODELS_TABLE_COL_FIELDS.SELECTED,\n    headerType      : ColHeaderTypeEnum.checkBox,\n    sortable        : false,\n    filterable      : false,\n    hidden          : false,\n    header          : '',\n    headerStyleClass: 'selected-col-header',\n    style           : {width: '70px', maxWidth: '70px'},\n    disableDrag     : true,\n    disablePointerEvents: true\n  },\n  {\n    id          : MODELS_TABLE_COL_FIELDS.FRAMEWORK,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : true,\n    filterable  : true,\n    header      : 'FRAMEWORK',\n    style       : {width: '100px'},\n  },\n  {\n    id          : MODELS_TABLE_COL_FIELDS.NAME,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : true,\n    header      : 'NAME',\n    style       : {width: '160px'},\n  },\n  {\n    id          : MODELS_TABLE_COL_FIELDS.TAGS,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    filterable  : true,\n    sortable    : false,\n    searchableFilter: true,\n    header      : 'TAGS',\n    style       : {width: '240px'},\n    excludeFilter: true,\n    andFilter: true,\n    columnExplain: 'Click to include tag. Click again to exclude.'\n  },\n  {\n    id          : MODELS_TABLE_COL_FIELDS.READY,\n    headerType  : ColHeaderTypeEnum.sortFilter,\n    sortable    : true,\n    filterable  : true,\n    header      : 'STATUS',\n    hidden      : false,\n    style       : {width: '135px'},\n  },\n  {\n    id          : MODELS_TABLE_COL_FIELDS.PROJECT,\n    header      : 'PROJECT',\n    style       : {width: '135px'}\n  },\n  {\n    id              : MODELS_TABLE_COL_FIELDS.USER,\n    headerType      : ColHeaderTypeEnum.sortFilter,\n    searchableFilter: true,\n    filterable      : true,\n    sortable        : false,\n    static          : true,\n    header          : 'USER',\n    style           : {width: '240px'}\n  },\n  {\n    id        : MODELS_TABLE_COL_FIELDS.TASK,\n    headerType: ColHeaderTypeEnum.title,\n    sortable  : false,\n    header    : 'TASK',\n    style     : {width: '240px'}\n  },\n  {\n    id        : MODELS_TABLE_COL_FIELDS.LAST_UPDATE,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable  : true,\n    header    : 'UPDATED',\n    label     : 'Updated',\n    style     : {width: '120px'}\n  },\n  {\n    id        : MODELS_TABLE_COL_FIELDS.COMMENT,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable  : true,\n    hidden    : true,\n    header    : 'DESCRIPTION',\n    style     : {width: '240px'}\n  },\n];\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\n\n@Component({\n  selector   : 'sm-model-custom-cols-menu',\n  templateUrl: './model-custom-cols-menu.component.html',\n  styleUrls  : ['./model-custom-cols-menu.component.scss']\n})\nexport class ModelCustomColsMenuComponent {\n  @Input() tableCols: ISmCol[];\n  @Input() isLoading: boolean;\n  @Input() disabled: boolean;\n  @Output() selectedTableColsChanged  = new EventEmitter();\n}\n","<sm-menu\n  [iconClass]=\"'al-icon al-ico-settings al-color pointer create-new-icon ' + (disabled ? 'blue-570' : 'blue-400')\"\n  buttonTooltip=\"Customize table\"\n  smMenuClass=\"light-theme custom-columns\"\n  [showButton]=\"false\"\n  [style.pointer-events]=\"disabled ? 'none' : 'initial'\"\n>\n  <div (click)=\"$event.stopPropagation()\">\n    <sm-custom-columns-list\n      [tableCols]=\"tableCols\"\n      [isLoading]=\"isLoading\"\n      (selectedTableColsChanged)=\"selectedTableColsChanged.emit($event)\"\n    >\n    </sm-custom-columns-list>\n  </div>\n</sm-menu>\n","<div class=\"d-flex justify-content-between header-container align-items-center\"\n     [ngClass]=\"{'archive-mode': isArchived}\">\n  <sm-toggle-archive *ngIf=\"!hideArchiveToggle\"\n                     [showArchived]=\"isArchived\"\n                     [class.hide-item]=\"sharedView\"\n                     (toggleArchived)=\"archivedChanged($event)\"></sm-toggle-archive>\n  <sm-project-context-navbar *ngIf=\"!hideCreateNewButton\"\n                             [class.hide-item]=\"sharedView\"\n                             activeFeature=\"models\" [archivedMode]=\"isArchived\"></sm-project-context-navbar>\n  <div class=\"d-flex justify-content-end align-items-center right-buttons\">\n    <sm-model-custom-cols-menu\n      [hidden]=\"minimizedView || sharedView\"\n      [tableCols]=\"tableCols\"\n      (selectedTableColsChanged)=\"selectedTableColsChanged.emit($event)\"\n    ></sm-model-custom-cols-menu>\n        <sm-refresh-button\n          [autoRefreshState]=\"autoRefreshState\"\n          [allowAutoRefresh]=\"true\"\n          (refreshList)=\"refreshListClicked.emit()\"\n          (setAutoRefresh)=\"setAutoRefresh.emit($event)\"\n        >\n        </sm-refresh-button>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FilterMetadata} from \"primeng/api/filtermetadata\";\n\n@Component({\n  selector   : 'sm-model-header',\n  templateUrl: './model-header.component.html',\n  styleUrls  : ['./model-header.component.scss']\n})\nexport class ModelHeaderComponent {\n  private _tableCols: any;\n  @Input() minimizedView: boolean;\n\n  @Input() set tableCols(tableCols) {\n    this._tableCols = tableCols.filter(col => col.header !== '');\n  }\n\n  get tableCols() {\n    return this._tableCols;\n  }\n  @Input() isArchived: boolean;\n  @Input() hideArchiveToggle: boolean;\n  @Input() hideCreateNewButton: boolean;\n  @Input() disableCreateNewButton: boolean;\n  @Input() autoRefreshState: boolean;\n  @Input() sharedView: boolean;\n  @Input() tableFilters: { [s: string]: FilterMetadata };\n\n  @Output() isArchivedChanged    = new EventEmitter<boolean>();\n  @Output() addModelClicked = new EventEmitter();\n  @Output() refreshListClicked       = new EventEmitter();\n  @Output() setAutoRefresh           = new EventEmitter();\n  @Output() selectedTableColsChanged = new EventEmitter();\n  @Output() clearTableFilters        = new EventEmitter<{ [s: string]: FilterMetadata }>();\n\n\n\n  archivedChanged(value: boolean) {\n    this.isArchivedChanged.emit(value);\n  }\n\n  onAddModelClicked() {\n    this.addModelClicked.emit();\n  }\n\n}\n","import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {select, Store} from '@ngrx/store';\nimport {get, isEqual} from 'lodash/fp';\nimport {combineLatest, interval, Observable, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map, skip, tap, withLatestFrom} from 'rxjs/operators';\nimport {AUTO_REFRESH_INTERVAL} from '~/app.constants';\nimport {getTags, resetProjectSelection, setDeep} from '../core/actions/projects.actions';\nimport {InitSearch, ResetSearch} from '../common-search/common-search.actions';\nimport {ICommonSearchState, selectSearchQuery} from '../common-search/common-search.reducer';\nimport {setAutoRefresh} from '../core/actions/layout.actions';\nimport {\n  selectCompanyTags,\n  selectIsArchivedMode,\n  selectProjectSystemTags,\n  selectProjectTags,\n  selectTagsFilterByProject\n} from '../core/reducers/projects.reducer';\nimport {selectRouterParams} from '../core/reducers/router-reducer';\nimport {selectAppVisible, selectAutoRefresh} from '../core/reducers/view.reducer';\nimport {BaseEntityPage} from '../shared/entity-page/base-entity-page';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {ISmCol, TableSortOrderEnum} from '../shared/ui-components/data/table/table.consts';\nimport {ConfirmDialogComponent} from '../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {decodeFilter, decodeOrder} from '../shared/utils/tableParamEncode';\nimport * as modelsActions from './actions/models-view.actions';\nimport {MODELS_TABLE_COLS} from './models.consts';\nimport * as modelsSelectors from './reducers';\nimport {selectModelsFrameworks, selectModelsTags, selectModelsUsers, selectModelTableColumns} from './reducers';\nimport {IModelsViewState} from './reducers/models-view.reducer';\nimport {SelectedModel, TableModel} from './shared/models.model';\nimport {User} from '~/business-logic/model/users/user';\nimport {SortMeta} from 'primeng/api';\nimport {selectIsSharedAndNotOwner} from '~/features/experiments/reducers';\nimport {EntityTypeEnum} from '~/shared/constants/non-common-consts';\nimport {ShowItemsFooterSelected} from '../shared/entity-page/footer-items/show-items-footer-selected';\nimport {DividerFooterItem} from '../shared/entity-page/footer-items/divider-footer-item';\nimport {ArchiveFooterItem} from '../shared/entity-page/footer-items/archive-footer-item';\nimport {DeleteFooterItem} from '../shared/entity-page/footer-items/delete-footer-item';\nimport {MoveToFooterItem} from '../shared/entity-page/footer-items/move-to-footer-item';\nimport {addTag} from './actions/models-menu.actions';\nimport {ModelsTableComponent} from './shared/models-table/models-table.component';\nimport {\n  CountAvailableAndIsDisableSelectedFiltered,\n  MenuItems\n} from '../shared/entity-page/items.utils';\nimport {PublishFooterItem} from '../shared/entity-page/footer-items/publish-footer-item';\nimport { HasReadOnlyFooterItem } from '../shared/entity-page/footer-items/has-read-only-footer-item';\nimport { SelectedTagsFooterItem } from '../shared/entity-page/footer-items/selected-tags-footer-item';\nimport {setTableFilters} from './actions/models-view.actions';\n\n\n@Component({\n  selector   : 'sm-models',\n  templateUrl: './models.component.html',\n  styleUrls  : ['./models.component.scss']\n})\nexport class ModelsComponent extends BaseEntityPage implements OnInit, OnDestroy {\n  public readonly originalTableColumns = MODELS_TABLE_COLS;\n  public entityTypeEnum = EntityTypeEnum;\n  public models$: Observable<TableModel[]>;\n  public tableSortFields$: Observable<SortMeta[]>;\n  public tableSortOrder$: Observable<TableSortOrderEnum>;\n  public selectedModels$: Observable<TableModel[]>;\n  public selectedModel$: Observable<SelectedModel>;\n  public searchValue$: Observable<ICommonSearchState['searchQuery']>;\n  public isArchived$: Observable<boolean>;\n  public tableFilters$: Observable<{[s: string]: FilterMetadata}>;\n  public noMoreModels$: Observable<boolean>;\n  public showAllSelectedIsActive$: Observable<boolean>;\n  public showInfo$: Observable<boolean>;\n  protected setSplitSizeAction = modelsActions.setSplitSize;\n  private selectedModels: TableModel[];\n  private selectedModelSubs: Subscription;\n  private searchSubs: Subscription;\n  private selectedModelsSub: Subscription;\n  private modelFromUrlSub: Subscription;\n  private searchQuery$: Observable<ICommonSearchState['searchQuery']>;\n  public autoRefreshState$: Observable<boolean>;\n  private refreshing: boolean;\n  private autoRefreshSub: Subscription;\n  public activeSectionEdit$: Observable<string>;\n  public selectedProjectId$: Observable<string>;\n  public tableColsOrder$: Observable<string[]>;\n  public users$: Observable<User[]>;\n  public tags$: Observable<string[]>;\n  private tagsFilterByProject$: Observable<boolean>;\n  private projectTags$: Observable<string[]>;\n  private companyTags$: Observable<string[]>;\n  public systemTags$: Observable<string[]>;\n  public tableCols$: Observable<ISmCol[]>;\n  public frameworks$: Observable<string[]>;\n  public isSharedAndNotOwner$: Observable<boolean>;\n  private isAppVisible$: Observable<boolean>;\n  protected addTag = addTag;\n  @ViewChild('modelsTable') private table: ModelsTableComponent;\n  public selectedModelsDisableAvailable$: Observable<Record<string, CountAvailableAndIsDisableSelectedFiltered>>;\n\n\n  constructor(\n    protected store: Store<IModelsViewState>, private route: ActivatedRoute, private router: Router,\n    private dialog: MatDialog\n  ) {\n    super(store);\n    this.selectSplitSize$ = this.store.select(modelsSelectors.selectSplitSize);\n    this.tableSortFields$ = this.store.select(modelsSelectors.selectTableSortFields);\n    this.selectedModel$ = this.store.select(modelsSelectors.selectSelectedTableModel);\n    this.selectedModels$ = this.store.select(modelsSelectors.selectSelectedModels);\n    this.selectedModelsDisableAvailable$ = this.store.select(modelsSelectors.selectedModelsDisableAvailable);\n    this.tableFilters$ = this.store.select(modelsSelectors.selectTableFilters);\n    this.searchValue$ = this.store.select(modelsSelectors.selectGlobalFilter);\n    this.isArchived$ = this.store.select(selectIsArchivedMode);\n    this.noMoreModels$ = this.store.select(modelsSelectors.selectNoMoreModels);\n    this.isSharedAndNotOwner$ = this.store.select(selectIsSharedAndNotOwner);\n\n    this.showAllSelectedIsActive$ = this.store.select(modelsSelectors.selectShowAllSelectedIsActive);\n    this.searchQuery$ = this.store.select(selectSearchQuery);\n    this.autoRefreshState$ = this.store.select(selectAutoRefresh);\n    this.isAppVisible$ = this.store.select(selectAppVisible);\n    this.activeSectionEdit$ = this.store.select(modelsSelectors.selectActiveSectionEdit);\n    this.tableColsOrder$ = this.store.select(modelsSelectors.selectModelsTableColsOrder);\n    this.selectedProjectId$ = this.store.select(selectRouterParams).pipe(map(params => get('projectId', params)));\n    this.tags$ = this.store.select(selectModelsTags);\n    this.tagsFilterByProject$ = this.store.select(selectTagsFilterByProject);\n    this.projectTags$ = this.store.select(selectProjectTags);\n    this.companyTags$ = this.store.select(selectCompanyTags);\n    this.systemTags$ = this.store.select(selectProjectSystemTags);\n    this.users$ = this.store.select(selectModelsUsers);\n    this.frameworks$ = this.store.select(selectModelsFrameworks);\n    this.tableCols$ = this.store.select(selectModelTableColumns)\n      .pipe(\n        distinctUntilChanged((a, b) => isEqual(a, b)),\n        tap(() => this.table?.table?.resize(100))\n      );\n\n    this.models$ = this.store.select(modelsSelectors.selectModelsList).pipe(\n      withLatestFrom(this.isArchived$),\n      // lil hack for hiding archived models after they been archived from models info or footer...\n      map(([models, showArchived]) => this.filterArchivedModels(models, showArchived)),\n      tap(() => this.refreshing = false)\n    );\n    this.showInfo$ = this.store.pipe(\n      select(selectRouterParams),\n      map(params => !!get('modelId', params))\n    );\n    this.syncAppSearch();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.createFooterItems({\n      entitiesType: EntityTypeEnum.model,\n      selected$: this.selectedModels$,\n      showAllSelectedIsActive$: this.showAllSelectedIsActive$,\n      tags$: this.tags$,\n      data$: this.selectedModelsDisableAvailable$,\n      tagsFilterByProject$: this.tagsFilterByProject$,\n      companyTags$: this.companyTags$,\n      projectTags$: this.projectTags$\n    });\n    let prevQueryParams: Params;\n\n    this.selectedModelSubs = combineLatest([\n      this.store.select(selectRouterParams).pipe(map(params => params?.projectId)),\n      this.route.queryParams,\n    ]).pipe(\n      filter(([projectId, queryParams]) => {\n        const equal = projectId === this.projectId && isEqual(queryParams, prevQueryParams);\n        if (!equal && !this.preventUrlUpdate) {\n          prevQueryParams = queryParams;\n          this.projectId = projectId;\n          return true;\n        }\n        prevQueryParams = queryParams;\n        this.preventUrlUpdate = false;\n        return false;\n      })\n    ).subscribe(([projectId, params]: [string, Params]) => {\n      if (params.order) {\n        const orders = decodeOrder(params.order);\n        this.store.dispatch(modelsActions.setTableSort({orders, projectId: this.projectId}));\n      }\n      if (params.filter) {\n        const filters = decodeFilter(params.filter);\n        this.store.dispatch(modelsActions.setTableFilters({filters, projectId}));\n      } else {\n        if (params.order) {\n        this.store.dispatch(modelsActions.setTableFilters({filters: [], projectId}));\n      }\n      }\n      if (params.archive) {\n        this.store.dispatch(modelsActions.setArchive({archive: true}));\n      }\n      if (params.deep) {\n        this.store.dispatch(setDeep({deep: true}));\n      }\n\n      if (params.columns) {\n        this.columnsReordered(params.columns, true);\n        const hiddenCols = {};\n        this.originalTableColumns.forEach((tableCol)=>{\n          if(tableCol.id!=='selected'){\n            hiddenCols[tableCol.id] = !params.columns.includes(tableCol.id);\n          }\n        });\n        this.store.dispatch(modelsActions.setHiddenCols({hiddenCols}));\n      }\n      this.dispatchAndLock(modelsActions.fetchModelsRequested());\n    });\n\n    this.selectedModelsSub = this.selectedModels$.subscribe(selectedModels => {\n      this.selectedModels = selectedModels;\n    });\n    this.autoRefreshSub = interval(AUTO_REFRESH_INTERVAL).pipe(\n      withLatestFrom(this.autoRefreshState$, this.activeSectionEdit$, this.isAppVisible$),\n      filter(([, autoRefreshState, activeSectionEdit, isAppVisible]) => autoRefreshState && activeSectionEdit === null && isAppVisible)\n    ).subscribe(() => {\n      this.refreshList(true);\n    });\n\n    this.selectModelFromUrl();\n    this.store.dispatch(modelsActions.getUsers());\n    this.store.dispatch(modelsActions.getFrameworks());\n    this.store.dispatch(modelsActions.getTags());\n    this.store.dispatch(getTags());\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.selectedModelSubs.unsubscribe();\n    this.modelFromUrlSub.unsubscribe();\n    this.autoRefreshSub.unsubscribe();\n    this.selectedModelsSub.unsubscribe();\n    this.store.dispatch(modelsActions.resetState());\n    this.stopSyncSearch();\n  }\n\n  stopSyncSearch() {\n    this.searchSubs.unsubscribe();\n    this.store.dispatch(new ResetSearch());\n    this.store.dispatch(modelsActions.resetGlobalFilter());\n  }\n\n  syncAppSearch() {\n    this.store.dispatch(new InitSearch('Search for models'));\n    this.searchSubs = this.searchQuery$.pipe(skip(1)).subscribe(query => {\n      this.store.dispatch(modelsActions.globalFilterChanged(query));\n    });\n  }\n\n  getNextModels() {\n    this.store.dispatch(modelsActions.getNextModels());\n  }\n\n  selectModelFromUrl() {\n    this.modelFromUrlSub = combineLatest([\n      this.store.select(selectRouterParams).pipe(\n        map(params => get('modelId', params))\n      ),\n      this.models$\n    ]).pipe(\n      map(([modelId, models]) => models.find(model => model.id === modelId)),\n      distinctUntilChanged()\n    ).subscribe((selectedModel) => {\n      this.store.dispatch(modelsActions.setSelectedModel({model: selectedModel}));\n    });\n  }\n\n  filterArchivedModels(models: TableModel[], showArchived: boolean) {\n    if (showArchived) {\n      return models.filter(model => model.system_tags && model.system_tags.includes('archived'));\n    } else {\n      return models.filter(model => !model.system_tags || !(model.system_tags.includes('archived')));\n    }\n  }\n\n  modelSelectionChanged(model: SelectedModel) {\n    this.store.dispatch(modelsActions.modelSelectionChanged({model, project: this.projectId}));\n  }\n\n  modelsSelectionChanged(models: SelectedModel[]) {\n    this.store.dispatch(modelsActions.setSelectedModels({models}));\n  }\n\n  sortedChanged({colId, isShift}: { isShift: boolean; colId: string }) {\n    this.dispatchAndLock(modelsActions.tableSortChanged({colId, isShift}));\n  }\n\n  filterChanged({col, value, andFilter}: { col: ISmCol; value: any; andFilter?: boolean }) {\n    this.dispatchAndLock(modelsActions.tableFilterChanged({\n      filter: {\n        col: col.id,\n        value,\n        filterMatchMode: col.filterMatchMode || andFilter ? 'AND' : undefined\n      },\n      projectId: this.projectId\n    }));\n  }\n\n  compareModels() {\n    // TODO: temporary until the compare component will be under models module...\n    this.router.navigate(\n      [\n        `${this.route.parent.snapshot.params.projectId}/models/compare-models`,\n        {ids: this.selectedModels.map(model => model.id)}\n      ]\n    );\n  }\n\n  archivedChanged(isArchived: boolean) {\n    const navigate = () => {\n      this.dispatchAndLock(modelsActions.setArchive({archive: isArchived}));\n      this.store.dispatch(resetProjectSelection());\n      this.closeModelPanel();\n    };\n\n    if (this.selectedModels.length > 0) {\n      const archiveDialog: MatDialogRef<ConfirmDialogComponent> = this.dialog.open(ConfirmDialogComponent, {\n        data: {\n          title    : 'Are you sure?',\n          body     : 'Navigating between \"Live\" and \"Archive\" will deselect your selected models.',\n          yes      : 'Proceed',\n          no       : 'Back',\n          iconClass: ''\n        }\n      });\n\n      archiveDialog.afterClosed().subscribe((confirmed) => {\n        if (confirmed) {\n          navigate();\n        }\n      });\n    } else {\n      navigate();\n    }\n  }\n\n  refreshList(isAutorefresh: boolean) {\n    if (this.refreshing) {\n      return;\n    }\n    if (!isAutorefresh) {\n      this.refreshing = true;\n    }\n\n    this.store.dispatch(modelsActions.refreshModels({hideLoader: isAutorefresh, autoRefresh: isAutorefresh}));\n  }\n\n\n  showAllSelected(active: boolean) {\n    this.dispatchAndLock(modelsActions.showSelectedOnly({active, projectId: this.projectId}));\n  }\n\n  setAutoRefresh($event: boolean) {\n    this.store.dispatch(setAutoRefresh({autoRefresh: $event}));\n  }\n\n  columnsReordered(cols: string[], fromUrl = false) {\n    this.store.dispatch(modelsActions.setColsOrderForProject({cols, project: this.projectId, fromUrl}));\n  }\n\n  selectedTableColsChanged(col) {\n    this.dispatchAndLock(modelsActions.toggleColHidden({columnId: col.id, projectId: this.projectId}));\n  }\n\n  columnResized(event: { columnId: string; widthPx: number }) {\n    this.store.dispatch(modelsActions.setColumnWidth({\n      ...event,\n      projectId: this.projectId,\n    }));\n  }\n\n  refreshTagsList() {\n    this.store.dispatch(modelsActions.getTags());\n  }\n\n  closeModelPanel() {\n    this.router.navigate([`projects/${this.projectId}/models`], {queryParamsHandling: 'merge'});\n    window.setTimeout(() => this.infoDisabled = false);\n  }\n\n  protected getParamId(params) {\n    return params?.modelId;\n  }\n\n  createFooterItems(config: {\n    entitiesType: EntityTypeEnum;\n    selected$: Observable<Array<any>>;\n    showAllSelectedIsActive$: Observable<boolean>;\n    tags$: Observable<string[]>;\n    data$?: Observable<Record<string, CountAvailableAndIsDisableSelectedFiltered>>;\n    companyTags$:   Observable<string[]>;\n    projectTags$: Observable<string[]>;\n    tagsFilterByProject$: Observable<boolean>;\n  }) {\n    this.footerState$ = this.createFooterState(config.selected$, config.data$, config.showAllSelectedIsActive$, config.companyTags$, config.projectTags$, config.tagsFilterByProject$);\n\n    this.footerItems = [\n      new ShowItemsFooterSelected(config.entitiesType),\n      new DividerFooterItem(),\n\n      new ArchiveFooterItem(config.entitiesType),\n      new DeleteFooterItem(),\n      new SelectedTagsFooterItem(config.entitiesType),\n      new DividerFooterItem(),\n\n      new MoveToFooterItem(),\n      new PublishFooterItem(EntityTypeEnum.model),\n      new HasReadOnlyFooterItem()\n    ];\n  }\n  onFooterHandler({emitValue, item}) {\n    switch (item.id) {\n      case MenuItems.showAllItems:\n        this.showAllSelected(!emitValue);\n        break;\n      case MenuItems.archive:\n        this.table.contextMenuExtended.contextMenu.archiveClicked();\n        break;\n      case MenuItems.delete:\n        this.table.contextMenuExtended.contextMenu.deleteModelPopup();\n        break;\n      case MenuItems.moveTo:\n        this.table.contextMenuExtended.contextMenu.moveToProjectPopup();\n        break;\n      case MenuItems.publish:\n        this.table.contextMenuExtended.contextMenu.publishPopup();\n        break;\n    }\n  }\n\n  clearTableFiltersHandler(tableFilters: any) {\n    const filters = Object.keys(tableFilters).map( col => ({col, value: []}));\n    this.store.dispatch(setTableFilters({filters, projectId: this.projectId}));\n  }\n}\n","<div class=\"w-100 model-header\">\n  <sm-model-header\n    [minimizedView]=\"minimizedView\"\n    [isArchived]=\"isArchived$ | async\"\n    [disableCreateNewButton]=\"isExampleProject\"\n    [autoRefreshState]=\"autoRefreshState$ | async\"\n    [tableCols]=\"tableCols$ | async\"\n    [sharedView]=\"isSharedAndNotOwner$|async\"\n    [tableFilters]=\"tableFilters$ | async\"\n    (isArchivedChanged)=\"archivedChanged($event)\"\n    (setAutoRefresh)=\"setAutoRefresh($event)\"\n    (refreshListClicked)=\"refreshList(false)\"\n    (selectedTableColsChanged)=\"selectedTableColsChanged($event)\"\n    (clearTableFilters)=\"clearTableFiltersHandler($event)\"\n  ></sm-model-header>\n</div>\n<div class=\"models-body\" [class.footer-visible]=\"(selectedModels$ | async)?.length > 1|| (showAllSelectedIsActive$ |async)\">\n  <as-split #split\n            [useTransition]=\"true\"\n            [gutterDblClickDuration]=\"400\"\n            (gutterClick)=\"clickOnSplit()\"\n            (gutterDblClick)=\"closeModelPanel()\"\n            (dragEnd)=\"splitSizeChange($event)\"\n            (dragStart)=\"disableInfoPanel()\"\n            (transitionEnd)=\"modelsTable.table.resize(); modelsTable.afterTableInit()\"\n  >\n    <as-split-area [size]=\"100 - splitInitialSize\" [visible]=\"(isSharedAndNotOwner$ | async) !== true\">\n      <sm-models-table\n        #modelsTable\n        class=\"w-100 align-self-stretch\"\n        selectionMode=\"single\"\n        [models]=\"models$ | async\"\n        [tableCols]=\"tableCols$ | async\"\n        [minimizedView]=\"minimizedView\"\n        [noMoreModels]=\"noMoreModels$ | async\"\n        [users]=\"users$ |async\"\n        [frameworks]=\"frameworks$ |async\"\n        [tags]=\"tags$ | async\"\n        [systemTags]=\"systemTags$ | async\"\n        [tableSortFields]=\"(tableSortFields$ | async)\"\n        [tableSortOrder]=\"(tableSortOrder$ | async)\"\n        [tableFilters]=\"(tableFilters$ | async)\"\n        [colsOrder]=\"(tableColsOrder$ | async)\"\n        [selectedModels]=\"selectedModels$ | async\"\n        [selectedModelsDisableAvailable]=\"selectedModelsDisableAvailable$ | async\"\n        [selectedModel]=\"selectedModel$ | async\"\n        [split]=\"selectSplitSize$ | async\"\n        [enableMultiSelect]=\"true\"\n        (columnsReordered)=\"columnsReordered($event)\"\n        (modelSelectionChanged)=\"modelSelectionChanged($event)\"\n        (modelsSelectionChanged)=\"modelsSelectionChanged($event)\"\n        (tagsMenuOpened)=\"refreshTagsList()\"\n        (sortedChanged)=\"sortedChanged($event)\"\n        (columnResized)=\"columnResized($event)\"\n        (filterChanged)=\"filterChanged($event)\"\n        (loadMoreModels)=\"getNextModels()\"\n      >\n      </sm-models-table>\n    </as-split-area>\n    <as-split-area [size]=\"splitInitialSize\" class=\"light-theme\" [visible]=\"minimizedView\">\n      <router-outlet></router-outlet>\n    </as-split-area>\n  </as-split>\n</div>\n<sm-entity-footer\n [footerState]=\"footerState$ | async\"\n [footerItems]=\"footerItems\"\n (footerItemClick)=\"onFooterHandler($event)\"\n (tagSelected)=\"tagSelected($event, 'models')\"\n>\n</sm-entity-footer>\n","<sm-overlay [backdropActive]=\"backdropActive\"></sm-overlay>\n\n<div class=\"d-flex\">\n  <div class=\"p-2 icon i-model model-icon xl\"></div>\n  <div class=\"middle-col\">\n    <div class=\"d-flex align-items-center\">\n      <sm-inline-edit\n        class=\"edit-name\"\n        [originalText]=\"model?.name\"\n        [editable]=\"editable\"\n        [minWidth]=\"250\"\n        (textChanged)=\"onNameChanged($event)\"\n        (inlineActiveStateChanged)=\"editExperimentName($event)\"\n      >\n        <div class=\"model-name\">\n          <span>{{model?.name}}</span>\n        </div>\n      </sm-inline-edit>\n      <i class=\"al-icon al-ico-id pointer\" (click)=\"viewId = true\" *ngIf=\"!viewId; else showId\"></i>\n      <ng-template #showId>\n        <span class=\"model-id\">{{model.id}}</span>\n      </ng-template>\n    </div>\n    <div class=\"tags-list\">\n      <sm-tag-list\n        *ngIf=\"editable; else readOnlyTags\"\n        class=\"w-100\"\n        [class.menu-open]=\"tagMenu?.trigger.menuOpen\"\n        [sysTags]=\"sysTags\"\n        [tags]=\"model?.tags\"\n        (add)=\"openTagMenu($event)\"\n        (remove)=\"removeTag($event)\"></sm-tag-list>\n      <ng-template #readOnlyTags>\n        <sm-tag-list\n          class=\"w-100\"\n          [sysTags]=\"sysTags\"\n          [tags]=\"model?.tags\"></sm-tag-list>\n      </ng-template>\n      <sm-menu\n        #tagMenu\n        [showCart]=\"false\"\n        [showButton]=\"false\"\n        [showOverlay]=\"false\"\n        (menuClosed)=\"tagsMenuClosed()\"\n      >\n        <sm-tags-menu\n          class=\"light-theme\"\n          #tagsMenuContent\n          [tags]=\"model?.tags\"\n          [tagsFilterByProject]=\"tagsFilterByProject$ | async\"\n          [projectTags]=\"projectTags$ | async\"\n          [companyTags]=\"companyTags$ | async\"\n          (tagSelected)=\"addTag($event)\"\n        ></sm-tags-menu>\n      </sm-menu>\n    </div>\n  </div>\n  <div class=\"light-theme right-buttons\">\n    <sm-model-menu-extended\n      [model]=\"model\"\n      [selectedModel]=\"model\"\n      [tagsFilterByProject]=\"tagsFilterByProject$ | async\"\n      [selectedDisableAvailableIsMultiple]=\"false\"\n      [selectedDisableAvailable]=\"selectedDisableAvailable\"\n      [projectTags]=\"projectTags$ | async\"\n      [companyTags]=\"companyTags$ | async\"\n      [numSelected]=\"1\"\n      (tagSelected)=\"addTag($event)\">\n    </sm-model-menu-extended>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {TagsMenuComponent} from '../../../shared/ui-components/tags/tags-menu/tags-menu.component';\nimport {Store} from '@ngrx/store';\nimport {selectCompanyTags, selectProjectTags, selectTagsFilterByProject} from '../../../core/reducers/projects.reducer';\nimport {Observable} from 'rxjs';\nimport {addTag, removeTag} from '../../actions/models-menu.actions';\nimport {SelectedModel, TableModel} from '../../shared/models.model';\nimport {MenuComponent} from '../../../shared/ui-components/panel/menu/menu.component';\nimport {getSysTags} from '../../model.utils';\nimport {ActivateModelEdit, CancelModelEdit} from '../../actions/models-info.actions';\nimport {\n  CountAvailableAndIsDisableSelectedFiltered,\n  MenuItems,\n  selectionDisabledArchive,\n  selectionDisabledDelete,\n  selectionDisabledMoveTo,\n  selectionDisabledPublishModels\n} from '../../../shared/entity-page/items.utils';\n\n@Component({\n  selector   : 'sm-model-info-header',\n  templateUrl: './model-info-header.component.html',\n  styleUrls  : ['./model-info-header.component.scss']\n})\nexport class ModelInfoHeaderComponent {\n\n  public viewId: boolean;\n  public tagsFilterByProject$: Observable<boolean>;\n  public projectTags$: Observable<string[]>;\n  public companyTags$: Observable<string[]>;\n  public sysTags: string[];\n  selectedDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered>;\n\n  @Input() editable: boolean;\n  @Input() backdropActive: boolean;\n  @Output() deselectModel    = new EventEmitter();\n  @Output() modelNameChanged = new EventEmitter();\n  @ViewChild('tagMenu') tagMenu: MenuComponent;\n  @ViewChild('tagsMenuContent') tagMenuContent: TagsMenuComponent;\n\n  constructor(private store: Store<any>) {\n    this.tagsFilterByProject$ = this.store.select(selectTagsFilterByProject);\n    this.projectTags$ = this.store.select(selectProjectTags);\n    this.companyTags$ = this.store.select(selectCompanyTags);\n\n  }\n\n  private _model: TableModel | SelectedModel;\n\n  get model() {\n    return this._model;\n  }\n\n  @Input() set model(model: TableModel | SelectedModel) {\n    if (this._model?.id != model?.id) {\n      this.viewId = false;\n    }\n    this._model = model;\n    this.sysTags = getSysTags(model as TableModel);\n    const selectedModelsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> = {\n      [MenuItems.publish]: selectionDisabledPublishModels([model]),\n      [MenuItems.moveTo]: selectionDisabledMoveTo([model]),\n      [MenuItems.delete]: selectionDisabledDelete([model]),\n      [MenuItems.archive]: selectionDisabledArchive([model])\n    };\n    this.selectedDisableAvailable = selectedModelsDisableAvailable;\n  }\n\n  public onNameChanged(name) {\n    this.modelNameChanged.emit(name);\n  }\n\n  openTagMenu(event: MouseEvent) {\n    if (!this.tagMenu) {\n      return;\n    }\n    window.setTimeout(() => this.store.dispatch(new ActivateModelEdit('tags')), 200);\n    this.tagMenu.position = {x: event.clientX, y: event.clientY};\n    window.setTimeout(() => {\n      this.tagMenu.openMenu();\n      this.tagMenuContent.focus();\n    });\n  }\n\n  addTag(tag: string) {\n    this.store.dispatch(addTag({tag, models: [this.model as SelectedModel]}));\n  }\n\n  removeTag(tag: string) {\n    this.store.dispatch(removeTag({tag, models: [this.model as SelectedModel]}));\n  }\n\n  tagsMenuClosed() {\n    this.store.dispatch(new CancelModelEdit());\n    this.tagMenuContent.clear();\n  }\n\n  editExperimentName(edit: boolean) {\n    if (edit) {\n      this.store.dispatch(new ActivateModelEdit('ModelName'));\n    } else {\n      this.store.dispatch(new CancelModelEdit());\n    }\n  }\n}\n","import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {selectRouterParams} from '../../../core/reducers/router-reducer';\nimport {Store} from '@ngrx/store';\nimport {ModelInfoState} from '../../reducers/model-info.reducer';\nimport {get} from 'lodash/fp';\nimport * as infoActions from '../../actions/models-info.actions';\nimport {selectSelectedModel, selectSelectedTableModel} from '../../reducers';\nimport {SelectedModel} from '../../shared/models.model';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {selectS3BucketCredentials} from '../../../core/reducers/common-auth-reducer';\nimport {SmSyncStateSelectorService} from '../../../core/services/sync-state-selector.service';\nimport {Observable, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport {addMessage} from '../../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../../app.constants';\nimport {isReadOnly} from '../../../shared/utils/shared-utils';\nimport {selectBackdropActive} from '../../../core/reducers/view.reducer';\n\n\n@Component({\n  selector   : 'sm-model-info',\n  templateUrl: './model-info.component.html',\n  styleUrls  : ['./model-info.component.scss']\n})\nexport class ModelInfoComponent implements OnInit, OnDestroy {\n\n  private paramsSubscription: Subscription;\n  public selectedModel: SelectedModel;\n  private selectedModelSubscription: Subscription;\n  private S3BucketCredentials: Observable<any>;\n  @ViewChild('modelInfoHeader', { static: true }) modelInfoHeader;\n  public selectedModel$: Observable<SelectedModel | null>;\n  public isExample: boolean;\n  public backdropActive$: Observable<any>;\n  private projectId: string;\n  public selectedTableModel$: Observable<SelectedModel>;\n\n  constructor(private router: Router, private store: Store<ModelInfoState>, private route: ActivatedRoute, private adminService: AdminService, private syncSelector: SmSyncStateSelectorService) {\n    this.S3BucketCredentials = store.select(selectS3BucketCredentials);\n    this.backdropActive$ = this.store.select(selectBackdropActive);\n    this.selectedTableModel$ = this.store.select(selectSelectedTableModel);\n  }\n\n  ngOnInit() {\n    this.selectedModelSubscription = this.store.select(selectSelectedModel)\n      .subscribe(model => {\n        this.selectedModel = model;\n        this.isExample     = isReadOnly(model);\n      });\n    this.paramsSubscription = this.store.select(selectRouterParams)\n      .pipe(\n        tap((params) => {\n          this.projectId = get('projectId', params);\n        }),\n        debounceTime(150),\n        map(params => get('modelId', params)),\n        filter(modelId => !!modelId),\n        distinctUntilChanged()\n      )\n      .subscribe(modelId => this.store.dispatch(new infoActions.GetModelInfo(modelId)));\n    this.selectedModel$            = this.store.select(selectSelectedModel).pipe(filter(model => !!model));\n  }\n\n  ngOnDestroy(): void {\n    this.paramsSubscription.unsubscribe();\n    this.selectedModelSubscription.unsubscribe();\n    this.store.dispatch(new infoActions.SetModel(null));\n  }\n\n  public updateModelName(name) {\n    if (name.trim().length > 2) {\n      this.store.dispatch(infoActions.updateModelDetails({id: this.selectedModel.id, changes: {name}}));\n    } else {\n      this.store.dispatch(addMessage(MESSAGES_SEVERITY.ERROR, 'Name must be more than three letters long'));\n    }\n  }\n\n  public getReadyStatus(ready) {\n    if (ready === null) {\n      return null;\n    }\n    return ready ? 'published' : 'created';\n  }\n\n  deselectModel() {\n    return this.navigateAfterModelSelectionChanged();\n  }\n\n  navigateAfterModelSelectionChanged() {\n    return this.router.navigate([`projects/${this.projectId}/models`], {queryParamsHandling: 'preserve'});\n  }\n}\n\n","<sm-experiment-info-header-status-progress-bar\n  [status]=\"getReadyStatus((selectedTableModel$ | async)?.ready || selectedModel?.ready)\"\n  (closeInfoClicked)=\"deselectModel()\"\n>\n</sm-experiment-info-header-status-progress-bar>\n<div class=\"model-info-container light-theme\">\n  <sm-model-info-header #modelInfoHeader\n                        [model]=\"((selectedTableModel$ | async) || selectedModel)\"\n                        [editable]=\"!isExample\"\n                        [backdropActive]=\"backdropActive$ | async\"\n                        (deselectModel)=\"deselectModel()\"\n                        (modelNameChanged)=\"updateModelName($event)\"\n  >\n  </sm-model-info-header>\n  <nav>\n    <span [routerLink]=\"['general']\" routerLinkActive #rlaGeneral=\"routerLinkActive\" queryParamsHandling=\"merge\">\n      <sm-navbar-item header=\"general\" [active]=\"rlaGeneral.isActive\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['network']\" routerLinkActive #rlaNetwork=\"routerLinkActive\" queryParamsHandling=\"merge\">\n      <sm-navbar-item header=\"network\" [active]=\"rlaNetwork.isActive\"></sm-navbar-item>\n    </span>\n    <span [routerLink]=\"['labels']\" routerLinkActive #rlaLabels=\"routerLinkActive\" queryParamsHandling=\"merge\">\n      <sm-navbar-item header=\"labels\" [active]=\"rlaLabels.isActive\"></sm-navbar-item>\n    </span>\n  </nav>\n  <div class=\"model-info-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","<div *ngFor=\"let kpi of kpis\">\n  <sm-labeled-row label=\"{{kpi.label}}:\">\n    <div *ngIf=\"!kpi.href\">\n      {{kpi.value}}\n      <span *ngIf=\"kpi.downloadable\">\n        <sm-copy-clipboard *ngIf=\"isLocalFile\" [clipboardText]=\"kpi.value\" [hideBackground]=\"true\" label=\"\"></sm-copy-clipboard>\n        <i *ngIf=\"model?.uri && !isLocalFile\"\n           class=\"pointer fa fa-download ml-2\"\n           (click)=\"downloadModelClicked()\"\n        ></i>\n      </span>\n    </div>\n    <div *ngIf=\"kpi.href && kpi.value\">\n      <a [routerLink]=\"kpi.href\">\n        {{kpi.value}}\n      </a>\n      <sm-copy-clipboard  [clipboardText]=\"kpi.task\" [hideBackground]=\"true\" label=\"\"></sm-copy-clipboard>\n    </div>\n    <div *ngIf=\"kpi.href && (!kpi.value) \">N/A</div>\n  </sm-labeled-row>\n</div>\n\n<sm-labeled-row label=\"DESCRIPTION:\" labelClass=\"align-self-start\">\n  <sm-inline-edit\n    [originalText]=\"model?.comment\"\n    [editable]=\"model?.company?.id\"\n    [multiline]=\"true\"\n    (textChanged)=\"commentValueChanged($event)\"\n    (inlineActiveStateChanged)=\"editExperimentComment($event)\"\n    (cancel)=\"cancelEdit()\"\n    >\n    <span class=\"general-description\">{{model?.comment | NA}}</span></sm-inline-edit>\n</sm-labeled-row>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {getOr} from 'lodash/fp';\nimport {SelectedModel} from '../../shared/models.model';\nimport {NA} from '../../../../app.constants';\nimport {TAGS} from '../../../tasks/tasks.constants';\nimport {DatePipe} from '@angular/common';\nimport {TIME_FORMAT_STRING} from '../../../constants';\nimport {Store} from '@ngrx/store';\nimport {ActivateModelEdit, CancelModelEdit} from '../../actions/models-info.actions';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {getSignedUrl} from '../../../core/actions/common-auth.actions';\nimport {selectSignedUrl} from '../../../core/reducers/common-auth-reducer';\nimport {filter, map, take} from 'rxjs/operators';\n\n@Component({\n  selector: 'sm-model-general-info',\n  templateUrl: './model-general-info.component.html',\n  styleUrls: ['./model-general-info.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ModelGeneralInfoComponent {\n  constructor(private datePipe: DatePipe, private store: Store<any>, private adminService: AdminService) {\n  }\n\n  public kpis: {label: string; value: string, downloadable?: boolean; href?: string; task?: string}[];\n  private _model: SelectedModel;\n  public isLocalFile: boolean;\n\n  @Input() editable: boolean;\n  @Input() projectId: string;\n\n  @Input() set model(model: SelectedModel) {\n    this._model = model;\n    if (model) {\n      this.isLocalFile = this.adminService.isLocalFile(model.uri);\n      this.kpis = [\n        {label: 'CREATED AT', value: model.created ? (this.datePipe.transform(model.created, TIME_FORMAT_STRING)) : 'NA'},\n        {label: 'UPDATED AT', value: model.last_update ? (this.datePipe.transform(model.last_update, TIME_FORMAT_STRING)) : 'NA'},\n        {label: 'FRAMEWORK', value: model.framework || NA},\n        {label: 'STATUS', value: (model.ready !== undefined) ? (model.ready ? 'Published' : 'Draft') : NA},\n        {label: 'MODEL URL', value: model.uri || NA, downloadable: true},\n        {label: 'USER', value: getOr(NA, 'user.name', model)},\n        {\n          label: 'CREATING EXPERIMENT', value: getOr(false, 'task.name', model),\n          href: `/projects/${getOr('*', 'task.project.id', model)}/experiments/${getOr('', 'task.id', model)}`,\n          task: getOr(false, 'task.id', model)\n        },\n        {label: 'ARCHIVED', value: model && model.system_tags && model.system_tags.includes(TAGS.HIDDEN) ? 'Yes' : 'No'},\n        {label: 'PROJECT', value: getOr(NA, 'project.name', model)},\n      ];\n    }\n  }\n\n  get model(): SelectedModel {\n    return this._model;\n  }\n\n  @Output() showModel = new EventEmitter();\n  @Output() commentChanged = new EventEmitter<string>();\n\n  commentValueChanged(value) {\n    this.commentChanged.emit(value);\n  }\n\n  public canShowModel() {\n    return !!this.model && !'Custom'.includes(this.model.framework);\n  }\n\n  onShowModel() {\n    this.showModel.emit(this.model);\n  }\n\n  editExperimentComment(edit) {\n    edit && this.store.dispatch(new ActivateModelEdit('ModelComment'));\n  }\n\n  cancelEdit() {\n    this.store.dispatch(new CancelModelEdit());\n  }\n\n  downloadModelClicked() {\n    const url = this.model.uri;\n    this.store.dispatch(getSignedUrl({url}));\n    this.store.select(selectSignedUrl(url))\n      .pipe(\n        filter(signed => !!signed?.signed),\n        map(({signed: signedUrl}) => signedUrl),\n        take(1)\n      ).subscribe(signed => {\n      const a = document.createElement('a') as HTMLAnchorElement;\n      a.target = '_blank';\n      a.href = signed;\n      a.click();\n    });\n  }\n}\n","import {Component, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ModelInfoState} from '../../reducers/model-info.reducer';\nimport {Store} from '@ngrx/store';\nimport {SelectedModel} from '../../shared/models.model';\nimport {selectSelectedModel} from '../../reducers';\nimport {filter} from 'rxjs/operators';\nimport {resetDontShowAgainForBucketEndpoint} from '../../../core/actions/common-auth.actions';\nimport {createModelLink, isReadOnly} from '../../../shared/utils/shared-utils';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {ModelDetailsUpdated, updateModelDetails} from '../../actions/models-info.actions';\n\n@Component({\n  selector: 'sm-model-info-general',\n  templateUrl: './model-info-general.component.html',\n})\nexport class ModelInfoGeneralComponent implements OnDestroy {\n\n  public selectedModel: SelectedModel;\n  public isExample: boolean;\n  private selectedModelSubscription: Subscription;\n\n  constructor(private store: Store<ModelInfoState>, private adminService: AdminService) {\n    this.selectedModelSubscription = this.store.select(selectSelectedModel).pipe(\n      filter(model => !!model))\n      .subscribe(model => {\n        this.isExample     = isReadOnly(model);\n        this.selectedModel = model;\n      });\n  }\n\n  showModel(model) {\n    this.store.dispatch(resetDontShowAgainForBucketEndpoint());\n    const modelSignedUri = this.adminService.signUrlIfNeeded(model.uri);\n    if (modelSignedUri) {\n      window.open(createModelLink(model.uri, model.id, modelSignedUri));\n    }\n  }\n\n  commentChanged(comment) {\n    this.store.dispatch(updateModelDetails({id: this.selectedModel.id, changes: {comment: comment}}));\n  }\n\n  ngOnDestroy(): void {\n    this.selectedModelSubscription.unsubscribe();\n  }\n\n}\n","<sm-model-general-info\n  [model]=\"selectedModel\"\n  [editable]=\"!isExample\"\n  (showModel)=\"showModel($event)\"\n  (commentChanged)=\"commentChanged($event)\"\n></sm-model-general-info>\n","<sm-editable-section\n  #prototext\n  [editable]=\"!model?.ready && model?.company?.id && !isSharedAndNotOwner\"\n  [saving]=\"saving\"\n  [disableInEditMode]=\"true\"\n  (activateEditClicked)=\"activateEdit(); editPrototext()\"\n  (saveClicked)=\"saveClicked()\"\n  (cancelClicked)=\"cancelEdit()\"\n>\n  <sm-section-header label=\"MODEL CONFIGURATION\"></sm-section-header>\n  <div class=\"light-theme textarea-container\">\n    <sm-scroll-textarea\n      class=\"form-section\"\n      [editable]=\"inEditMode && prototext.inEditMode\"\n      [isInDev]=\"false\"\n      [formData]=\"design ?? ''\"\n      [showSpinner]=\"false\"></sm-scroll-textarea>\n  </div>\n  <button extra-buttons\n          *ngIf=\"design\"\n          class=\"btn-dark-fill mr-3 flex-1\"\n          (click)=\"clearPrototext()\">\n    <i class=\"p-1 fa fa-trash\"></i>\n    CLEAR\n  </button>\n</sm-editable-section>\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {getModelDesign} from '@common/tasks/tasks.utils';\nimport {EditJsonComponent} from '@common/shared/ui-components/overlay/edit-json/edit-json.component';\nimport {take} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '@common/shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {EditableSectionComponent} from '@common/shared/ui-components/panel/editable-section/editable-section.component';\n\n@Component({\n  selector   : 'sm-model-view-network',\n  templateUrl: './model-view-network.component.html',\n  styleUrls  : ['./model-view-network.component.scss']\n})\nexport class ModelViewNetworkComponent {\n  private _model: any;\n  public design: string;\n  private designKey: string;\n\n  @Input() set model(model) {\n    this._model = model;\n    const design = getModelDesign(model?.design)\n    this.designKey = design.key;\n    this.design = typeof design.value === 'string' ? design.value : '';\n  }\n\n  get model() {\n    return this._model;\n  }\n  @Input() isSharedAndNotOwner: boolean = false;\n  @Input() saving: boolean;\n  @Output() openNetworkDesignClicked: EventEmitter<any> = new EventEmitter();\n  @Output() saveFormData = new EventEmitter();\n  @Output() cancelClicked = new EventEmitter();\n  @Output() activateEditClicked = new EventEmitter();\n  @ViewChild('prototext') prototextSection: EditableSectionComponent;\n  public inEditMode: boolean = false;\n  private unsavedValue: string;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  fieldValueChanged(value: any) {\n    this.unsavedValue = value;\n    this.design = value;\n  }\n\n  activateEdit() {\n    this.inEditMode = true;\n    this.activateEditClicked.emit();\n  }\n\n  saveClicked() {\n    this.inEditMode = false;\n    this.saveFormData.emit({...this.model, design: this.designKey ? {[this.designKey]: this.unsavedValue} : this.unsavedValue});\n  }\n\n  cancelEdit() {\n    this.inEditMode = false;\n    this.cancelClicked.emit();\n  }\n\n  editPrototext() {\n    const editPrototextDialog = this.dialog.open(EditJsonComponent, {\n      data: {textData: this.design, readOnly: false, title: 'EDIT MODEL CONFIGURATION', typeJson: false}\n    });\n\n    editPrototextDialog.afterClosed().pipe(take(1)).subscribe((data) => {\n      if (data === undefined) {\n        this.prototextSection.cancelClickedEvent();\n      } else {\n        this.fieldValueChanged(data);\n        this.saveClicked();\n      }\n    });\n  }\n\n  clearPrototext() {\n    const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n      data: {\n        title    : 'Clear model configuration',\n        body     : 'Are you sure you want to clear the entire contents of Model Configuration?',\n        yes      : 'Clear',\n        no       : 'Keep',\n        iconClass: 'al-icon al-ico-trash al-color blue-300',\n      }\n    });\n\n    confirmDialogRef.afterClosed().pipe(take(1)).subscribe((confirmed) => {\n      if (confirmed) {\n        this.activateEdit();\n        this.fieldValueChanged('');\n        this.saveClicked();\n      }\n    });\n  }\n}\n\n","import {Component, OnInit} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {ISelectedModelInput} from '../../shared/models.model';\nimport {Store} from '@ngrx/store';\nimport {ModelInfoState} from '../../reducers/model-info.reducer';\nimport {selectIsModelSaving, selectSelectedModel} from '../../reducers';\nimport {ActivateModelEdit, CancelModelEdit, EditModel, SetIsModelSaving} from '../../actions/models-info.actions';\nimport {selectIsSharedAndNotOwner} from '../../../../features/experiments/reducers';\n\n@Component({\n  selector   : 'sm-model-info-network',\n  templateUrl: './model-info-network.component.html',\n  styleUrls  : ['./model-info-network.component.scss']\n})\nexport class ModelInfoNetworkComponent implements OnInit {\n  public selectedModel$: Observable<ISelectedModelInput>;\n  public saving$: Observable<boolean>;\n  public isSharedAndNotOwner$: Observable<boolean>;\n\n  constructor(private store: Store<ModelInfoState>) {\n    this.selectedModel$ = this.store.select(selectSelectedModel);\n    this.isSharedAndNotOwner$ = this.store.select(selectIsSharedAndNotOwner);\n    this.saving$         = this.store.select(selectIsModelSaving);\n  }\n  ngOnInit() {\n  }\n\n  saveFormData(changedModel) {\n    this.store.dispatch(new SetIsModelSaving(true));\n    this.store.dispatch(new EditModel(changedModel));\n  }\n  cancelClicked() {\n    this.store.dispatch(new CancelModelEdit());\n  }\n\n  activateEditClicked() {\n    this.store.dispatch(new ActivateModelEdit('network'));\n  }\n}\n","<sm-model-view-network\n  [model]=\"(selectedModel$ | async)\"\n  [isSharedAndNotOwner]=\"isSharedAndNotOwner$ | async\"\n  [saving]=\"(saving$ | async)\"\n  (saveFormData)=\"saveFormData($event)\"\n  (cancelClicked)=\"cancelClicked()\"\n  (activateEditClicked)=\"activateEditClicked()\"\n></sm-model-view-network>\n","<sm-editable-section\n  class=\"d-block\"\n  [editable]=\" ! model?.ready && model?.company?.id && !isSharedAndNotOwner\"\n  [saving]=\"saving\"\n  (activateEditClicked)=\"activateEdit()\"\n  (saveClicked)=\"saveClicked()\"\n  (cancelClicked)=\"cancelEdit()\"\n>\n  <ng-template #na>N/A</ng-template>\n\n\n    <sm-section-header label=\"LABELS\"></sm-section-header>\n    <form #labels=\"ngForm\"\n    >\n      <div [hidden]=\"!editable\">\n        <div *ngFor=\"let parameter of formData; let i = index\">\n          <div class=\"row w-100 align-items-center\">\n            <div class=\"input-container col-11\">\n              <mat-form-field appearance=\"outline\" class=\"strength w-100\">\n                <input #parameterLabel=\"ngModel\"\n                       [(ngModel)]=\"parameter.label\"\n                       [name]=\"'parameterLabel-' + parameter.id\"\n                       matInput>\n              </mat-form-field>\n\n            </div>\n\n            <div class=\"input-container col-11\">\n              <mat-form-field [hintLabel]=\"parameterKey.invalid && parameterKey?.errors?.required? '*Required': ''\" appearance=\"outline\" class=\"strength w-100\">\n                <input #parameterKey=\"ngModel\" [(ngModel)]=\"parameter.id\"\n                       type=\"number\"\n                       [name]=\"'parameterKey-' + parameter.id\"\n                       matInput\n                       required>\n                <mat-error *ngIf=\"parameterKey.invalid && parameterKey?.errors?.required\">\n                  Required\n                </mat-error>\n                <mat-error *ngIf=\"parameterKey.invalid && parameterKey?.errors?.smNotAllowedStringsValidator\">\n                  .(dot) $(dollar) and space are not allowed in parameter id.\n                </mat-error>\n              </mat-form-field>\n\n\n            </div>\n\n            <div class=\"input-container col-2 remove-step\">\n              <i (click)=\"removeRow(i)\" class=\"al-icon al-ico-trash al-color blue-300 sm-md pointer flashing-icon mb-2\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  <div class=\"row\">\n    <div class=\"col-24\">\n    <button *ngIf=\"editable\" class=\"btn btn-primary plus\" (click)=\"addRow()\"><i class=\"al-icon al-color blue-400 sm al-ico-plus d-flex align-items-center\"></i>\n    </button>\n    </div>\n  </div>\n    <div *ngIf=\"!editable\">\n\n      <sm-simple-table-2 [cols]=\"cols\" [rowsData]=\"formData\">\n        <ng-template\n          let-col\n          let-i=\"rowIndex\"\n          let-row=\"row\">\n          <div class=\"row w-100\">\n            <div class=\"input-container col-10\">\n              <b>{{row.label}}</b>\n            </div>\n            <div class=\"input-container col-4\">\n              <b>{{row.id}}</b>\n            </div>\n          </div>\n        </ng-template>\n      </sm-simple-table-2>\n    </div>\n</sm-editable-section>\n\n\n\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild} from '@angular/core';\nimport {Model} from '../../../../business-logic/model/models/model';\nimport {NgForm} from '@angular/forms';\nimport {debounceTime} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {SelectedModel} from '../../shared/models.model';\n\n@Component({\n  selector: 'sm-model-info-labels-view',\n  templateUrl: './model-info-labels-view.component.html',\n  styleUrls: ['./model-info-labels-view.component.scss']\n})\nexport class ModelInfoLabelsViewComponent implements OnInit, OnDestroy {\n  public formData: Array<{ label: string; id: number }> = [];\n  public editable: boolean = false;\n  public cols = [{header: 'Label', class: 'col-10'},\n    {header: 'Id', class: 'col-4'}];\n\n  private unsavedValue: any;\n  private formChangesSubscription: Subscription;\n  private _model: SelectedModel;\n\n  @ViewChild('labels', {static: true}) labels: NgForm;\n\n  @Input() set model(model: SelectedModel) {\n    if (model) {\n      this.formData = this.revertParameters(model.labels);\n    }\n    this._model = model;\n  }\n\n  get model() {\n    return this._model;\n  }\n\n  @Input() saving = false;\n  @Input() isSharedAndNotOwner: boolean = false;\n  @Output() saveFormData = new EventEmitter();\n  @Output() cancelClicked = new EventEmitter();\n  @Output() activateEditClicked = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.formChangesSubscription = this.labels.valueChanges.pipe(debounceTime(10)).subscribe(formValue => {\n      if (this.editable) {\n        this.unsavedValue = this.formData;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.formChangesSubscription.unsubscribe();\n  }\n\n  activateEdit() {\n    this.editable = true;\n    this.activateEditClicked.emit();\n  }\n\n  addRow() {\n    this.formData.push({\n      id: this.formData.length + 1,\n      label: null,\n    });\n  }\n\n  removeRow(index) {\n    this.formData.splice(index, 1);\n  }\n\n  saveClicked() {\n    this.editable = false;\n    this.saveFormData.emit({...this.model, labels: this.convertParameters(this.unsavedValue)});\n  }\n\n  cancelEdit() {\n    this.editable = false;\n    this.cancelClicked.emit();\n  }\n\n  // TODO: move to utils.\n  revertParameters(labels: Model['labels']): Array<{ id: number, label: string }> {\n    return labels ? Object.entries(labels).map(([key, val]) => ({id: val, label: key})).sort((labelA, labelB) => labelA.id - labelB.id) : [];\n  }\n\n  convertParameters(labels: Array<{ id: number, label: string }>): Model['labels'] {\n    const obj = {};\n    labels.forEach(l => {\n      obj[l.label] = l.id;\n    });\n    return obj;\n  }\n\n}\n","import {Component} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {SelectedModel} from '../../shared/models.model';\nimport {ModelInfoState} from '../../reducers/model-info.reducer';\nimport {Observable} from 'rxjs';\nimport {selectIsModelSaving, selectSelectedModel} from '../../reducers';\nimport {filter} from 'rxjs/operators';\nimport {ActivateModelEdit, CancelModelEdit, EditModel, SetIsModelSaving} from '../../actions/models-info.actions';\nimport {selectIsSharedAndNotOwner} from \"../../../../features/experiments/reducers\";\n\n@Component({\n  selector: 'sm-model-info-labels',\n  templateUrl: './model-info-labels.component.html',\n  styleUrls: ['./model-info-labels.component.scss']\n})\nexport class ModelInfoLabelsComponent {\n\n  public selectedModel$: Observable<SelectedModel>;\n  public saving$: Observable<boolean>;\n  public isSharedAndNotOwner$: Observable<boolean>;\n\n  constructor(private store: Store<ModelInfoState>) {\n    this.selectedModel$ = this.store.select(selectSelectedModel).pipe(filter(model => !!model));\n    this.saving$         = this.store.select(selectIsModelSaving);\n    this.isSharedAndNotOwner$ = this.store.select(selectIsSharedAndNotOwner);\n  }\n  ngOnInit() {\n  }\n\n  saveFormData(changedModel) {\n    this.store.dispatch(new SetIsModelSaving(true));\n    this.store.dispatch(new EditModel(changedModel));\n  }\n  cancelClicked() {\n    this.store.dispatch(new CancelModelEdit());\n  }\n\n  activateEditClicked() {\n    this.store.dispatch(new ActivateModelEdit('labels'));\n  }\n}\n","<sm-model-info-labels-view\n  [model]=\"selectedModel$ |async\"\n  [isSharedAndNotOwner]=\"isSharedAndNotOwner$ | async\"\n  [saving]=\"(saving$ | async)\"\n  (saveFormData)=\"saveFormData($event)\"\n  (cancelClicked)=\"cancelClicked()\"\n  (activateEditClicked)=\"activateEditClicked()\"\n></sm-model-info-labels-view>\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {ModelsComponent} from './models.component';\nimport {ModelInfoComponent} from './containers/model-info/model-info.component';\nimport {ModelInfoGeneralComponent} from './containers/model-info-general/model-info-general.component';\nimport {ModelInfoNetworkComponent} from './containers/model-info-network/model-info-network.component';\nimport {ModelInfoLabelsComponent} from './containers/model-info-labels/model-info-labels.component';\nimport {LeavingBeforeSaveAlertGuard} from '../shared/guards/leaving-before-save-alert.guard';\n\nexport const routes: Routes = [\n  {\n    path     : '',\n    component: ModelsComponent,\n    children : [\n      {\n        path    : ':modelId', component: ModelInfoComponent,\n        children: [\n          {path: '', redirectTo: 'general'},\n          {path: 'general', component: ModelInfoGeneralComponent},\n          {path: 'network', component: ModelInfoNetworkComponent, canDeactivate: [LeavingBeforeSaveAlertGuard]},\n          {path: 'labels', component: ModelInfoLabelsComponent, canDeactivate: [LeavingBeforeSaveAlertGuard]},\n        ]\n      },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class ModelRouterModule {\n}\n\n","import {Injectable} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {get, isEqual, uniq} from 'lodash/fp';\nimport {EMPTY, of} from 'rxjs';\nimport {\n  auditTime,\n  catchError,\n  expand,\n  filter,\n  map,\n  mergeMap,\n  reduce,\n  switchMap,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport {ApiModelsService} from '~/business-logic/api-services/models.service';\nimport {BlModelsService} from '~/business-logic/services/models.service';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {activeLoader, addMessage, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {setArchive as setProjectArchive} from '../../core/actions/projects.actions';\nimport {setURLParams} from '../../core/actions/router.actions';\nimport {selectIsArchivedMode, selectIsDeepMode, selectSelectedProjectId} from '../../core/reducers/projects.reducer';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {selectAppVisible} from '../../core/reducers/view.reducer';\nimport {addMultipleSortColumns, escapeRegex, getRouteFullUrl} from '../../shared/utils/shared-utils';\nimport {GetModelInfo, RefreshModelInfo} from '../actions/models-info.actions';\nimport * as actions from '../actions/models-view.actions';\nimport {setSelectedModelsDisableAvailable} from '../actions/models-view.actions';\nimport {MODELS_PAGE_SIZE, MODELS_TABLE_COLS} from '../models.consts';\nimport * as modelsSelectors from '../reducers';\nimport {selectSelectedModels, selectTableSortFields} from '../reducers';\nimport {IModelsViewState} from '../reducers/models-view.reducer';\nimport {MODEL_TAGS, MODELS_ONLY_FIELDS, MODELS_TABLE_COL_FIELDS} from '../shared/models.const';\nimport {SelectedModel} from '../shared/models.model';\nimport {ApiUsersService} from '~/business-logic/api-services/users.service';\nimport {ModelsGetAllExRequest} from '~/business-logic/model/models/modelsGetAllExRequest';\nimport {addExcludeFilters, encodeColumns, encodeOrder} from '../../shared/utils/tableParamEncode';\nimport {EmptyAction, MESSAGES_SEVERITY} from '~/app.constants';\nimport {ApiProjectsService} from '~/business-logic/api-services/projects.service';\nimport {ICommonSearchState} from '../../common-search/common-search.reducer';\nimport {SortMeta} from 'primeng/api';\nimport {\n  CountAvailableAndIsDisableSelectedFiltered,\n  MenuItems,\n  selectionDisabledArchive,\n  selectionDisabledDelete,\n  selectionDisabledMoveTo,\n  selectionDisabledPublishModels,\n  selectionDisabledTags\n} from '../../shared/entity-page/items.utils';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {ModelsGetAllExResponse} from '~/business-logic/model/models/modelsGetAllExResponse';\n\n@Injectable()\nexport class ModelsViewEffects {\n\n  constructor(private actions$: Actions, private store: Store<IModelsViewState>,\n              private apiModels: ApiModelsService, private projectsApi: ApiProjectsService, private modelBl: BlModelsService, private usersApi: ApiUsersService,\n              private router: Router, private route: ActivatedRoute\n  ) {\n  }\n  /* eslint-disable @typescript-eslint/naming-convention */\n\n  activeLoader = createEffect( () => this.actions$.pipe(\n    ofType(actions.getNextModels, actions.globalFilterChanged, actions.fetchModelsRequested,\n      actions.tableSortChanged, actions.tableFilterChanged, actions.refreshModels,\n      actions.afterSetArchive, actions.getUsers, actions.setTableFilters, actions.selectAllModels),\n    filter((action) => !(action as ReturnType<typeof actions.refreshModels>).hideLoader),\n    map(() => activeLoader('Fetch Models'))\n  ));\n\n  tableSortChange = createEffect( () => this.actions$.pipe(\n    ofType(actions.tableSortChanged),\n    withLatestFrom(\n      this.store.select(selectTableSortFields),\n      this.store.select(selectSelectedProjectId),\n    ),\n    switchMap(([action, oldOrders, projectId]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [actions.setTableSort({orders, projectId})];\n    })\n  ));\n\n  reFetchModels = createEffect( () => this.actions$.pipe(\n    ofType(\n      actions.fetchModelsRequested, actions.getNextModelsWithPageSize, actions.globalFilterChanged, actions.showSelectedOnly,\n      actions.tableSortChanged, actions.tableFilterChanged, actions.afterSetArchive.type,\n      actions.setTableFilters\n    ),\n    auditTime(50),\n    switchMap((action) => this.fetchModels$(null, false, (action as any).pageSize as number)\n      .pipe(\n        mergeMap(res => [\n          actions.setNoMoreModels({payload: (res.models.length < MODELS_PAGE_SIZE)}),\n          actions.setModels({models: res.models}),\n          actions.setCurrentScrollId({scrollId: res.scroll_id}),\n          deactivateLoader('Fetch Models')\n        ]),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader('Fetch Models'),\n          setServerError(error, null, 'Fetch Models for selection failed')\n        ])\n      )\n    )\n  ));\n\n  getFrameworksEffect = createEffect( () => this.actions$.pipe(\n    ofType(actions.getFrameworks),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n    ),\n    switchMap(([, projectId]) => this.apiModels.modelsGetFrameworks({projects: projectId !== '*' ? [projectId] : []})\n      .pipe(\n        mergeMap(res => [\n          actions.setFrameworks({frameworks: res.frameworks.concat(null)}),\n        ]),\n        catchError(error => [\n          requestFailed(error),\n          setServerError(error, null, 'Fetch frameworks failed')]\n        )\n      )\n    )\n  ));\n\n  getFilteredUsersEffect = createEffect( () => this.actions$.pipe(\n    ofType(actions.getFilteredUsers),\n    withLatestFrom(this.store.select(modelsSelectors.selectModelsUsers), this.store.select(modelsSelectors.selectTableFilters)),\n    switchMap(([, users, filters]) => this.usersApi.usersGetAllEx({\n      order_by: ['name'],\n      only_fields: ['name'],\n      id: get(['user.name', 'value'], filters) || []\n    }).pipe(\n      mergeMap(res => [\n        actions.setUsers({users: uniq(res.users.concat(users))}),\n      ]),\n      catchError(error => [\n        requestFailed(error),\n        setServerError(error, null, 'Fetch users failed')]\n      )\n    ))\n  ));\n\n  getUsersEffect = createEffect( () => this.actions$.pipe(\n    ofType(actions.getUsers),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(modelsSelectors.selectTableFilters)\n    ),\n    switchMap(([, projectId, filters]) => this.usersApi.usersGetAllEx({\n      order_by: ['name'],\n      only_fields: ['name'],\n      active_in_projects: projectId !== '*' ? [projectId] : []\n    }).pipe(\n      mergeMap(res => {\n        const userFiltersValue = get([MODELS_TABLE_COL_FIELDS.USER, 'value'], filters) || [];\n        const resIds = res.users.map(user => user.id);\n        const shouldGetFilteredUsersNames = !(userFiltersValue.every(id => resIds.includes(id)));\n        return [\n          actions.setUsers(res),\n          shouldGetFilteredUsersNames ? actions.getFilteredUsers() : new EmptyAction(),\n          deactivateLoader('Fetch Models')\n        ];\n      }),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader('Fetch Models'),\n        setServerError(error, null, 'Fetch users failed')\n      ])\n    ))\n  ));\n\n  getTagsEffect = createEffect( () => this.actions$.pipe(\n    ofType(actions.getTags),\n    withLatestFrom(this.store.select(selectRouterParams).pipe(map(params => get('projectId', params)))),\n    switchMap(([, projectId]) => this.projectsApi.projectsGetModelTags({\n      projects: projectId === '*' ? [] : [projectId]\n    }).pipe(\n      mergeMap(res => [\n        actions.setTags({tags: res.tags.concat(null)}),\n        deactivateLoader('Fetch Models')\n      ]),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader('Fetch Models'),\n        setServerError(error, null, 'Fetch tags failed')]\n      )\n    ))\n  ));\n\n  refreshModels = createEffect( () => this.actions$.pipe(\n    ofType(actions.refreshModels),\n    withLatestFrom(\n      this.store.select(modelsSelectors.selectCurrentScrollId),\n      this.store.select(modelsSelectors.selectSelectedModel),\n      this.store.select(modelsSelectors.selectModelsList),\n      this.store.select(selectAppVisible)),\n    filter((values) => values[4]),\n    switchMap(([action, scrollId, selectedModel, models]) => this.fetchModels$(scrollId, true)\n      .pipe(\n        mergeMap(res => {\n          const resActions: Action[] = [deactivateLoader('Fetch Models')];\n          if (selectedModel) {\n            if (action.hideLoader || action.autoRefresh) {\n              resActions.push(new RefreshModelInfo(selectedModel.id));\n            } else {\n              resActions.push(new GetModelInfo(selectedModel.id));\n            }\n          }\n          if (selectedModel && action.autoRefresh && isEqual(models.map(model => model.id).sort(), res.models.map(model => model.id).sort())) {\n            resActions.push(actions.setModelsInPlace({models: res.models}));\n          } else {\n            resActions.push(actions.setModels({models: res.models}));\n          }\n          return resActions;\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader('Fetch Models'),\n          setServerError(error, null, 'Fetch Models failed', action.autoRefresh)\n        ])\n      )\n    )\n  ));\n\n  getModels = createEffect( () => this.actions$.pipe(\n    ofType(actions.getNextModels),\n    withLatestFrom(\n      this.store.select(modelsSelectors.selectCurrentScrollId),\n      this.store.select(modelsSelectors.selectModelsList)\n      ),\n    switchMap(([, scrollId, modelsList]) => this.fetchModels$(scrollId)\n        .pipe(\n          mergeMap(res => {\n\n            const addModelsAction = scrollId === res.scroll_id ?\n              [actions.addModels({models: res.models})] :\n              [actions.getNextModelsWithPageSize({pageSize: modelsList.length}), addMessage(MESSAGES_SEVERITY.WARN, 'Session expired')];\n\n            return  [\n              actions.setNoMoreModels({payload: (res.models.length < MODELS_PAGE_SIZE)}),\n              ...addModelsAction,\n              actions.setCurrentScrollId({scrollId: res.scroll_id}),\n              deactivateLoader('Fetch Models'),\n            ];\n          }),\n          catchError(error => [requestFailed(error), deactivateLoader('Fetch Models'), setServerError(error, null, 'Fetch Models failed')])\n        )\n    )\n  ));\n\n  selectAll = createEffect(() => this.actions$.pipe(\n    ofType(actions.selectAllModels),\n    withLatestFrom(\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectIsArchivedMode),\n      this.store.select(modelsSelectors.selectGlobalFilter),\n      this.store.select(modelsSelectors.selectTableFilters),\n      this.store.select(selectIsDeepMode),\n    ),\n    switchMap(([action, projectId, archived, globalSearch, tableFilters, deep]) => {\n      const pageSize = 1000;\n      const query = this.getGetAllQuery({\n        projectId, searchQuery: action.filtered && globalSearch, archived, orderFields:[],\n        filters: action.filtered ? tableFilters : {}, selectedIds: [], deep, pageSize\n      });\n      query.only_fields = [MODELS_TABLE_COL_FIELDS.NAME, MODELS_TABLE_COL_FIELDS.READY, 'company.id'];\n      return this.apiModels.modelsGetAllEx(query).pipe(\n        expand((res: ModelsGetAllExResponse)  => res.models.length === pageSize ? this.apiModels.modelsGetAllEx({...query, scroll_id: res.scroll_id}): EMPTY),\n        reduce((acc, res: ModelsGetAllExResponse) => acc.concat(res.models), [])\n      );\n    }),\n    switchMap(models => [actions.setSelectedModels({models}), deactivateLoader('Fetch Models')]),\n    catchError(error => [requestFailed(error), deactivateLoader('Fetch Models'), setServerError(error, null, 'Fetch Models failed')])\n));\n\n  updateModelsUrlParams = createEffect( () => this.actions$.pipe(\n    ofType(actions.setColsOrderForProject, actions.toggleColHidden),\n    filter(action => !(action as ReturnType<typeof actions.setColsOrderForProject>)?.fromUrl),\n    withLatestFrom(\n      this.store.select(modelsSelectors.selectTableFilters),\n      this.store.select(modelsSelectors.selectTableSortFields),\n      this.store.select(selectIsArchivedMode),\n      this.store.select(modelsSelectors.selectModelsTableColsOrder),\n      this.store.select(modelsSelectors.selectModelsHiddenTableCols),\n      this.store.select(selectIsDeepMode)\n    ),\n    mergeMap(([, filters, sortFields, isArchived, colsOrder, hiddenCols, isDeep]) =>\n      [setURLParams({\n        filters: filters as any,\n        orders: sortFields,\n        isArchived,\n        isDeep,\n        columns: encodeColumns(MODELS_TABLE_COLS, hiddenCols, [], colsOrder)\n      })]\n    )\n  ));\n\n  modelSelectionChanged = createEffect( () => this.actions$.pipe(\n    ofType(actions.modelSelectionChanged),\n    tap(action => this.navigateAfterModelSelectionChanged(action.model, action.project)),\n    mergeMap(() => [])\n    // map(action => actions.setSelectedModel({model: action.model}))\n  ));\n\n  setArchiveMode = createEffect( () => this.actions$.pipe(\n    ofType(actions.setArchive),\n    switchMap(action => [setProjectArchive(action), actions.afterSetArchive()])\n  ));\n  getReadyFilter(tableFilters) {\n    switch (get('ready.value.length', tableFilters)) {\n      case 0:\n        return null;\n      case 1:\n        return tableFilters.ready.value[0] === 'true';\n      case 2:\n        return null;\n      default:\n        return null;\n    }\n  }\n\n  getGetAllQuery({\n    refreshScroll = false, scrollId = null, projectId, searchQuery, archived, orderFields,\n    filters, selectedIds = [], deep, pageSize = MODELS_PAGE_SIZE}: {\n    refreshScroll?: boolean;\n    scrollId?: string;\n    projectId: string;\n    searchQuery: ICommonSearchState['searchQuery'];\n    archived: boolean;\n    orderFields: SortMeta[];\n    filters: { [key: string]: FilterMetadata };\n    selectedIds: string[];\n    deep: boolean;\n    pageSize: number;\n  }): ModelsGetAllExRequest {\n    const userFilter = filters?.[MODELS_TABLE_COL_FIELDS.USER]?.value;\n    const tagsFilter = filters?.[MODELS_TABLE_COL_FIELDS.TAGS]?.value;\n    const tagsFilterAnd = filters?.[MODELS_TABLE_COL_FIELDS.TAGS]?.matchMode === 'AND';\n    const systemTags = get(['system_tags', 'value'], filters);\n    const frameworkFilter = filters?.[MODELS_TABLE_COL_FIELDS.FRAMEWORK]?.value;\n    const ready = this.getReadyFilter(filters)\n    const systemTagsFilter = (archived ? [MODEL_TAGS.HIDDEN] : ['-' + MODEL_TAGS.HIDDEN])\n      .concat(systemTags ? systemTags : []);\n    return {\n      id: selectedIds,\n      ...(searchQuery?.query && {_any_: {\n        pattern: searchQuery.regExp ? searchQuery.query : escapeRegex(searchQuery.query),\n        fields: ['id', 'name', 'comment', 'system_tags']\n      }}),\n      project: (!projectId || projectId === '*') ? undefined : [projectId],\n      scroll_id: scrollId || null, // null to create new scroll (undefined doesn't generate scroll)\n      refresh_scroll: refreshScroll,\n      size: pageSize,\n      include_subprojects: deep,\n      order_by: encodeOrder(orderFields),\n      system_tags: (systemTagsFilter && systemTagsFilter.length > 0) ? systemTagsFilter : [],\n      only_fields: MODELS_ONLY_FIELDS,\n      ...(tagsFilter?.length > 0 && {tags: addExcludeFilters(tagsFilterAnd ? ['__$and', ...tagsFilter] : tagsFilter)}),\n      ...(frameworkFilter?.length > 0 && {framework: frameworkFilter}),\n      ...(userFilter?.length > 0 && {user: userFilter}),\n      ...(ready!==null && {ready})\n    };\n  }\n\n\n  fetchModels$(scrollId1: string, refreshScroll: boolean = false, pageSize = MODELS_PAGE_SIZE) {\n    return of(scrollId1)\n      .pipe(\n        withLatestFrom(\n          this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n          this.store.select(selectIsArchivedMode),\n          this.store.select(modelsSelectors.selectGlobalFilter),\n          this.store.select(modelsSelectors.selectTableSortFields),\n          this.store.select(modelsSelectors.selectTableFilters),\n          this.store.select(modelsSelectors.selectSelectedModels),\n          this.store.select(modelsSelectors.selectShowAllSelectedIsActive),\n          this.store.select(modelsSelectors.selectModelsTableColsOrder),\n          this.store.select(modelsSelectors.selectModelsHiddenTableCols),\n          this.store.select(selectIsDeepMode),\n        ),\n        switchMap(([scrollId, projectId, isArchived, gb, orderFields, filters, selectedModels, showAllSelectedIsActive, colsOrder, hiddenCols, deep]) => {\n          const selectedIds = showAllSelectedIsActive ? selectedModels.map(exp => exp.id) : [];\n          const columns = encodeColumns(MODELS_TABLE_COLS, hiddenCols, [], colsOrder);\n          this.setModelsUrlParams(filters, orderFields, isArchived, columns, deep);\n          return this.apiModels.modelsGetAllEx(this.getGetAllQuery({\n            refreshScroll, scrollId, projectId, searchQuery: gb, archived: isArchived,\n            orderFields, filters, selectedIds, deep, pageSize\n          }));\n        })\n      );\n  }\n\n  setSelectedModels = createEffect(() => this.actions$.pipe(\n        ofType(actions.setSelectedModels, actions.updateModel),\n        withLatestFrom(\n          this.store.select(selectSelectedModels),\n        ),\n        switchMap(([action, selectedModels]) => {\n          const payload = action.type === actions.setSelectedModels.type ?\n            (action as ReturnType<typeof actions.setSelectedModels>).models : selectedModels;\n          const selectedModelsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> = {\n            [MenuItems.publish]: selectionDisabledPublishModels(payload),\n            [MenuItems.archive]: selectionDisabledArchive(payload),\n            [MenuItems.moveTo]: selectionDisabledMoveTo(payload),\n            [MenuItems.delete]: selectionDisabledDelete(payload),\n            [MenuItems.tags]: selectionDisabledTags(payload),\n          };\n          return [setSelectedModelsDisableAvailable({selectedModelsDisableAvailable})];\n        })\n      )\n  );\n\n  setModelsUrlParams(filters, sortFields, isArchived, columns, isDeep) {\n    this.store.dispatch(setURLParams({filters, orders: sortFields, isArchived, columns, isDeep}));\n  }\n\n  navigateAfterModelSelectionChanged(selectedModel: SelectedModel, modelProject: string) {\n    // wow angular really suck...\n    const activeChild = get('firstChild.firstChild.firstChild.firstChild.firstChild.firstChild', this.route);\n    const activeChildUrl = activeChild ? getRouteFullUrl(activeChild) : 'general';\n    const baseUrl = 'projects/' + modelProject + '/models';\n    selectedModel ?\n      this.router.navigate([baseUrl + '/' + selectedModel.id + '/' + activeChildUrl], {queryParamsHandling: 'preserve'}) : this.router.navigate([baseUrl], {queryParamsHandling: 'preserve'});\n  }\n\n  isSelectedModelInCheckedModels(checkedModels, selectedModel) {\n    return selectedModel && checkedModels.map(model => model.id).includes(selectedModel.id);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {catchError, debounceTime, filter, map, mergeMap, shareReplay, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ApiModelsService} from '~/business-logic/api-services/models.service';\nimport {ModelsGetAllResponse} from '~/business-logic/model/models/modelsGetAllResponse';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {activeLoader, deactivateLoader, setBackdrop, setServerError} from '../../core/actions/layout.actions';\nimport {selectAppVisible} from '../../core/reducers/view.reducer';\nimport * as infoActions from '../actions/models-info.actions';\nimport * as viewActions from '../actions/models-view.actions';\nimport {ModelInfoState} from '../reducers/model-info.reducer';\nimport {MODELS_INFO_ONLY_FIELDS} from '../shared/models.const';\nimport {selectSelectedModel} from '../reducers';\nimport {EmptyAction} from '~/app.constants';\nimport {SelectedModel} from '../shared/models.model';\nimport {selectActiveWorkspace} from '../../core/reducers/users-reducer';\nimport {isExample, isSharedAndNotOwner} from '../../shared/utils/shared-utils';\n\n@Injectable()\nexport class ModelsInfoEffects {\n\n  constructor(private actions$: Actions, private store: Store<ModelInfoState>,\n              private apiModels: ApiModelsService) {\n  }\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(infoActions.GET_MODEL_INFO),\n    map(action => activeLoader(action.type))));\n\n\n  getModelInfo$ = createEffect(() => this.actions$.pipe(\n    ofType<infoActions.GetModelInfo>(infoActions.GET_MODEL_INFO, infoActions.REFRESH_MODEL_INFO),\n    withLatestFrom(this.store.select(selectActiveWorkspace), this.store.select(selectAppVisible)),\n    filter(([, , visible]) => visible),\n    switchMap(([action, activeWorkspace]) =>\n      this.apiModels.modelsGetByIdEx({id: [action.payload], only_fields: MODELS_INFO_ONLY_FIELDS})\n        .pipe(\n          mergeMap((res: ModelsGetAllResponse) => {\n            const model = res.models[0] as SelectedModel;\n            const actions = [deactivateLoader(action.type)] as Action[];\n            if( model) {\n              model.readOnly = isExample(model) || isSharedAndNotOwner(model, activeWorkspace);\n              actions.push(new infoActions.SetModel(model as SelectedModel));\n            }\n            return actions;\n          }),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, 'Fetch Model failed')\n          ])\n        )\n    )\n  ));\n\n  editModel$ = createEffect(() => this.actions$.pipe(\n    ofType<infoActions.EditModel>(infoActions.EDIT_MODEL),\n    debounceTime(1000),\n    switchMap((action) => {\n      const parent = action.payload.parent ? (action.payload.parent as any).id : undefined;\n      return this.apiModels.modelsEdit({\n        model: action.payload.id, ...action.payload,\n        project: action.payload.project?.id,\n        task: action.payload.task?.id,\n        parent: parent\n      })\n        .pipe(\n          mergeMap(() => [\n            new infoActions.GetModelInfo(action.payload.id),\n            new infoActions.SetIsModelSaving(false),\n            setBackdrop({payload: false})\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err, null, 'edit models failed'),\n            setBackdrop({payload: false}),\n            new infoActions.GetModelInfo(action.payload.id)\n          ])\n        );\n    }),\n    shareReplay(1)\n  ));\n\n  updateModelDetails$ = createEffect(() => this.actions$.pipe(\n    ofType(infoActions.updateModelDetails),\n    withLatestFrom(this.store.select(selectSelectedModel)),\n    mergeMap(([action, selectedModel]) =>\n      this.apiModels.modelsUpdate({model: action.id, ...action.changes})\n        .pipe(\n          mergeMap((res) => {\n            const changes = res?.fields || action.changes;\n            return [\n              viewActions.updateModel({id: action.id, changes}),\n              selectedModel?.id === action.id ? new infoActions.ModelDetailsUpdated({\n                id: action.id,\n                changes\n              }) : new EmptyAction()\n            ];\n          }),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err, null, 'Update models failed'),\n            new infoActions.GetModelInfo(action.id)\n          ])\n        )\n    ),\n    shareReplay(1)\n  ));\n\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {ModelInfoState} from '../reducers/model-info.reducer';\nimport {ApiModelsService} from '../../../business-logic/api-services/models.service';\nimport {catchError, map, mergeMap, switchMap, tap, withLatestFrom} from 'rxjs/operators';\nimport * as infoActions from '../actions/models-info.actions';\nimport {updateModelDetails} from '../actions/models-info.actions';\nimport * as viewActions from '../actions/models-view.actions';\nimport * as menuActions from '../actions/models-menu.actions';\nimport {addTag, removeTag} from '../actions/models-menu.actions';\nimport {activeLoader, addMessage, deactivateLoader, setServerError} from '../../core/actions/layout.actions';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {ApiAuthService} from '../../../business-logic/api-services/auth.service';\nimport {BlModelsService} from '../../../business-logic/services/models.service';\nimport {get} from 'lodash/fp';\nimport {Router} from '@angular/router';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {of} from 'rxjs';\nimport {selectSelectedModel, selectSelectedModels, selectSelectedTableModel} from '../reducers';\nimport {SelectedModel} from '../shared/models.model';\nimport {RouterState, selectRouterConfig, selectRouterParams} from '../../core/reducers/router-reducer';\nimport {ModelsArchiveManyResponse} from '../../../business-logic/model/models/modelsArchiveManyResponse';\nimport {MatDialog} from '@angular/material/dialog';\nimport {EmptyAction} from '../../../app.constants';\nimport {EntityTypeEnum} from '../../../shared/constants/non-common-consts';\nimport {ModelsUnarchiveManyResponse} from '../../../business-logic/model/models/modelsUnarchiveManyResponse';\nimport {getNotificationAction, MenuItems, MoreMenuItems} from '../../shared/entity-page/items.utils';\n\n@Injectable()\nexport class ModelsMenuEffects {\n\n  constructor(private actions$: Actions, private store: Store<ModelInfoState>, private apiModels: ApiModelsService, private apiTasks: ApiTasksService,\n              private authApi: ApiAuthService, private modelBl: BlModelsService, private router: Router, private matDialog: MatDialog) {\n  }\n\n  activeLoader = createEffect( () => this.actions$.pipe(\n    ofType(menuActions.archivedSelectedModels, menuActions.publishModelClicked,\n      menuActions.restoreSelectedModels, menuActions.changeProjectRequested),\n    map(action => activeLoader(action.type))));\n\n\n  publishModel$ = createEffect( () => this.actions$.pipe(\n    ofType(menuActions.publishModelClicked),\n    withLatestFrom(this.store.select(selectSelectedModel)),\n    switchMap(([action, selectedModel]) => {\n      const ids = action.selectedModels.map(model => model.id);\n      return this.apiModels.modelsPublishMany({ids})\n          .pipe(\n            mergeMap(res => this.updateModelsSuccess(action, MenuItems.publish, ids, selectedModel, res, {ready: true})),\n            catchError(error => this.publishModelFailedText(error, action.selectedModels).pipe(\n              mergeMap(errorMessage => [\n                requestFailed(error),\n                deactivateLoader(action.type),\n                setServerError(error, null, errorMessage)\n              ])\n              )\n            )\n          )\n      }\n    )\n  ));\n\n\n  changeProject$ = createEffect( () => this.actions$.pipe(\n    ofType(menuActions.changeProjectRequested),\n    withLatestFrom(this.store.select(selectSelectedModel)),\n    switchMap(\n      ([action, selectedInfoModel]) => {\n        const selectedModel = action.selectedModels.find(model => model.id === selectedInfoModel?.id);\n        return this.apiModels.modelsMove({\n          ids: action.selectedModels.map(model => model.id),\n          project: action.project.id,\n          project_name: action.project.name})\n          .pipe(\n            tap((res) => this.router.navigate([`projects/${action.project.id? action.project.id : res.project_id}/models/${action.selectedModels.length === 1 ? action.selectedModels[0].id : ''}`], {queryParamsHandling: 'merge'})),\n            mergeMap(() => [\n              viewActions.resetState(),\n              selectedModel ? new infoActions.SetModel(selectedModel) : new EmptyAction(),\n              deactivateLoader(action.type)\n            ]),\n            catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n          )\n      }\n    )\n  ));\n\n  publishModelFailedText(error: any, model) {\n    if (model.task && get('error.meta.result_subcode', error) == 110) {\n      return this.apiTasks.tasksGetAllEx({id: [model.task.id], only_fields: ['id', 'name', 'project']}).pipe(\n        map((tasks) => {\n          const task = tasks.tasks[0];\n          const projectId = task.project ? task.project.id : '*';\n          const taskLink = `<a target=\"_blank\" href=\"projects/${projectId}/experiments/${task.id}\">${task.name}</a>`;\n          return `Your attempt to publish this model failed.  The task that created this model may be in progress.<br>When the task ${taskLink} completes or is stopped by a user, you can try again.`;\n        })\n      );\n    } else {\n      const errorText = 'Your attempt to publish models failed.';\n      return of(errorText);\n    }\n  }\n\n  addTag$ = createEffect( () => this.actions$.pipe(\n    ofType(addTag),\n    withLatestFrom(this.store.select(selectSelectedModels), this.store.select(selectSelectedTableModel)),\n    switchMap(([action, selectedModels, selectedModelInfo]) => {\n        const modelsFromState = selectedModelInfo ? selectedModels.concat(selectedModelInfo) as SelectedModel[] : selectedModels;\n        return action.models.map(model => {\n          const modelFromState = modelsFromState.find(mod => mod.id === model.id);\n          return updateModelDetails({\n            id: model.id,\n            changes: {tags: Array.from(new Set((modelFromState?.tags || model.tags || []).concat([action.tag]))).sort() as string[]}\n          });\n        });\n      }\n    )\n  ));\n\n  removeTag$ = createEffect( () => this.actions$.pipe(\n    ofType(removeTag),\n    switchMap((action) =>\n      action.models.map(model => {\n        if (model.tags.includes(action.tag)) {\n          return updateModelDetails({\n            id: model.id,\n            changes: {tags: model.tags.filter(tag => tag !== action.tag)}\n          });\n        } else {\n          return null;\n        }\n      }).filter(update => update !== null)\n        .concat(addMessage('success', `“${action.tag}” tag has been removed from “${action.models[0]?.name}” model`, [\n            {\n              name: 'Undo',\n              actions: [\n                addMessage('success', `“${action.tag}” tag has been restored`),\n                ...action.models.map(() => addTag({\n                    models: action.models,\n                    tag: action.tag\n                  })\n                )\n              ]\n            }\n          ]\n        ) as any)\n    )\n  ));\n\n  archiveModels = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.archivedSelectedModels),\n    withLatestFrom(\n      this.store.select(selectRouterParams),\n      this.store.select(selectSelectedTableModel)\n    ),\n    tap(([action, routerParams, selectedModel]) => {\n      if (this.isSelectedModelInCheckedModels(action.selectedEntities, selectedModel)) {\n        this.router.navigate([`projects/${routerParams.projectId}/models/`]);\n      }\n    }),\n    switchMap(([action, routerParams]) => this.apiModels.modelsArchiveMany({ids: action.selectedEntities.map((model) => model.id)})\n      .pipe(\n        withLatestFrom(this.store.select(selectRouterConfig)),\n        mergeMap(([res, routerConfig]: [ModelsArchiveManyResponse, RouterState['config']]) => {\n          const models = action.selectedEntities;\n          const allFailed = res.failed.length === models.length;\n          const undoAction = [\n            {\n              name: 'Undo', actions: [\n                viewActions.setSelectedModels({models}),\n                menuActions.restoreSelectedModels({selectedEntities: models, skipUndo: true})\n              ]\n            }\n          ];\n          let actions: Action[] = [\n            deactivateLoader(action.type),\n            viewActions.setSelectedModels({models: []}),\n            getNotificationAction(res, action, MenuItems.archive, EntityTypeEnum.model, (action.skipUndo || allFailed) ? [] : undoAction)\n          ];\n          if (routerConfig.includes('models')) {\n            const failedIds = res.failed.map(fail => fail.id);\n            const successModels = models.map(model => model.id).filter(id => !failedIds.includes(id));\n            actions = actions.concat([\n              viewActions.removeModels({modelIds: successModels}),\n              viewActions.fetchModelsRequested()\n            ]);\n          }\n          return actions;\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          setServerError(error, null, 'Failed To Archive models')\n        ])\n      )\n    )\n  ));\n\n\n  restoreModels = createEffect(() => this.actions$.pipe(\n    ofType(menuActions.restoreSelectedModels),\n    withLatestFrom(\n      this.store.select(selectRouterParams),\n      this.store.select(selectSelectedTableModel)\n    ),\n    tap(([action, routerParams, selectedModel]) => {\n      if (this.isSelectedModelInCheckedModels(action.selectedEntities, selectedModel)) {\n        this.router.navigate([`projects/${routerParams.projectId}/models/`]);\n      }\n    }),\n    switchMap(([action, routerParams]) => this.apiModels.modelsUnarchiveMany({ids: action.selectedEntities.map((model) => model.id)})\n      .pipe(\n        withLatestFrom(this.store.select(selectRouterConfig)),\n        mergeMap(([res, routerConfig]: [ModelsUnarchiveManyResponse, RouterState['config']]) => {\n          const models = action.selectedEntities;\n          const allFailed = res.failed.length === models.length;\n          const undoAction = [\n            {\n              name: 'Undo', actions: [\n                viewActions.setSelectedModels({models}),\n                menuActions.archivedSelectedModels({selectedEntities: models, skipUndo: true})\n              ]\n            }\n          ];\n          let actions: Action[] = [\n            deactivateLoader(action.type),\n            viewActions.setSelectedModels({models: []}),\n            getNotificationAction(res, action, MoreMenuItems.restore, EntityTypeEnum.model, (action.skipUndo || allFailed) ? [] : undoAction)\n          ];\n          if (routerConfig.includes('models')) {\n            const failedIds = res.failed.map(fail => fail.id);\n            const successModels = models.map(model => model.id).filter(id => !failedIds.includes(id));\n            actions = actions.concat([\n              viewActions.removeModels({modelIds: successModels}),\n              viewActions.fetchModelsRequested()\n            ]);\n          }\n          return actions;\n        }),\n        catchError(error => [\n          requestFailed(error),\n          deactivateLoader(action.type),\n          setServerError(error, null, 'Failed To Restore models')\n        ])\n      )\n    )\n  ));\n\n\n  private updateModelsSuccess(action, operationName: MenuItems, ids: string[], selectedEntity, res: ModelsArchiveManyResponse, changes): Action[] {\n    const actions = [\n        ...ids.map(id => viewActions.updateModel({id, changes})),\n      deactivateLoader(action.type)\n      ] as Action[];\n    if (ids.includes(selectedEntity?.id)) {\n      actions.push(new infoActions.SetModel({...selectedEntity, ...changes}));\n    }\n    actions.push(getNotificationAction(res, action, operationName, EntityTypeEnum.model));\n    return actions;\n  }\n\n\n\n  isSelectedModelInCheckedModels(checkedModels, selectedModel) {\n    return selectedModel && checkedModels.some(model => model.id === selectedModel.id);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {FormControl, FormGroup, FormArray} from '@angular/forms';\n\nimport {forEach} from 'lodash/fp';\n\n@Injectable()\nexport class SmFormBuilderService {\n\n  create(formData: any, updateOn?: any) {\n    if (Array.isArray(formData)) {\n      const arr = formData.map( data => this.create(data));\n      return new FormArray(arr, {updateOn});\n    } else if (typeof formData === 'function') {\n      return formData();\n    } else if (formData instanceof Object) {\n      if (formData.value) {\n        return new FormControl(formData.value);\n      } else {\n        const obj = {};\n        Object.entries(formData).forEach(([key, value]) => obj[key] = this.create(value));\n        return new FormGroup(obj, {updateOn});\n      }\n\n    } else {\n      return new FormControl(formData);\n    }\n  }\n// @ts-ignore\n  getFormErrors(form: FormGroup | FormArray, errors?: any): any {\n    // @ts-ignore\n    forEach((control: any) => {\n      // @ts-ignore\n      errors[control.name] = control.errors;\n    }, form.controls);\n\n    return errors;\n  }\n\n  recursive(formData: any, updateOn?: any) {\n    this.create(formData, updateOn);\n  }\n\n  array(formData: Array<Object>, updateOn: any = 'change') {\n    const arr = formData.map( data => this.group(data, updateOn));\n    return new FormArray(arr, {updateOn: 'blur'});\n  }\n\n  group(formData: Object, updateOn: any = 'change') {\n    const formGroup = new FormGroup({}, {updateOn});\n    Object.entries(formData).forEach(([key, value]) => formGroup.addControl(key, new FormControl(value)));\n\n    return formGroup;\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule, DatePipe} from '@angular/common';\nimport {ModelSharedModule} from './shared/model-shared.module';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {ModelRouterModule} from './models-routing.module';\nimport {ModelInfoComponent} from './containers/model-info/model-info.component';\nimport {ModelsComponent} from './models.component';\nimport {EffectsModule} from '@ngrx/effects';\nimport {StoreModule} from '@ngrx/store';\nimport {reducers} from './reducers';\nimport {ModelsViewEffects} from './effects/models-view.effects';\nimport {ModelInfoHeaderComponent} from './dumbs/model-info-header/model-info-header.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ModelsInfoEffects} from './effects/models-info.effects';\nimport {ModelInfoGeneralComponent} from './containers/model-info-general/model-info-general.component';\nimport {ModelGeneralInfoComponent} from './dumbs/model-general-info/model-general-info.component';\nimport {ModelInfoNetworkComponent} from './containers/model-info-network/model-info-network.component';\nimport {ModelViewNetworkComponent} from './dumbs/model-view-network/model-view-network.component';\nimport {ModelInfoLabelsComponent} from './containers/model-info-labels/model-info-labels.component';\nimport {ModelInfoLabelsViewComponent} from './dumbs/model-info-labels-view/model-info-labels-view.component';\nimport {ExperimentSharedModule} from '~/features/experiments/shared/experiment-shared.module';\nimport {ModelsMenuEffects} from './effects/models-menu.effects';\nimport {AngularSplitModule} from 'angular-split';\nimport {CommonLayoutModule} from '../layout/layout.module';\nimport {FeatureModelsModule} from '~/features/models/feature-models.module';\nimport {SmFormBuilderService} from '../core/services/sm-form-builder.service';\nimport {MODELS_STORE_KEY} from './models.consts';\nimport {ModelCustomColsMenuComponent} from './dumbs/model-custom-cols-menu/model-custom-cols-menu.component';\nimport {ModelHeaderComponent} from '~/features/models/dumb/model-header/model-header.component';\nimport {SharedModule} from '~/shared/shared.module';\nimport {CommonDeleteDialogModule} from '../shared/entity-page/entity-delete/common-delete-dialog.module';\n\nexport const modelSyncedKeys    = [\n  'view.projectColumnsSortOrder',\n  'view.projectColumnFilters',\n  'view.projectColumnsWidth',\n  'view.hiddenProjectTableCols',\n  'view.colsOrder'\n];\n\n\n@NgModule({\n  imports: [\n    ExperimentSharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    CommonLayoutModule,\n    ModelRouterModule,\n    ModelSharedModule,\n    CommonDeleteDialogModule,\n    SMSharedModule,\n    FeatureModelsModule,\n    AngularSplitModule,\n    StoreModule.forFeature(MODELS_STORE_KEY, reducers),\n    EffectsModule.forFeature([ModelsViewEffects, ModelsInfoEffects, ModelsMenuEffects]),\n    FeatureModelsModule,\n    SharedModule,\n  ],\n  providers      : [\n    SmFormBuilderService, DatePipe,\n  ],\n  declarations   : [ModelInfoComponent, ModelsComponent, ModelInfoHeaderComponent,\n    ModelViewNetworkComponent, ModelInfoNetworkComponent,\n    ModelInfoLabelsComponent, ModelInfoLabelsViewComponent, ModelInfoGeneralComponent,\n    ModelGeneralInfoComponent, ModelHeaderComponent,\n    ModelCustomColsMenuComponent]\n})\nexport class ModelsModule {\n}\n","import {ACTIVATE_MODEL_EDIT, EDIT_MODEL, GET_MODEL_INFO, MODEL_CANCEL_EDIT, MODEL_DETAILS_UPDATED, SET_IS_MODEL_SAVING, SET_MODEL} from '../actions/models-info.actions';\nimport {SelectedModel, TableModel} from '../shared/models.model';\nimport {cloneDeep} from 'lodash/fp';\n\nexport interface ModelInfoState {\n  selectedModel: TableModel;\n  activeSectionEdit: string;\n  infoDataFreeze: any;\n  saving: boolean;\n}\n\nconst initialState: ModelInfoState = {\n  selectedModel: null,\n  activeSectionEdit: null,\n  infoDataFreeze: null,\n  saving: false,\n};\n\nexport function modelsInfoReducer(state: ModelInfoState = initialState, action): ModelInfoState {\n\n  switch (action.type) {\n    case GET_MODEL_INFO:\n      return {...state, selectedModel: null};\n    case SET_MODEL:\n      return {...state, selectedModel: action.payload};\n    case MODEL_DETAILS_UPDATED: {\n      const newSelectedModel = {...state.selectedModel, ...action.payload.changes};\n      return {...state, selectedModel: newSelectedModel};\n    }\n    case ACTIVATE_MODEL_EDIT:\n      return {...state, activeSectionEdit: action.payload, infoDataFreeze: state.selectedModel};\n    case MODEL_CANCEL_EDIT:\n      return {...state, selectedModel: state.infoDataFreeze ? cloneDeep(state.infoDataFreeze) : state.selectedModel, activeSectionEdit: null};\n    case SET_IS_MODEL_SAVING:\n      return {...state, saving: action.payload};\n    case EDIT_MODEL:\n      return {...state, activeSectionEdit: null};\n    default:\n      return state;\n  }\n}\n\n","import {ActionReducerMap, createSelector} from '@ngrx/store';\nimport {IModelsViewState, modelsInitialState, modelsViewReducer} from './models-view.reducer';\nimport {ModelInfoState, modelsInfoReducer} from './model-info.reducer';\nimport {SelectedModel} from '../shared/models.model';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '@common/shared/entity-page/items.utils';\nimport {MODELS_TABLE_COLS} from '@common/models/models.consts';\nimport {ISmCol} from '@common/shared/ui-components/data/table/table.consts';\nimport {selectRouterParams} from '@common/core/reducers/router-reducer';\nexport const reducers: ActionReducerMap<any, any> = {\n  view: modelsViewReducer,\n  info: modelsInfoReducer,\n};\n\nconst models = (state) => state.models;\n\n// view selectors.\nexport const modelsView = createSelector(models, (state): IModelsViewState => state ? state.view : {});\nexport const selectModelsList = createSelector(modelsView, (state) => state.models);\nexport const selectCurrentScrollId = createSelector(modelsView, (state): string => state.scrollId);\nexport const selectGlobalFilter = createSelector(modelsView, (state) => state.globalFilter);\nexport const selectTableSortFields = createSelector(modelsView, selectRouterParams,\n  (state, params) => state.projectColumnsSortOrder[params?.projectId] || modelsInitialState.tableSortFields);\nexport const selectTableFilters = createSelector(modelsView, selectRouterParams,\n  (state, params) => state.projectColumnFilters?.[params?.projectId] || {});\nexport const selectSelectedModels = createSelector(modelsView, (state): Array<any> => state.selectedModels);\nexport const selectedModelsDisableAvailable = createSelector(modelsView, (state): Record<string, CountAvailableAndIsDisableSelectedFiltered> => state.selectedModelsDisableAvailable);\nexport const selectSelectedTableModel = createSelector(modelsView, (state): SelectedModel => state.selectedModel);\nexport const selectNoMoreModels = createSelector(modelsView, (state): boolean => state.noMoreModels);\nexport const selectShowAllSelectedIsActive = createSelector(modelsView, (state): boolean => state.showAllSelectedIsActive);\nexport const selectModelsTableColsOrder = createSelector(modelsView, selectRouterParams,\n  (state, params): string[] => (state.colsOrder && params?.projectId) ? state.colsOrder[params?.projectId] : undefined);\nexport const selectModelsUsers = createSelector(modelsView, (state): Array<any> => state.users);\nexport const selectModelsFrameworks = createSelector(modelsView, (state): Array<string> => state.frameworks);\nexport const selectModelsTags = createSelector(modelsView, (state): Array<string> => state.projectTags);\nexport const selectModelsTableColsWidth = createSelector(modelsView, selectRouterParams,\n  (state, params) => state.projectColumnsWidth?.[params?.projectId] || {});\nexport const selectModelsHiddenTableCols = createSelector(modelsView, selectRouterParams,\n  (state, params) => state.hiddenProjectTableCols?.[params?.projectId] || modelsInitialState.hiddenTableCols);\nexport const selectModelTableColumns = createSelector(modelsView, selectModelsHiddenTableCols, selectModelsTableColsWidth,\n  (state, hidden, colWidth) =>\n  MODELS_TABLE_COLS.map(col => ({\n    ...col,\n    hidden: !!hidden[col.id],\n    style: {...col.style, ...(colWidth[col.id] && {width: `${colWidth[col.id]}px`})}\n  } as ISmCol)));\nexport const selectSplitSize = createSelector(modelsView, (state): number => state.splitSize);\n\n\n\n// info selectors\nexport const modelInfo = createSelector(models, (state): ModelInfoState => state ? state.info : {});\nexport const selectSelectedModel = createSelector(modelInfo, (state): SelectedModel => state.selectedModel);\nexport const selectIsModelSaving = createSelector(modelInfo, (state): boolean => state.saving);\nexport const selectActiveSectionEdit = createSelector(modelInfo, (state): string => state.activeSectionEdit);\nexport const selectIsModelInEditMode = createSelector(modelInfo, (state): boolean => !!state.activeSectionEdit);\n","import {createReducer, on} from '@ngrx/store';\nimport {TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport * as actions from '../actions/models-view.actions';\nimport {TableModel, SelectedModel} from '../shared/models.model';\nimport {MODELS_TABLE_COL_FIELDS} from '../shared/models.const';\nimport {TableFilter} from '../../shared/utils/tableParamEncode';\nimport {User} from '../../../business-logic/model/users/user';\nimport {ICommonSearchState} from '../../common-search/common-search.reducer';\nimport {SortMeta} from 'primeng/api';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '@common/shared/entity-page/items.utils';\nimport {setSelectedProject} from '@common/core/actions/projects.actions';\n\nexport interface IModelsViewState {\n  splitSize: number;\n  models: Array<any>;\n  tableFilters: any;\n  tempFilters: {[columnId: string]: {value: any; matchMode: string}};\n  projectColumnFilters: {[projectId: string]: {[columnId: string]: {value: any; matchMode: string}}};\n  colsOrder: { [Project: string]: string[] };\n  tableSortFields: SortMeta[];\n  projectColumnsSortOrder: {[projectId: string]: SortMeta[]};\n  projectColumnsWidth: {[projectId: string]: {[colId: string]: number}};\n  hiddenTableCols: {[colName: string]: boolean};\n  hiddenProjectTableCols: {[projectId: string]: {[colName: string]: boolean | undefined}};\n  selectedModels: TableModel[]; // TODO: declare type.\n  selectedModel: SelectedModel;\n  noMoreModels: boolean;\n  selectedModelSource: string;\n  modelToken: string;\n  scrollId: string;\n  globalFilter: ICommonSearchState['searchQuery'];\n  showAllSelectedIsActive: boolean;\n  users: User[];\n  frameworks: string[];\n  projectTags: string[];\n  selectedModelsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered>;\n}\n\nexport const modelsInitialState: IModelsViewState = {\n  splitSize: 65,\n  models: [],\n  frameworks: [],\n  hiddenTableCols: {comment: true},\n  hiddenProjectTableCols: {},\n  tableFilters: {},\n  tempFilters: {},\n  projectColumnFilters: {},\n  tableSortFields: [{field: MODELS_TABLE_COL_FIELDS.CREATED, order: TABLE_SORT_ORDER.DESC}],\n  projectColumnsSortOrder: {},\n  projectColumnsWidth: {},\n  colsOrder: {},\n  selectedModels: [],\n  selectedModelsDisableAvailable: {},\n  selectedModel: null,\n  noMoreModels: false,\n  selectedModelSource: null,\n  modelToken: null,\n  scrollId: null,\n  globalFilter: null,\n  showAllSelectedIsActive: false,\n  users: [],\n  projectTags: [],\n};\n\nexport const modelsViewReducer = createReducer(\n  modelsInitialState,\n  on(actions.resetState, (state)=> ({\n    ...state,\n    models: modelsInitialState.models,\n    selectedModel: modelsInitialState.selectedModel,\n  })),\n  on(setSelectedProject, (state) => ({...state, selectedModels: modelsInitialState.selectedModels})),\n  on(actions.addModels, (state, action) => ({...state, models: state.models.concat(action.models)})),\n  on(actions.removeModels, (state, action) => ({...state, models: state.models.filter(exp => !action.modelIds.includes(exp.id))})),\n  on(actions.showSelectedOnly, (state, action) => ({\n    ...state,\n    showAllSelectedIsActive: action.active,\n    globalFilter: modelsInitialState.globalFilter,\n    tempFilters: state.projectColumnFilters[action.projectId] || {},\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: action.active ? modelsInitialState.tableFilters : state.tempFilters\n    }\n  })),\n  on(actions.updateModel, (state, action) => {\n      const newState = {\n        ...state, models:\n          state.models.map(ex => ex.id === action.id ? {...ex, ...action.changes} : ex)\n      };\n      if (state.selectedModel?.id === action.id) {\n        newState.selectedModel = {...state.selectedModel, ...action.changes};\n      }\n      if (state.selectedModels.find(ex => ex.id === action.id)) {\n        newState.selectedModels = state.selectedModels.map(ex => ex.id === action.id ? {...ex, ...action.changes} : ex);\n      }\n      return newState;\n    }),\n  on(actions.setModels, (state, action) => ({...state, models: action.models})),\n  on(actions.setModelsInPlace, (state, action) =>\n    ({...state, models: state.models.map(currModel => action.models.find(newModel => newModel.id === currModel.id))})),\n  on(actions.setNoMoreModels, (state, action) => ({...state, noMoreModels: action.payload})),\n  on(actions.setCurrentScrollId, (state, action) => ({...state, scrollId: action.scrollId})),\n  on(actions.setSelectedModels, (state, action) => ({...state, selectedModels: action.models as unknown as TableModel[]})),\n  on(actions.setSelectedModelsDisableAvailable, (state, action) =>\n    ({...state, selectedModelsDisableAvailable: action.selectedModelsDisableAvailable})),\n  on(actions.setSelectedModel, (state, action) => ({...state, selectedModel: action.model})),\n  on(actions.globalFilterChanged, (state, action) =>\n    ({...state, globalFilter: action as ReturnType<typeof actions.globalFilterChanged>})),\n  on(actions.resetGlobalFilter, (state ) => ({...state, globalFilter: modelsInitialState.globalFilter})),\n  on(actions.toggleColHidden, (state, action) => ({\n    ...state,\n    hiddenProjectTableCols: {\n      ...state.hiddenProjectTableCols,\n      [action.projectId]: {\n        ...(state.hiddenProjectTableCols[action.projectId] || modelsInitialState.hiddenTableCols),\n        [action.columnId]: state.hiddenProjectTableCols?.[action.projectId]?.[action.columnId] ? undefined : true\n      }\n    }\n  })),\n  on(actions.setHiddenCols, (state, action) => ({...state, hiddenTableCols: action.hiddenCols})),\n  on(actions.setUsers, (state, action) => ({...state, users: action.users})),\n  on(actions.setFrameworks, (state, action) => ({...state, frameworks: action.frameworks})),\n  on(actions.setTags, (state, action) => ({...state, projectTags: action.tags})),\n  on(actions.setTableSort, (state, action) => ({\n    ...state,\n    projectColumnsSortOrder: {\n      ...state.projectColumnsSortOrder,\n      [action.projectId]: action.orders\n    }\n  })),\n  on(actions.tableFilterChanged, (state, action) => ({\n    ...state,\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {\n        ...state.projectColumnFilters[action.projectId],\n        [action.filter.col]: {value: action.filter.value, matchMode: action.filter.filterMatchMode}\n      }\n    }\n  })),\n  on(actions.setColumnWidth, (state, action) => ({\n    ...state,\n    projectColumnsWidth: {\n      ...state.projectColumnsWidth,\n      [action.projectId]: {\n        ...state.projectColumnsWidth[action.projectId],\n        [action.columnId]: action.widthPx\n      }\n    }\n  })),\n  on(actions.setColsOrderForProject, (state, action) =>\n    ({...state, colsOrder: {...state.colsOrder, [action.project]: action.cols}})),\n  on(actions.setTableFilters, (state, action) => ({\n    ...state,\n    projectColumnFilters: {\n      ...state.projectColumnFilters,\n      [action.projectId]: {\n        ...action.filters.reduce((obj, filter: TableFilter) => {\n          obj[filter.col] = {value: filter.value, matchMode: filter.filterMatchMode};\n          return obj;\n        }, {} as {[columnId: string]: {value: any; matchMode: string}})\n      }\n    }\n  })),\n  on(actions.setSplitSize, (state, action) => ({...state, splitSize: action.splitSize}))\n);\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../../shared/shared.module';\nimport {ModelTypeIconLabelComponent} from './model-type-icon-label/model-type-icon-label.component';\nimport {ModelStatusIconLabelComponent} from './model-status-icon-label/model-status-icon-label.component';\nimport {ModelsTableComponent} from './models-table/models-table.component';\nimport {ModelTagsComponent} from './model-tags/model-tags.component';\nimport {ExperimentSharedModule} from '../../../features/experiments/shared/experiment-shared.module';\nimport {LayoutModule} from '../../../layout/layout.module';\nimport {SelectModelHeaderComponent} from './select-model-header/select-model-header.component';\nimport {CommonLayoutModule} from '../../layout/layout.module';\nimport {CommonExperimentSharedModule} from '../../experiments/shared/common-experiment-shared.module';\nimport {FeatureModelsModule} from '../../../features/models/feature-models.module';\nimport {SharedModule} from '../../../shared/shared.module';\n\nconst DECLERATIONS = [ModelTypeIconLabelComponent, ModelStatusIconLabelComponent, SelectModelHeaderComponent, ModelsTableComponent, ModelTagsComponent];\n\n@NgModule({\n    imports: [\n        CommonExperimentSharedModule,\n        LayoutModule,\n        ExperimentSharedModule,\n        SMSharedModule,\n        CommonModule,\n        CommonLayoutModule,\n        FeatureModelsModule,\n        SharedModule\n    ],\n  declarations: DECLERATIONS,\n  exports     : DECLERATIONS\n})\nexport class ModelSharedModule {\n}\n","<sm-model-menu-extended #contextMenuExtended\n               [model]=\"contextModel\"\n               [selectedModel]=\"selectedModel\"\n               [selectedModels]=\"selectedModels\"\n               [selectedDisableAvailable]=\"selectedModelsDisableAvailable\"\n               [numSelected]=\"selectedModels.length\"\n               [tagsFilterByProject]=\"tagsFilterByProject$ | async\"\n               [projectTags]=\"projectTags$ | async\"\n               [companyTags]=\"companyTags$ | async\"\n               (tagSelected)=\"addTag($event)\"\n               (menuOpened)=\"setContextMenuStatus(true)\"\n               (menuClosed)=\"setContextMenuStatus(false)\"\n               [showButton]=\"false\"\n></sm-model-menu-extended>\n<div class=\"table-container\" [class.card-view]=\"minimizedView\">\n  <sm-table\n    [selectionMode]=\"selectionMode\"\n    [tableData]=\"models\"\n    [noMoreData]=\"noMoreModels\"\n    [resizableColumns]=\"enableMultiSelect\"\n    [columns]=\"tableCols\"\n    [reorderableColumns]=\"enableMultiSelect\"\n    [columnsOrder]=\"colsOrder\"\n    [lazyLoading]=\"true\"\n    [selection]=\"selectedModel\"\n    [checkedItems]=\"selectedModels\"\n    [activeContextRow]=\"contextModel\"\n    [contextMenuOpen]=\"contextMenuActive\"\n    [minimizedView]=\"minimizedView\"\n    [minimizedTableHeader]=\"'MODEL LIST'\"\n    [sortFields]=\"tableSortFields\"\n    (colReordered)=\"columnsReordered.emit($event)\"\n    [keyboardControl]=\"true\"\n    (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n    (loadMoreClicked)=\"onLoadMoreClicked()\"\n    (onRowRightClick)=\"openContextMenu($event)\"\n    (sortChanged)=\"onSortChanged($event.isShift, $event.field)\"\n    (columnResized)=\"columnResized.emit($event)\"\n  >\n    <ng-template let-col pTemplate=\"cardFilter\">\n      <sm-table-card-filter-template [options]=\"filtersOptions\"\n                                     [value]=\"filtersValues\"\n                                     [subValue]=\"filtersSubValues[MODELS_TABLE_COL_FIELDS.TAGS]\"\n                                     [columns]=\"initialColumns\"\n                                     [filterMatch]=\"filtersMatch\"\n                                     fixedOptionsSubheader=\"System tags\"\n                                     (subFilterChanged)=\"tableFilterChanged({id:'system_tags'}, $event)\"\n                                     (filterChanged)=\"tableAllFiltersChanged($event)\"\n                                     (menuOpened)=\"columnFilterOpened($event)\"\n                                     (menuClosed)=\"columnFilterClosed($event)\"\n      ></sm-table-card-filter-template>\n    </ng-template>\n    <!--CHECKBOX TEMPLATE-->\n    <ng-template let-col pTemplate=\"checkbox\">\n      <sm-checkbox-control\n        *ngIf=\"col.id === MODELS_TABLE_COL_FIELDS.SELECTED\"\n        class=\"checkbox-col header\"\n        fieldName=\"selected\"\n        [formData]=\"selectionState\"\n        (formDataChanged)=\"headerCheckboxClicked()\"\n        inputClassName=\"table-check-box select-col-checkbox\">\n      </sm-checkbox-control>\n      <div class=\"al-icon al-ico-dropdown-arrow sm drop-down\" [matMenuTriggerFor]=\"selectionMenu\"></div>\n      <mat-menu class=\"light-theme\" #selectionMenu=\"matMenu\">\n        <div class=\"menu-title\">Select from project</div>\n        <button mat-menu-item (click)=\"selectAll()\">All</button>\n        <button mat-menu-item (click)=\"emitSelection([])\">None</button>\n        <button mat-menu-item (click)=\"selectAll(true)\">All matching filter</button>\n      </mat-menu>\n    </ng-template>\n\n    <!--SORT FILTER TEMPLATE-->\n\n    <ng-template let-col pTemplate=\"sort-filter\">\n      <sm-table-filter-sort-template\n        [column]=\"col\"\n        [value]=\"filtersValues[col.id]\"\n        [searchValue]=\"searchValues[col.id]\"\n        [options]=\"filtersOptions[col.id] | filter:searchValues[col.id]:'label'\"\n        [sortOrder]=\"tableSortFieldsObject[col.id]\"\n        [fixedOptionsSubheader]=\"col.id === filtersOptions.TAGS ? 'System tags' : ''\"\n        [andFilter]=\"col.andFilter ? filtersMatch[col.id] === 'AND' : null\"\n        (sortOrderChanged)=\"onSortChanged($event, col.id)\"\n        (filterChanged)=\"tableFilterChanged(col, $event);\"\n        (searchValueChanged)=\"searchValueChanged($event, col.id)\"\n        (menuOpened)=\"columnFilterOpened(col)\"\n        (menuClosed)=\"columnFilterClosed(col)\"\n      >\n      </sm-table-filter-sort-template>\n    </ng-template>\n\n    <!--BODY TEMPLATE-->\n\n    <ng-template let-col\n                 let-model=\"rowData\"\n                 pTemplate=\"body\">\n      <ng-container [ngSwitch]=\"col.id\">\n        <ng-container *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.NAME\">\n          <div class=\"d-flex flex-row flex-nowrap\">\n            <div class=\"model-name\" matTooltipPosition=\"above\" [smTooltip]=\"model.name\">{{model.name}}</div>\n            <i *ngIf=\"model?.system_tags.includes('shared')\" class=\"fas fa-link p-1 ml-1\"></i>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.TAGS\">\n          <sm-tag-list [tags]=\"model.tags\" [sysTags]=\"getSysTags(model)\"></sm-tag-list>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.USER\">\n          {{model.user?.name ? model.user?.name : 'Unknown User'}}\n        </ng-container>\n        <span matTooltipPosition=\"above\" [smTooltip]=\"model?.project?.name\" *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.PROJECT\">\n          {{model?.project?.name}}\n        </span>\n        <span *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.TASK\" matTooltipPosition=\"above\" [smTooltip]=\"model.task?.name\">\n          {{model.task?.name}}\n        </span>\n        <ng-container *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.READY\">\n          <sm-experiment-status-icon-label [status]=\"model?.ready? 'published': 'created'\"></sm-experiment-status-icon-label>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.LAST_UPDATE\">\n          <span matTooltipPosition=\"above\" [smTooltip]=\"model.last_update | date : timeFormatString\">{{model.last_update | timeAgo}}</span>\n        </ng-container>\n        <sm-checkbox-control\n          *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.SELECTED\"\n          smClickStopPropagation\n          class=\"checkbox-col\"\n          fieldName=\"selected\"\n          [formData]=\"isRowSelected(model)\"\n          (formDataChanged)=\"rowSelectedChanged($event, model)\"\n          inputClassName=\"table-check-box table-body\">\n        </sm-checkbox-control>\n        <ng-container *ngSwitchCase=\"MODELS_TABLE_COL_FIELDS.COMMENT\">\n          <span matTooltipPosition=\"above\" [smTooltip]=\"model.comment\">{{model.comment}}</span>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          {{model[col.id]}}\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template let-model=\"rowData\" let-selected=\"selected\" let-rowNumber=\"rowNumber\" pTemplate=\"card\">\n      <sm-table-card class=\"flex-grow-1\"\n                     [selected]=\"selected\"\n                     [rowNumber]=\"rowNumber\"\n                     [cardName]=\"model.name\"\n                     [columns]=\"tableCols\"\n                     [rowData]=\"model\"\n                     [checked]=\"isRowSelected(model)\"\n                     [activeContextRow]=\"contextModel\"\n                     [contextMenuOpen]=\"contextMenuActive\"\n                     [tableType]=\"'model'\"\n      >\n        <div sm-name-icon><i *ngIf=\"model?.system_tags.includes('shared')\" class=\"fas fa-link p-1 ml-1\"></i></div>\n        <sm-tag-list class=\"mb-1\" [sysTags]=\"getSysTags(model)\" [tags]=\"model?.tags\"></sm-tag-list>\n        <div  class=\"ellipsis compact-columns-data\" compact-columns-data>\n          Updated {{model.last_update | timeAgo}} by {{model.user?.name || 'Unknown User'}}<ng-container *ngIf=\"model.task\"><span class=\"dot\">●</span>{{model.task.name}}</ng-container>\n        </div>\n        <sm-experiment-status-icon-label\n          [status]=\"model?.ready? 'published': 'created'\"></sm-experiment-status-icon-label>\n        <sm-checkbox-control fieldName=\"selected\" [formData]=\"isRowSelected(model)\"\n                             (formDataChanged)=\"rowSelectedChanged($event, model)\"\n                             [inputClassName]=\"'table-check-box table-body' + (selected ? ' row-selected' : '')\"></sm-checkbox-control>\n      </sm-table-card>\n    </ng-template>\n  </sm-table>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {ColHeaderTypeEnum, ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {get} from 'lodash/fp';\nimport {SelectedModel, TableModel} from '../models.model';\nimport {MODELS_FRAMEWORK_LABELS, MODELS_READY_LABELS, MODELS_TABLE_COL_FIELDS} from '../models.const';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {BaseTableView} from '../../../shared/ui-components/data/table/base-table-view';\nimport {User} from '../../../../business-logic/model/users/user';\nimport {sortByArr} from '../../../shared/pipes/show-selected-first.pipe';\nimport {Observable} from 'rxjs';\nimport {selectCompanyTags, selectProjectTags, selectTagsFilterByProject} from '../../../core/reducers/projects.reducer';\nimport {Store} from '@ngrx/store';\nimport {addTag} from '../../actions/models-menu.actions';\nimport {ICONS, TIME_FORMAT_STRING} from '../../../constants';\nimport {getSysTags} from '../../model.utils';\nimport {TableComponent} from '../../../shared/ui-components/data/table/table.component';\nimport {MODELS_TABLE_COLS} from '../../models.consts';\nimport {IOption} from '../../../shared/ui-components/inputs/select-autocomplete-for-template-forms/select-autocomplete-for-template-forms.component';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '../../../shared/entity-page/items.utils';\nimport {selectAllModels} from '../../actions/models-view.actions';\nimport {ModelMenuExtendedComponent} from '../../../../features/models/containers/model-menu-extended/model-menu-extended.component';\n\n@Component({\n  selector       : 'sm-models-table',\n  templateUrl    : './models-table.component.html',\n  styleUrls      : ['./models-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ModelsTableComponent extends BaseTableView {\n  readonly MODELS_TABLE_COL_FIELDS = MODELS_TABLE_COL_FIELDS;\n  readonly MODELS_FRAMEWORK_OPTIONS = Object.entries(MODELS_FRAMEWORK_LABELS).map(([key, val]) => ({label: val, value: key}));\n  readonly MODELS_READY_OPTIONS = Object.entries(MODELS_READY_LABELS).map(([key, val]) => ({label: val, value: key}));\n  public filtersOptions: {[colId: string]: IOption[]} = {\n    [MODELS_TABLE_COL_FIELDS.FRAMEWORK]: [],\n    [MODELS_TABLE_COL_FIELDS.READY]    : this.MODELS_READY_OPTIONS,\n    [MODELS_TABLE_COL_FIELDS.USER]    : [],\n    [MODELS_TABLE_COL_FIELDS.TAGS]     : [],\n  };\n\n  readonly icons = ICONS;\n  public menuOpen: boolean;\n  public sortOrder = 1;\n\n  public contextModel: SelectedModel;\n  public tagsFilterByProject$: Observable<boolean>;\n  public projectTags$: Observable<string[]>;\n  public companyTags$: Observable<string[]>;\n  private _selectedModels: TableModel[];\n  private _models: SelectedModel[];\n  private _enableMultiSelect: boolean;\n  private _tableCols: ISmCol[];\n  public getSysTags = getSysTags;\n  public filtersValues: {[colId: string]: any} = {};\n  public filtersMatch: {[colId: string]: string} = {};\n  public filtersSubValues: {[colId: string]: any} = {};\n  public searchValues: {[colId: string]: string} = {};\n\n  @Input() set models(models: SelectedModel[]) {\n    this._models = models;\n    if (this.contextModel) {\n      this.contextModel = this.models.find(model => model.id === this.contextModel.id);\n    }\n  }\n\n  get models() {\n    return this._models;\n  }\n\n  @Input() noMoreModels: boolean;\n\n  @Input() set tableCols(tableCols: ISmCol[]) {\n    if (tableCols?.length > 0) {\n      tableCols[0].hidden = this.enableMultiSelect === false;\n      this._tableCols = tableCols;\n    }\n  }\n\n  get tableCols() {\n    return this._tableCols;\n  }\n\n  @Input() set onlyPublished(only: boolean) {\n    const readyCol = this.tableCols.find(col => col.id === MODELS_TABLE_COL_FIELDS.READY);\n    readyCol.hidden = only;\n  }\n\n  @Input() set enableMultiSelect(enable: boolean) {\n    this._enableMultiSelect = enable;\n    if (this.tableCols) {\n      this.tableCols[0].hidden = enable === false;\n    }\n  }\n\n  get enableMultiSelect() {\n    return this._enableMultiSelect;\n  }\n\n  @Input() set selectedModels(selection) {\n    this._selectedModels = selection;\n    this.updateSelectionState();\n  }\n\n  get selectedModels() {\n    return this._selectedModels;\n  }\n  @Input() selectedModelsDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> = {};\n  @Input() set colRatio(ratio: number) {\n    if (ratio) {\n      this.tableCols.forEach(col => {\n        if (col.headerType != ColHeaderTypeEnum.checkBox && col.style?.width?.endsWith('px')) {\n          const width = parseInt(col.style.width, 10);\n          col.style.width = ratio * width + 'px';\n        }\n      });\n    }\n  }\n\n  private _selectedModel;\n  @Input() set selectedModel(model) {\n    if(model !== this._selectedModel) {\n      window.setTimeout(() => this.table.focusSelected());\n    }\n    this._selectedModel = model;\n  }\n\n  get selectedModel() {\n    return this._selectedModel;\n  }\n\n  @Input() set tableFilters(filters: { [s: string]: FilterMetadata }) {\n    this.filtersValues[MODELS_TABLE_COL_FIELDS.FRAMEWORK] = get([MODELS_TABLE_COL_FIELDS.FRAMEWORK, 'value'], filters) || [];\n    this.filtersValues[MODELS_TABLE_COL_FIELDS.READY] = get([MODELS_TABLE_COL_FIELDS.READY, 'value'], filters) || [];\n    this.filtersValues[MODELS_TABLE_COL_FIELDS.USER] = get([MODELS_TABLE_COL_FIELDS.USER, 'value'], filters) || [];\n    this.filtersValues[MODELS_TABLE_COL_FIELDS.TAGS] = get([MODELS_TABLE_COL_FIELDS.TAGS, 'value'], filters) || [];\n    this.filtersMatch[MODELS_TABLE_COL_FIELDS.TAGS] = filters?.[MODELS_TABLE_COL_FIELDS.TAGS]?.matchMode || '';\n    this.filtersSubValues[MODELS_TABLE_COL_FIELDS.TAGS] = get(['system_tags', 'value'], filters) || [];\n  }\n\n  @Input() set users(users: User[]) {\n    this.filtersOptions[MODELS_TABLE_COL_FIELDS.USER] = users.map(user => ({label: user.name ? user.name : 'Unknown User', value: user.id}));\n    this.sortOptionsList(MODELS_TABLE_COL_FIELDS.USER);\n  }\n\n  @Input() set frameworks(frameworks: string[]) {\n    const frameworksAndActiveFilter = Array.from(new Set(frameworks.concat(this.filtersValues[MODELS_TABLE_COL_FIELDS.FRAMEWORK])));\n    this.filtersOptions[MODELS_TABLE_COL_FIELDS.FRAMEWORK] = frameworksAndActiveFilter.map(framework => ({\n      label: framework ? framework :\n        (framework === null ? '(No framework)' : 'Unknown'), value: framework\n    }));\n    this.sortOptionsList(MODELS_TABLE_COL_FIELDS.FRAMEWORK);\n  }\n\n  @Input() set tags(tags) {\n    const tagsAndActiveFilter = Array.from(new Set(tags.concat(this.filtersValues[MODELS_TABLE_COL_FIELDS.TAGS])));\n    this.filtersOptions[MODELS_TABLE_COL_FIELDS.TAGS] = tagsAndActiveFilter.\n    map(tag => ({label: tag===null? 'No tag':tag , value: tag}) as IOption);\n    this.sortOptionsList(MODELS_TABLE_COL_FIELDS.TAGS);\n  }\n\n  @Input() systemTags = [] as string[];\n  get validSystemTags() {\n    return this.systemTags.filter(tag => tag !== 'archived');\n  }\n\n  @Output() modelsSelectionChanged = new EventEmitter<SelectedModel[]>();\n  @Output() modelSelectionChanged = new EventEmitter<SelectedModel>();\n  @Output() loadMoreModels = new EventEmitter();\n  @Output() tagsMenuOpened = new EventEmitter();\n  @Output() sortedChanged = new EventEmitter<{ isShift: boolean; colId: ISmCol['id'] }>();\n  @Output() columnResized = new EventEmitter<{columnId: string; widthPx: number}>();\n  @ViewChild(TableComponent, {static: true}) table: TableComponent;\n  @ViewChild('contextMenuExtended') contextMenuExtended: ModelMenuExtendedComponent;\n  timeFormatString = TIME_FORMAT_STRING;\n  public readonly initialColumns = MODELS_TABLE_COLS;\n\n  @HostListener('document:click', ['$event'])\n  clickHandler(event) {\n    if (event.button != 2) { // Bug in firefox: right click triggers `click` event\n      this.menuOpen = false;\n    }\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef, private store: Store<any>) {\n    super();\n    this.tagsFilterByProject$ = this.store.select(selectTagsFilterByProject);\n    this.projectTags$ = this.store.select(selectProjectTags);\n    this.companyTags$ = this.store.select(selectCompanyTags);\n    this.entitiesKey = 'models';\n    this.selectedEntitiesKey = 'selectedModels';\n\n  }\n\n  sortOptionsList(columnId: string) {\n    this.filtersOptions[columnId]\n      .sort((a, b) => sortByArr(a.value, b.value, [null, ...(this.filtersValues[columnId] || [])]));\n    this.filtersOptions = {...this.filtersOptions, [columnId]: [...this.filtersOptions[columnId]]};\n  }\n\n  onRowSelectionChanged(event) {\n    this.modelSelectionChanged.emit(event.data);\n  }\n\n  tableFilterChanged(col: ISmCol, event) {\n    if (event.col === 'users') {\n      event.col = 'user.name';\n    }\n    this.filterChanged.emit({col, value: event.value, andFilter: event.andFilter});\n    this.scrollTableToTop();\n  }\n\n  onLoadMoreClicked() {\n    this.loadMoreModels.emit();\n  }\n\n  onSortChanged(isShift: boolean, colId: ISmCol['id']) {\n    this.sortedChanged.emit({isShift, colId});\n    this.scrollTableToTop();\n  }\n\n  get sortableCols() {\n    return this.tableCols.filter(col => col.sortable);\n  }\n\n  getColName(colId: ISmCol['id']) {\n    return this.tableCols.find(col => colId === col.id)?.header;\n  }\n\n  rowSelectedChanged(change: { field: string; value: boolean; event: Event }, model: TableModel) {\n    if (change.value) {\n      const addList = this.getSelectionRange<TableModel>(change, model);\n      this.modelsSelectionChanged.emit([...this.selectedModels, ...addList]);\n    } else {\n      this.modelsSelectionChanged.emit(this.selectedModels.filter((selectedModel) => selectedModel.id !== model.id));\n    }\n  }\n\n  selectAll(filtered = false) {\n    this.store.dispatch(selectAllModels({filtered}));\n  }\n\n  emitSelection(selection: any[]) {\n    this.modelsSelectionChanged.emit(selection);\n  }\n\n  searchValueChanged($event: string, colId: string) {\n    this.searchValues[colId] = $event;\n    this.sortOptionsList(colId);\n  }\n\n  addTag(tag: string) {\n    this.store.dispatch(addTag({\n      tag,\n      models: this.selectedModels.length > 1 ? this.selectedModels : [this.contextModel]\n    }));\n    this.filtersOptions[MODELS_TABLE_COL_FIELDS.TAGS] = [];\n  }\n\n  openContextMenu(data) {\n    if (this.modelsSelectionChanged.observers.length === 0) {\n      return;\n    }\n    this.contextModel = this.models.find(model => model.id === data.rowData.id);\n    if (!this.selectedModels.map(model => model.id).includes(this.contextModel.id)) {\n      this.prevSelected = this.contextModel;\n      this.emitSelection([this.contextModel]);\n    }\n    const event = data.e as MouseEvent;\n    event.preventDefault();\n    this.contextMenuExtended?.contextMenu.openMenu({x: event.clientX, y: event.clientY});\n  }\n\n  columnFilterOpened(col: ISmCol) {\n    if (col.id === MODELS_TABLE_COL_FIELDS.TAGS && !this.filtersOptions[MODELS_TABLE_COL_FIELDS.TAGS]?.length) {\n      this.tagsMenuOpened.emit();\n    }\n  }\n\n  columnFilterClosed(col: ISmCol) {\n    window.setTimeout(() => this.sortOptionsList(col.id));\n  }\n}\n","import {ModelTableColFieldsEnum} from './models.model';\nimport {ExperimentTableColFieldsEnum} from \"@common/experiments/shared/common-experiment-model.model\";\n\n\nexport const MODELS_TABLE_COL_FIELDS = {\n  SELECTED: 'selected' as ModelTableColFieldsEnum,\n  ID: 'id' as ModelTableColFieldsEnum,\n  NAME: 'name' as ModelTableColFieldsEnum,\n  TAGS: 'tags' as ModelTableColFieldsEnum,\n  CREATED: 'created' as ModelTableColFieldsEnum,\n  FRAMEWORK: 'framework' as ModelTableColFieldsEnum,\n  READY: 'ready' as ModelTableColFieldsEnum,\n  USER: 'users' as ModelTableColFieldsEnum,\n  PROJECT: 'project.name' as ModelTableColFieldsEnum,\n  TASK: 'task.name' as ModelTableColFieldsEnum,\n  COMMENT: 'comment' as ModelTableColFieldsEnum,\n  LAST_UPDATE : 'last_update' as ModelTableColFieldsEnum,\n\n};\n\n// Actually framework is a free text foe a long time now\nexport const MODELS_FRAMEWORK_LABELS = {\n  'Caffe': 'Caffe',\n  'TensorFlow': 'TensorFlow',\n  'PyTorch': 'PyTorch',\n  'Keras': 'Keras',\n  'Custom': 'Custom'\n};\n//\nexport const MODELS_READY_LABELS = {\n  'true': 'Published',\n  'false': 'Draft'\n};\n\n// temp, will be taken from the generated code.\nexport type ModelTagsEnum = 'archived';\n\nexport const MODEL_TAGS = {\n  HIDDEN: 'archived' as ModelTagsEnum\n};\n\n\nexport const MODELS_ONLY_FIELDS = ['company', 'created', 'last_update', 'framework', 'id', 'labels', 'name', 'ready', 'tags', 'system_tags', 'task.name', 'uri', 'user.name', 'parent', 'comment', 'project.name'];\nexport const MODELS_INFO_ONLY_FIELDS = ['company', 'created', 'last_update', 'framework', 'id', 'labels', 'name', 'ready', 'tags', 'system_tags', 'task.name', 'task.project', 'uri', 'user.name', 'parent', 'comment', 'project.name', 'design'];\n","<div class=\"d-flex justify-content-between\">\n  <div *ngIf=\"showAllProjectsToggle\" class=\"center-buttons-container\">\n    <sm-button-toggle\n      [value]=\"isAllProjects\"\n      [options]=\"allProjectsdModeOptions\"\n      (valueChanged)=\"onAllProjectsChanged($event)\"\n    >\n    </sm-button-toggle>\n  </div>\n\n  <div class=\"d-flex align-items-center\">\n    <div\n      *ngIf=\"searchActive\"\n      class=\"search-container open\">\n      <sm-search\n        #search\n        class=\"light-theme underline-search\"\n        placeholder=\"Search for models\"\n        [value]=\"searchValue\"\n        (valueChanged)=\"onSearchValueChanged($event)\"\n        (focusout)=\"onSearchFocusOut()\">\n      </sm-search>\n    </div>\n  </div>\n\n</div>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {ModelsViewModesEnum} from '../../models.consts';\n\n@Component({\n  selector   : 'sm-select-model-header',\n  templateUrl: './select-model-header.component.html',\n  styleUrls  : ['./select-model-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectModelHeaderComponent {\n\n  public readonly archivedModeOptions = [\n    {value: false, label: 'ALL MODELS'},\n    {value: true, label: 'ARCHIVE'}\n  ];\n\n  public readonly allProjectsdModeOptions = [\n    {value: true, label: 'ALL PROJECTS'},\n    {value: false, label: 'CURRENT PROJECT'}\n  ] as {value: any; label: string}[];\n\n\n  @Input() searchValue: string;\n  @Input() isArchived: boolean;\n  @Input() isAllProjects: boolean = true;\n  @Input() hideArchiveToggle: boolean;\n  @Input() showAllProjectsToggle: boolean;\n  @Input() hideCreateNewButton: boolean;\n  @Input() viewMode: ModelsViewModesEnum;\n  @Input() searchActive: boolean;\n\n  @Output() searchValueChanged   = new EventEmitter<string>();\n  @Output() isArchivedChanged    = new EventEmitter<boolean>();\n  @Output() isAllProjectsChanged = new EventEmitter<boolean>();\n  @Output() viewModeChanged      = new EventEmitter<ModelsViewModesEnum>();\n  @Output() addModelClicked      = new EventEmitter();\n\n  @ViewChild('search') searchElem;\n\n  onSearchValueChanged(value: string) {\n    this.searchValueChanged.emit(value);\n  }\n\n  onIsArchivedChanged(value: boolean) {\n    this.isArchivedChanged.emit(value);\n  }\n\n  onAllProjectsChanged(value: boolean) {\n    this.isAllProjectsChanged.emit(value);\n  }\n\n  onAddModelClicked() {\n    this.addModelClicked.emit();\n  }\n\n  // searchClicked() {\n  //   this.searchElem.searchBarInput.nativeElement.focus();\n  // }\n\n  onSearchFocusOut() {\n    if (!this.searchElem.searchBarInput.nativeElement.value) {}\n  }\n}\n","import {ISmAction} from '../core/models/actions';\nimport {ProjectsUpdateRequest} from '../../business-logic/model/projects/projectsUpdateRequest';\nimport {ProjectsGetAllRequest} from '../../business-logic/model/projects/projectsGetAllRequest';\nimport {ProjectsGetByIdResponse} from '../../business-logic/model/projects/projectsGetByIdResponse';\nimport {Project} from '../../business-logic/model/projects/project';\nimport {Action, createAction, props} from '@ngrx/store';\nimport {PROJECTS_ACTIONS, PROJECTS_PREFIX} from './common-projects.consts';\n\nexport class ProjectUpdated implements ISmAction {\n  public type = PROJECTS_ACTIONS.PROJECT_UPDATED;\n  public payload: { updatedData: ProjectsUpdateRequest };\n\n  constructor(updatedData: ProjectsUpdateRequest) {\n    this.payload = {updatedData};\n  }\n}\n\nexport class UpdateProjectPartial implements Action {\n  readonly type = PROJECTS_ACTIONS.UPDATE_ONE_PROJECT;\n\n  constructor(public payload: { id: Project['id']; changes: ProjectsUpdateRequest }) {\n  }\n}\n\n\nexport class SetProjectInSelectedAndInList implements ISmAction {\n  public type = PROJECTS_ACTIONS.SET_PROJECT_BY_ID;\n  public payload: { res: ProjectsGetByIdResponse };\n\n  constructor(res: ProjectsGetByIdResponse) {\n    this.payload = {res};\n  }\n}\n\nexport class GetAllProjectsPageProjects implements ISmAction {\n  public type = PROJECTS_ACTIONS.GET_PROJECTS;\n  public payload: { getAllFilter: ProjectsGetAllRequest };\n\n  constructor(getAllFilter?: ProjectsGetAllRequest) {\n    this.payload = {getAllFilter};\n  }\n}\n\nexport class SetProjectsOrderBy implements ISmAction {\n  public type = PROJECTS_ACTIONS.SET_ORDER_BY;\n  public payload: { orderBy: string }; // TODO: specify enum!!\n\n  constructor(orderBy: string = '') {\n    this.payload = {orderBy};\n  }\n}\n\nexport const setProjectsSearchQuery = createAction(\n  PROJECTS_ACTIONS.SET_SEARCH_QUERY,\n  props<{query: string; regExp?: boolean}>()\n);\n\nexport class ResetProjectsSearchQuery implements ISmAction {\n  public type = PROJECTS_ACTIONS.RESET_SEARCH_QUERY;\n}\n\nexport class SetProjects implements ISmAction {\n  public type = PROJECTS_ACTIONS.SET_PROJECTS;\n  public payload: { projects: Array<Project> };\n\n  constructor(projects: Array<Project>) {\n    this.payload = {projects};\n  }\n}\n\nexport class AddToProjectsList implements ISmAction {\n  public type = PROJECTS_ACTIONS.ADD_TO_PROJECTS_LIST;\n  public payload: { projects: Array<Project> };\n\n  constructor(projects: Array<Project>) {\n    this.payload = {projects};\n  }\n}\n\nexport class ResetProjects implements ISmAction {\n  public type = PROJECTS_ACTIONS.RESET_PROJECTS;\n}\n\nexport class CheckProjectForDeletion implements ISmAction {\n  public type = PROJECTS_ACTIONS.CHECK_PROJECT_FOR_DELETION;\n  public payload: { project: Project };\n\n  constructor(project: Project) {\n    this.payload = {project};\n  }\n}\n\nexport class SetProjectReadyForDeletion implements ISmAction {\n  public type = PROJECTS_ACTIONS.SET_PROJECT_READY_FOR_DELETION;\n  public payload: { readyForDeletion: any };\n\n  constructor(readyForDeletion: any) {\n    this.payload = {readyForDeletion};\n  }\n}\n\nexport class SelectAllProjects implements ISmAction {\n  public type = PROJECTS_ACTIONS.SELECT_ALL_PROJECTS;\n}\n\nexport class ResetReadyToDelete implements ISmAction {\n  public type = PROJECTS_ACTIONS.RESET_READY_TO_DELETE;\n}\n\nexport class SetNoMoreProjects implements Action {\n  readonly type = PROJECTS_ACTIONS.SET_NO_MORE_PROJECTS;\n  constructor(public payload: boolean) {\n  }\n}\n\nexport const setCurrentScrollId = createAction(\n  PROJECTS_PREFIX + ' [set current scrollId]',\n  props<{scrollId: string}>()\n);\n","export interface ProjectRoute {\n  header: 'overview' | 'models' | 'experiments';\n  subHeader: string;\n  permissionCheck?: string;\n}\n\nexport const PROJECT_ROUTES = [\n  {header: 'overview', subHeader: ''},\n  {header: 'experiments', subHeader: '(ARCHIVED)'},\n  {header: 'models', subHeader: '(ARCHIVED)'},\n] as ProjectRoute[];\n\nexport const PROJECTS_PREFIX         = 'PROJECTS_';\nexport const PROJECTS_ACTIONS = {\n  SET_SEARCH_QUERY                 : PROJECTS_PREFIX + 'SET_SEARCH_QUERY',\n  RESET_SEARCH_QUERY               : PROJECTS_PREFIX + 'RESET_SEARCH_QUERY',\n  SET_PROJECT_READY_FOR_DELETION   : PROJECTS_PREFIX + 'SET_PROJECT_READY_FOR_DELETION',\n  SET_ORDER_BY                     : PROJECTS_PREFIX + 'SET_ORDER_BY',\n  SET_PROJECT_BY_ID                : PROJECTS_PREFIX + 'SET_PROJECT_BY_ID',\n  PROJECT_UPDATED                  : PROJECTS_PREFIX + 'PROJECT_UPDATED',\n  GET_PROJECTS                     : PROJECTS_PREFIX + 'GET_PROJECTS',\n  SET_PROJECTS                     : PROJECTS_PREFIX + 'SET_PROJECTS',\n  PROJECTS_SUCCESS                 : PROJECTS_PREFIX + 'PROJECTS_SUCCESS',\n  RESET_PROJECTS                   : PROJECTS_PREFIX + 'DELETE_PROJECT',\n  CHECK_PROJECT_FOR_DELETION       : PROJECTS_PREFIX + 'CHECK_PROJECT_FOR_DELETION',\n  RESET_READY_TO_DELETE            : PROJECTS_PREFIX + 'RESET_READY_TO_DELETE',\n  SELECT_PROJECT                   : PROJECTS_PREFIX + 'SELECT_PROJECT',\n  SELECT_ALL_PROJECTS              : PROJECTS_PREFIX + 'SELECT_ALL_PROJECTS',\n  DELETE_PROJECT_SUCCESS           : PROJECTS_PREFIX + 'DELETE_PROJECT_SUCCESS',\n  CREATE_PROJECT                   : PROJECTS_PREFIX + 'CREATE_PROJECT',\n  CREATE_PROJECT_SUCCESS           : PROJECTS_PREFIX + 'CREATE_PROJECT_SUCCESS',\n  CREATE_PROJECT_SUCCESS_OPTIMISTIC: PROJECTS_PREFIX + 'CREATE_PROJECT_SUCCESS_OPTIMISTIC',\n  SELECT_PROJECT_INDEX             : PROJECTS_PREFIX + 'SELECT_PROJECT_INDEX',\n  GET_PROJECTS_NON_FILTERED_LIST   : PROJECTS_PREFIX + 'GET_PROJECTS_NON_FILTERED_LIST',\n  SET_PROJECTS_NON_FILTERED_LIST   : PROJECTS_PREFIX + 'SET_PROJECTS_NON_FILTERED_LIST',\n  UPDATE_ONE_PROJECT               : PROJECTS_PREFIX + 'UPDATE_ONE_PROJECT',\n  SET_NO_MORE_PROJECTS             : PROJECTS_PREFIX + 'SET_NO_MORE_PROJECTS',\n  SET_NEXT_PAGE                    : PROJECTS_PREFIX + 'SET_NEXT_PAGE',\n  ADD_TO_PROJECTS_LIST             : PROJECTS_PREFIX + 'ADD_TO_PROJECTS_LIST'\n};\n\nexport const pageSize = 12;\n","import {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {CheckProjectForDeletion, SetProjectReadyForDeletion} from '../../webapp-common/projects/common-projects.actions';\nimport {PROJECTS_ACTIONS} from '../../webapp-common/projects/common-projects.consts';\nimport {mergeMap, switchMap} from 'rxjs/operators';\nimport {ProjectsValidateDeleteResponse} from '../../business-logic/model/projects/projectsValidateDeleteResponse';\nimport {Injectable} from '@angular/core';\nimport {ApiProjectsService} from '../../business-logic/api-services/projects.service';\nimport {ApiTasksService} from '../../business-logic/api-services/tasks.service';\nimport {ApiModelsService} from '../../business-logic/api-services/models.service';\nimport {Store} from '@ngrx/store';\n\n@Injectable()\nexport class ProjectsEffects {\n\n  constructor(\n    private actions: Actions, public projectsApi: ApiProjectsService,\n    public experimentsApi: ApiTasksService, public modelsApi: ApiModelsService,\n    private store: Store<any>\n  ) {}\n  checkIfProjectExperiments = createEffect(() => this.actions.pipe(\n    ofType<CheckProjectForDeletion>(PROJECTS_ACTIONS.CHECK_PROJECT_FOR_DELETION),\n    switchMap((action) => this.projectsApi.projectsValidateDelete({project: action.payload.project.id})),\n    mergeMap((projectsValidateDeleteResponse: ProjectsValidateDeleteResponse) => [\n      new SetProjectReadyForDeletion({\n        experiments: {\n          total: projectsValidateDeleteResponse.tasks,\n          archived: projectsValidateDeleteResponse.tasks - projectsValidateDeleteResponse.non_archived_tasks,\n          unarchived: projectsValidateDeleteResponse.non_archived_tasks\n        },\n        models: {\n          total: projectsValidateDeleteResponse.models,\n          archived: projectsValidateDeleteResponse.models - projectsValidateDeleteResponse.non_archived_models,\n          unarchived: projectsValidateDeleteResponse.non_archived_models\n        }\n      })\n    ])\n  ));\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ApiProjectsService} from '../../business-logic/api-services/projects.service';\nimport {requestFailed} from '../core/actions/http.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../core/actions/layout.actions';\nimport {\n  AddToProjectsList, GetAllProjectsPageProjects, ProjectUpdated,\n  setCurrentScrollId, SetNoMoreProjects, SetProjectsOrderBy,\n  setProjectsSearchQuery, UpdateProjectPartial\n} from './common-projects.actions';\nimport {\n  selectProjectsOrderBy, selectProjectsScrollId, selectProjectsSearchQuery, selectProjectsSortOrder\n} from './common-projects.reducer';\nimport {Store} from '@ngrx/store';\nimport {TABLE_SORT_ORDER} from '../shared/ui-components/data/table/table.consts';\nimport {ProjectsGetAllExRequest} from '../../business-logic/model/projects/projectsGetAllExRequest';\nimport {escapeRegex, isExample} from '../shared/utils/shared-utils';\nimport {catchError, debounceTime, map, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {get} from 'lodash/fp';\nimport {ApiTasksService} from '../../business-logic/api-services/tasks.service';\nimport {ApiModelsService} from '../../business-logic/api-services/models.service';\nimport {pageSize, PROJECTS_ACTIONS} from './common-projects.consts';\nimport {selectRouterParams} from '../core/reducers/router-reducer';\nimport {selectCurrentUser, selectShowOnlyUserWork} from '../core/reducers/users-reducer';\nimport {selectShowHidden} from '../../features/projects/projects.reducer';\nimport {ProjectsGetAllExResponse} from '../../business-logic/model/projects/projectsGetAllExResponse';\nimport {selectRootProjects, selectSelectedProjectId} from '../core/reducers/projects.reducer';\nimport {forkJoin, of} from 'rxjs';\nimport {Project} from '../../business-logic/model/projects/project';\nimport {setAllProjects} from '../core/actions/projects.actions';\n\n@Injectable()\nexport class CommonProjectsEffects {\n\n  constructor(\n    private actions: Actions, public projectsApi: ApiProjectsService,\n    public experimentsApi: ApiTasksService, public modelsApi: ApiModelsService,\n    private store: Store<any>\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions.pipe(\n    ofType(PROJECTS_ACTIONS.PROJECT_UPDATED, PROJECTS_ACTIONS.GET_PROJECTS, PROJECTS_ACTIONS.CREATE_PROJECT),\n    map(action => activeLoader(action.type))\n  ));\n\n  updateProject = createEffect(() => this.actions.pipe(\n    ofType<ProjectUpdated>(PROJECTS_ACTIONS.PROJECT_UPDATED),\n    withLatestFrom(this.store.select(selectRootProjects)),\n    mergeMap(([action, rootProjects]) => this.projectsApi.projectsUpdate(action.payload.updatedData)\n      .pipe(\n        mergeMap(() => {\n          const parentProject = rootProjects.find(project => project.id === action.payload.updatedData.project);\n          const effectedRootProjects = [\n            rootProjects.find(project => project.name === parentProject.name),\n            ...rootProjects.filter(project => project.name.startsWith(`${parentProject.name}/`))]\n            .map(project => ({\n              ...project,\n              name: project.name.replace(parentProject?.name, action.payload.updatedData.name)\n            }));\n          return [\n            deactivateLoader(action.type),\n            new UpdateProjectPartial({id: action.payload.updatedData.project, changes: action.payload.updatedData}),\n            setAllProjects({projects: effectedRootProjects, updating: true})\n          ];\n        }),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error),\n          setServerError(error, undefined, get('error.meta.result_subcode', error) === 800 ?\n            'Name should be 3 characters long' : get('error.meta.result_subcode', error) === 801 ? 'Name already exists in this project' : undefined)])\n      )\n    )\n  ));\n\n  getAllProjects = createEffect(() => this.actions.pipe(\n    ofType<GetAllProjectsPageProjects>(PROJECTS_ACTIONS.GET_PROJECTS),\n    debounceTime(10),\n    withLatestFrom(\n      this.store.select(selectProjectsOrderBy),\n      this.store.select(selectProjectsSortOrder),\n      this.store.select(selectProjectsSearchQuery),\n      this.store.select(selectProjectsScrollId),\n      this.store.select(selectCurrentUser),\n      this.store.select(selectShowOnlyUserWork),\n      this.store.select(selectShowHidden),\n      this.store.select(selectRouterParams).pipe(map(params => get('projectId', params))),\n      this.store.select(selectSelectedProjectId),\n    ),\n    switchMap(([action, orderBy, sortOrder, searchQuery, scrollId, user, showOnlyUserWork, showHidden, routerProjectId, projectId]) => {\n        const selectedProjectId = routerProjectId || projectId; // In rare cases where router not updated yet with current project id\n        /* eslint-disable @typescript-eslint/naming-convention */\n        return forkJoin([\n          this.projectsApi.projectsGetAllEx({\n            stats_for_state: ProjectsGetAllExRequest.StatsForStateEnum.Active,\n            include_stats: true,\n            shallow_search: !searchQuery?.query,\n            ...(selectedProjectId && {parent: [selectedProjectId]}),\n            scroll_id: scrollId || null, // null to create new scroll (undefined doesn't generate scroll)\n            size: pageSize,\n            active_users: (showOnlyUserWork ? [user.id] : null),\n            ...(showHidden && {search_hidden: true}),\n            order_by: ['featured', sortOrder === TABLE_SORT_ORDER.DESC ? '-' + orderBy : orderBy],\n            only_fields: ['name', 'company', 'user', 'created', 'default_output_destination'],\n            ...(searchQuery?.query && {\n              _any_: {\n                pattern: searchQuery.regExp ? searchQuery.query : escapeRegex(searchQuery.query) + '[^/]*$',\n                fields: ['id', 'name', 'description', 'system_tags']\n              }\n            }),\n            ...action.payload.getAllFilter\n          } as ProjectsGetAllExRequest),\n          // Getting [current project] stats from server\n          (selectedProjectId && !scrollId && !searchQuery?.query) ? this.projectsApi.projectsGetAllEx({\n            id: selectedProjectId,\n            include_stats: true,\n            stats_with_children: false,\n            stats_for_state: ProjectsGetAllExRequest.StatsForStateEnum.Active,\n            ...(showHidden && {search_hidden: true}),\n            check_own_contents: true, // in order to check if project is empty\n            only_fields: ['name', 'company', 'user', 'created', 'default_output_destination'],\n            /* eslint-enable @typescript-eslint/naming-convention */\n          }) : of(null),\n        ])\n          .pipe(\n            map(([projectsRes, currentProjectRes]: [ProjectsGetAllExResponse, ProjectsGetAllExResponse]) => ({\n                newScrollId: projectsRes.scroll_id,\n                projects: (currentProjectRes && this.isNotEmptyExampleProject(currentProjectRes.projects[0])) ? [\n                  // eslint-disable-next-line @typescript-eslint/naming-convention\n                  {...currentProjectRes.projects[0], isRoot: true, sub_projects: null, name: `[${currentProjectRes.projects[0]?.name}]`},\n                  ...projectsRes.projects\n                ] : projectsRes.projects\n              }\n            )),\n            mergeMap(({newScrollId, projects}) => [\n              new AddToProjectsList(projects),\n              deactivateLoader(action.type),\n              setCurrentScrollId({scrollId: newScrollId}),\n              new SetNoMoreProjects(projects.length < pageSize)]),\n            catchError(error => [deactivateLoader(action.type), requestFailed(error)])\n          );\n      }\n    )\n  ));\n\n  setProjectsOrderBy = createEffect(() => this.actions.pipe(\n    ofType<SetProjectsOrderBy>(PROJECTS_ACTIONS.SET_ORDER_BY),\n    mergeMap(() => [new GetAllProjectsPageProjects()])\n  ));\n\n  setProjectsSearchQuery = createEffect(() => this.actions.pipe(\n    ofType(setProjectsSearchQuery.type),\n    mergeMap(() => [new GetAllProjectsPageProjects()])\n  ));\n\n  private isNotEmptyExampleProject(project: Project) {\n    return !(isExample(project) && project.own_models === 0 && project.own_tasks === 0);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CommonProjectsPageComponent} from './containers/projects-page/common-projects-page.component';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {EffectsModule} from '@ngrx/effects';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ProjectsListComponent} from './dumb/projects-list/projects-list.component';\nimport {ProjectsHeaderComponent} from './dumb/projects-header/projects-header.component';\nimport {ProjectDialogModule} from '../shared/project-dialog/project-dialog.module';\nimport {ProjectsSharedModule} from '../../features/projects/shared/projects-shared.module';\nimport {CommonLayoutModule} from '../layout/layout.module';\nimport {SharedModule} from '../../shared/shared.module';\nimport {ProjectsEffects} from '../../features/projects/projects.effect';\nimport {CommonProjectsEffects} from './common-projects.effects';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SMSharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ProjectDialogModule,\n    ProjectsSharedModule,\n    EffectsModule.forFeature([ProjectsEffects, CommonProjectsEffects]),\n    SharedModule,\n    CommonLayoutModule\n  ],\n  declarations: [CommonProjectsPageComponent, ProjectsListComponent, ProjectsHeaderComponent],\n  exports: [CommonProjectsPageComponent, ProjectsListComponent, ProjectsHeaderComponent]\n})\nexport class CommonProjectsModule {\n}\n","import {createSelector} from '@ngrx/store';\nimport {Project} from '../../business-logic/model/projects/project';\nimport {TABLE_SORT_ORDER, TableSortOrderEnum} from '../shared/ui-components/data/table/table.consts';\nimport {PROJECTS_ACTIONS} from './common-projects.consts';\nimport {setCurrentScrollId, setProjectsSearchQuery} from './common-projects.actions';\nimport {ICommonSearchState} from '../common-search/common-search.reducer';\nimport {selectSelectedProject} from \"@common/core/reducers/projects.reducer\";\n\nexport interface CommonProjectReadyForDeletion {\n  project: Project;\n  experiments: {archived: number; unarchived: number};\n  models: {archived: number; unarchived: number};\n}\n\nexport interface ICommonProjectsState {\n  orderBy: string;\n  sortOrder: TableSortOrderEnum;\n  searchQuery: ICommonSearchState['searchQuery'];\n  data: Project[];\n  projectsNonFilteredList: Project[];\n  selectedProjectId: string;\n  selectedProject: Project;\n  projectReadyForDeletion: CommonProjectReadyForDeletion;\n  noMoreProjects: boolean;\n  scrollId: string;\n}\n\nexport const commonProjectsInitState: ICommonProjectsState = {\n  data: [],\n  selectedProjectId: '',\n  selectedProject: {},\n  orderBy: 'last_update',\n  sortOrder: TABLE_SORT_ORDER.DESC,\n  searchQuery: null,\n  projectsNonFilteredList: [],\n  projectReadyForDeletion: {\n    project: null,\n    experiments: null,\n    models: null\n  },\n  noMoreProjects: true,\n  scrollId: null,\n};\n\nconst getCorrectSortingOrder = (currentSortOrder: TableSortOrderEnum, currentOrderField: string, nextOrderField: string) => {\n  if (currentOrderField === nextOrderField) {\n    return currentSortOrder === TABLE_SORT_ORDER.DESC ? TABLE_SORT_ORDER.ASC : TABLE_SORT_ORDER.DESC;\n  } else {\n    return nextOrderField === 'last_update' ? TABLE_SORT_ORDER.DESC : TABLE_SORT_ORDER.ASC;\n  }\n};\n\nexport const commonProjectsReducer = (state: ICommonProjectsState = commonProjectsInitState, action): ICommonProjectsState => {\n\n  switch (action.type) {\n\n    case PROJECTS_ACTIONS.SET_PROJECTS:\n      return {...state, data: action.payload.projects};\n    case PROJECTS_ACTIONS.ADD_TO_PROJECTS_LIST:\n      return {...state, data: state.data.concat(action.payload.projects)};\n    case setCurrentScrollId.type:\n      return {...state, scrollId: action.scrollId};\n    case PROJECTS_ACTIONS.SET_NO_MORE_PROJECTS:\n      return {...state, noMoreProjects: action.payload};\n    case PROJECTS_ACTIONS.SET_PROJECTS_NON_FILTERED_LIST:\n      return {...state, projectsNonFilteredList: action.payload.projects};\n    case PROJECTS_ACTIONS.UPDATE_ONE_PROJECT:\n      return {\n        ...state, data:\n          state.data.map(ex => ex.id === action.payload.id ? {...ex, ...action.payload.changes} : ex)\n      };\n    case PROJECTS_ACTIONS.SET_PROJECT_BY_ID: {\n      const selectedProjectIndex = state.data.findIndex(project => project.id === action.payload.res.project.id);\n      const projectListInst = [...state.data];\n      projectListInst[selectedProjectIndex] = Object.assign({}, state.data[selectedProjectIndex], action.payload.res.project);\n      return {...state, selectedProject: action.payload.res.project, data: projectListInst};\n    }\n    case PROJECTS_ACTIONS.SELECT_PROJECT: {\n      const selectedProjectIndex = state.data.findIndex(project =>\n        project.id === action.payload.projectId\n      );\n      const selectedProject = state.data[selectedProjectIndex];\n      return {...state, selectedProjectId: action.payload.projectId, selectedProject};\n    }\n    case PROJECTS_ACTIONS.CREATE_PROJECT_SUCCESS:\n      return {...state, selectedProjectId: action.payload.projectId};\n    case PROJECTS_ACTIONS.SELECT_ALL_PROJECTS:\n      return {...state, selectedProjectId: null, selectedProject: {}};\n      // TODO: do we need to reset this in new delete?\n    case PROJECTS_ACTIONS.RESET_PROJECTS:\n      return {...state, scrollId: null, noMoreProjects: false, data: []};\n    case PROJECTS_ACTIONS.SET_ORDER_BY:\n      return {...state, orderBy: action.payload.orderBy, sortOrder: getCorrectSortingOrder(state.sortOrder, state.orderBy, action.payload.orderBy), scrollId: null, noMoreProjects: false, data: []};\n    case setProjectsSearchQuery.type:\n      return {...state, searchQuery: (action as ReturnType<typeof setProjectsSearchQuery>), scrollId: null, noMoreProjects: false, data: []};\n    case PROJECTS_ACTIONS.RESET_SEARCH_QUERY:\n      return {...state, searchQuery: commonProjectsInitState.searchQuery, scrollId: null, noMoreProjects: false, data: []};\n    case PROJECTS_ACTIONS.CHECK_PROJECT_FOR_DELETION:\n      return {...state, projectReadyForDeletion: {...commonProjectsInitState.projectReadyForDeletion, project: action.payload.project}};\n    case PROJECTS_ACTIONS.RESET_READY_TO_DELETE:\n      return {...state, projectReadyForDeletion: commonProjectsInitState.projectReadyForDeletion};\n    case PROJECTS_ACTIONS.SET_PROJECT_READY_FOR_DELETION:\n      return {...state, projectReadyForDeletion: {...state.projectReadyForDeletion, ...action.payload.readyForDeletion}};\n    default:\n      return state;\n  }\n};\n\nexport const projects = state => state.projects as ICommonProjectsState;\n\n\nexport const selectProjectsData = createSelector(projects, state => state?.data || []);\nexport const selectNonFilteredProjectsList = createSelector(projects, state => state?.projectsNonFilteredList || []);\n// export const selectSelectedProjectId = createSelector(selectRouterParams, (params: any) => params ? params.projectId : '');\nexport const selectProjectsOrderBy = createSelector(projects, state => state?.orderBy || '');\nexport const selectProjectsSortOrder = createSelector(projects, state => state?.sortOrder || TABLE_SORT_ORDER.DESC);\nexport const selectProjectsSearchQuery = createSelector(projects, state => state?.searchQuery);\nexport const selectProjectReadyForDeletion = createSelector(projects, state => state?.projectReadyForDeletion);\nexport const selectProjectForDelete = createSelector(projects, state => [state?.projectReadyForDeletion.project]);\nexport const selectNoMoreProjects = createSelector(projects, state => state.noMoreProjects);\nexport const selectProjectsScrollId = createSelector(projects, (state): string => state?.scrollId || null);\n","import {parse, UrlWithStringQuery} from 'url';\n\nconst ENDPOINT_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nexport const DEFAULT_REGION = 'us-east-1';\n\n/**\n * A URI wrapper that can parse out information about an S3 URI\n *\n * @example <caption>instanciate AmazonS3URI</caption>\n * try {\n *  const uri = 'https://bucket.s3-aws-region.amazonaws.com/key'\n *  const { region, bucket, key } = new AmazonS3URI(uri)\n * } catch (err) {\n *  console.warn(`${uri} is not a valid S3 uri`) // should not happen because `uri` is valid in that example\n * }\n * @example <caption>functional interface: it automatically returns an AmazonS3URI instance</caption>\n *  const { region, bucket, key } = AmazonS3URI(uri)\n * @param uri - the URI to parse\n * @param [parseQueryString] - If true, `uri` property exposes `query` as an object instead of a string\n * @throws {TypeError|Error}\n */\nexport class AmazonS3URI {\n  private uri: UrlWithStringQuery;\n  bucket: string;\n  key: string;\n  region: string;\n  /**\n   * true if the URI contains the bucket in the path,\n   * false if it contains the bucket in the authority\n   *\n   * @type { boolean }\n   * */\n  isPathStyle = false;\n\n  constructor(uri: string) {\n    this.uri = parse(uri);\n    this.parse(uri);\n  }\n\n  private parse(uri: string) {\n    if (this.uri.protocol === 's3:') {\n      this.bucket = this.uri.host;\n\n      if (!this.bucket) {\n        throw new Error(`Invalid S3 URI: no bucket: ${uri}`);\n      }\n\n      if (!this.uri.pathname || this.uri.pathname.length <= 1) {\n        // s3://bucket or s3://bucket/\n        this.key = null;\n      } else {\n        // s3://bucket/key\n        // Remove the leading '/'.\n        this.key = this.uri.pathname.substring(1);\n      }\n      if (this.key !== null) {\n        this.key = decodeURIComponent(this.key);\n      }\n      return;\n    }\n\n    if (!this.uri.host) {\n      throw new Error(`Invalid S3 URI: no hostname: ${uri}`);\n    }\n\n    const matches = this.uri.host.match(ENDPOINT_PATTERN);\n    if (!matches) {\n      throw new Error(`Invalid S3 URI: hostname does not appear to be a valid S3 endpoint: ${uri}`);\n    }\n\n    const prefix = matches[1];\n    if (!prefix) {\n      // No bucket name in the host; parse it from the path.\n      this.isPathStyle = true;\n\n      if (this.uri.pathname === '/') {\n        this.bucket = null;\n        this.key = null;\n      } else {\n        const index = this.uri.pathname.indexOf('/', 1);\n        if (index === -1) {\n          // https://s3.amazonaws.com/bucket\n          this.bucket = this.uri.pathname.substring(1);\n          this.key = null;\n        } else if (index === this.uri.pathname.length - 1) {\n          // https://s3.amazonaws.com/bucket/\n          this.bucket = this.uri.pathname.substring(1, index);\n          this.key = null;\n        } else {\n          // https://s3.amazonaws.com/bucket/key\n          this.bucket = this.uri.pathname.substring(1, index);\n          this.key = this.uri.pathname.substring(index + 1);\n        }\n      }\n    } else {\n      // Bucket name was found in the host; path is the key.\n      this.isPathStyle = false;\n\n      // Remove the trailing '.' from the prefix to get the bucket.\n      this.bucket = prefix.substring(0, prefix.length - 1);\n\n      if (!this.uri.pathname || this.uri.pathname === '/') {\n        this.key = null;\n      } else {\n        // Remove the leading '/'.\n        this.key = this.uri.pathname.substring(1);\n      }\n    }\n\n    if (matches[2] !== 'amazonaws') {\n      this.region = matches[2];\n    }\n    // else {\n    //   this.region = DEFAULT_REGION;\n    // }\n\n    if (this.key !== null) {\n      this.key = decodeURIComponent(this.key);\n    }\n\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport {from, Observable, of, Subject} from 'rxjs';\nimport {\n  Credentials, selectRevokeSucceed,\n  selectS3BucketCredentials, selectS3BucketCredentialsBucketCredentials\n} from '../../core/reducers/common-auth-reducer';\nimport {S3Client, ObjectIdentifier, DeleteObjectsCommand, GetObjectCommand} from '@aws-sdk/client-s3';\nimport {S3ClientConfig} from '@aws-sdk/client-s3';\n// import {getSignedUrl} from '@aws-sdk/s3-request-presigner';\nimport {getAllCredentials, showLocalFilePopUp} from '../../core/actions/common-auth.actions';\nimport {map, skip} from 'rxjs/operators';\nimport {convertToReverseProxy, isFileserverUrl} from '../../../shared/utils/url';\nimport {ConfigurationService} from '../../shared/services/configuration.service';\nimport {selectActiveWorkspace} from '../../core/reducers/users-reducer';\nimport {GetCurrentUserResponseUserObjectCompany} from '../../../business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {Environment} from '../../../../environments/base';\nimport {AmazonS3URI, DEFAULT_REGION} from '../../shared/utils/amazon-s3-uri';\nimport {fromPromise} from 'rxjs/internal-compatibility';\nimport {BuildMiddleware, MetadataBearer, RequestPresigningArguments} from '@aws-sdk/types';\nimport {Client, Command} from '@aws-sdk/smithy-client';\nimport {HttpRequest} from '@aws-sdk/protocol-http';\nimport {formatUrl} from '@aws-sdk/util-format-url';\nimport {S3RequestPresigner} from '@aws-sdk/s3-request-presigner';\n\nconst LOCAL_SERVER_PORT = 27878;\nconst FOUR_DAYS = 60 * 60 * 24 * 4;\nconst HTTP_REGEX = /^https?:\\/\\//;\n\nexport interface SignResponse {\n  type: 'popup' | 'sign' | 'none';\n  signed?: string;\n  expires?: number;\n  bucket?: Credentials;\n  azure?: boolean;\n}\n\nexport const isS3Url = (src) => src?.startsWith('s3://');\n\nconst replaceAll = (baseString: string, toReplace: string, replaceWith: string, ignore = false) =>\n  baseString.replace(new RegExp(toReplace.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g, '\\\\$&'), (ignore ? 'gi' : 'g')), (typeof (replaceWith) == 'string') ? replaceWith.replace(/\\$/g, '$$$$') : replaceWith);\n\nconst encodeSpecialCharacters = (src: string) => {\n  src = replaceAll(src, '%', '%25');\n  src = replaceAll(src, '#', '%23');\n  src = replaceAll(src, '\\\\', '%5C');\n  src = replaceAll(src, '^', '%5E');\n  return src;\n};\n\nexport const getBucketAndKeyFromSrc = (src) => {\n  let key = '';\n  if (src && src.includes('azure://')) {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    return {\n      Bucket: 'azure',\n      Endpoint: 'azure',\n      Key: 'azure',\n      Secret: key\n    };\n    /* eslint-enable @typescript-eslint/naming-convention */\n  }\n  const srcArr = src.split('/');\n  if (!isS3Url(src)) {\n    return null;\n  } else if (srcArr[2].includes(':')) {\n    // We identify minio cae by it's port (:) and use same behavior in case user already set credentials for that endpoint\n    srcArr.forEach((part, index) => {\n      if (index > 3) {\n        key += part + '/';\n      }\n    });\n    key = key.slice(0, -1);\n    /* eslint-disable @typescript-eslint/naming-convention */\n    return {\n      Bucket: srcArr[3],\n      Endpoint: srcArr[2],\n      Key: key,\n    };\n    /* eslint-enable @typescript-eslint/naming-convention */\n  } else {\n    try {\n      src = encodeSpecialCharacters(src);\n      const amazon = new AmazonS3URI(src);\n      /* eslint-disable @typescript-eslint/naming-convention */\n      return {\n        Bucket: amazon.bucket,\n        Key: amazon.key,\n        Region: amazon.region,\n        Endpoint: null\n      };\n      /* eslint-enable @typescript-eslint/naming-convention */\n    } catch (err) {\n      console.log(err);\n      return null;\n    }\n  }\n};\nexport const inBucket = (url: string, bucket: string, endpoint: string) => {\n  const {Bucket: urlBucket, Endpoint: urlEndpoint} = getBucketAndKeyFromSrc(url);\n  return urlBucket === bucket && urlEndpoint === endpoint;\n};\n\n\nexport const getSignedUrl = async <\n  InputTypesUnion extends object,\n  InputType extends InputTypesUnion,\n  OutputType extends MetadataBearer = MetadataBearer\n  >(\n  client: Client<any, InputTypesUnion, MetadataBearer, any>,\n  command: Command<InputType, OutputType, any, InputTypesUnion, MetadataBearer>,\n  options: RequestPresigningArguments = {}\n): Promise<string> => {\n  const s3Presigner = new S3RequestPresigner({ ...client.config });\n  const presignInterceptMiddleware: BuildMiddleware<InputTypesUnion, MetadataBearer> =\n    (next, context) => async (args) => {\n      const { request } = args;\n      if (!HttpRequest.isInstance(request)) {\n        throw new Error('Request to be presigned is not an valid HTTP request.');\n      }\n      // Retry information headers are not meaningful in presigned URLs\n      delete request.headers['amz-sdk-invocation-id'];\n      delete request.headers['amz-sdk-request'];\n      // User agent header would leak sensitive information\n      delete request.headers['x-amz-user-agent'];\n      delete request.headers['x-amz-content-sha256'];\n\n      delete request.query['x-id'];\n\n      if (request.port) {\n        request.headers['host'] = `${request.hostname}:${request.port}`;\n      }\n\n      const presigned = await s3Presigner.presign(request, {\n        ...options,\n        signingRegion: options.signingRegion ?? context['signing_region'],\n        signingService: options.signingService ?? context['signing_service'],\n      });\n      return {\n        // Intercept the middleware stack by returning fake response\n        response: {},\n        output: {\n          $metadata: { httpStatusCode: 200 },\n          presigned,\n        },\n      } as any;\n    };\n  const middlewareName = 'presignInterceptMiddleware';\n  client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n    name: middlewareName,\n    relation: 'before',\n    toMiddleware: 'awsAuthMiddleware',\n    override: true,\n  });\n\n  let presigned: HttpRequest;\n  try {\n    const output = await client.send(command);\n    //@ts-ignore the output is faked, so it's not actually OutputType\n    presigned = output.presigned;\n  } finally {\n    client.middlewareStack.remove(middlewareName);\n  }\n\n  return formatUrl(presigned);\n};\n\n\n@Injectable()\nexport class BaseAdminService {\n  bucketCredentials: Observable<any>;\n  public s3Services: {[bucket: string]: S3Client} = {};\n  revokeSucceed: Observable<any>;\n  protected store: Store<any>;\n  private readonly s3BucketCredentials: Observable<any>;\n  private previouslySignedUrls = {};\n  private localServerWorking = false;\n  private workspace: GetCurrentUserResponseUserObjectCompany;\n  private environment: Environment;\n  private deleteS3FilesSubject: Subject<{ success: boolean; files: string[] }>;\n  private credentials: any[];\n\n  constructor(store: Store<any>, protected confService: ConfigurationService) {\n    this.store = store;\n    this.revokeSucceed = store.pipe(select(selectRevokeSucceed));\n    this.revokeSucceed.subscribe(this.onRevokeSucceed);\n    this.s3BucketCredentials = store.pipe(select(selectS3BucketCredentials));\n    this.s3BucketCredentials.pipe(skip(1)).subscribe(() => {\n      this.previouslySignedUrls = {};\n    });\n    store.select(selectS3BucketCredentialsBucketCredentials)\n      .subscribe(cred => this.credentials = cred);\n    this.store.select(selectActiveWorkspace).subscribe(workspace => this.workspace = workspace);\n    confService.getEnvironment().subscribe(conf => this.environment = conf);\n    this.deleteS3FilesSubject = new Subject();\n  }\n\n  showLocalFilePopUp(url) {\n    this.store.dispatch(showLocalFilePopUp({url}));\n  }\n\n  signUrlIfNeeded(url: string, config?: { skipLocalFile?: boolean; skipFileServer?: boolean; disableCache?: number }):\n    Observable<SignResponse> {\n    config = {...{skipLocalFile: true, skipFileServer: true, disableCache: null}, ...config};\n\n    if (isFileserverUrl(url)) {\n      if (this.environment.communityServer) {\n        url = this.addTenant(url);\n      }\n      if (config.disableCache) {\n        url = this.addS3TimeStamp(url, config.disableCache);\n      }\n      if (!config.skipFileServer && this.environment.useFilesProxy) {\n        return of({type: 'sign', signed: convertToReverseProxy(url), expires: Number.MAX_VALUE});\n      }\n      return of({type: 'sign', signed: url, expires: Number.MAX_VALUE});\n    }\n\n    if (this.isLocalFile(url) && !config.skipLocalFile) {\n      this.checkLocalServerRunning(url);\n      return of({type: 'sign', signed: this.redirectToLocalServer(url), expires: Number.MAX_VALUE});\n    }\n\n    if (this.isGoogleCloudUrl(url)) {\n      return of({type: 'sign', signed: this.signGoogleCloudUrl(url), expires: Number.MAX_VALUE});\n    }\n\n    if (this.isAzureUrl(url)) {\n      const azureBucket = this.credentials.find((b) => b.Bucket && b.Bucket.toLowerCase() == 'azure');\n      if (azureBucket) {\n        return of({type: 'sign', signed: this.signAzureUrl(url, azureBucket), expires: Number.MAX_VALUE});\n      }\n    }\n    const bucketKeyEndpoint = url && getBucketAndKeyFromSrc(url);\n    if (bucketKeyEndpoint) {\n      if (this.isAzureUrl(url)) {\n        return of({type: 'popup', bucket: bucketKeyEndpoint, azure: true});\n      }\n      const s3 = this.findOrInitBucketS3(bucketKeyEndpoint);\n      if (s3) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const command = new GetObjectCommand({Key: bucketKeyEndpoint.Key, Bucket: bucketKeyEndpoint.Bucket/*, ResponseContentType: 'image/jpeg'*/});\n        return fromPromise(getSignedUrl(s3, command, {\n          expiresIn: FOUR_DAYS,\n          unhoistableHeaders: new Set(['x-amz-content-sha256', 'x-id']),\n          unsignableHeaders: new Set(['x-amz-content-sha256', 'x-id']),\n        }))\n          .pipe(map(signed => ({type: 'sign', signed, expires: (new Date()).getTime() + FOUR_DAYS * 1000})));\n      } else {\n        delete bucketKeyEndpoint.Key;\n        return of({type: 'popup', bucket: bucketKeyEndpoint});\n      }\n    } else {\n      return of({type: 'sign', signed: url, expires: Number.MAX_VALUE});\n    }\n  }\n\n  findS3CredentialsInStore(bucketKeyEndpoint) {\n    return this.credentials\n      .find(bucket => bucket?.Bucket === bucketKeyEndpoint.Bucket && bucket?.Endpoint?.replace(HTTP_REGEX,'') == bucketKeyEndpoint.Endpoint);\n  }\n\n  findOrInitBucketS3(bucketKeyEndpoint) {\n    const set = this.findS3CredentialsInStore(bucketKeyEndpoint);\n    const s3Service = this.s3Services[bucketKeyEndpoint.Bucket + bucketKeyEndpoint.Endpoint];\n    if (set && s3Service) {\n      return s3Service;\n    } else {\n      if (set) {\n        this.s3Services[bucketKeyEndpoint.Bucket + bucketKeyEndpoint.Endpoint] = this.createS3Service(set);\n        return this.s3Services[bucketKeyEndpoint.Bucket + bucketKeyEndpoint.Endpoint];\n      }\n    }\n  }\n\n  createS3Service(set) {\n    // const [hostPort, path] = set.Endpoint?.split('/');\n    const [hostname, port] = set.Endpoint?.replace(HTTP_REGEX,'')?.split(':') || ['', ''];\n    const config = {\n      region: set.Region || DEFAULT_REGION,\n      credentials: {\n        accessKeyId: set.Key,\n        secretAccessKey: set.Secret\n      },\n      ...(set.Endpoint && {\n        endpoint: {\n          protocol: set.Endpoint?.startsWith('https') ? 'https' : 'http',\n          hostname,\n          ...(!['80', '443'].includes(port) && {port}),\n          path: '',\n        },\n        forcePathStyle: true,\n        tls: false,\n      }),\n    } as S3ClientConfig;\n    return new S3Client(config);\n  }\n\n  resetS3Services() {\n    this.s3Services = {};\n  }\n\n  public getAllCredentials() {\n    this.store.dispatch(getAllCredentials());\n  }\n\n  private onRevokeSucceed = (bool) => bool ? this.getAllCredentials() : false;\n\n  public isGoogleCloudUrl(src) {\n    return src?.startsWith('gs://');\n  }\n\n\n  // Uses Allegro Chrome extension injecting patch_local_link function to window - hack to get local files.\n  redirectToLocalServer(url: string): string {\n    return `http://localhost:${LOCAL_SERVER_PORT}${url.replace('file://', '/')}`;\n  }\n\n  isLocalFile(url: string): boolean {\n    return url && (url.startsWith('/') || url.startsWith('file://') ||\n      url.startsWith(':\\\\', 1) || url.startsWith('\\\\\\\\'));\n  }\n\n  checkLocalServerRunning(url: string) {\n    if (this.localServerWorking) {\n      return;\n    }\n\n    from(fetch(`http://localhost:${LOCAL_SERVER_PORT}`, {mode: 'no-cors'}))\n      .subscribe(() => {\n        this.localServerWorking = true;\n      }, () => this.showLocalFilePopUp(url));\n  }\n\n  signGoogleCloudUrl(url: string): string {\n    return 'https://storage.cloud.google.com' + (url.slice(4));\n  }\n\n  signAzureUrl(url: string, azureBucket) {\n    const sas = azureBucket ? azureBucket.Secret : '';\n    const sasQueryString = url.includes('?') ? sas.replace('?', '&') : sas;\n    return url.replace('azure://', 'https://').concat(sasQueryString);\n  }\n\n  isAzureUrl(url: string) {\n    return url.startsWith('azure://');\n  }\n\n\n  private addTenant(url: string) {\n    const u = new URL(url);\n    u.searchParams.append('tenant', this.workspace?.id);\n    return u.toString();\n  }\n\n  public deleteS3Files(files: string[], skipSubjectReturn): Observable<{ success: boolean; files: string[] }> {\n    const url = files[0];\n    const bucketKeyEndpoint = url && getBucketAndKeyFromSrc(url);\n    const s3 = this.findOrInitBucketS3(bucketKeyEndpoint) as S3Client;\n\n    /* eslint-disable @typescript-eslint/naming-convention */\n    const command = new DeleteObjectsCommand({\n      Bucket: bucketKeyEndpoint.Bucket,\n      Delete: {\n        Quiet: true,\n        Objects: files.map(file => ({Key: file} as ObjectIdentifier))\n      }\n    });\n    /* eslint-enable @typescript-eslint/naming-convention */\n    if (s3) {\n      s3.send(command).then(response => {\n        if (response.Errors?.length > 0) {\n          this.deleteS3FilesSubject.next({success: false, files});\n        } else {\n          this.deleteS3FilesSubject.next({success: true, files});\n        }\n      });\n    } else {\n      delete bucketKeyEndpoint.Key;\n      // TODO: use store\n      // this.showS3PopUp(bucketKeyEndpoint).pipe(skip(1), take(1))\n      //   .subscribe(() => this.deleteS3Files(files, true));\n    }\n    return !skipSubjectReturn && this.deleteS3FilesSubject.asObservable();\n  }\n\n  addS3TimeStamp(url: string, timestamp: number) {\n    timestamp = timestamp || new Date().getTime();\n    try {\n      const parsed = new URL(url);\n      parsed.searchParams.append('X-Amz-Date', `${timestamp}`);\n      return  parsed.toString();\n    } catch {\n      return url;\n    }\n  }\n\n}\n","import {Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild} from '@angular/core';\nimport {MatMenuTrigger} from '@angular/material/menu';\nimport {TagsMenuComponent} from '../../ui-components/tags/tags-menu/tags-menu.component';\nimport {Store} from '@ngrx/store';\nimport {DeactivateEdit, ActivateEdit} from 'app/webapp-common/experiments/actions/common-experiments-info.actions';\nimport {ActivateModelEdit, CancelModelEdit} from 'app/webapp-common/models/actions/models-info.actions';\nimport {CountAvailableAndIsDisableSelectedFiltered} from '@common/shared/entity-page/items.utils';\nimport {MenuItems} from '../../entity-page/items.utils';\n\n@Component({\n  selector: 'sm-base-context-menu',\n  template: ''\n})\nexport class BaseContextMenuComponent {\n  public position = {x: 0, y: 0};\n  public menuItems = MenuItems;\n\n  @ViewChild('tagMenuContent') tagMenu: TagsMenuComponent;\n  @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger;\n  @Input() selectedDisableAvailable: Record<string, CountAvailableAndIsDisableSelectedFiltered> = {};\n  @Input() selectedDisableAvailableIsMultiple = true;\n  @Output() menuOpened = new EventEmitter();\n  @Output() menuClosed = new EventEmitter();\n\n  @HostListener('document:click', ['$event'])\n  clickOut(event) {\n    if (!this.eRef.nativeElement.contains(event.target)) {\n      this.trigger?.closeMenu();\n      this.menuClosed.emit();\n    }\n  }\n\n  constructor(\n    protected store: Store<any>,\n    protected eRef: ElementRef\n  ) {}\n\n  openMenu(position: { x: number; y: number }) {\n    if (this.trigger?.menuOpen) {\n      this.trigger.closeMenu();\n      this.menuClosed.emit();\n    }\n    this.position = position;\n    window.setTimeout(() => {\n      this.trigger.openMenu();\n      this.menuOpened.emit();\n    }, 100);\n  }\n\n  tagMenuOpened() {\n    window.setTimeout(() => {\n      this.store.dispatch(new ActivateEdit('tags'));\n      this.store.dispatch(new ActivateModelEdit('tags'));\n    }, 200);\n    this.tagMenu?.focus();\n  }\n\n  tagMenuClosed() {\n    window.setTimeout(() => {\n      this.store.dispatch(new DeactivateEdit());\n      this.store.dispatch(new CancelModelEdit());\n    }, 200);\n    this.tagMenu?.clear();\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ViewContainerRef,\n  ChangeDetectorRef,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport line from 'britecharts/dist/umd/line.min';\nimport tooltip from 'britecharts/dist/umd/tooltip.min';\nimport legend from 'britecharts/dist/umd/legend.min';\nimport {select, Selection} from 'd3-selection';\n\ninterface Topic {\n  topicName: string;\n  topic: number;\n  dates: { value: number; date: string }[];\n}\n\nexport interface LineChartData {\n  dataByTopic?: Topic[];\n}\n\nconst COLOR_SCHEME = ['#a4a1fb', '#ff8a15'];\n\n@Component({\n  selector       : 'sm-line-chart',\n  templateUrl    : './line-chart.component.html',\n  styleUrls      : ['./line-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineChartComponent implements AfterViewInit {\n\n  private lineMargin = {top: 30, bottom: 50, left: 80, right: 10};\n  private lineChartContainer: Selection<SVGElement, LineChartData, HTMLElement, any>;\n  private lineChart;\n  private lineTooltipContainer;\n  private lineTooltip;\n  private legendContainer: Selection<SVGElement, LineChartData, HTMLElement, any>;\n  private legendChart;\n  private legendWidth: number;\n  public loading     = false;\n  private _yLabel: string;\n  public chartData: LineChartData;\n  private initDone   = false;\n\n  @Input() yTickFormatter: (number) => number;\n\n  @Input() set yLabel(label: string) {\n    this._yLabel = label;\n    if (this.initDone) {\n      this.lineChart.yAxisLabel(label);\n    }\n  }\n\n  @Input() set showLoadingOverlay(show: boolean) {\n    if (!show) {\n      setTimeout(() => {\n        this.initLineChart();\n        this.loading = false;\n        this.cdr.detectChanges();\n      });\n    } else {\n      this.loading  = true;\n      this.initDone = false;\n    }\n  }\n\n  @Input() tooltipVerticalOffset = -100;\n\n  @Input() set data(data: LineChartData) {\n    if (data && (data.dataByTopic.length === 0 || data.dataByTopic.every(topic => topic.dates.length === 0))) {\n      this.chartData = undefined;\n      return;\n    }\n\n    this.chartData = data;\n    if (this.initDone) {\n      this.lineChart.xAxisCustomFormat(this.getXAxisFormatter(this.chartData))\n        .isAnimated(false);\n      this.updateChart();\n      this.updateLegend();\n    }\n  }\n\n  @ViewChild('chart', {read: ViewContainerRef, static: true}) chartRef: ViewContainerRef;\n  @ViewChild('legend', {read: ViewContainerRef, static: true}) legendRef: ViewContainerRef;\n\n  constructor(private cdr: ChangeDetectorRef, private readonly zone: NgZone) {\n  }\n\n  ngAfterViewInit() {\n    this.legendChart        = legend();\n    this.legendContainer    = select(this.legendRef.element.nativeElement);\n    this.lineChart          = line();\n    this.lineTooltip        = tooltip();\n    this.lineChartContainer = select(this.chartRef.element.nativeElement);\n    if (!this.loading) {\n      setTimeout(this.initLineChart.bind(this));\n    }\n  }\n\n  initLegend() {\n    const rect       = this.legendContainer.node().getBoundingClientRect();\n    const {width}    = rect;\n    this.legendWidth = width;\n\n    if (rect) {\n      this.legendChart\n        .width(this.legendWidth)\n        .height(40)\n        .colorSchema(COLOR_SCHEME)\n        .numberFormat('l')\n        .isHorizontal(true);\n    }\n  }\n\n  updateLegend() {\n    if (!this.chartData) {\n      return;\n    }\n\n    this.zone.runOutsideAngular(() => {\n      const data = this.chartData.dataByTopic.map(topic => ({id: topic.topic, name: topic.topicName}));\n      this.legendContainer.datum(data).call(this.legendChart);\n\n      this.legendContainer.select('defs').remove();\n      this.legendContainer.select('svg').append('defs').append('svg:clipPath')\n        .attr('id', 'legend-label-clip')\n        .append('svg:rect')\n        .attr('id', 'clip-rect')\n        .attr('x', '0')\n        .attr('y', '-10')\n        .attr('width', this.legendWidth - 100)\n        .attr('height', 20);\n      this.legendContainer.selectAll('.legend-entry-name')\n        .attr('clip-path', 'url(#legend-label-clip)')\n        .append('title')\n        .text((d: any[]) => d['name']);\n    });\n  }\n\n  initLineChart() {\n    this.zone.runOutsideAngular(() => {\n      const containerWidth: number = this.lineChartContainer.node() ?\n        this.lineChartContainer.node().getBoundingClientRect().width : 10;\n\n      this.lineChart\n        .tooltipThreshold(600)\n        .height(270)\n        .margin(this.lineMargin)\n        .lineCurve('monotoneX')\n        .isAnimated(true)\n        .grid('horizontal')\n        .width(containerWidth)\n        .colorSchema(COLOR_SCHEME)\n        .lineGradient(['#a4a1fb', '#a4a1fb'])\n        .xAxisLabel('')\n        .xTicks(8)\n        .yAxisLabelPadding(50)\n        .yAxisLabel(this._yLabel)\n        .xAxisFormat(this.lineChart.axisTimeCombinations.CUSTOM)\n        .on('customMouseOver', this.lineTooltip.show)\n        .on('customMouseMove', this.lineTooltip.update)\n        .on('customMouseOut', this.lineTooltip.hide);\n\n      this.initLegend();\n\n      if (this.chartData) {\n        this.lineChart.xAxisCustomFormat(this.getXAxisFormatter(this.chartData));\n        this.updateChart();\n        this.updateLegend();\n      }\n\n      // Tooltip Setup and start\n      const tooltipElm          = this.chartRef.element.nativeElement;\n      this.lineTooltipContainer = select(tooltipElm).select('.metadata-group .vertical-marker-container');\n      this.lineTooltip\n        .title('')\n        .valueLabel('value')\n        .dateFormat(this.lineTooltip.axisTimeCombinations.CUSTOM)\n        .dateCustomFormat('%c')\n        .tooltipOffset({\n          y: this.tooltipVerticalOffset,\n          x: 500\n        });\n\n      if (this.yTickFormatter) {\n        this.lineTooltip.valueFormatter(this.yTickFormatter);\n      }\n      // Note that if the viewport width is less than the tooltipThreshold value,\n      // this container won't exist, and the tooltip won't show up\n      this.lineTooltipContainer.datum([]).call(this.lineTooltip);\n      this.initDone = true;\n    });\n  }\n\n  updateChart() {\n    if (this.chartData) {\n      this.zone.runOutsideAngular(() => {\n        this.lineChartContainer.datum(this.chartData).call(this.lineChart);\n        if (this.yTickFormatter) {\n          this.lineChartContainer.selectAll('.y.axis .tick text').text(this.yTickFormatter);\n        }\n      });\n    }\n  }\n\n  getXAxisFormatter(data) {\n    if (!data) {\n      return;\n    }\n    data               = data.dataByTopic[0].dates;\n    const firstDate    = new Date(data[0].date);\n    const lastDate     = new Date(data[data.length - 1].date);\n    const dateTimeSpan = lastDate.getTime() - firstDate.getTime();\n\n    if (dateTimeSpan > 3 * 24 * 60 * 60 * 1000) { // more then 3 days\n      this.lineChart.xTicks(6);\n      return '%b %d';\n    } else if (dateTimeSpan > 4 * 60 * 60 * 1000) { // more then 4 hours\n      this.lineChart.xTicks(5);\n      return '%a %I%p';\n    }\n    this.lineChart.xTicks(8);\n    return '%H:%M';\n  }\n\n  onResize() {\n    this.initLegend();\n    const containerWidth: number = this.lineChartContainer.node() ?\n      this.lineChartContainer.node().getBoundingClientRect().width : 10;\n    this.lineChart.width(containerWidth)\n      .isAnimated(false);\n    this.updateChart();\n    this.updateLegend();\n  }\n}\n","<div [hidden]=\"!loading\" [class.d-flex]=\"loading\" class=\"overlay justify-content-center align-items-center\">\n  <mat-spinner></mat-spinner>\n  <div class=\"text\">Loading</div>\n</div>\n<div [hidden]=\"loading || chartData\" [class.d-flex]=\"!(loading || chartData)\"\n     class=\"overlay justify-content-center align-items-center\">\n  <div class=\"text no-data\">No data to show</div>\n</div>\n\n<div class=\"h-100\">\n  <div (window:resize)=\"onResize()\" #chart class=\"chart\"></div>\n  <div #legend></div>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit, Output, EventEmitter} from '@angular/core';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\n\n@Component({\n  selector: 'sm-clear-filters-button',\n  templateUrl: `./clear-filters-button.component.html`,\n  styleUrls: ['./clear-filters-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ClearFiltersButtonComponent implements OnInit {\n\n  @Input() set tableFilters(tableFilters: { [s: string]: FilterMetadata }) {\n    this.isTableFiltered = Object.values(tableFilters).some(({value}) => value.length > 0);\n  };\n  @Output() clearTableFilters = new EventEmitter<null>();\n\n  public isTableFiltered: boolean;\n\n  constructor() { }\n\n  ngOnInit(): void {}\n\n}\n","<i class=\"al-icon al-ico-filter-reset\"\n   [class.disabled]=\"!isTableFiltered\"\n   [class.pointer]=\"isTableFiltered\"\n   smTooltip=\"Clear all filters\"\n   (click)=\"isTableFiltered && clearTableFilters.emit()\"\n>\n  <span class=\"path1\"></span><span class=\"path2\"></span>\n</i>\n","<div class=\"sm-menu-header\">CUSTOMIZE COLUMNS</div>\n<mat-divider></mat-divider>\n<div class=\"list-container\">\n  <sm-menu-item *ngFor=\"let col of tableCols; trackBy: trackById\"\n                [itemLabel]=\"col.header\"\n                [checked]=\"!(col?.hidden)\"\n                [selectable]=\"true\"\n                [removable]=\"!!col.metric_hash || col.isParam\"\n                [itemValue]=\"col.id\"\n                (removeItemClicked)=\"removeColFromList.emit($event)\"\n                (itemClicked)=\"selectedTableColsChanged.emit(col)\">\n  </sm-menu-item>\n</div>\n<mat-divider></mat-divider>\n<div class=\"loader\" [ngClass]=\"{'d-none': !isLoading}\">\n  <mat-spinner diameter=\"50\"></mat-spinner>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ISmCol} from '../../ui-components/data/table/table.consts';\n\n@Component({\n  selector   : 'sm-custom-columns-list',\n  templateUrl: './custom-columns-list.component.html',\n  styleUrls  : ['./custom-columns-list.component.scss']\n})\nexport class CustomColumnsListComponent implements OnInit {\n  @Input() tableCols: ISmCol[];\n  @Input() isLoading;\n  @Output() removeColFromList = new EventEmitter<ISmCol['id']>();\n  @Output() selectedTableColsChanged = new EventEmitter<ISmCol>();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  trackById = (index: number, col: ISmCol) => col.id;\n}\n","<button *ngIf=\"showSettings\" class=\"btn\" smTooltip=\"Settings\" (click)=\"toggleSettings.emit()\">\n  <i class=\"fas fa-cog fa-lg\"></i>\n</button>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-experiment-settings',\n  templateUrl: './experiment-settings.html',\n  styleUrls  : ['./experiment-settings.scss']\n})\nexport class ExperimentSettingsComponent {\n\n  @Input() disabled                  = false;\n  @Input() showSettings              = false;\n  @Output() toggleSettings           = new EventEmitter();\n}\n\n","<div class=\"refresh-wrapper d-flex flex-row-reverse align-items-center\" [ngClass]=\"{'allow-autorefresh': allowAutoRefresh}\">\n  <span\n    *ngIf=\"allowAutoRefresh && autoRefreshState; else pause\"\n    class=\"pl-1 al-icon al-ico-auto-refresh-play\"\n    (click)=\"refreshList.emit(false)\"\n  ><span class=\"path1\"></span><span class=\"path2\"></span></span>\n  <ng-template #pause>\n    <span\n      class=\"pl-1 al-icon al-ico-auto-refresh-pause\"\n      (click)=\"refreshList.emit(false)\"\n    ><span class=\"path1\"></span><span class=\"path2\"></span>\n    </span>\n  </ng-template>\n  <mat-checkbox [ngModel]=\"autoRefreshState\" name=\"autoRefresh\" (ngModelChange)=\"setAutoRefresh.emit($event)\" class=\"autorefresh-checkbox\">\n    Auto Refresh\n  </mat-checkbox>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-refresh-button',\n  templateUrl: './refresh-button.component.html',\n  styleUrls  : ['./refresh-button.component.scss']\n})\nexport class RefreshButtonComponent implements OnInit {\n  @Input() autoRefreshState: boolean;\n  @Input() allowAutoRefresh: boolean = true;\n  @Input() disabled: boolean = true;\n  @Output() refreshList = new EventEmitter();\n  @Output() setAutoRefresh = new EventEmitter<boolean>();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n","<ng-content select=\"[empty-state]\"></ng-content>\n<div *ngIf=\"!showSpinner && !editable && lines?.length\" class=\"diff-container h-100\">\n  <div class=\"floating-buttons\">\n    <ng-content select=\"[extra-buttons]\"></ng-content>\n    <sm-copy-clipboard *ngIf=\"formData\" [clipboardText]=\"formData\" label=\"\" class=\"copy-textarea\" tooltipText='Copy to clipboard' theme=\"text-area\"></sm-copy-clipboard>\n    <sm-search\n      class=\"dark-theme text-area\"\n      [value]=\"search\"\n      [expandOnHover]=\"true\"\n      (valueChanged)=\"onSearchValueChanged($event)\"\n    ></sm-search>\n  </div>\n  <cdk-virtual-scroll-viewport #scroll itemSize=\"19\" minBufferPx = 400, maxBufferPx = 600\n                               class=\"viewport\"\n                               [style.min-height]=\"minHeight\"\n                               [class.disabled]=\"disabled\"\n                               [class.isReadonly]=\"!editable\">\n    <div *cdkVirtualFor=\"let line of lines\" class=\"line\"><span\n      *ngFor=\"let part of (search ? line.split(search) : [line]); let last=last\"\n      >{{part}}<span class=\"found\" *ngIf=\"!last\"\n        >{{search}}</span></span></div>\n  </cdk-virtual-scroll-viewport>\n</div>\n<span *ngIf=\"!showSpinner && !lines?.length && !editable\" class=\"no-changes\">{{emptyMessage}}</span>\n<mat-spinner class=\"mx-auto mt-3\" [diameter]=\"50\" *ngIf=\"showSpinner\"></mat-spinner>\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\n\n@Component({\n  selector: 'sm-scroll-textarea',\n  templateUrl: './scroll-textarea.component.html',\n  styleUrls: ['./scroll-textarea.component.scss']})\nexport class ScrollTextareaComponent {\n\n  lines: string[];\n  search: string = '';\n  lastSearchIndex = -1;\n\n  @ViewChild('scroll') scroll: CdkVirtualScrollViewport;\n  private _formData: string;\n\n  @Input() set formData(data: string) {\n    this._formData = data;\n    this.lines = data ? data.split('\\n').map( line => line.length > 800 ? line.substring(0, 800) + '...' : line) : [];\n  }\n\n  get formData() {\n    return this._formData;\n  }\n\n  @Input() isInDev: boolean = false;\n  @Input() editable: boolean;\n  @Input() disabled: boolean;\n  @Input() showSpinner: boolean;\n  @Input() emptyMessage: string = 'No changes logged';\n  @Input() minHeight = '250px';\n  @Output() freezeForm = new EventEmitter();\n\n  onSearchValueChanged(value: string) {\n    if (value != this.search) {\n      this.lastSearchIndex = -1;\n    }\n    this.search = value;\n    if (value?.length > 0) {\n      const pos = this.lines.slice(this.lastSearchIndex + 1).findIndex(line => line.includes(value));\n      if (pos > -1) {\n        this.lastSearchIndex = pos + this.lastSearchIndex + 1;\n        this.scroll.scrollToIndex(this.lastSearchIndex);\n      }\n    }\n  }\n}\n","<h4>\n  {{label}}\n  <span *ngIf=\"error\" class=\"error\" [smTooltip]=\"error\" tooltipType='validation' [showDelay]=\"0\"></span>\n</h4>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\n\n@Component({\n  selector: 'sm-section-header',\n  templateUrl: './section-header.component.html',\n  styleUrls: ['./section-header.component.scss']\n})\nexport class SectionHeaderComponent implements OnInit {\n\n  @Input() label: string;\n  @Input() helpText: string;\n  @Input() showBlob: boolean;\n  @Input() error: string | null;\n\n  @Output() learnMoreClicked = new EventEmitter();\n\n\n  @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  openMenu() {\n    this.trigger.openMenu();\n  }\n\n  closeMenu() {\n    this.trigger.closeMenu();\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {setFilterByUser} from '../../../core/actions/users.actions';\nimport {Store} from '@ngrx/store';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {selectShowOnlyUserWork} from '../../../core/reducers/users-reducer';\n\n@Component({\n  selector: 'sm-show-only-user-work',\n  templateUrl: './show-only-user-work.component.html',\n  styleUrls: ['./show-only-user-work.component.scss']\n})\nexport class ShowOnlyUserWorkComponent implements OnInit {\n  public isUserMenuOpened: boolean;\n  public showOnlyUserWork$: Observable<boolean>;\n  constructor(private store: Store<any>) {\n    this.showOnlyUserWork$ = this.store.select(selectShowOnlyUserWork);\n  }\n\n\n\n  ngOnInit(): void {\n  }\n  userFilterChanged(userFiltered: boolean) {\n    this.store.dispatch(setFilterByUser({showOnlyUserWork: userFiltered}));\n  }\n\n  userFilterMenuOpened(isUserMenuOpened: boolean) {\n    this.isUserMenuOpened = isUserMenuOpened;\n  }\n\n}\n","<sm-menu\n  (menuOpened)=\"userFilterMenuOpened(true)\"\n  (menuClosed)=\"userFilterMenuOpened(false)\"\n  [header]=\"(showOnlyUserWork$ | async) ? 'My Work': 'Team\\`s work'\"\n  [prefixIconClass]=\"'mr-1 al-icon ' + ((showOnlyUserWork$ | async)? 'al-ico-me': 'al-ico-team')\"\n  [iconClass]=\"isUserMenuOpened?'fa fa-caret-up': 'fa fa-caret-down'\" class=\"menu\">\n  <sm-menu-item itemLabel=\"My Work\" (itemClicked)=\"userFilterChanged(true)\" iconClass=\"mr-2 al-icon al-ico-me\"\n                [iconFontSize]=\"24\"></sm-menu-item>\n  <sm-menu-item itemLabel=\"Team`s work\" (itemClicked)=\"userFilterChanged(false)\"\n                iconClass=\"mr-2 al-icon al-ico-team\" [iconFontSize]=\"24\"></sm-menu-item>\n</sm-menu>\n","import {AfterViewInit, Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Action, ActionCreator, Store} from '@ngrx/store';\nimport {combineLatest, Observable, of, Subject, Subscription} from 'rxjs';\nimport {debounceTime, filter, finalize, map, shareReplay, take, takeUntil, throttleTime} from 'rxjs/operators';\nimport {Project} from '../../../business-logic/model/projects/project';\nimport {isReadOnly} from '../utils/shared-utils';\nimport {selectSelectedProject} from '../../core/reducers/projects.reducer';\nimport {IOutputData} from 'angular-split/lib/interface';\nimport {SplitComponent} from 'angular-split';\nimport {selectRouterParams} from '../../core/reducers/router-reducer';\nimport {ITableExperiment} from '../../experiments/shared/common-experiment-model.model';\nimport {EntityTypeEnum} from '../../../shared/constants/non-common-consts';\nimport {IFooterState} from './footer-items/footer-items.models';\nimport {\n  CountAvailableAndIsDisableSelectedFiltered,\n  selectionAllHasExample,\n  selectionAllIsArchive,\n  selectionExamplesCount,\n  selectionHasExample\n} from './items.utils';\n\n@Component({\n  selector: 'sm-base-entity-page',\n  template: ''\n})\nexport abstract class BaseEntityPage implements OnInit, AfterViewInit, OnDestroy {\n  private dragSub: Subscription;\n  protected selectedProject$: Observable<Project>;\n  protected showInfoSub: Subscription;\n  protected preventUrlUpdate = false;\n  protected setSplitSizeAction: any;\n  protected selectedExperiments: ITableExperiment[];\n  protected addTag: ActionCreator<string, any>;\n  public projectId: string;\n  public isExampleProject: boolean;\n  public selectSplitSize$?: Observable<number>;\n  public infoDisabled: boolean;\n  public splitInitialSize: number;\n  public minimizedView: boolean;\n  public footerItems = [];\n  public footerState$: Observable<IFooterState<any>>;\n  private destroy$ = new Subject();\n\n  @ViewChild('split') split: SplitComponent;\n\n  abstract createFooterItems(config: {\n      entitiesType?: EntityTypeEnum;\n      selected$: Observable<Array<any>>;\n      showAllSelectedIsActive$?: Observable<boolean>;\n      tags$?: Observable<string[]>;\n      companyTags$?:   Observable<string[]>;\n      projectTags$?: Observable<string[]>;\n      tagsFilterByProject$?: Observable<boolean>;\n  }): void;\n  abstract onFooterHandler({emitValue, item}): void;\n\n\n  protected constructor(protected store: Store<any>) {\n    this.selectedProject$ = this.store.select(selectSelectedProject);\n    this.selectedProject$.pipe(filter(p => !!p), take(1)).subscribe((project: Project) => {\n      this.isExampleProject = isReadOnly(project);\n    });\n  }\n\n  ngOnInit() {\n    this.selectSplitSize$?.pipe(filter(x => !!x), take(1))\n      .subscribe(x => this.splitInitialSize = x);\n\n    this.showInfoSub = this.store.select(selectRouterParams).subscribe(\n      params => {\n        const minimized = !!this.getParamId(params);\n        if (this.split && this.minimizedView === true && !minimized) {\n          this.splitInitialSize = this.split.getVisibleAreaSizes()[1] as number;\n        }\n        this.minimizedView = minimized;\n      }\n    );\n  }\n\n  ngAfterViewInit() {\n    if (this.setSplitSizeAction) {\n      this.dragSub = this.split.dragProgress$.pipe(throttleTime(100))\n        .subscribe((progress) => this.store.dispatch(this.setSplitSizeAction({splitSize: progress.sizes[1] as number})));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.dragSub?.unsubscribe();\n    this.showInfoSub?.unsubscribe();\n    this.footerItems = [];\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  dispatchAndLock(action: Action) {\n    this.preventUrlUpdate = true;\n    this.store.dispatch(action);\n  }\n\n  splitSizeChange(event: IOutputData) {\n    if (this.setSplitSizeAction) {\n      this.store.dispatch(this.setSplitSizeAction({splitSize: event.sizes[1] as number}));\n    }\n    this.infoDisabled = false;\n  }\n\n  disableInfoPanel() {\n    this.infoDisabled = true;\n  }\n  clickOnSplit() {\n    this.infoDisabled = false;\n  }\n\n  tagSelected({tags, emitValue}, entitiesType: 'models' | 'experiments' | 'dataviews') {\n    this.store.dispatch(this.addTag({\n      tag: tags,\n      [entitiesType]: emitValue\n    }));\n  }\n\n  protected abstract getParamId(params);\n\n  createFooterState<T = any>(\n    selected$: Observable<Array<any>>,\n    data$?: Observable<Record<string, CountAvailableAndIsDisableSelectedFiltered>>,\n    showAllSelectedIsActive$?: Observable<boolean>,\n    companyTags$?: Observable<string[]>,\n    projectTags$?: Observable<string[]>,\n    tagsFilterByProject$?: Observable<boolean>\n  ): Observable<IFooterState<T>> {\n    data$ = data$ || of({});\n    projectTags$ = projectTags$ || of([]);\n    companyTags$ = companyTags$ || of([]);\n    tagsFilterByProject$ = tagsFilterByProject$ || of(true);\n    return combineLatest(\n      [\n        selected$,\n        data$,\n        showAllSelectedIsActive$,\n        companyTags$,\n        projectTags$,\n        tagsFilterByProject$\n      ]\n    ).pipe(\n      takeUntil(this.destroy$),\n      debounceTime(100),\n      filter(([selected]) => selected.length > 1),\n      map(([selected, data, showAllSelectedIsActive, companyTags, projectTags, tagsFilterByProject]) => {\n        const _selectionAllHasExample = selectionAllHasExample(selected);\n        const _selectionHasExample = selectionHasExample(selected);\n        const _selectionExamplesCount = selectionExamplesCount(selected);\n        const isArchive = selectionAllIsArchive(selected);\n        return {\n          selectionHasExample: _selectionHasExample,\n          selectionAllHasExample: _selectionAllHasExample,\n          selectionIsOnlyExamples: _selectionExamplesCount.length === selected.length,\n          selected,\n          selectionAllIsArchive: isArchive,\n          data,\n          showAllSelectedIsActive,\n          companyTags,\n          projectTags,\n          tagsFilterByProject\n        };\n      }\n      ),\n      filter(({selected, data}) => !!selected && !!data),\n      //shareReplay()\n    );\n  }\n}\n","import {createAction, props} from '@ngrx/store';\nimport { Task } from '../../../../business-logic/model/tasks/task';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {TasksResetManyResponseFailed} from '../../../../business-logic/model/tasks/tasksResetManyResponseFailed';\n\nconst DELETE_PREFIX = 'DELETE_ENTITY ';\n\nexport const deleteEntities = createAction( DELETE_PREFIX + '[delete entities]',\n  props<{entityType: EntityTypeEnum; entity?: Task}>());\n\nexport const deleteModels = createAction( DELETE_PREFIX + '[delete models]');\n\nexport const setNumberOfSourcesToDelete = createAction(DELETE_PREFIX + '[set #files to delete]',\n  props<{numberOfFiles: number}>());\n\nexport const addFailedDeletedFile = createAction(DELETE_PREFIX + '[add failed deleted file path]',\n  props<{filePath: string}>());\n\nexport const addFailedDeletedFiles = createAction(DELETE_PREFIX + '[add failed deleted file paths]',\n  props<{filePaths: string[]}>());\n\nexport const deleteFileServerSources = createAction(DELETE_PREFIX + '[delete file server sources]',\n  props<{files: string[]}>());\n\nexport const deleteS3Sources = createAction(DELETE_PREFIX + '[delete s3 sources]',\n  props<{files: string[]}>());\n\nexport const setFailedDeletedEntities = createAction(DELETE_PREFIX + '[set failed delete Entities]',\n  props<{failedEntities: TasksResetManyResponseFailed[]}>());\n\nexport const resetDeleteState = createAction(DELETE_PREFIX + '[reset delete state]');\n","<sm-dialog-template iconClass=\"al-icon al-ico-trash\" [header]=\"header\" [displayX]=\"false\">\n  <ng-container *ngIf=\"!inProgress; else inProgressTemplate\">\n    <div class=\"text-center\">Are you sure you want to delete <b [innerHTML]=\"entityName\"></b>? <br/>\n      {{bodyMessage}}</div>\n    <br/>\n    <br/>\n    <div class=\"buttons\">\n      <button cdkFocusInitial (click)=\"delete()\"\n              class=\"btn btn-neon yes-button\">DELETE\n      </button>\n      <button (click)=\"closeDialog(false)\"\n              class=\"btn btn-outline-neon\">CANCEL\n      </button>\n    </div>\n  </ng-container>\n\n\n  <ng-template #inProgressTemplate>\n\n    <div>Deleting <span *ngIf=\"progressPercent > 0\">{{progressPercent}}%</span></div>\n    <mat-progress-bar [mode]=\"progressPercent? 'determinate' : 'indeterminate'\"\n                      [value]=\"progressPercent\">\n    </mat-progress-bar>\n\n    <ng-container *ngIf=\"totalFilesNumber > 0\">\n    <div *ngIf=\"!showFinishMessage; else successMessage\" class=\"progress-message\">\n      Deleting artifacts. This may take some time. Please do not close the window.\n    </div>\n    <ng-template #successMessage>\n      <div class=\"progress-message success\">\n        <i class=\"al-icon al-ico-success sm-md mr-2\"></i>The artifacts were deleted\n      </div>\n    </ng-template>\n    </ng-container>\n\n    <div [class.visible]=\"(failedEntities$ | async)?.length > 0\" class=\"files-list-container\">\n      <div (click)=\"openToggleEntities()\" class=\"pointer\">\n        <i class=\"more-info-icon fa fa-angle-right\" [ngClass]=\"{'info-open': isOpenEntities}\"></i>The following {{entityType}}s were not deleted:\n      </div>\n      <div class=\"more-info\" [ngClass]=\"{'info-open': isOpenEntities}\">\n        <ul class=\"list-container\">\n          <li *ngFor=\"let entity of (failedEntities$ | async)\">\n            <div>{{entity.name}}</div>\n            <div class=\"error-reason\">{{entity.message}}</div>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div [class.visible]=\"failedFiles?.length > 0\" class=\"files-list-container\">\n      <div (click)=\"openToggle()\" class=\"pointer\">\n        <i class=\"more-info-icon fa fa-angle-right\" [ngClass]=\"{'info-open': isOpen}\"></i>The following artifacts were not deleted:\n      </div>\n      <div class=\"more-info mono\" [ngClass]=\"{'info-open': isOpen}\">\n        <sm-copy-clipboard label=\"\" [clipboardText]=\"failedFiles.join('\\n')\"\n                           class=\"copy pl-2 light\"\n        ></sm-copy-clipboard>\n        <a></a>\n        <div *ngFor=\"let file of failedFiles | slice:0:1000\">\n          <div>{{file}}</div>\n        </div>\n        <div *ngIf=\"failedFiles.length > 1000\">** Additional artifacts may be left **</div>\n      </div>\n    </div>\n    <br><br>\n    <div class=\"buttons\">\n      <button (click)=\"closeDialog(true)\"\n              class=\"btn btn-neon\" [disabled]=\"progressPercent < 100\">Close\n      </button>\n    </div>\n  </ng-template>\n\n</sm-dialog-template>\n","import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {htmlTextShorte} from '../../utils/shared-utils';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {selectEntitiesFailedToDelete, selectFilesFailedToDelete, selectNumberOfSourcesToDelete} from './common-delete-dialog.reducer';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {Subject} from 'rxjs';\nimport {deleteEntities, resetDeleteState} from './common-delete-dialog.actions';\nimport {getDeleteProjectPopupStatsBreakdown} from '../../../../features/projects/projects-page.utils';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {takeUntil, tap} from 'rxjs/operators';\nimport {CommonProjectReadyForDeletion} from '../../../projects/common-projects.reducer';\n\n\n@Component({\n  selector: 'sm-delete-dialog',\n  templateUrl: './common-delete-dialog.component.html',\n  styleUrls: ['./common-delete-dialog.component.scss']\n})\nexport class CommonDeleteDialogComponent implements OnInit, OnDestroy {\n\n  private unsubscribe$: Subject<boolean> = new Subject();\n  public header: string;\n  public filesNumber$: Observable<number>;\n  public entityName: string;\n  public failedFiles$: Observable<string[]>;\n  public failedEntities$: Observable<{id: string; name: string; message: string}[]>;\n  public inProgress: boolean = false;\n  public totalFilesNumber: number;\n  public progressPercent: number;\n  public noFilesToDelete: boolean;\n  public isOpen: boolean;\n  public isOpenEntities: boolean;\n  public entityType: EntityTypeEnum;\n  private numSelected: number;\n  public bodyMessage: string;\n  public showFinishMessage: boolean = false;\n  private useCurrentEntity: boolean;\n  private entity: Task;\n  public failedFiles: string[];\n\n  constructor(\n    private store: Store<any>,\n    @Inject(MAT_DIALOG_DATA) data: {\n      numSelected: number;\n      entity: Task;\n      entityType: EntityTypeEnum;\n      projectStats: CommonProjectReadyForDeletion;\n      useCurrentEntity: boolean;\n    },\n    public dialogRef: MatDialogRef<CommonDeleteDialogComponent>\n  ) {\n    this.filesNumber$ = this.store.select(selectNumberOfSourcesToDelete);\n    this.failedFiles$ = this.store.select(selectFilesFailedToDelete).pipe(tap(failed => this.isOpen = !!failed.length));\n    this.failedEntities$ = this.store.select(selectEntitiesFailedToDelete).pipe(tap(failed => this.isOpenEntities = !!failed.length));\n    this.entityType = data.entityType;\n    this.numSelected = data.numSelected;\n    this.entityName = data.numSelected === 1 ? `\"${htmlTextShorte(data.entity.name)}\"` : `${data.numSelected} ${data.entityType}s`;\n    this.header = `Delete ${data.entityType}${data.numSelected > 1 ? 's' : ''}`;\n    this.bodyMessage = this.getMessageByEntity(data.entityType, data.projectStats);\n    this.useCurrentEntity = data.useCurrentEntity;\n    this.entity = data.entity;\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next(true);\n  }\n\n  ngOnInit(): void {\n    this.filesNumber$.pipe(takeUntil(this.unsubscribe$)).subscribe(filesNumber => {\n      if (this.firstTime(filesNumber)) {\n        this.noFilesToDelete = filesNumber === 0;\n        this.totalFilesNumber = filesNumber;\n      }\n      this.progressPercent = this.noFilesToDelete ? 100 : Math.round((this.totalFilesNumber - filesNumber) / this.totalFilesNumber * 100) || 0;\n      if (this.progressPercent > 99) {\n        window.setTimeout(() => this.showFinishMessage = true, 1000);\n      }\n    });\n\n    this.failedFiles$.pipe(takeUntil(this.unsubscribe$)).subscribe(files => {\n      this.failedFiles = files;\n    });\n  }\n\n  private firstTime(filesNumber: number) {\n    return !this.totalFilesNumber && Number.isInteger(filesNumber);\n  }\n\n  closeDialog(isConfirmed) {\n    if (isConfirmed) {\n      this.store.dispatch(resetDeleteState());\n      this.dialogRef.close(true);\n    } else {\n      this.dialogRef.close(null);\n    }\n  }\n\n  delete() {\n    this.inProgress = true;\n    this.store.dispatch(deleteEntities({entityType: this.entityType, entity: this.useCurrentEntity && this.entity}));\n  }\n\n  openToggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n  openToggleEntities() {\n    this.isOpenEntities = !this.isOpenEntities;\n  }\n\n  getMessageByEntity(entityType: EntityTypeEnum, stats?: CommonProjectReadyForDeletion): string {\n    switch (entityType) {\n      case EntityTypeEnum.experiment:\n        return 'This will also remove all captured logs, results, artifacts and debug samples.';\n      case EntityTypeEnum.model:\n        return 'This will also remove the model weights file. Note: Experiments using deleted models will no longer be able to run.';\n      case EntityTypeEnum.project:\n        // eslint-disable-next-line no-case-declarations\n        const entitiesBreakDown = getDeleteProjectPopupStatsBreakdown(stats, 'total');\n        return entitiesBreakDown.trim().length > 0 ? `${entitiesBreakDown} will be deleted, including their artifacts. This may take a few minutes.` : '';\n    }\n  }\n}\n","import {deactivateLoader} from '../../../core/actions/layout.actions';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ApiProjectsService} from '../../../../business-logic/api-services/projects.service';\nimport {requestFailed} from '../../../core/actions/http.actions';\nimport {Injectable} from '@angular/core';\nimport {catchError, filter, map, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {EmptyAction} from '../../../../app.constants';\nimport {Action, Store} from '@ngrx/store';\nimport {forkJoin, of} from 'rxjs';\nimport {setServerError} from '../../../core/actions/layout.actions';\nimport {fromFetch} from 'rxjs/fetch';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {ApiTasksService} from '../../../../business-logic/api-services/tasks.service';\nimport {addFailedDeletedFile, addFailedDeletedFiles, deleteEntities, deleteFileServerSources, deleteS3Sources, setFailedDeletedEntities, setNumberOfSourcesToDelete} from './common-delete-dialog.actions';\nimport {selectSelectedExperiments} from '../../../experiments/reducers';\nimport {TasksDeleteResponse} from '../../../../business-logic/model/tasks/tasksDeleteResponse';\nimport {selectSelectedModels} from '../../../models/reducers';\nimport {ApiModelsService} from '../../../../business-logic/api-services/models.service';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {CloudProviders} from './common-delete-dialog.reducer';\nimport {selectProjectForDelete} from '../../../projects/common-projects.reducer';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {ActivateEdit} from '../../../experiments/actions/common-experiments-info.actions';\nimport {ActivateModelEdit} from '../../../models/actions/models-info.actions';\nimport {ModelsDeleteManyResponse} from '../../../../business-logic/model/models/modelsDeleteManyResponse';\nimport {TasksDeleteManyResponse} from '../../../../business-logic/model/tasks/tasksDeleteManyResponse';\nimport {ConfigurationService} from '../../services/configuration.service';\nimport {getBucketAndKeyFromSrc, SignResponse} from '../../../settings/admin/base-admin.service';\nimport {isFileserverUrl} from '../../../../shared/utils/url';\n\n@Injectable()\nexport class DeleteDialogEffectsBase {\n\n  constructor(\n    public actions$: Actions,\n    public store: Store<any>,\n    public tasksApi: ApiTasksService,\n    public modelsApi: ApiModelsService,\n    public projectsApi: ApiProjectsService,\n    public adminService: AdminService,\n    public configService: ConfigurationService\n  ) {}\n\n  deleteEntityApi(entityType: EntityTypeEnum, entities: any[]): Observable<{ failed: any[]; succeeded: string[] }> {\n    const ids = entities.map(entity => entity.id);\n    switch (entityType) {\n      case 'experiment':\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        return this.tasksApi.tasksDeleteMany({ids, return_file_urls: true, force: true}).pipe(\n          map((res: TasksDeleteManyResponse) => ({\n            failed: res.failed,\n            succeeded: res.succeeded.map(deletedExperiment =>\n              [...deletedExperiment.urls.artifact_urls, ...deletedExperiment.urls.event_urls, ...deletedExperiment.urls.model_urls]\n            ).flat()\n          })));\n      case 'model':\n        return this.modelsApi.modelsDeleteMany({ids, force: true}).pipe(\n          map((res: ModelsDeleteManyResponse) => ({failed: res.failed, succeeded: [...res.succeeded.map(model => model.url)]})));\n      case 'project':\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        return this.projectsApi.projectsDelete({project: entities[0].id, delete_contents: true}).pipe(\n          map((res: TasksDeleteResponse) => ({\n              succeeded: [...res.urls.model_urls, ...res.urls.artifact_urls, ...res.urls.event_urls],\n              failed: []\n            })));\n      default:\n        return of({succeeded: [], failed: []});\n    }\n  }\n\n  getEntitySelector(entityType: EntityTypeEnum) {\n    switch (entityType) {\n      case 'experiment':\n        return selectSelectedExperiments;\n      case 'model':\n        return selectSelectedModels;\n      case 'project':\n        return selectProjectForDelete;\n    }\n  }\n\n  pauseAutorefresh(entityType: EntityTypeEnum): Action[] {\n    switch (entityType) {\n      case 'experiment':\n        return [new ActivateEdit('delete')];\n      case 'model':\n        return [new ActivateModelEdit('delete')];\n      default:\n        return [new EmptyAction()];\n    }\n  }\n\n  deleteEntitiesEffect = createEffect(() => this.actions$.pipe(\n    ofType(deleteEntities),\n    map(action => action),\n    mergeMap((action) => of(action).pipe(\n      withLatestFrom(\n        this.store.select(this.getEntitySelector(action.entityType)),\n      ),\n      map(([, entities]) => action.entity ? [action.entity] : entities),\n      switchMap(entities =>\n        this.deleteEntityApi(action.entityType, entities).pipe(\n          map(({failed, succeeded: urlsToDelete}) => [this.parseErrors(failed, entities), this.getUrlsPerProvider(urlsToDelete)]),\n          mergeMap(([failed, urlsPerSource]: [{id: string; name: string; message: string}[], { [provider in CloudProviders]: string[] }]) => [\n              ...this.pauseAutorefresh(action.entityType),\n              setNumberOfSourcesToDelete({numberOfFiles: Object.values(urlsPerSource).flat().length}),\n              setFailedDeletedEntities({failedEntities: failed}),\n              deleteFileServerSources({files: urlsPerSource['fs']}),\n              // deleteS3Sources({files: urlsPerSource['s3']}),\n              // deleteGoogleCloudeSource(urlsPerSource['gc']),\n              // deleteAzure(urlsPerSource['azure']),\n              addFailedDeletedFiles({filePaths: urlsPerSource['misc']})\n            ]\n          ),\n          catchError(error => [\n            requestFailed(error),\n            deactivateLoader(action.type),\n            setServerError(error, null, `Can't delete ${action.entityType} ${error?.meta?.error_data?.id || ''}`)]\n          )\n        )\n      )\n    )),\n  ));\n\n  deleteFileServerSourcesEffect = createEffect(() => this.actions$.pipe(\n    ofType(deleteFileServerSources),\n    mergeMap(action => forkJoin(action.files.map(url =>\n      this.adminService.signUrlIfNeeded(url, {skipFileServer: false}).pipe(\n        switchMap((signResponse: SignResponse) =>\n          fromFetch(\n            signResponse.signed,\n            {method: 'DELETE', credentials: this.configService.getStaticEnvironment().useFilesProxy ? 'include' : 'omit'}\n          )\n        ),\n        mergeMap(res => {\n          if (res[0]?.status !== 200) {\n            return [addFailedDeletedFile({filePath: decodeURIComponent(res[0]?.url)})];\n          } else {\n            return [setNumberOfSourcesToDelete({numberOfFiles: -1})];\n          }\n        }),\n        catchError(() => [setNumberOfSourcesToDelete({numberOfFiles: -1})]),\n      )\n    ))),\n    mergeMap(a => a as Action[])\n  ));\n\n  deleteS3SourcesEffect = createEffect(() => this.actions$.pipe(\n    ofType(deleteS3Sources),\n    filter(action => action.files.length > 0),\n    map(action => {\n      const filesPerBucket = action.files.reduce((acc, fileSrc) => {\n        const {Bucket: bucket} = getBucketAndKeyFromSrc(fileSrc);\n        if (!acc[bucket]) {\n          acc[bucket] = [];\n        }\n        acc[bucket].push(fileSrc);\n        return acc;\n      }, {} as { [bucket: string]: string[] });\n      return Object.entries(filesPerBucket);\n    }),\n    mergeMap(([[, files]]) => this.adminService.deleteS3Files(files, false)),\n    // mergeMap(fetchPromise => forkJoin(fetchPromise)),\n    map((failedFiles: { success: boolean; files: string[] }) => {\n      if (failedFiles.success) {\n        return setNumberOfSourcesToDelete({numberOfFiles: failedFiles.files.length});\n      } else {\n        return addFailedDeletedFiles({filePaths: failedFiles.files});\n      }\n    }),\n    // TODO: return the correct number of files\n    catchError(() => [setNumberOfSourcesToDelete({numberOfFiles: -1})])\n  ));\n\n  public getUrlsPerProvider(commutativeUrls: string[]): { [provider in CloudProviders]: string[] } {\n\n    return commutativeUrls.reduce((acc, url) => {\n      const sourceType = this.getSourceType(url);\n      acc[sourceType].push(url);\n      return acc;\n    }, {fs: [], gc: [], s3: [], azure: [], misc: []});\n  }\n\n  parseErrors(failed, entities): {id: string; name: string; message: string}[] {\n    return failed.map( failedEntity => ({\n      id: failedEntity.id,\n      name: entities.find(entity => entity.id === failedEntity.id)?.name || failedEntity.id,\n      message: failedEntity.error.msg\n    }));\n  }\n\n  getSourceType(src: string): CloudProviders {\n    if (isFileserverUrl(src)) {\n      return 'fs';\n    } else {\n      return 'misc';\n    }\n    // else if (this.adminService.isS3Url(src)) {\n    //   return 's3';\n    // } else if (this.adminService.isGoogleCloudUrl(src)) {\n    //   return 'gc';\n    // } else if (this.adminService.isAzureUrl(src)) {\n    //   return 'azure';\n    // } else {\n    //   return 'misc';\n    // }\n  }\n\n}\n","import {Actions} from '@ngrx/effects';\nimport {ApiProjectsService} from '../../business-logic/api-services/projects.service';\nimport {Injectable} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {ApiTasksService} from '../../business-logic/api-services/tasks.service';\nimport {ApiModelsService} from '../../business-logic/api-services/models.service';\nimport {DeleteDialogEffectsBase} from '../../webapp-common/shared/entity-page/entity-delete/base-delete-dialog.effects';\nimport {ConfigurationService} from '../../webapp-common/shared/services/configuration.service';\n\n\n@Injectable()\nexport class DeleteDialogEffects extends DeleteDialogEffectsBase {\n  constructor(actions$: Actions,\n              store: Store<any>,\n              tasksApi: ApiTasksService,\n              modelsApi: ApiModelsService,\n              projectsApi: ApiProjectsService,\n              adminService: AdminService,\n              configService: ConfigurationService) {\n    super(actions$, store, tasksApi, modelsApi, projectsApi, adminService, configService);\n  }\n  // (Nir) don't delete this. Other repositories need to override some base functions.\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {SMMaterialModule} from '../../material/material.module';\nimport {commonDeleteDialogReducer} from './common-delete-dialog.reducer';\nimport {UiComponentsModule} from '../../ui-components/ui-components.module';\nimport {CommonDeleteDialogComponent} from './common-delete-dialog.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {SMSharedModule} from '../../shared.module';\nimport {DeleteDialogEffects} from '../../../../features/delete-entity/delete-dialog.effects';\n\n@NgModule({\n  imports: [\n    UiComponentsModule,\n    CommonModule,\n    SMMaterialModule,\n    StoreModule.forFeature('deleteEntityDialog', commonDeleteDialogReducer),\n    EffectsModule.forFeature([DeleteDialogEffects]),\n    MatProgressBarModule,\n    SMSharedModule\n  ],\n  declarations: [CommonDeleteDialogComponent]\n})\nexport class CommonDeleteDialogModule { }\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport * as actions from './common-delete-dialog.actions';\n\nexport type CloudProviders = 'fs' | 'gc' | 's3' | 'azure' | 'misc'\n\nexport interface DeleteEntityDialog {\n  numberOfSourcesToDelete: number;\n  failedDelete: string[];\n  failedEntitiesDelete: {id: string; name: string; message: string}[];\n}\n\nconst deleteEntityInitState: DeleteEntityDialog = {\n  numberOfSourcesToDelete: null,\n  failedDelete: [],\n  failedEntitiesDelete: []\n};\n\nexport const selectDeleteEntityDialog = createFeatureSelector<DeleteEntityDialog>('deleteEntityDialog');\nexport const selectNumberOfSourcesToDelete = createSelector(selectDeleteEntityDialog, (state): number => state.numberOfSourcesToDelete);\nexport const selectFilesFailedToDelete = createSelector(selectDeleteEntityDialog, (state): string[] => state.failedDelete);\nexport const selectEntitiesFailedToDelete = createSelector(selectDeleteEntityDialog, (state): {id: string; name: string; message: string}[] => state.failedEntitiesDelete);\n\nexport function commonDeleteDialogReducer<ActionReducer>(state: DeleteEntityDialog = deleteEntityInitState, action): DeleteEntityDialog {\n  switch (action.type) {\n    case actions.setNumberOfSourcesToDelete.type:\n      return {\n        ...state,\n        numberOfSourcesToDelete: action.numberOfFiles === -1 ? state.numberOfSourcesToDelete - 1 : action.numberOfFiles\n      };\n    case actions.addFailedDeletedFile.type:\n      return {\n        ...state,\n        failedDelete: state.failedDelete.includes(action.filePath) ? state.failedDelete : [...state.failedDelete, action.filePath],\n        numberOfSourcesToDelete: state.numberOfSourcesToDelete - 1\n      };\n    case actions.addFailedDeletedFiles.type:\n      return {\n        ...state,\n        failedDelete: Array.from(new Set([...state.failedDelete, ...action.filePaths])).sort(),\n        numberOfSourcesToDelete: state.numberOfSourcesToDelete - action.filePaths.length\n      };\n    case actions.setFailedDeletedEntities.type:\n      return {\n        ...state,\n        failedEntitiesDelete: action.failedEntities\n      };\n    case actions.resetDeleteState.type:\n      return {...state, failedDelete: [], numberOfSourcesToDelete: null, failedEntitiesDelete: []};\n    default:\n      return state;\n  }\n}\n","<sm-compare-footer *ngIf=\"footerState\">\n  <ng-container *ngFor=\"let footerItem of footerItems; trackBy: trackBy\"   >\n\n      <ng-template\n        #templateRef\n        [ngTemplateOutletContext]=\"{ $implicit: footerItem.getItemState(footerState)}\"\n        [ngTemplateOutlet]=\"templateRef\"\n        let-footerItemState\n      >\n        <ng-container *ngIf=\"!footerItem.isTag; else tags\">\n        <span\n          *ngIf=\"!footerItemState?.preventCurrentItem\"\n          [ngClass]=\"footerItemState?.wrapperClass\"\n          matTooltipPosition=\"above\"\n          [smTooltip]=\"footerItem.disable || footerItemState.disable\n                                  ? footerItem.disableDescription || footerItemState.disableDescription\n                                  : footerItemState.description   || footerItem.description\"\n        >\n          <button\n            class=\"compare-button-container\"\n            [ngClass]=\"footerItem.class || footerItemState?.class\"\n            (click)=\"footerItem.emit && footerItemClick.emit({item: footerItem, emitValue: footerItemState?.emitValue })\"\n            [class.disabled]=\"footerItemState?.disable ? footerItemState?.disable : null\"\n          >\n            <i *ngIf=\"footerItem.icon\" [class]=\"'sm al-icon ' + footerItem.icon + ' sm-md al-color blue-100'\"></i>\n            <i *ngIf=\"footerItemState?.icon\" [class]=\"'sm al-icon ' + footerItemState?.icon + ' sm-md al-color blue-100'\"></i>\n            <div *ngIf=\"footerItem.title\" class=\"title\">{{footerItem.title}}</div>\n            <div *ngIf=\"footerItemState?.title\" class=\"title ml-1\">{{footerItemState?.title}}</div>\n          </button>\n        </span>\n    </ng-container>\n    <ng-template #tags>\n              <span class=\"tags-container\"\n                    matTooltipPosition=\"above\"\n                    [smTooltip]=\"footerItem.disable || footerItemState.disable\n                                  ? footerItem.disableDescription || footerItemState.disableDescription\n                                  : footerItemState.description   || footerItem.description\"\n              >\n        <button mat-menu-item\n                [matMenuTriggerFor]=\"tagMenu\"\n                [disabled]=\"footerItemState.disable\"\n                (menuOpened)=\"tagMenuOpened()\"\n                (menuClosed)=\"tagMenuClosed()\"\n        >\n        <i [class]=\"'al-icon ' + icons.TAG + ' sm-md'\"></i>\n      </button>\n      <mat-menu #tagMenu=\"matMenu\">\n        <sm-tags-menu\n          class=\"light-theme\"\n          [tags]=\"footerItemState.tags\"\n          [tagsFilterByProject]=\"footerItemState.tagsFilterByProject\"\n          [projectTags]=\"footerItemState.projectTags\"\n          [companyTags]=\"footerItemState.companyTags\"\n          (tagSelected)=\"tagSelected.emit({tags: $event, emitValue: footerItemState.emitValue})\">\n        </sm-tags-menu>\n      </mat-menu>\n      </span>\n\n      </ng-template>\n    </ng-template>\n  </ng-container>\n</sm-compare-footer>\n","import {ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {EntityTypeEnum} from '~/shared/constants/non-common-consts';\nimport {IFooterState, ItemFooterModel} from '../footer-items/footer-items.models';\nimport {BaseContextMenuComponent} from '@common/shared/components/base-context-menu/base-context-menu.component';\nimport {Store} from '@ngrx/store';\nimport {ICONS} from '@common/constants';\nimport {trackByIndex} from '@common/shared/utils/forms-track-by';\n\n@Component({\n  selector   : 'sm-entity-footer',\n  templateUrl: './entity-footer.component.html',\n  styleUrls  : ['./entity-footer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EntityFooterComponent  extends BaseContextMenuComponent {\n\n  @Input() entitiesType: EntityTypeEnum;\n  @Input() footerItems: ItemFooterModel[] = [];\n  @Input() footerState: IFooterState<any>;\n  @Output() footerItemClick = new EventEmitter<{item: ItemFooterModel; emitValue: any}>();\n  @Output() tagSelected = new EventEmitter();\n\n  icons = ICONS;\n  trackBy = trackByIndex;\n  constructor(store: Store<any>, eRef: ElementRef) {\n    super(store, eRef);\n  }\n\n}\n","import {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {IconNames, ICONS} from '../../../constants';\nimport {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {MenuItems} from '../items.utils';\n\nexport class ArchiveFooterItem extends ItemFooterModel {\n  id = MenuItems.archive;\n\n  constructor(public entitiesType: EntityTypeEnum) {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n      const archive = state.data[this.id];\n      const icon = (state.selectionAllIsArchive ? ICONS.RESTORE : ICONS.ARCHIVE) as Partial<IconNames>;\n      const name = icon === ICONS.RESTORE ? 'Restore' : 'Archive';\n\n      return {\n        description: this.menuItemText.transform(archive?.available, icon === ICONS.RESTORE ? 'Restore from Archive' : 'Archive'),\n        icon,\n        disable: archive?.disable,\n        disableDescription: state.selectionIsOnlyExamples ? name : `Only ${this.entitiesType} owned can be ${name}`\n      };\n  }\n}\n","import {IconNames, ICONS} from '../../../constants';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {MenuItems} from '../items.utils';\nimport { ItemFooterModel} from './footer-items.models';\nexport const compareLimitations = 10;\nexport class CompareFooterItem extends ItemFooterModel  {\n  id = MenuItems.compare;\n  icon = ICONS.COMPARE as Partial<IconNames>;\n  class = 'compare';\n  title = 'COMPARE';\n  emit = true;\n  disableDescription = `${compareLimitations} or fewer ${this.entitiesType}s can be compared`;\n\n  constructor(public entitiesType: EntityTypeEnum) {\n    super();\n  }\n  getItemState(state): any {\n    return {\n      disable: state.selected.length > 10,\n    };\n\n  }\n}\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems} from '../items.utils';\n\nexport class DeleteFooterItem extends ItemFooterModel {\n  id = MenuItems.delete;\n  emit = true;\n  icon = ICONS.REMOVE as Partial<IconNames>;\n  disableDescription = 'Delete';\n\n  constructor() {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {\n      preventCurrentItem: !state.selectionAllIsArchive,\n      disable: state.data[this.id]?.disable,\n      description: this.menuItemText.transform(state.data[MenuItems.delete]?.available , 'Delete'),\n    };\n  }\n}\n","import {IFooterState, ItemFooterModel} from './footer-items.models';\nimport {IconNames} from '../../../constants';\n\nexport class GenericFooterItem extends ItemFooterModel {\n  emit = true;\n  constructor({icon = null,\n                title = '',\n                disable = false,\n                disableDescription = '',\n                className = ''\n              } = {}) {\n    super();\n    this.icon = icon;\n    this.title = title;\n    this.disable = disable;\n    this.disableDescription = disableDescription;\n    this.class = className;\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {};\n  }\n}\n","import {GenericFooterItem} from './generic-footer-item';\nimport {IFooterState} from './footer-items.models';\nimport {IconNames} from '../../../constants';\n\nexport class DividerFooterItem extends GenericFooterItem {\n  constructor() {\n    super({className: 'divider'});\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {};\n  }\n}\n","import {Observable} from 'rxjs/internal/Observable';\nimport {IconNames} from '@common/constants';\nimport {of} from 'rxjs';\nimport { MenuItemTextPipe } from '@common/shared/pipes/menu-item-text.pipe';\n\nexport abstract class ItemFooterModel {\n  id: string;\n  icon: IconNames;\n  title: string;\n  description: string;\n  disable: boolean;\n  disableDescription: string;\n  emit = true;\n  isTag?: boolean;\n  class = '';\n  wrapperClass = '';\n  state$: Observable<IItemFooterState> = of({});\n  tags$?: Observable<string[]>;\n  companyTags$?:   Observable<string[]>;\n  projectTags$?: Observable<string[]>;\n  tagsFilterByProject$?: Observable<boolean>;\n\n  menuItemText = new MenuItemTextPipe();\n  abstract getItemState(state: IFooterState<any>): {\n    icon?: IconNames;\n    title?: string;\n    description?: string;\n    disable?: boolean;\n    disableDescription?: string;\n    emit?: boolean;\n    emitValue?: any;\n    preventCurrentItem?: boolean;\n    class?: string;\n    wrapperClass?: string;\n    tags?: string[];\n    tagSelected?: string[];\n    projectTags?: string[];\n    companyTags?: string[];\n    tagsFilterByProject?: boolean;\n  };\n}\n\nexport interface IItemFooterState {\n  icon?: Partial<IconNames>;\n  title?: string;\n  emitValue?: any;\n  description?: string;\n  disableDescription?: string;\n  disable?: boolean;\n  class?: string;\n  preventCurrentItem?: boolean;\n}\n\nexport interface IFooterState<T extends any> {\n  selectionHasExample: boolean;\n  selectionAllHasExample: boolean;\n  selected: Array<T>;\n  showAllSelectedIsActive: boolean;\n  selectionAllIsArchive: boolean;\n  selectionIsOnlyExamples: boolean;\n  data: Record<string, {  available: number; disable: boolean; selectedFiltered: Array<T> }>;\n  companyTags: string[];\n  projectTags: string[];\n  tagsFilterByProject: boolean;\n}\n\n\n\n\n\n\n\n\n\n\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\n\nexport class HasReadOnlyFooterItem extends ItemFooterModel {\n  emit = true;\n  icon = ICONS.ALERT as Partial<IconNames>;\n  description = `Selected read-only items cannot be modified`;\n  wrapperClass = 'has-example-item';\n\n  constructor() {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {\n      preventCurrentItem: !state.selectionHasExample,\n      title: `Selected read-only items cannot be modified`\n    };\n  }\n}\n","import {ItemFooterModel, IFooterState} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems} from '../items.utils';\n\nexport class MoveToFooterItem extends ItemFooterModel {\n  id = MenuItems.moveTo;\n  emit = true;\n  icon = ICONS.MOVE_TO as Partial<IconNames>;\n  disableDescription = 'Move To';\n  constructor() {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {\n      disable: state.data[this.id]?.disable,\n      description: this.menuItemText.transform(state.data[MenuItems.moveTo]?.available, 'Move To') ,\n      // disableDescription: selectionIsOnlyExamples ? 'Move To' : this.disableDescription\n    };\n  }\n}\n","import {IFooterState, ItemFooterModel} from './footer-items.models';\nimport {IconNames, ICONS} from '../../../constants';\nimport {MenuItems} from '../items.utils';\nimport {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\n\nexport class PublishFooterItem extends ItemFooterModel {\n  id = MenuItems.publish;\n  emit = true;\n  icon = ICONS.PUBLISHED as Partial<IconNames>;\n\n  constructor(private entityType: EntityTypeEnum) {\n    super();\n    this.disableDescription = entityType === EntityTypeEnum.experiment ? this.disableDescription : ``;\n  }\n\n  getItemState(state: IFooterState<any>): { icon?: IconNames; title?: string; description?: string; disable?: boolean; disableDescription?: string; emit?: boolean; emitValue?: boolean; preventCurrentItem?: boolean; class?: string; wrapperClass?: string } {\n    return {\n      disable: state.data[this.id]?.disable,\n      description: this.menuItemText.transform(state.data[MenuItems.publish]?.available, 'Publish'),\n      disableDescription: state.selectionIsOnlyExamples ? 'Publish' : `You can only publish ${this.entityType}s that have already been executed`\n    };\n  }\n}\n","import {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {IFooterState, ItemFooterModel} from './footer-items.models';\nimport {MenuItems, selectionTags} from '../items.utils';\n\nexport class SelectedTagsFooterItem extends ItemFooterModel {\n\n  id = MenuItems.tags;\n  isTag = true;\n  disableDescription = 'Tags';\n\n  constructor(\n    public entitiesType: EntityTypeEnum,\n  ) {\n    super();\n  }\n  getItemState(state: IFooterState<any>): {\n    icon?: any; title?: string; description?: string; disable?: boolean; disableDescription?: string;\n    emit?: boolean; emitValue?: any; preventCurrentItem?: boolean; class?: string; wrapperClass?: string; tags: string[];\n    companyTags: string[];\n    projectTags: string[];\n    tagsFilterByProject: boolean;\n  } {\n    const tags = state.data[this.id];\n    return {\n      disable: state.selectionAllHasExample,\n      description: this.menuItemText.transform(tags.selectedFiltered.length, 'Add Tag'),\n      disableDescription: 'Tags',\n      emitValue: tags.selectedFiltered,\n      tags: selectionTags(state.selected),\n      companyTags: state.companyTags,\n      projectTags: state.projectTags,\n      tagsFilterByProject: state.tagsFilterByProject\n    };\n  }\n}\n","import {EntityTypeEnum} from '../../../../shared/constants/non-common-consts';\nimport {IFooterState, ItemFooterModel} from './footer-items.models';\nimport {MenuItems} from '../items.utils';\n\nexport class ShowItemsFooterSelected extends ItemFooterModel {\n  id = MenuItems.showAllItems;\n  emit = true;\n  class = 'show-all';\n\n\n  constructor(public entitiesType: EntityTypeEnum) {\n    super();\n  }\n\n  getItemState(state: IFooterState<any>) {\n    return {\n      title: state.showAllSelectedIsActive ?\n        `SHOW ALL ${this.entitiesType.toUpperCase()}S` :\n        `SHOW ${state.selected.length} SELECTED ${this.entitiesType.toUpperCase()}S`,\n      emitValue: state.showAllSelectedIsActive,\n      preventCurrentItem: false\n    };\n  }\n}\n","import {isReadOnly} from '../utils/shared-utils';\nimport {TaskStatusEnum} from '../../../business-logic/model/tasks/taskStatusEnum';\nimport {ModelsArchiveManyResponse} from '../../../business-logic/model/models/modelsArchiveManyResponse';\nimport {TasksArchiveManyResponse} from '../../../business-logic/model/tasks/tasksArchiveManyResponse';\nimport {EntityTypeEnum} from '../../../shared/constants/non-common-consts';\nimport {addMessage} from '@common/core/actions/layout.actions';\nimport {openMoreInfoPopup} from '@common/core/actions/projects.actions';\nimport { TaskTypeEnum } from '../../../business-logic/model/tasks/taskTypeEnum';\nimport {Task} from \"~/business-logic/model/tasks/task\";\nimport {TASKS_STATUS} from '@common/tasks/tasks.constants';\nimport {TASK_TYPES} from '~/app.constants';\n\nexport interface CountAvailableAndIsDisable {\n  available: number;\n  disable: boolean;\n}\nexport interface CountAvailableAndIsDisableSelectedFiltered extends CountAvailableAndIsDisable {\n  selectedFiltered: any[];\n}\n\nexport const countAvailableAndIsDisable = (selectedFiltered: any[]) => ({\n    available: selectedFiltered.length,\n    disable:  selectedFiltered.length === 0\n  });\n\nexport const selectionHasExample = (selectedElements: any[]) => selectedElements.some((exp => isReadOnly(exp)));\nexport const selectionAllHasExample = (selectedElements: any[]) => selectedElements.every((exp => isReadOnly(exp)));\nexport const selectionAllIsArchive = (selectedElements: any[]) => selectedElements.every( s => s?.system_tags?.includes('archived'));\nexport const selectionIsArchive = (selectedElements: any) => selectedElements?.system_tags?.includes('archived');\nexport const selectionExamplesCount = (selectedElements: any) => selectedElements.filter((exp => isReadOnly(exp)));\nexport const  canEnqueue = (task: Task): boolean => {\n  return !!(task && (TASKS_STATUS.CREATED === task.status || TASKS_STATUS.STOPPED === task.status) && task.type !== TASK_TYPES.MANUAL_ANNOTATION);\n}\n\nexport const canDequeue = (task: Task): boolean => {\n  return !!(task && TASKS_STATUS.QUEUED === task.status);\n}\n\nexport const selectionDisabledAbort = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter( (_selected) => TaskStatusEnum.InProgress === _selected?.status  && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledPublishExperiments = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => ([TaskStatusEnum.Stopped, TaskStatusEnum.Closed, 'completed', TaskStatusEnum.Failed].includes(_selected?.status)  && !isReadOnly(_selected)) );\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledPublishModels = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => (!isReadOnly(_selected) && !_selected?.ready) );\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledReset = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => ![TaskStatusEnum.Created, TaskStatusEnum.Published, TaskStatusEnum.Publishing].includes(_selected?.status)  && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\n\nexport const selectionDisabledAbortAllChildren = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => [TaskTypeEnum.Controller, TaskTypeEnum.Optimizer].includes(_selected?.type)  && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledDelete = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected =>  selectionIsArchive(_selected) && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledMoveTo = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected =>  !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledQueue = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => _selected?.status === TaskStatusEnum.Queued && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledViewWorker = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => _selected?.status === TaskStatusEnum.InProgress && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\n\nexport const selectionDisabledEnqueue = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => canEnqueue(_selected) && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledDequeue = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => canDequeue(_selected) && !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledArchive = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\nexport const selectionDisabledTags = (selectedElements: any[]) => {\n  const selectedFiltered = selectedElements.filter(_selected => !isReadOnly(_selected));\n  return {selectedFiltered, ...countAvailableAndIsDisable(selectedFiltered)};\n};\n\nexport const selectionTags = <T extends {tags?: string[]}>(selectedElements: Array<T>): string[] => {\n  const _selectedTags = {};\n  selectedElements.forEach( _selected => {\n    _selected?.tags?.forEach( tag => {\n      if (!_selectedTags[tag]) {\n        _selectedTags[tag] = 1;\n      } else {\n        _selectedTags[tag]++;\n      }\n    });\n  });\n  return  Object.entries(_selectedTags)\n    .filter(([, amount]) => amount === selectedElements.length)\n    .map( ([tag]) => tag);\n};\n\nexport enum MenuItems {\n  abort = 'abort',\n  abortAllChildren='abortAllChildren',\n  archive = 'archive',\n  compare = 'compare',\n  delete = 'delete',\n  enqueue = 'enqueue',\n  dequeue = 'dequeue',\n  queue = 'queue',\n  moveTo = 'moveTo',\n  publish = 'publish',\n  reset = 'reset',\n  viewWorker = 'viewWorker',\n  tags = 'tags',\n  showAllItems = 'showAllItems'\n}\nexport enum MoreMenuItems {\n  restore = 'restore'\n}\n\nexport type AllMenuItems = MenuItems | MoreMenuItems;\n\nfunction pastify(verb: AllMenuItems): string {\n  switch (verb) {\n    case MenuItems.abort:\n      return 'aborted';\n    case MenuItems.archive:\n      return 'archived';\n    case MoreMenuItems.restore:\n      return 'restored';\n    case MenuItems.delete:\n      return 'deleted';\n    case MenuItems.dequeue:\n      return 'dequeued';\n    case MenuItems.enqueue:\n      return 'enqueued';\n    case MenuItems.reset:\n      return 'reset';\n    case MenuItems.publish:\n      return 'published';\n    default:\n      return verb;\n  }\n}\n\nexport function getNotificationAction(res: ModelsArchiveManyResponse | TasksArchiveManyResponse, action, operationName: AllMenuItems, entityType: EntityTypeEnum, notificationActions = []) {\n  const totalNum = res.failed.length + res.succeeded.length;\n  const allFailed = res.succeeded.length === 0;\n\n  const message = allFailed ? `${totalNum === 1 ? '' : totalNum} ${entityType}${totalNum > 1 ? 's' : ''} failed to ${operationName}` :\n    `${totalNum === 1 ? '' : res.succeeded.length} ${totalNum > res.succeeded.length ? 'of ' + totalNum : ''} ${entityType}${res.succeeded.length > 1 ? 's' : ''} ${pastify(operationName)} successfully`;\n\n  return addMessage(res.failed.length > 0 ? 'error' : 'success', message, [\n    res.failed.length > 0 ? {actions: [openMoreInfoPopup({parentAction: action, operationName, res, entityType: EntityTypeEnum[entityType]})], name: 'More info'} : null,\n    ...notificationActions\n  ].filter(a => a));\n}\n","<div *ngIf=\"noGraphs\" class=\"no-output\" >\n  <i class=\"icon no-output-icon\" [ngClass]=\"isDarkTheme ? 'i-no-plots-dark' : 'i-no-plots'\"></i>\n  <h3>NO CHART DATA</h3>\n</div>\n<sm-graph-settings-bar\n  [class.showSettings]=\"showSettings && minimized\"\n  [smoothWeight]=\"smoothWeight\"\n  [xAxisType]=\"xAxisType\"\n  [groupBy]=\"groupBy\"\n  [groupByOptions]=\"groupByOptions\"\n  (changeWeight)=\"changeWeight.emit($event)\"\n  (toggleSettings)=\"toggleSettings.emit()\"\n  (changeXAxisType)=\"changeXAxisType.emit($event)\"\n  (changeGroupBy)=\"changeGroupBy.emit($event)\"\n></sm-graph-settings-bar>\n<div class=\"metrics-section\" [class.with-settings]=\"showSettings\">\n  <div #allMetrics\n       class=\"all-metrics\"\n       [class.row]=\"!isGroupGraphs\"\n  >\n    <div *ngFor=\"let metric of (graphList | filter: hiddenList); trackBy: trackByFn\" class=\"metric-group-container less-padding\"\n         #metricGroup\n         [class.two-in-a-row]=\"!isGroupGraphs && graphList.length > 1 && isWidthBigEnough()\"\n         [style.height.percent]=\"\"\n    >\n      <div [id]=\"EXPERIMENT_GRAPH_ID_PREFIX + metric\" class=\"graph-id\">\n        <div>\n          <div class=\"metric-group-header\" *ngIf=\"isGroupGraphs\">{{metric}}</div>\n          <div [class.row]=\"isGroupGraphs\"\n               [class.single-graph]=\"graphsData[metric].length === 1\">\n            <ng-container *ngFor=\"let chartItem of graphsData[metric];trackBy: trackByIdFn.bind(this, metric)\">\n              <sm-single-graph\n                #singleGraph\n                [class.less-padding]=\"isGroupGraphs\"\n                [class.two-in-a-row]=\"isGroupGraphs && chartItem?.data[0]?.type !== 'table' && graphsData[metric].length > 1 && isWidthBigEnough()\"\n                [graphsNumber]=\"graphsData[metric].length\"\n                [legendStringLength]=\"legendStringLength\"\n                [chart]=\"chartItem\"\n                [id]=\"SINGLE_GRAPH_ID_PREFIX + EXPERIMENT_GRAPH_ID_PREFIX + metric + chartItem.layout.title + chartItem.iter + chartItem.variant + (chartItem.layout.images && chartItem.layout.images[0]?.source)\"\n                [isCompare]=\"isCompare\"\n                [disableResize]=\"disableResize\"\n                [isDarkTheme]=\"isDarkTheme\"\n                [showLoaderOnDraw]=\"showLoaderOnDraw\"\n                [legendConfiguration]=\"legendConfiguration\"\n                [smoothWeight]=\"smoothWeight\"\n                [xAxisType]=\"xAxisType\"\n                [height]=\"height\"\n                [moveLegendToTitle]=\"groupBy === groupByCharts.None\"\n                [identifier]=\"SINGLE_GRAPH_ID_PREFIX + EXPERIMENT_GRAPH_ID_PREFIX + metric + chartItem.layout.title + chartItem.iter + chartItem.variant + (chartItem.layout.images && chartItem.layout.images[0]?.source)\"\n                (resizeStarted)=\"resizeStarted(metricGroup, singleGraph)\"\n                (resizing)=\"onResizing($event)\"\n                (sizeChanged)=\"sizeChanged($event)\">\n              </sm-single-graph>\n              <div class=\"resize-overlay\" [class.active]=\"activeResizeElement && activeResizeElement !== singleGraph\"></div>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {sortMetricsList} from '../../tasks/tasks.utils';\nimport {SingleGraphComponent} from './single-graph/single-graph.component';\nimport {EXPERIMENT_GRAPH_ID_PREFIX, SINGLE_GRAPH_ID_PREFIX} from '../../experiments/shared/common-experiments.const';\nimport {ScalarKeyEnum} from '../../../business-logic/model/events/scalarKeyEnum';\nimport {getOr} from 'lodash/fp';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {GroupByCharts} from '../../experiments/reducers/common-experiment-output.reducer';\nimport {Store} from '@ngrx/store';\nimport {selectPlotlyReady} from '../../core/reducers/view.reducer';\nimport {ResizeEvent} from 'angular-resizable-element';\nimport {filter, map, skip, take, tap} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {ExtFrame, ExtLegend} from './single-graph/plotly-graph-base';\nimport {getSignedUrl} from '../../core/actions/common-auth.actions';\nimport {selectSignedUrl} from '../../core/reducers/common-auth-reducer';\n\n@Component({\n  selector: 'sm-experiment-graphs',\n  templateUrl: './experiment-graphs.component.html',\n  styleUrls: ['./experiment-graphs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class ExperimentGraphsComponent implements OnDestroy {\n\n  groupByOptions = [\n    {\n      name: 'Metric',\n      value: GroupByCharts.Metric\n    },\n    {\n      name: 'None',\n      value: GroupByCharts.None\n    }\n  ];\n  public groupByCharts = GroupByCharts;\n  readonly EXPERIMENT_GRAPH_ID_PREFIX = EXPERIMENT_GRAPH_ID_PREFIX;\n  readonly SINGLE_GRAPH_ID_PREFIX = SINGLE_GRAPH_ID_PREFIX;\n  public graphList: Array<any> = [];\n  public noGraphs: boolean = false;\n  public graphsData: any;\n  private observer: IntersectionObserver;\n  private _smoothWeight: any;\n  private _xAxisType: ScalarKeyEnum;\n  @ViewChild('allMetrics', {static: true}) allMetrics: ElementRef;\n  private visibleEntries: IntersectionObserverEntry[] = [];\n  private timer: number;\n  public plotlyReady$ = this.store.select(selectPlotlyReady);\n  public plotlyReady: boolean;\n  private subs = new Subscription();\n  public height: number = 450;\n  private width: number;\n  private graphsPerRow: number = 2;\n  private minWidth: number = 400;\n  private resizeTextElement: HTMLDivElement;\n  private graphsNumberLimit: number;\n  public activeResizeElement: SingleGraphComponent;\n  private _hiddenList: string[];\n\n  @HostListener('window:resize')\n  onResize() {\n    clearTimeout(this.timer);\n    this.prepareRedraw();\n    this.timer = window.setTimeout(() => {\n      this.graphsPerRow = this.allGraphs.length === this.allMetricGroups.length ? 1: this.graphsPerRow;\n      this.calculateGraphsLayout();\n    }, 200);\n  }\n\n  @Input() set hiddenList(list: string[]) {\n    this._hiddenList = list || [];\n    window.setTimeout(() => this.prepareRedraw());\n  }\n  get hiddenList() {\n    return this._hiddenList;\n  }\n  @Input() isGroupGraphs: boolean;\n  @Input() legendStringLength;\n  @Input() minimized: boolean;\n  @Input() isDarkTheme: boolean;\n  @Input() showLoaderOnDraw = true;\n  @Input() legendConfiguration: Partial<ExtLegend & {noTextWrap: boolean}> = {};\n  @Input() breakPoint: number = 700;\n  @Input() isCompare: boolean = false;\n  @Input() disableResize: boolean = false;\n\n\n  @Input() set smoothWeight(smooth: number) {\n    this._smoothWeight = smooth;\n  }\n\n  get smoothWeight() {\n    return this._smoothWeight;\n  }\n\n  @Input() groupBy: GroupByCharts;\n\n  @Input() set xAxisType(axisType: ScalarKeyEnum) {\n    this._xAxisType = axisType;\n    this.prepareRedraw();\n  }\n\n  get xAxisType() {\n    return this._xAxisType;\n  }\n\n  @ViewChildren('metricGroup') allMetricGroups !: QueryList<ElementRef>;\n  @ViewChildren(SingleGraphComponent) allGraphs !: QueryList<SingleGraphComponent>;\n\n  constructor(\n    private el: ElementRef,\n    private changeDetection: ChangeDetectorRef,\n    private adminService: AdminService,\n    private store: Store<any>,\n    private renderer: Renderer2\n  ) {\n    this.subs.add(this.plotlyReady$.pipe(\n        tap(ready => this.plotlyReady = ready),\n        skip(1), // Only work on page load 1: false 2: true\n        filter(ready => !!ready)\n      ).subscribe(() => {\n        this.prepareRedraw();\n        this.graphInView(this.visibleEntries);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n    this.allMetricGroups = null;\n    this.graphsPerRow = null;\n  }\n\n  @Output() resetGraphs = new EventEmitter();\n  @Output() changeWeight = new EventEmitter<number>();\n  @Output() changeXAxisType = new EventEmitter<ScalarKeyEnum>();\n  @Output() changeGroupBy = new EventEmitter<GroupByCharts>();\n  @Output() toggleSettings = new EventEmitter();\n\n  @Input() set splitSize(splitSize: number) {\n    this.calculateGraphsLayout();\n  }\n\n  @Input() showSettings: boolean = false;\n\n  @Input() set metrics(graphGroups: {[label: string]: ExtFrame[]}) {\n    this.noGraphs = (graphGroups !== undefined) && (graphGroups !== null) && Object.keys(graphGroups).length === 0;\n    if (!graphGroups) {\n      this.graphList = [];\n      return;\n    }\n    this.graphsData = this.sortGraphsData(graphGroups);\n    Object.values(this.graphsData).forEach((graphs: ExtFrame[]) => {\n      graphs.forEach((graph: ExtFrame) => {\n        if (getOr(0, 'layout.images.length', graph) > 0) {\n          graph.layout.images.forEach((image: Plotly.Image) => {\n              this.store.dispatch(getSignedUrl({url: image.source, config: {skipFileServer: false, skipLocalFile: false, disableCache: graph.timestamp}}));\n              this.subs.add(this.store.select(selectSignedUrl(image.source))\n                .pipe(\n                  filter(signed => !!signed?.signed),\n                  map(({signed: signedUrl}) => signedUrl),\n                  take(1)\n                ).subscribe(url => image.source = url)\n              );\n            }\n        );\n        }\n      });\n    });\n    this.graphList = sortMetricsList(Object.keys(graphGroups));\n    this.changeDetection.detectChanges(); // forcing detectChanges for the intersection observer\n    const options = {\n      root: this.allMetrics.nativeElement,\n      rootMargin: '0px',\n      threshold: 0.1\n    };\n\n    this.observer = new IntersectionObserver(this.graphInView.bind(this), options);\n    window.setTimeout(() => this.prepareRedraw());\n  }\n\n  observeGraphs() {\n    if (!this.observer) {\n      return;\n    }\n    this.observer.takeRecords();\n    const graphElements = document.querySelectorAll('sm-single-graph');\n    for (const key in graphElements) {\n      if (!graphElements.hasOwnProperty(key)) {\n        continue;\n      }\n      this.observer.observe(graphElements[key]);\n    }\n  }\n\n  private prepareRedraw() {\n    if (!this.allGraphs) {\n      return;\n    }\n    this.allGraphs.forEach(graph => graph.shouldRefresh = true);\n    this.observeGraphs();\n  }\n\n  graphInView(entries: IntersectionObserverEntry[]) {\n    this.maintainVisibleEntries(entries);\n    for (const entity of entries) {\n      if (entity.intersectionRatio === 0) {\n        continue;\n      }\n      const el = entity.target;\n      const graphComponent = this.allGraphs.find(graphComp => graphComp.identifier === el.id);\n      if (this.plotlyReady && (!graphComponent?.alreadyDrawn || graphComponent?.shouldRefresh)) {\n        graphComponent.drawGraph(true);\n      }\n    }\n  }\n\n  private maintainVisibleEntries(entries: IntersectionObserverEntry[]) {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        if (!this.visibleEntries.includes(entry)) {\n          this.visibleEntries.push(entry);\n        }\n      } else {\n        this.visibleEntries = this.visibleEntries.filter(visEntry => visEntry.target !== entry.target);\n      }\n    });\n  }\n\n  sortGraphsData = (data: {[label: string]: ExtFrame[]}) =>\n    Object.entries(data).reduce((acc, [label, graphs]) =>\n      ({...acc,\n       [label]: graphs.sort((a, b) => {\n         a.layout.title = a.layout.title || '';\n         b.layout.title = b.layout.title || '';\n         return a.layout.title === b.layout.title ?\n           b.iter - a.iter :\n           (a.layout.title as string).localeCompare((b.layout.title as string), undefined, {numeric: true, sensitivity: 'base'});\n      })\n    }), {} as {[label: string]: ExtFrame[]});\n\n  trackByFn = (index: number, item) => item;\n\n  trackByIdFn = (metric: string, index: number, item: ExtFrame) =>\n    metric + item.layout.title + item.iter;\n\n  isWidthBigEnough() {\n    return this.el.nativeElement.clientWidth > this.breakPoint;\n  }\n\n  private calculateGraphsLayout() {\n    if (this.allGraphs) {\n      const containerWidth = this.el.nativeElement.clientWidth;\n      while (containerWidth / this.graphsPerRow < this.minWidth && this.graphsPerRow > 1) {\n        this.graphsPerRow -= 1;\n      }\n      const width = Math.floor(containerWidth / this.graphsPerRow);\n      this.width = width - 4;\n      if (!this.isGroupGraphs) {\n        this.allMetricGroups.forEach(metricGroup => this.renderer.setStyle(metricGroup.nativeElement, 'width', `${this.width}px`));\n      } else {\n        this.allGraphs.forEach(singleGraph => this.renderer.setStyle(singleGraph.elementRef.nativeElement, 'width', `${this.width}px`));\n      }\n    }\n    this.prepareRedraw();\n    this.graphInView(this.visibleEntries);\n  }\n\n  sizeChanged($event: ResizeEvent) {\n    this.activeResizeElement = null;\n    if ($event.edges.right) {\n      const containerWidth = this.el.nativeElement.clientWidth;\n      const userWidth = $event.rectangle.width;\n      this.graphsPerRow = Math.min(Math.floor(containerWidth / userWidth), this.graphsNumberLimit);\n\n      if (!this.isGroupGraphs) {\n        this.allMetricGroups.forEach(metricGroup => {\n          this.width = containerWidth / this.graphsPerRow - (this.graphsPerRow < 4 ? 10 : 4);\n          this.renderer.setStyle(metricGroup.nativeElement, 'width', `${this.width}px`);\n        });\n      } else {\n        this.allGraphs.forEach(singleGraph => {\n          this.width = containerWidth / this.graphsPerRow - (this.graphsPerRow < 4 ? 10 : 4);\n          this.renderer.setStyle(singleGraph.elementRef.nativeElement, 'width', `${this.width}px`);\n        });\n      }\n    }\n    if ($event.edges.bottom) {\n      this.height = $event.rectangle.height;\n      if (!this.isGroupGraphs) {\n        this.allMetricGroups.forEach(metricGroup => this.renderer.setStyle(metricGroup.nativeElement, 'height', `${this.height}px`));\n      } else {\n        this.allGraphs.forEach(singleGraph => this.renderer.setStyle(singleGraph.elementRef.nativeElement, 'height', `${this.height}px`));\n      }\n    }\n    this.prepareRedraw();\n    setTimeout(() => this.graphInView(this.visibleEntries));\n  }\n\n  resizeStarted(metricGroup: HTMLDivElement, singleGraph: SingleGraphComponent) {\n    this.activeResizeElement = singleGraph;\n    this.changeDetection.detectChanges();\n    this.graphsNumberLimit = this.isGroupGraphs ? metricGroup.querySelectorAll('sm-single-graph').length : this.graphList.length;\n    this.resizeTextElement = singleGraph.elementRef.nativeElement.querySelector('.whitebg.resize-active.resize-ghost-element .resize-overlay-text');\n  }\n\n  onResizing($event: ResizeEvent) {\n    if ($event.edges.right && this.resizeTextElement) {\n      const graphsPerRow = Math.min(Math.floor(this.el.nativeElement.clientWidth / $event.rectangle.width), this.graphsNumberLimit);\n      const text = `${graphsPerRow > 1 ? graphsPerRow + ' graphs' : '1 graph'} per row`;\n      this.renderer.setProperty(this.resizeTextElement, 'textContent', text);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ExperimentGraphsComponent} from './experiment-graphs.component';\nimport {UiComponentsModule} from '../ui-components/ui-components.module';\nimport {SingleGraphComponent} from './single-graph/single-graph.component';\nimport {GraphSettingsBarComponent} from './graph-settings-bar/graph-settings-bar.component';\nimport { MatSliderModule } from '@angular/material/slider';\nimport {PlotlyGraphBase} from './single-graph/plotly-graph-base';\nimport {FormsModule} from '@angular/forms';\nimport {ResizableModule} from 'angular-resizable-element';\nimport {GraphDisplayerComponent} from './graph-displayer/graph-displayer.component';\nimport {GraphScalarDataToMetric} from './graph-scalar-data-to-metric.pipe';\nimport {GraphPlotDataToMetric} from './graph-plot-data-to-metric.pipe';\nimport {SharedPipesModule} from '../pipes/shared-pipes.module';\n\nconst declarations= [\n  ExperimentGraphsComponent,\n  PlotlyGraphBase,\n  SingleGraphComponent,\n  GraphSettingsBarComponent,\n  GraphDisplayerComponent,\n  GraphScalarDataToMetric,\n  GraphPlotDataToMetric,\n];\n@NgModule({\n  declarations: declarations,\n  exports: declarations,\n  imports: [\n    CommonModule,\n    UiComponentsModule,\n    MatSliderModule,\n    FormsModule,\n    ResizableModule,\n    SharedPipesModule,\n  ]\n})\nexport class ExperimentGraphsModule { }\n","<div class=\"modal-container\" [class.dark-theme]=\"darkTheme\" #modalContainer>\n  <div class=\"graph-displayer-header\">\n    <div class=\"chart-title\">{{chart?.layout?.title || chart?.metric}}</div>\n    <div class=\"ml-auto d-flex align-items-center\">\n      <div [class.load-spinner]=\"isFetchingData$ | async\" class=\"d-flex align-items-center mr-3\"></div>\n      <div class=\"pointer d-flex align-items-center mr-3\" *ngIf=\"(isFetchingData$ | async) === false && isFullDetailsMode\" smTooltip=\"refresh\" matTooltipPosition=\"below\" (click)=\"refresh()\"><i class=\"al-icon al-ico-refresh\"></i></div>\n      <div (click)=\"closeGraphDisplayer()\" matTooltipPosition=\"below\" smTooltip=\"Close\" class=\"icon-container pointer d-flex align-items-center\">\n        <i class=\"al-icon al-ico-dialog-x al-color blue-400 light-grey-blue\"></i>\n      </div>\n    </div>\n\n  </div>\n  <div class=\"graph-controls\" *ngIf=\"isFullDetailsMode\">\n    <div class=\"d-flex align-items-center\"  *ngIf=\"!isCompare\">\n      <span class=\"label-text axis-text-margin-left\">Horizontal Axis</span>\n      <mat-form-field appearance=\"outline\" class=\"axis-type-field\">\n        <mat-select [value]=\"xAxisType$ | async\" (selectionChange)=\"xAxisTypeChanged($event)\" panelClass=\"light-theme\"\n                    name=\"scriptType\" [disabled]=\"isFetchingData$ | async\">\n          <mat-option *ngFor=\"let type of xAxisTypeOption\" [value]=\"type.value\">{{type.name}}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div class=\"smooth-options d-flex align-items-center ml-3\">\n      <span class=\"label-text smoothing-text\">Smoothing</span>\n      <mat-slider\n        [value]=\"smoothWeight\"\n        [max]=\"0.999\"\n        [min]=\"0\"\n        [step]=\"0.001\"\n        (input)=\"changeWeight($event.value)\"\n      >\n      </mat-slider>\n      <mat-form-field\n        appearance=\"outline\"\n        class=\"smooth-input\">\n        <input\n          matInput\n          name=\"minCount\"\n          type=\"number\"\n          [min]=\"0\"\n          [ngModel]=\"smoothWeight\"\n          (ngModelChange)=\"changeWeight($any($event))\"\n        />\n      </mat-form-field>\n\n    </div>\n  </div>\n  <div class=\"graph-container\">\n    <sm-single-graph\n      #singleGraph\n      [class.less-padding]=\"true\"\n      [class.two-in-a-row]=\"false\"\n      [chart]=\"chart\"\n      [disableResize]=\"true\"\n      [smoothWeight]=\"smoothWeight\"\n      [hideTitle]=\"true\"\n      [isMaximized]=\"true\"\n      [height]=\"height\"\n      [id]=\"id\"\n      [identifier]=\"id\"\n      [isCompare]=\"isCompare\"\n      [xAxisType]=\"xAxisType\"\n      [moveLegendToTitle]=\"false\"\n      [isDarkTheme]=\"darkTheme\"\n    >\n    </sm-single-graph>\n  </div>\n</div>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  HostListener,\n  Inject,\n  OnDestroy,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {ExtFrame} from '../single-graph/plotly-graph-base';\nimport {Store} from \"@ngrx/store\";\nimport {\n  getGraphDisplayFullDetailsScalars,\n  setGraphDisplayFullDetailsScalars,\n  setGraphDisplayFullDetailsScalarsIsOpen,\n  setXtypeGraphDisplayFullDetailsScalars\n} from '../../../experiments/actions/common-experiment-output.actions';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {Subscription} from 'rxjs';\nimport {cloneDeep} from 'lodash/fp';\nimport {\n  selectFullScreenChart,\n  selectFullScreenChartIsFetching,\n  selectFullScreenChartXtype\n} from '../../../experiments/reducers';\nimport {ScalarKeyEnum} from '../../../../business-logic/model/events/scalarKeyEnum';\nimport {MatSelectChange} from '@angular/material/select';\n\n@Component({\n  selector: 'sm-graph-displayer',\n  templateUrl: './graph-displayer.component.html',\n  styleUrls: ['./graph-displayer.component.scss']\n})\nexport class GraphDisplayerComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('singleGraph') singleGraph;\n  @ViewChild('modalContainer') modalContainer;\n  height;\n  public isFetchingData$: Observable<boolean>;\n  public xAxisType$: Observable<\"iter\" | \"timestamp\" | \"iso_time\">;\n  public xAxisType: \"iter\" | \"timestamp\" | \"iso_time\";\n  private xtypeSub: Subscription;\n  public isCompare: boolean;\n  public isFullDetailsMode: boolean;\n\n  @HostListener('window:resize')\n  onResize() {\n    this.height = this.modalContainer.nativeElement.clientHeight - 80;\n    setTimeout(this.singleGraph.drawGraph(true), 0);\n  }\n\n  public chart: ExtFrame;\n  public id: string;\n  public darkTheme: boolean;\n  public chart$: Observable<ExtFrame>;\n  private chartSub: Subscription;\n  xAxisTypeOption = [\n    {\n      name: 'Iterations',\n      value: ScalarKeyEnum.Iter\n    },\n    {\n      name: 'Time from start',\n      value: ScalarKeyEnum.Timestamp\n    },\n    {\n      name: 'Wall time',\n      value: ScalarKeyEnum.IsoTime\n    },\n  ];\n  smoothWeight: any = 0;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { chart: ExtFrame; id: string; xAxisType: any; smoothWeight; darkTheme: boolean; isCompare: boolean},\n              public dialogRef: MatDialogRef<GraphDisplayerComponent>,\n              private store: Store<any>,\n              private cdr: ChangeDetectorRef\n  ) {\n    this.chart$ = this.store.select(selectFullScreenChart);\n    this.xAxisType$ = this.store.select(selectFullScreenChartXtype);\n    this.isFetchingData$ = this.store.select(selectFullScreenChartIsFetching);\n    this.store.dispatch(setXtypeGraphDisplayFullDetailsScalars({xAxisType: data.xAxisType}));\n    this.store.dispatch(setGraphDisplayFullDetailsScalars({data: data.chart}));\n    this.store.dispatch(setGraphDisplayFullDetailsScalarsIsOpen({isOpen: true}));\n    this.chart = data.chart;\n    this.isCompare = data.isCompare;\n    this.isFullDetailsMode = ['multiScalar', 'scalar'].includes(this.chart.layout.type) && !this.isCompare;\n    this.id = data.id;\n    this.darkTheme = data.darkTheme;\n  }\n\n\n  ngOnInit(): void {\n    if (this.isFullDetailsMode) {\n      this.store.dispatch(getGraphDisplayFullDetailsScalars({\n        task: this.chart.data[0].task,\n        metric: {metric: (this.chart.metric) },\n      }));\n    }\n    this.xtypeSub = this.xAxisType$.subscribe((xType) => this.xAxisType = xType);\n  }\n\n  ngAfterViewInit(): void {\n    this.height = this.modalContainer.nativeElement.clientHeight - 80;\n    this.chartSub = this.chart$.subscribe(chart => {\n      this.singleGraph.shouldRefresh = true;\n      this.chart = cloneDeep(chart);\n      if (this.chart) {\n        this.cdr.detectChanges();\n        setTimeout(this.singleGraph.drawGraph(true), 0);\n      }\n    });\n  }\n\n  closeGraphDisplayer() {\n    this.dialogRef.close();\n  }\n\n  xAxisTypeChanged($event: MatSelectChange) {\n    if (\n      ((ScalarKeyEnum.Iter === this.xAxisType) && [ScalarKeyEnum.IsoTime, ScalarKeyEnum.Timestamp].includes($event.value)) ||\n      ([ScalarKeyEnum.IsoTime, ScalarKeyEnum.Timestamp].includes(this.xAxisType) && (ScalarKeyEnum.Iter === ($event.value)))) {\n      this.store.dispatch(getGraphDisplayFullDetailsScalars({\n        task: this.chart.data[0].task,\n        metric: {metric: (this.chart.metric)},\n        key: $event.value\n      }));\n    } else {\n      this.store.dispatch(setXtypeGraphDisplayFullDetailsScalars({xAxisType: $event.value}));\n    }\n  }\n\n  changeWeight(value: number) {\n    this.smoothWeight = value;\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(setGraphDisplayFullDetailsScalarsIsOpen({isOpen: false}));\n    this.chartSub.unsubscribe();\n    this.xtypeSub.unsubscribe();\n  }\n\n  refresh() {\n    this.store.dispatch(getGraphDisplayFullDetailsScalars({\n      task: this.chart.data[0].task,\n      metric: {metric: (this.chart.metric) }\n    }));\n  }\n}\n","<div class=\"x-axis-options\" [class.vertical-layout]=\"verticalLayout\">\n  <div class=\"d-flex justify-content-between\" [class.w-100]=\"verticalLayout\">\n    <span class=\"label-text axis-text-margin-left\">Group by</span>\n    <mat-form-field appearance=\"outline\" class=\"group-by-field\">\n      <mat-select [value]=\"groupBy\"  (selectionChange)=\"groupByChanged($event)\" panelClass=\"light-theme\"\n                  name=\"scriptType\">\n        <mat-option *ngFor=\"let type of groupByOptions\" [value]=\"type.value\">{{type.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"d-flex justify-content-between\" [class.w-100]=\"verticalLayout\">\n    <span class=\"label-text axis-text-margin-left\">Horizontal Axis</span>\n    <mat-form-field appearance=\"outline\" class=\"axis-type-field\">\n      <mat-select [value]=\"xAxisType\" (selectionChange)=\"xAxisTypeChanged($event)\" panelClass=\"light-theme\"\n                  name=\"scriptType\">\n        <mat-option *ngFor=\"let type of xAxisTypeOption\" [value]=\"type.value\">{{type.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"smooth-options\">\n    <span class=\"label-text smoothing-text\">Smoothing</span>\n    <mat-slider\n      [value]=\"smoothWeight\"\n      [max]=\"0.999\"\n      [min]=\"0\"\n      [step]=\"0.001\"\n      (input)=\"changeWeight.emit($event.value)\"\n    >\n    </mat-slider>\n    <mat-form-field appearance=\"outline\" class=\"smooth-input\">\n      <input\n        matInput\n        name=\"minCount\"\n        type=\"number\"\n        [min]=\"0\"\n        [ngModel]=\"smoothWeight\"\n        (ngModelChange)=\"changeWeight.emit($any($event))\"\n      />\n    </mat-form-field>\n    <i (click)=\"toggleSettings.emit()\" class=\"fas fa-times pointer close-settings\"></i>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ScalarKeyEnum} from '../../../../business-logic/model/events/scalarKeyEnum';\nimport {MatSelectChange} from '@angular/material/select';\nimport {GroupByCharts} from '../../../experiments/reducers/common-experiment-output.reducer';\n\n@Component({\n  selector: 'sm-graph-settings-bar',\n  templateUrl: './graph-settings-bar.component.html',\n  styleUrls: ['./graph-settings-bar.component.scss']\n})\nexport class GraphSettingsBarComponent {\n  readonly ScalarKeyEnum = ScalarKeyEnum;\n  @Input() smoothWeight: number;\n  @Input() xAxisType: ScalarKeyEnum = ScalarKeyEnum.Iter;\n  @Input() groupBy: GroupByCharts = 'metric';\n  @Input() groupByOptions: {name: string; value: GroupByCharts }[];\n  @Input() verticalLayout: boolean = false;\n  @Output() changeWeight = new EventEmitter();\n  @Output() changeXAxisType = new EventEmitter<ScalarKeyEnum>();\n  @Output() changeGroupBy = new EventEmitter<GroupByCharts>();\n  @Output() toggleSettings = new EventEmitter();\n\n  xAxisTypeOption = [\n    {\n      name: 'Iterations',\n      value: ScalarKeyEnum.Iter\n    },\n    {\n      name: 'Time from start',\n      value: ScalarKeyEnum.Timestamp\n    },\n    {\n      name: 'Wall time',\n      value: ScalarKeyEnum.IsoTime\n    },\n  ];\n\n  xAxisTypeChanged(key: MatSelectChange) {\n    this.changeXAxisType.emit(key.value);\n  }\n\n  groupByChanged(key: MatSelectChange) {\n    this.changeGroupBy.emit(key.value);\n  }\n}\n","import {hslToRgb, rgbToHsl} from '../../services/color-hash/color-hash.utils';\nimport {Subscription} from 'rxjs';\nimport {Input, OnDestroy, Directive} from '@angular/core';\nimport {Config, Frame, Layout, LayoutAxis, Legend, PlotData} from 'plotly.js';\nimport {selectScaleFactor} from '../../../core/reducers/view.reducer';\nimport {Store} from '@ngrx/store';\n\nexport interface ExtFrame extends Omit<Frame, 'data' | 'layout'> {\n  iter: number;\n  metric: string;\n  task: string;\n  timestamp: number;\n  type: string;\n  variant: string;\n  worker: string;\n  data: ExtData[];\n  layout: Partial<ExtLayout>;\n  config: Partial<Config>;\n}\n\nexport interface ExtLegend extends Legend {\n  valign: 'top' | 'middle' | 'bottom';\n}\n\nexport interface ExtLayoutAxis extends Omit<LayoutAxis, 'spikesnap'> {\n  spikesnap: string;\n}\n\nexport interface ExtLayout extends Omit<Layout, 'xaxis' | 'yaxis' | 'legend'> {\n  type: string;\n  xaxis: Partial<ExtLayoutAxis>;\n  yaxis: Partial<ExtLayoutAxis>;\n  legend: Partial<ExtLegend>;\n  uirevision: number | string;\n  name: string;\n}\n\nexport interface ExtData extends PlotData {\n  task: string;\n  cells: any;\n  header: any;\n  name: string;\n  isSmoothed: boolean;\n  colorHash: string;\n}\n\n@Directive({\n  selector: 'base-plotly-graph'\n})\nexport class PlotlyGraphBase implements OnDestroy {\n  public isSmooth = false;\n  public colorSub: Subscription;\n  public scaleExists: boolean;\n\n  @Input() isCompare: boolean = false;\n  private scaleSub: Subscription;\n\n\n  constructor(protected store: Store) {\n    this.scaleSub = store.select(selectScaleFactor).subscribe(scaleFactor => this.scaleExists = scaleFactor !== 100);\n  }\n\n  public _reColorTrace(trace: ExtData, newColor: number[]): void {\n    if (Array.isArray(trace.line?.color) || Array.isArray(trace.marker?.color)) {\n      return;\n    }\n    let colorString = `rgb(${newColor[0]},${newColor[1]},${newColor[2]})`;\n    if (this.isSmooth && !trace.isSmoothed) {\n      const colorHSL = rgbToHsl(newColor);\n      colorHSL[2] = Math.min(colorHSL[2] + 0.3, 0.9);\n      const lighterColor = hslToRgb(colorHSL);\n      colorString = `rgb(${lighterColor[0]},${lighterColor[1]},${lighterColor[2]})`;\n    }\n    if (trace.line) {\n      trace.line.color = colorString;\n    } else if (trace.marker) {\n      trace.marker.color = colorString;\n    } else {\n      // Guess that a graph without a lne or a marker should have a line, may cause havoc\n      trace.line = {};\n      trace.line.color = colorString;\n    }\n  }\n\n  public _getTraceColor(trace: ExtData): string {\n    if (trace.line) {\n      return trace.line.color as string;\n    }\n    if (trace.marker) {\n      return trace.marker.color as string;\n    }\n    return '';\n  }\n\n  public addIdToDuplicateExperiments(data: ExtData[], taskId: string): ExtData[]{\n    const namesHash = {};\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].name) {\n        continue;\n      }\n      const name = data[i].name;\n      if (namesHash[name]) {\n        namesHash[name].push(i);\n      } else {\n        namesHash[name] = [i];\n      }\n    }\n    const filtered = Object.entries(namesHash).filter((entry: any) => entry[1].length > 1);\n    const duplicateIndexes = filtered.reduce((acc, entry: any) => acc.concat(entry[1]), []);\n    const merged = [...duplicateIndexes];\n\n    for (let i = 0; i < merged.length; i++) {\n      const key = merged[i];\n      data[key].colorHash = data[key].name;\n\n      // Warning: \"data[key].task\" in compare case. taskId in subplots (multiple plots with same name)\n      if (data[key].task || taskId) {\n        data[key].name = `${data[key].name}.${(data[key].task || taskId).substring(0, 7)}`;\n      }\n    }\n    return data;\n  }\n\n  public extractColorKey(html: string): string {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    const el = div.querySelector('.color-key');\n    return el ? el.getAttribute('data-color-key') : '';\n  }\n\n  ngOnDestroy(): void {\n    this.colorSub?.unsubscribe();\n    this.scaleSub?.unsubscribe();\n  }\n\n}\n","<div #drawHere\n     [style.height.px]=\"height\"\n     [class.whitebg]=\"!isDarkTheme\"\n     [class.dark-theme]=\"isDarkTheme\"\n     [class.loading]=\"loading\"\n     mwlResizable\n     [validateResize]=\"validateResize\"\n     [enableGhostResize]=\"!disableResize\"\n     [ghostElementPositioning]=\"'absolute'\"\n     (resizing)=\"resizing.emit($event);\"\n     (resizeEnd)=\"sizeChanged.emit($event)\"\n     (resizeStart)=\"resizeStarted.emit()\"\n     [class.whitebg-table]=\"type === 'table'\"\n     [class.move-title]=\"type !== 'parcoords'\"\n>\n  <div\n    *ngIf=\"!disableResize\"\n    class=\"resize-handle-right\"\n    mwlResizeHandle\n    [resizeEdges]=\"{ right: true }\">\n    <div class=\"right-line\"></div>\n    <div class=\"right-handle\"></div>\n  </div>\n  <div\n    *ngIf=\"!disableResize\"\n    class=\"resize-handle-bottom\"\n    mwlResizeHandle\n    [resizeEdges]=\"{ bottom: true }\">\n    <div class=\"bottom-line\"></div>\n    <div class=\"bottom-handle\"></div>\n  </div>\n  <div class=\"resize-overlay-text\"></div>\n  <div *ngIf=\"loading\" class=\"plot-loader\">Loading...</div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input, NgZone,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {ColorHashService} from '../../services/color-hash/color-hash.service';\nimport {chooseTimeUnit, wordWrap} from '../../../tasks/tasks.utils';\nimport {attachColorChooser} from '../../ui-components/directives/choose-color/choose-color.directive';\nimport {debounceTime, filter} from 'rxjs/operators';\nimport {cloneDeep, escape, get, getOr} from 'lodash/fp';\nimport {\n  AxisType,\n  Config,\n  Data,\n  Datum,\n  Margin,\n  ModeBarButton,\n  ModeBarDefaultButtons,\n  PlotData,\n  PlotlyHTMLElement, PlotMarker,\n  Root\n} from 'plotly.js';\nimport {ScalarKeyEnum} from '../../../../business-logic/model/events/scalarKeyEnum';\nimport {ExtData, ExtFrame, ExtLayout, ExtLegend, PlotlyGraphBase} from './plotly-graph-base';\nimport {Store} from '@ngrx/store';\nimport {ResizeEvent} from 'angular-resizable-element';\nimport {select} from 'd3-selection';\nimport {MatDialog} from '@angular/material/dialog';\nimport {GraphDisplayerComponent} from '../graph-displayer/graph-displayer.component';\nimport {PALLET} from '../../../constants';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare const Plotly;\nconst DARK_THEME_GRAPH_LINES_COLOR = '#39405f';\nconst DARK_THEME_GRAPH_TICK_COLOR = '#c1cdf3';\n\n@Component({\n  selector: 'sm-single-graph',\n  templateUrl: './single-graph.component.html',\n  styleUrls: ['./single-graph.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SingleGraphComponent extends PlotlyGraphBase {\n  public alreadyDrawn: boolean = false;\n  private originalChart: ExtFrame;\n  private _chart: ExtFrame;\n  private smoothnessTimeout: number;\n  private chartData: HTMLDivElement;\n  public shouldRefresh: boolean = false;\n  private yaxisType: AxisType = 'linear';\n  public type: PlotData['type'] | 'table';\n  private previousOffsetWidth: number;\n\n  @Input() identifier: string;\n  @Input() hideTitle: boolean = false;\n  @Input() disableResize: boolean = false;\n  @Input() isDarkTheme: boolean;\n  @Input() showLoaderOnDraw = true;\n  @Input() isMaximized: boolean = false;\n  @Input() legendConfiguration: Partial<ExtLegend & { noTextWrap: boolean }> = {};\n  @Input() height: number = 450;\n  public loading: boolean;\n\n  @Input() set chart(chart: ExtFrame) {\n    this.originalChart = cloneDeep(chart);\n    this._chart = chart;\n  }\n\n  get chart(): ExtFrame {\n    return this._chart;\n  }\n\n  @Input() moveLegendToTitle = false;\n  @Input() legendStringLength: number;\n  @Input() graphsNumber: number;\n  @Input() xAxisType: ScalarKeyEnum;\n\n  @Input() set smoothWeight(ratio: number) {\n    this.isSmooth = ratio > 0;\n    if (this.alreadyDrawn) {\n      clearTimeout(this.smoothnessTimeout);\n      this.smoothnessTimeout = window.setTimeout(() => {\n        this._chart = cloneDeep(this.originalChart);\n        this.drawGraph(true);\n      }, 400);\n    }\n    this._smoothWeight = ratio;\n  }\n\n  get smoothWeight() {\n    return this._smoothWeight;\n  }\n\n  @Output() sizeChanged = new EventEmitter<ResizeEvent>();\n  @Output() resizing = new EventEmitter<ResizeEvent>();\n  @Output() resizeStarted = new EventEmitter();\n\n  @ViewChild('drawHere', {static: true}) singleGraphContainer: ElementRef;\n  private chartElm;\n  private _smoothWeight: number;\n\n\n  constructor(\n    protected renderer: Renderer2,\n    private colorHash: ColorHashService,\n    private changeDetector: ChangeDetectorRef,\n    public elementRef: ElementRef,\n    protected store: Store,\n    private dialog: MatDialog,\n    private readonly zone: NgZone\n  ) {\n    super(store);\n  }\n\n  drawGraph(forceRedraw = false) {\n    if (this.showLoaderOnDraw) {\n      this.loading = true;\n      this.changeDetector.detectChanges();\n    }\n    const container = this.singleGraphContainer.nativeElement;\n    if (this.alreadyDrawn && !forceRedraw && !this.shouldRefresh) {\n      return;\n    }\n    this.alreadyDrawn = this.alreadyDrawn && !forceRedraw;\n    this.shouldRefresh = false;\n    const [root, data, layout, config, graphEl] = this.drawPlotly();\n    if (!document.body.contains(graphEl)) {\n      container.appendChild(graphEl);\n    }\n    let skipReact = false;\n    // root.height > 0 to avoid rare plotly exception\n    if (this.singleGraphContainer.nativeElement.offsetWidth !== this.previousOffsetWidth && (root as HTMLElement).offsetHeight > 0) {\n      skipReact = true;\n      this.zone.runOutsideAngular(() => Plotly.relayout(root, {\n        width: Math.max(getOr(0, 'data[0].cells.values.length', data) * 100, this.singleGraphContainer.nativeElement.offsetWidth - 3)\n      }).then(() => {\n        this.loading = false;\n        this.changeDetector.detectChanges();\n        this.updateLegend();\n      }));\n    }\n    this.previousOffsetWidth = this.singleGraphContainer.nativeElement.offsetWidth;\n\n    if (!skipReact) {\n      this.zone.runOutsideAngular(() => Plotly.react(root, data, layout, config).then(() => {\n        this.loading = false;\n        this.changeDetector.detectChanges();\n      }));\n\n    }\n\n    this.initColorSubscription();\n    if (!this.alreadyDrawn) {\n      setTimeout(() => {\n        this.subscribeColorButtons(container);\n        this.updateLegend();\n      });\n    }\n    this.alreadyDrawn = true;\n  }\n\n  drawPlotly(): [Root, Data[], Partial<ExtLayout>, Partial<Config>, Element] {\n    this.chartData = this.chartData || this.renderer.createElement('div');\n    this.chartElm = this.chartElm || this.renderer.createElement('div');\n    this.chartElm.classList.add('chart');\n    if (!document.body.contains(this.chartElm)) {\n      this.chartData.appendChild(this.chartElm);\n    }\n\n    const graph = this.formatChartLines() as ExtFrame;\n    this.type = getOr(graph.layout.type, 'data[0].type', graph);\n    let layout = {\n      ...this.addParametersIfDarkTheme({\n        font: {\n          color: '#FFFFFF',\n          family: '\"Heebo\", sans-serif, sans-serif',\n        }\n      }),\n      ...graph.layout,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      ...this.addParametersIfDarkTheme({plot_bgcolor: 'transparent'}),\n      height: this.height,\n      modebar: {\n        color: '#8F9DC9',\n        activecolor: '#4D66FF',\n        ...this.addParametersIfDarkTheme({\n          activecolor: PALLET.blue500,\n          bgcolor: 'transparent',\n        }),\n      },\n      title: {\n        ...(!this.hideTitle && {text: this.addIterationString(graph.layout.title as string, graph.iter)}),\n        ...this.addParametersIfDarkTheme({\n          font: {\n            color: this.isDarkTheme ? PALLET.blue100 : 'dce0ee'\n          },\n        }),\n      },\n      ...this.addParametersIfDarkTheme({\n        xaxis: {\n          color: DARK_THEME_GRAPH_LINES_COLOR,\n          gridcolor: DARK_THEME_GRAPH_LINES_COLOR,\n          zerolinecolor: DARK_THEME_GRAPH_LINES_COLOR,\n          tickfont: {\n            color: DARK_THEME_GRAPH_TICK_COLOR\n          },\n          title: {\n            text: graph.layout.xaxis.title,\n            font: {\n              color: '#dce0ee'\n            }\n          },\n        },\n        yaxis: {\n          color: DARK_THEME_GRAPH_LINES_COLOR,\n          gridcolor: DARK_THEME_GRAPH_LINES_COLOR,\n          zerolinecolor: DARK_THEME_GRAPH_LINES_COLOR,\n          tickfont: {\n            color: DARK_THEME_GRAPH_TICK_COLOR\n          }\n        }\n      }),\n      uirevision: 'static', // Saves the UI state between redraws https://plot.ly/javascript/uirevision/\n      legend: {\n        traceorder: 'normal',\n        xanchor: 'left',\n        yanchor: 'top',\n        x: this.moveLegendToTitle ? 0 : 1,\n        y: 1,\n        borderwidth: 2,\n        bordercolor: '#FFFFFF',\n        orientation: 'v',\n        valign: 'top',\n        font: {color: '#000', size: 12, family: 'sans-serif'},\n        ...this.addParametersIfDarkTheme({\n          bgcolor: 'transparent',\n          bordercolor: 'transparent',\n          font: {color: '#dce0ee', size: 12, family: 'sans-serif'},\n        }),\n        ...this.legendConfiguration\n      },\n      showlegend: this.chartElm.layout && Object.prototype.hasOwnProperty.call(this.chartElm.layout, 'showlegend') ? this.chartElm.layout.showlegend : graph.layout?.showlegend !== false,\n      margin: graph.layout.margin ? graph.layout.margin : {\n        l: 70,\n        r: 50,\n        t: 80,\n        b: 90,\n        pad: 0,\n        autoexpand: true\n      } as Partial<Margin>,\n    } as Partial<ExtLayout>;\n\n    if (this.type === 'table') {\n      this.changeDetector.detectChanges();\n      // override header design\n      graph.data[0].header = {\n        ...graph.data[0].header,\n        line: {width: 1, color: this.isDarkTheme ? '#39405F' : '#d4d6e0'},\n        align: 'left',\n        font: {\n          color: [this.isDarkTheme ? PALLET.blue200 : PALLET.blue400],\n          size: 12\n        },\n        fill: {...graph.data[0].header?.fill, color: this.isDarkTheme ? PALLET.blue800 : PALLET.blue50}\n      };\n\n      // override cells design\n      graph.data[0].cells = {\n        ...graph.data[0].cells,\n        align: 'left',\n        height: 30,\n        font: {\n          color: [this.isDarkTheme ? PALLET.blue200 : PALLET.blue400],\n          size: 12\n        },\n        fill: {...graph.data[0].cells, color: this.isDarkTheme ? PALLET.blue950 : '#ffffff'},\n        line: {width: 1, color: this.isDarkTheme ? DARK_THEME_GRAPH_LINES_COLOR : PALLET.blue100}\n      };\n      layout.width = Math.max(getOr(0, 'data[0].cells.values.length', graph) * 100, this.singleGraphContainer.nativeElement.offsetWidth - 3);\n      layout.title = {\n        ...layout.title as Record<string, any>,\n        text: this.addIterationString(layout.name, graph.iter) || (layout.title as Record<string, any>).text,\n        xanchor: 'left',\n        xref: 'paper',\n        x: 0\n      };\n      layout.margin = {\n        l: 24,\n        t: 52,\n        r: 24,\n        b: 0\n      };\n      layout.height = Math.min(getOr(15, 'data[0].cells.values[0].length', graph) * 30 + 150, this.height);\n    }\n    const barLayoutConfig = {\n      hovermode: 'closest',\n    };\n\n    const scatterLayoutConfig: Partial<ExtLayout> = {\n      // spikedistance: -1,\n      // hoverdistance: -1,\n      // hovermode    : 'x',\n      xaxis: {\n        ...graph.layout.xaxis,\n        spikecolor: '#000000FF',\n        showspikes: true,\n        spikemode: 'across',\n        spikesnap: 'cursor',\n        spikethickness: 1,\n        spikedash: 'solid',\n        rangeslider: {visible: false},\n        fixedrange: false,\n        ...this.addParametersIfDarkTheme({\n          color: DARK_THEME_GRAPH_LINES_COLOR,\n          title: {\n            text: graph.layout.xaxis.title,\n            font: {\n              color: '#dce0ee'\n            }\n          },\n          gridcolor: DARK_THEME_GRAPH_LINES_COLOR,\n          zerolinecolor: DARK_THEME_GRAPH_LINES_COLOR,\n          tickfont: {\n            color: DARK_THEME_GRAPH_TICK_COLOR\n          }\n\n        })\n      },\n      yaxis: {\n        ...graph.layout.yaxis,\n        spikecolor: '#000000FF',\n        showspikes: false,\n        spikemode: 'across',\n        spikesnap: 'cursor',\n        spikethickness: 1,\n        spikedash: 'dash',\n        rangeslider: {visible: false},\n        fixedrange: false,\n        type: this.yaxisType,\n        ...this.addParametersIfDarkTheme({\n          color: DARK_THEME_GRAPH_LINES_COLOR,\n          gridcolor: DARK_THEME_GRAPH_LINES_COLOR,\n          zerolinecolor: DARK_THEME_GRAPH_LINES_COLOR,\n          tickfont: {\n            color: DARK_THEME_GRAPH_TICK_COLOR\n          }\n        })\n      },\n    };\n\n    if (['multiScalar', 'scalar'].includes(graph.layout.type)) {\n      if (['scatter', 'scatter3d'].includes(this.type)) {\n        layout = {...layout, ...scatterLayoutConfig} as Partial<ExtLayout>;\n      }\n    }\n    if (['bar'].includes(this.type)) {\n      layout = {...layout, ...barLayoutConfig} as Partial<ExtLayout>;\n    }\n\n    const modBarButtonsToAdd: ModeBarButton[] = [];\n\n    if (['multiScalar', 'scalar'].includes(graph.layout.type)) {\n      modBarButtonsToAdd.push({\n        name: 'Log view',\n        title: this.getLogButtonTitle(this.yaxisType === 'log'),\n        icon: this.getLogIcon(this.yaxisType === 'log'),\n        click: (gd: PlotlyHTMLElement, ev: MouseEvent) => {\n          this.yaxisType = this.yaxisType === 'log' ? 'linear' : 'log';\n          const icon = this.getLogIcon(this.yaxisType === 'log');\n          let path: SVGPathElement;\n          let svg: HTMLElement;\n          if ((ev.target as SVGElement).tagName === 'svg') {\n            svg = ev.target as HTMLElement;\n            path = (ev.target as SVGElement).firstChild as SVGPathElement;\n          } else {\n            path = ev.target as SVGPathElement;\n            svg = path.parentElement as HTMLElement;\n          }\n          svg.parentElement.attributes['data-title'].value = this.getLogButtonTitle(this.yaxisType === 'log');\n          path.attributes[0].value = icon.path;\n          this.smoothnessTimeout = window.setTimeout(() => {\n            this._chart = cloneDeep(this.originalChart);\n            this.drawGraph(true);\n          }, 400);\n        }\n      });\n    }\n    if (!['table', 'parcoords'].includes(get('data[0].type', graph)) && graph.layout?.showlegend !== false && !this.moveLegendToTitle) {\n      modBarButtonsToAdd.push({\n        name: 'Hide legend',\n        title: this.getHideButtonTitle(),\n        icon: this.getToggleLegendIcon(),\n        click: (element, ev: any) => {\n          const pathElement = ev.target.tagName === 'path' ? ev.target : (ev.target as HTMLElement).querySelector('path');\n          const svg = pathElement.parentElement;\n          pathElement.style.fill = this.chartElm.layout?.showlegend ? 'rgb(77, 102, 255)' : 'rgb(143, 157, 201)';\n          svg.parentElement.attributes['data-title'].value = this.getHideButtonTitle();\n          this.chartElm.layout.showlegend = !this.chartElm.layout.showlegend;\n          if (this.chartElm.layout.showlegend) {\n            setTimeout(() => {\n              this.subscribeColorButtons(this.singleGraphContainer.nativeElement);\n              this.updateLegend();\n            }, 20);\n          }\n          this.zone.runOutsideAngular(() => Plotly.relayout(this.chartElm, {showlegend: this.chartElm.layout.showlegend}));\n        }\n      });\n    }\n    modBarButtonsToAdd.push({\n      name: 'Download JSON',\n      title: 'Download JSON',\n      icon: this.getIcon(),\n      click: () => {\n        this.downloadGraphAsJson(cloneDeep(this.originalChart));\n      }\n    });\n    if (!this.isMaximized) {\n      const maximizeButton: ModeBarButton = {\n        name: 'Maximize',\n        title: 'Maximize Graph',\n        icon: this.getMaximizeIcon(),\n        click: () => {\n          this.maximizeGraph();\n        }\n      };\n      modBarButtonsToAdd.push(maximizeButton);\n    }\n    const config = {\n      modeBarButtonsToRemove: ['sendDataToCloud'] as ModeBarDefaultButtons[],\n      displaylogo: false,\n      modeBarButtonsToAdd: modBarButtonsToAdd\n    };\n\n    return [this.chartElm, graph.data, layout, config, this.chartData];\n  }\n\n  private updateLegend() {\n    const graph = select(this.singleGraphContainer.nativeElement);\n    graph.selectAll('.legendpoints path')\n      .attr('d', 'M5.5,0A5.5,5.5 0 1,1 0,-5.5A5.5,5.5 0 0,1 5.5,0Z');\n    graph.selectAll('.legendtoggle')\n      .on('click', () => window.setTimeout(() => graph.selectAll('.legendpoints path')\n        .attr('d', 'M5.5,0A5.5,5.5 0 1,1 0,-5.5A5.5,5.5 0 0,1 5.5,0Z'), 300)\n      );\n  }\n\n  private formatChartLines() {\n    if (this.alreadyDrawn) {\n      return this.chart;\n    }\n\n    const graph = this.chart;\n    if (this.isCompare) {\n      graph.data = this.addIdToDuplicateExperiments(this.chart.data, this.chart.task);\n    }\n    const smoothLines = [];\n    const timeUnit = chooseTimeUnit(graph.data) as { time: number; str: string };\n\n    for (let i = 0; i < graph.data.length; i++) {\n      if (!graph.data[i].name) {\n        graph.data[i].name = `graph.metric ${i}`;\n      }\n\n      if (!this.alreadyDrawn && !graph.data[i].name.includes('<span style=\"display: none;\"')) {\n        graph.data[i].name = escape(graph.data[i].name);\n\n        if (this.xAxisType === ScalarKeyEnum.Timestamp) {\n          const zeroTime = graph.data[i].x[0] as number;\n          graph.data[i].x = (graph.data[i].x as Datum[]).map((timestamp: number) => (timestamp - zeroTime) / timeUnit.time);\n          // graph.data[i].hovertext = graph.data[i].x.map(timestamp => timeInWords((timestamp - zeroTime)));\n        }\n        if (graph.data[i].type === 'bar' && !graph.data[i].marker) {\n          graph.data[i].marker = {} as Partial<PlotMarker>;\n        }\n        const colorKey = this.generateColorKey(graph, i);\n        const wrappedText = !this.legendConfiguration.noTextWrap ? wordWrap(graph.data[i].name, this.legendStringLength || 19) : graph.data[i].name;\n        graph.data[i].name = wrappedText + `<span style=\"display: none;\" class=\"color-key\" data-color-key=\"${colorKey}\"></span>`;\n      }\n\n      const color = this.colorHash.initColor(this.extractColorKey(graph.data[i].name));\n      this._reColorTrace(graph.data[i], color);\n\n      if (this.isSmooth) {\n        graph.data[i].legendgroup = graph.data[i].name;\n        graph.data[i].showlegend = false;\n        graph.data[i].hoverinfo = 'skip';\n        smoothLines.push(this.resmoothDataset(graph.data[i], color));\n      }\n    }\n    this.setAxisText(graph, timeUnit);\n    graph.data = graph.data.concat(smoothLines);\n    return graph;\n  }\n\n  public generateColorKey(graph: ExtFrame, i: number) {\n    const variant = graph.data[i].colorHash || graph.data[i].name;\n    if (!this.isCompare) {\n      return `${variant}?`;  // \"?\" to adjust desired colors (legend title is removing this ?)\n    } else {\n      const task = graph.data[i].task;\n      return `${variant}-${task}`;\n    }\n  }\n\n  private resmoothDataset(line: ExtData, color) {\n    const newLine = cloneDeep(line);\n\n    const data = newLine.y;\n    let last = data.length > 0 ? data[0] as number : NaN;\n    newLine.legendgroup = line.name;\n    newLine.showlegend = true;\n    newLine.isSmoothed = true;\n    newLine.hovertext = newLine.hovertext ? newLine.hovertext + '(Smoothed)' : '(Smoothed)';\n    newLine.hoverinfo = 'all';\n\n    this._reColorTrace(newLine, color);\n    let smoothed;\n    data.forEach((d, index) => {\n      if (!isFinite(last)) {\n        smoothed = d;\n      } else {\n        // 1st-order IIR low-pass filter to attenuate the higher-\n        // frequency components of the time-series.\n        smoothed = last * this.smoothWeight + (1 - this.smoothWeight) * d;\n        newLine.y[index] = smoothed;\n      }\n      last = smoothed;\n    });\n    return newLine;\n  }\n\n  private initColorSubscription(forceRedraw = false) {\n    if (this.colorSub) {\n      // Subscription is already running\n      if (forceRedraw) {\n        this.colorSub.unsubscribe();\n      } else {\n        return;\n      }\n    }\n    this.colorSub = this.colorHash.getColorsObservable()\n      .pipe(\n        filter(colorObj => !!colorObj),\n        debounceTime(100)\n      )\n      .subscribe(colorObj => {\n        const graph = this.chart;\n        let changed: boolean = false;\n        graph.data.forEach(trace => {\n          const name = trace.name;\n          if (!name) {\n            return;\n          }\n          const colorKey = this.extractColorKey(name);\n          const oldColor = this._getTraceColor(trace);\n          const newColorArr = colorObj[colorKey];\n          const newColor = newColorArr ? `rgb(${newColorArr[0]},${newColorArr[1]},${newColorArr[2]})` : false;\n          if (oldColor !== newColor && newColor) {\n            changed = true;\n            this._reColorTrace(trace, newColorArr);\n          }\n        });\n        if (changed) {\n          this.zone.runOutsideAngular(() => Plotly.redraw(this.chartElm));\n          this.updateLegend();\n        }\n\n      });\n  }\n\n  private subscribeColorButtons(container) {\n    if (this.scaleExists) {\n      const legend = container.querySelector('.groups') as SVGGElement;\n      legend.style.transform = 'translate(-10px, 0)';\n    }\n    if (this.moveLegendToTitle) {\n      const graphTitle = container.querySelector('.gtitle') as SVGTextElement;\n      if (graphTitle) {\n        const endOfTitlePosition = (this.singleGraphContainer.nativeElement.offsetWidth / 2) + (graphTitle.getClientRects()[0].width / 2);\n        const legend = container.querySelector('.legend') as SVGGElement;\n        legend.style.transform = `translate(${endOfTitlePosition}px, 30px)`;\n        legend.classList.add('hide-text');\n      }\n    }\n    const traces = container.querySelectorAll('.traces');\n    for (const trace of traces) {\n      const textEl = trace.querySelector('.legendtext') as SVGTextElement;\n      const text = textEl ? this.extractColorKey(textEl.getAttribute('data-unformatted')) : '';\n\n      const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n      title.textContent = text.replace('?', '');\n      textEl.parentElement.appendChild(title);\n\n      const layers = trace.querySelector('.layers');\n      const parentEl = layers.parentElement;\n      parentEl.removeChild(layers); // Needed because z-index in svg is by element order\n      parentEl.appendChild(layers);\n      attachColorChooser(text, layers, this.colorHash, this.store);\n    }\n  }\n\n\n  private setAxisText(chart: ExtFrame, timeUnit?: { time: number; str: string }) {\n    const title = this.getAxisText(timeUnit);\n    if (!chart.layout.xaxis) {\n      chart.layout.xaxis = {};\n    }\n    if (title) {\n      chart.layout.xaxis.title = title;\n    }\n    return chart;\n  }\n\n  downloadGraphAsJson(chart: ExtFrame) {\n    let timeUnit;\n    if (this.xAxisType === ScalarKeyEnum.Timestamp) {\n      chart.data.forEach(graphData => {\n        if (!graphData.name) {\n          return;\n        }\n\n        timeUnit = typeof timeUnit === 'undefined' ? chooseTimeUnit(chart.data) : timeUnit;\n        const zeroTime = graphData.x[0] as number;\n        graphData.x = (graphData.x as number[]).map(timestamp => (timestamp - zeroTime) / timeUnit.time);\n        // graph.data[i].hovertext = graph.data[i].x.map(timestamp => timeInWords((timestamp - zeroTime)));\n      });\n    }\n    const exportName = `${chart.layout.title} -  ${this.getAxisText(timeUnit)}`;\n    const dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(chart.data));\n    const downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute('href', dataStr);\n    downloadAnchorNode.setAttribute('download', exportName + '.json');\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  }\n\n  getIcon() {\n    return {\n      width: 1792,\n      path: 'M1344 1344q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm256 0q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm128-224v320q0 40-28 68t-68 28h-1472q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h465l135 136q58 56 136 56t136-56l136-136h464q40 0 68 28t28 68zm-325-569q17 41-14 70l-448 448q-18 19-45 19t-45-19l-448-448q-31-29-14-70 17-39 59-39h256v-448q0-26 19-45t45-19h256q26 0 45 19t19 45v448h256q42 0 59 89z',\n      ascent: 1792,\n      descent: 0,\n      transform: 'translate(0, -100)'\n    };\n  }\n\n  getToggleLegendIcon() {\n    return {\n      width: 1000,\n      fill: 'rgb(77, 102, 255)',\n      path: 'M200,250H50a50,50,0,0,1,0-100H200a50,50,0,0,1,0,100Zm800-50a50,50,0,0,0-50-50H400a50,50,0,0,0,0,100H950A50,50,0,0,0,1000,200ZM250,400a50,50,0,0,0-50-50H50a50,50,0,0,0,0,100H200A50,50,0,0,0,250,400Zm750,0a50,50,0,0,0-50-50H400a50,50,0,0,0,0,100H950A50,50,0,0,0,1000,400ZM250,600a50,50,0,0,0-50-50H50a50,50,0,0,0,0,100H200A50,50,0,0,0,250,600Zm750,0a50,50,0,0,0-50-50H400a50,50,0,0,0,0,100H950A50,50,0,0,0,1000,600ZM250,800a50,50,0,0,0-50-50H50a50,50,0,0,0,0,100H200A50,50,0,0,0,250,800Zm750,0a50,50,0,0,0-50-50H400a50,50,0,0,0,0,100H950A50,50,0,0,0,1000,800Z',\n      ascent: 1000,\n      descent: 0,\n      transform: 'translate(0, -100)'\n    };\n  }\n\n  getMaximizeIcon() {\n    return {\n      width: 1000,\n      height: 1000,\n      fill: 'rgb(77, 102, 255)',\n      path: 'M920,80V436.38L771.51,287.89,559.4,500,500,440.6,712.11,228.49,563.62,80ZM500,559.4,440.6,500,228.49,712.11,80,563.62V920H436.38L287.89,771.51Z',\n      ascent: 1000,\n      descent: 0,\n      transform: 'translate(0, -100)'\n    };\n  }\n\n  getLogIcon(onOrOff: boolean) {\n    if (!onOrOff) {\n      return {\n        width: 1000,\n        path: 'M797,772a29.4,29.4,0,0,1-3.1-.16c-130-13.31-240.09-51.57-327.17-113.74-70.33-50.2-125.62-115.78-164.34-194.91C236.94,329.34,241.79,203.92,242,198.64A30,30,0,0,1,302,201.31h0c-.05,1.16-4.17,117.36,55.41,237.65,34.47,69.59,83.42,127.19,145.5,171.2,78.3,55.51,178.29,89.82,297.18,102A30,30,0,0,1,797,772Zm111,80.5H147.5V92H38v28H92.5v29H37v28H92.5v41H38v28H92.5v64H38v28H92.5V446H38v28H92.5V639H38v28H92.5V852.5H0v55H92.5V1000h55V907.5H908Z',\n        ascent: 1000,\n        descent: 0,\n        transform: 'translate(0, -100)'\n      };\n    }\n    return {\n      width: 1000,\n      path: 'M908,907.5H147.5V1000h-55V907.5H0v-55H92.5V120H37V92H147.5V852.5H908ZM883.79,239.14a30,30,0,0,0-41.65,8.07L672,499.21,471.48,411.78a59.49,59.49,0,0,0-117.89-.59l-154.22,71.6a30,30,0,1,0,25.26,54.42l151.74-70.45a59.48,59.48,0,0,0,71.85.33L667,562.5A29.91,29.91,0,0,0,679,565c.85,0,1.68,0,2.52-.12s1.65.11,2.47.11a30,30,0,0,0,24.89-13.21l183-271A30,30,0,0,0,883.79,239.14ZM894,627a30,30,0,0,0-41-11l-129.1,74.28a59.5,59.5,0,0,0-87.83,25.11L219.32,711H219a30,30,0,0,0-.31,60l424.43,4.47a59.48,59.48,0,0,0,106.65-30.82L883,668A30,30,0,0,0,894,627Z',\n      ascent: 1000,\n      descent: 0,\n      transform: 'translate(0, -100)'\n    };\n  }\n\n  getLogButtonTitle(onOrOff: boolean) {\n    return `Switch to ${onOrOff ? 'Linear' : 'Logarithmic'} scale`;\n  }\n\n  private getAxisText(timeUnit: { time: number; str: string }) {\n    switch (this.xAxisType) {\n      case ScalarKeyEnum.Iter:\n        return 'Iterations';\n      case ScalarKeyEnum.IsoTime:\n        return 'Wall Time';\n      case ScalarKeyEnum.Timestamp:\n        return (timeUnit && timeUnit.str) ? `${timeUnit.str} From Start` : 'Relative Time';\n      default:\n        return null;\n    }\n  }\n\n  private getHideButtonTitle() {\n    return this.chartElm.layout?.showlegend ? 'Show legend' : 'Hide legend';\n  }\n\n  validateResize($event: ResizeEvent): boolean {\n    return $event.rectangle.width > 300 && $event.rectangle.height > 250;\n  }\n\n  private maximizeGraph() {\n\n    this.dialog.open(GraphDisplayerComponent, {\n      data: {\n        // signed url are updated after originChart was cloned - need to update images urls!\n        chart: cloneDeep({\n          ...this.originalChart,\n          layout: {...this.originalChart.layout, images: this.chart.layout?.images}\n        }),\n        id: this.identifier,\n        xAxisType: this.xAxisType,\n        smoothWeight: this.smoothWeight,\n        darkTheme: this.isDarkTheme,\n        isCompare: this.isCompare,\n      },\n      panelClass: ['image-displayer-dialog', this.isDarkTheme ? 'dark-theme' : 'light-theme'],\n      height: '100%',\n      maxHeight: 'auto',\n      width: '100%',\n      maxWidth: 'auto'\n    });\n  }\n\n  private addParametersIfDarkTheme(object: Record<string, unknown>) {\n    return this.isDarkTheme ? object : {};\n  }\n\n  private addIterationString(name: string, iter: number) {\n    return name + ((iter || (this.graphsNumber > 1 && iter === 0)) ? ` - Iteration ${iter}` : '');\n  }\n}\n","<div class=\"status-icon-container\">\n  <div [ngClass]=\"status\" class=\"d-flex align-items-center justify-content-between\">\n    <div></div>\n    <div class=\"d-flex\">\n      <i [class]=\"'icon xs i-'+status+' bw'\" [smTooltip]=\"EXPERIMENTS_STATUS_LABELS[status]\"></i>\n      <div class=\"label\" *ngIf=\"showLabel\">\n        {{'  ' + (EXPERIMENTS_STATUS_LABELS[status] ? EXPERIMENTS_STATUS_LABELS[status] : '') | uppercase}}\n      </div>\n      <span class=\"view-only d-inline\" *ngIf=\"viewOnly === true; else developmentTemp\">  (view only) </span>\n      <ng-template #developmentTemp>\n        <span class=\"view-only d-inline\" *ngIf=\"development === true\">  (note: changes will be overridden if re-run locally) </span>\n      </ng-template>\n    </div>\n    <div class=\"right-buttons d-flex align-items-center\">\n      <div *ngIf=\"showMaximize\" (click)=\"maximizedClicked.emit()\"\n        smTooltip=\"View Full Screen\" matTooltipPosition=\"left\" class=\"d-flex fullscreen\">\n        <i class=\"al-icon al-ico-info-max pointer\"></i>\n      </div>\n      <div (click)=\"closeInfoClicked.emit()\" class=\"d-flex align-items-center\">\n        <i class=\"al-icon al-ico-dialog-x pointer\"></i>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../features/experiments/shared/experiments.const';\n\n@Component({\n  selector   : 'sm-experiment-info-header-status-icon-label',\n  templateUrl: './experiment-info-header-status-icon-label.component.html',\n  styleUrls  : ['./experiment-info-header-status-icon-label.component.scss']\n})\nexport class ExperimentInfoHeaderStatusIconLabelComponent {\n  @Input() showLabel               = true;\n  @Input() status                  = '';\n  @Input() viewOnly                = false;\n  @Input() development             = false;\n  @Input() showMaximize: boolean;\n  @Output() closeInfoClicked       = new EventEmitter();\n  @Output() maximizedClicked       = new EventEmitter();\n\n  public EXPERIMENTS_STATUS_LABELS = EXPERIMENTS_STATUS_LABELS;\n\n  constructor() {}\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../features/experiments/shared/experiments.const';\n\n@Component({\n  selector   : 'sm-experiment-info-header-status-progress-bar',\n  templateUrl: './experiment-info-header-status-progress-bar.component.html',\n  styleUrls  : ['./experiment-info-header-status-progress-bar.component.scss']\n})\nexport class ExperimentInfoHeaderStatusProgressBarComponent implements OnInit {\n  @Input() status;\n  @Input() editable          = true;\n  @Input() development        = false;\n  @Input() showMaximize: boolean;\n  @Output() closeInfoClicked = new EventEmitter();\n  @Output() maximizedClicked = new EventEmitter();\n\n  readonly EXPERIMENTS_STATUS_LABELS = EXPERIMENTS_STATUS_LABELS;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<div [class]=\"'progress-bar-container ' + status\">\n  <sm-experiment-info-header-status-icon-label\n    (closeInfoClicked)=\"closeInfoClicked.emit()\"\n    (maximizedClicked)=\"maximizedClicked.emit()\"\n    [showMaximize]=\"showMaximize\"\n    [status]=\"status\"\n    [viewOnly]=\"!editable\"\n    [development]=\"development\"\n    class=\"w-100\">\n  </sm-experiment-info-header-status-icon-label>\n</div>\n","import {Injectable} from '@angular/core';\nimport {CanDeactivate} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../ui-components/overlay/confirm-dialog/confirm-dialog.component';\n\n@Injectable()\nexport class GeneralLeavingBeforeSaveAlertGuard implements CanDeactivate<any> {\n  constructor(private dialog: MatDialog) {\n  }\n\n  public canDeactivate(component: any): Observable<boolean> | Promise<boolean> | boolean {\n\n    if (!component.isDirty) {\n      return true;\n    }\n\n\n    return Observable.create(observer => {\n      const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n        data: {\n          title: 'Attention',\n          body: 'You have unsaved changes. Do you want to stay on this page or leave without saving?',\n          yes: 'Leave',\n          no: 'Stay',\n          iconClass: 'i-alert',\n        }\n      });\n\n      confirmDialogRef.afterClosed().subscribe((confirmed) => {\n        if (confirmed) {\n          observer.next(true);\n          observer.complete();\n        } else {\n          observer.next(false);\n          observer.complete();\n        }\n      });\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {get} from 'lodash/fp';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {Store} from '@ngrx/store';\nimport {GuardBase} from '../../../shared/guards/guard-base';\n\n@Injectable()\nexport class LeavingBeforeSaveAlertGuard extends GuardBase implements CanDeactivate<any> {\n  private inEditMode: boolean;\n  constructor(private dialog: MatDialog, private store: Store<any>) {\n    super(store);\n    this.inEditMode$.subscribe(inEditModes => {\n      if (inEditModes.includes(true)) {\n        this.inEditMode = true;\n      } else {\n        this.inEditMode = false;\n      }\n    });\n  }\n\n  public canDeactivate(component: any, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n    const unGuard = get('root.queryParams.unGuard', nextState);\n    if (unGuard === 'true') {\n      return true;\n    }\n    if (!this.inEditMode) {\n      return true;\n    }\n\n    const confirmation$ = Observable.create(observer => {\n      const confirmDialogRef: MatDialogRef<any, boolean> = this.dialog.open(ConfirmDialogComponent, {\n        data: {\n          title    : 'Attention',\n          body     : 'You have unsaved changes. Do you want to stay on this page or leave without saving?',\n          yes      : 'Leave',\n          no       : 'Stay',\n          iconClass: 'i-alert',\n        }\n      });\n\n      confirmDialogRef.afterClosed().subscribe((confirmed) => {\n        if (confirmed) {\n          observer.next(true);\n          observer.complete();\n        } else {\n          observer.next(false);\n          observer.complete();\n        }\n      });\n    });\n\n    return confirmation$;\n  }\n}\n\n","import {combineLatest, Observable, ObservableInput, ObservedValueOf} from 'rxjs';\nimport {selectIsExperimentInEditMode} from '../../webapp-common/experiments/reducers';\nimport {selectIsModelInEditMode} from '../../webapp-common/models/reducers';\nimport {Store} from '@ngrx/store';\nimport {debounceTime} from 'rxjs/operators';\n\nexport class GuardBase {\n  public inEditMode$: Observable<[ObservedValueOf<ObservableInput<any>>, ObservedValueOf<ObservableInput<any>>]>;\n  constructor(store: Store<any>) {\n    this.inEditMode$ = combineLatest([\n      store.select(selectIsExperimentInEditMode),\n      store.select(selectIsModelInEditMode)\n    ]).pipe(debounceTime(0));\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MatListModule} from \"@angular/material/list\";\n\n\n@NgModule({\n  imports: [\n    MatExpansionModule,\n    MatDividerModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatAutocompleteModule,\n    MatChipsModule\n  ],\n  exports: [\n    MatExpansionModule,\n    MatDividerModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatMenuModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatSlideToggleModule,\n    MatAutocompleteModule,\n    MatChipsModule,\n    MatSidenavModule,\n    MatListModule,\n  ],\n  declarations: []\n})\nexport class SMMaterialModule {\n}\n","import {Input, Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'advancedFilter',\n})\nexport class AdvancedFilterPipe implements PipeTransform {\n\n  transform(arr: any[], query: string): any[] {\n    if (!arr || !query) {\n      return arr;\n    }\n    return arr.filter(item => JSON.stringify(item).toLowerCase().includes(query.toLowerCase()));\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'breadcrumbsEllipsis'\n})\nexport class BreadcrumbsEllipsisPipe implements PipeTransform {\n\n  transform(value: string, ...args: unknown[]) {\n\n    const count = (value.match(/\\//g) || []).length;\n\n    if (count > 1) {\n      return `<div class=\"sub-path\">${value.substring(0, value.indexOf('/'))}</div>/<i class=\"al-ico-dots al-icon sm\"></i><div class=\"sub-path\">${value.substr(value.lastIndexOf('/'))}</div>`;\n    }\n    return `<div class=\"sub-path double-width\">${value}</div>`;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'duration',\n  pure: true\n})\nexport class DurationPipe implements PipeTransform {\n\n  transform(value: any): any {\n\n    if (!value && value !== 0) {\n      return '';\n    }\n    if (value === 0) {\n      return '>1 s';\n    } else {\n      const result = [];\n      let units = 's';\n      let calcSeconds = value;\n      // 2- Extract hours:\n      const days = Math.floor(calcSeconds / 86400);\n      if (days) {\n        units = 'd';\n        result.push(days.toString().padStart(days.toString().length, '0'));\n      }\n      calcSeconds = calcSeconds % 86400;\n      const hours = Math.floor(calcSeconds / 3600) % 100;\n      if (days && !hours) {\n        return `${result}${units}`;\n      } else if (hours) {\n        if(units === 'd') {\n          result.push(hours.toString().padStart(2, '0'));\n        } else {\n          result.push(hours.toString());\n        }\n        if (result.length === 2) {\n          return `${result.join(':')}${units}`;\n        }\n        units = 'h';\n      }\n      calcSeconds = calcSeconds % 3600; // seconds remaining after extracting hours\n      // 3- Extract minutes:\n      const minutes = Math.floor(calcSeconds / 60) % 100;\n      if (hours && !minutes) {\n        return `${result}${units}`;\n      } else if (minutes) {\n        result.push(minutes.toString().padStart(2, '0'));\n        if (result.length === 2) {\n          return `${result.join(':')}${units}`;\n        }\n        units = 'm';\n      }\n      // 4- Keep only seconds not extracted to minutes:\n      calcSeconds = calcSeconds % 60; // seconds remaining after extracting hours\n      // 3- Extract minutes:\n      const seconds = Math.floor(calcSeconds) % 100;\n      if (seconds) {\n        result.push(seconds.toString().padStart(2, '0'));\n        if (result.length === 2) {\n          return `${result.join(':')}${units}`;\n        }\n        units = 's';\n      }\n      return `${result.join(':')}${units}`;\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'filterInternal'\n})\nexport class FilterInternalPipe implements PipeTransform {\n  transform(arr) {\n    return arr?.filter(item=> !item.key.startsWith('_'));\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {get} from 'lodash/fp';\n\n@Pipe({\n  name: 'filter',\n})\nexport class FilterPipe implements PipeTransform {\n\n  transform(arr, query: string | string[], key?: string) {\n    if (!arr || !query) {\n      return arr;\n    }\n\n    if (Array.isArray(query)) {\n      return arr.filter(item => !(query as string[]).includes((key ? get(key, item) : item)));\n    } else if (typeof query === 'string') {\n      return arr.filter(item => (key ? get(key, item) : item)?.toLowerCase().includes(query?.toLowerCase()));\n    }\n    return arr;\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'filterLast',\n})\nexport class FilterLast implements PipeTransform {\n  transform(items: any[]): any[] {\n    const itemsCopy = [...items];\n    itemsCopy.pop();\n    return itemsCopy;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'filterOut',\n})\nexport class FilterOutPipe implements PipeTransform {\n\n  transform(arr: any[], field: string, value: string): any[] {\n    if (!arr || !field || !value) {\n      return arr;\n    }\n    return arr.filter(item => item[field] !== value);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'hideHashTitle',\n  pure: true\n})\nexport class HideHashTitlePipe implements PipeTransform {\n\n  transform(value: string, args?: any): any {\n    return value.replace(/^.{0,5}hash_/, '');\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'hideHash',\n  pure: true\n})\nexport class HideHashPipe implements PipeTransform {\n\n  transform(value: string, args?: any): any {\n    if (value.startsWith('hash_') || value.startsWith('a_hash_') || value === '') {\n      return '';\n    } else {\n      return value + ' : ';\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {escapeRegex} from '../utils/shared-utils';\n\n@Pipe({\n  name: 'highlightSearchText'\n})\nexport class HighlightSearchTextPipe implements PipeTransform {\n\n  transform(value: any, args: any): any {\n    if (!args || typeof args !== 'string' ) {\n      return value;\n    }\n    const re           = new RegExp(escapeRegex(args), 'gi'); // 'gi' for case insensitive and can use 'g' if you want the search to be case sensitive.\n    const originalTerm = value.match(re) && value.match(re)[0];\n    if (originalTerm) {\n      return value.replace(re, '<b>' + originalTerm + '</b>');\n    } else {\n      return value;\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'idToObjectsArray',\n})\nexport class IdToObjectsArrayPipe implements PipeTransform {\n\n  transform(arr: string[]): any[] {\n    if (!arr) {\n      return arr;\n    }\n    return arr.map(parameter => ({id: parameter}));\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'initials'\n})\nexport class InitialsPipe implements PipeTransform {\n\n  transform(value: string): unknown {\n    if (value !== null) {\n      return value.split(' ').map(part => part[0]).join('');\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {last} from 'lodash/fp';\n\n@Pipe({\n  name: 'isAudio'\n})\nexport class IsAudioPipe implements PipeTransform {\n  static audioExtensions = ['wav', 'mp3', 'flac', 'mid', 'au', 'ra', 'snd'];\n\n  transform(value: string, args?: any): any {\n    if(!value){\n      return false;\n    }\n    const path = value.split('?')[0];\n    return IsAudioPipe.audioExtensions.includes(last(path.split('.')).toLowerCase());\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {last} from 'lodash/fp';\n\n@Pipe({\n  name: 'isVideo'\n})\nexport class IsVideoPipe implements PipeTransform {\n  static videoExtensions = ['ogv', 'mp4', 'webm', 'ogg', 'm4v', 'avi', 'mov', 'wmv'];\n\n  transform(value: string, args?: any): any {\n    if(!value){\n      return false;\n    }\n    const path = value.split('?')[0];\n    return IsVideoPipe.videoExtensions.includes(last(path.split('.')).toLowerCase());\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'menuItemText'\n})\nexport class MenuItemTextPipe implements PipeTransform {\n\n  transform(numberOfItems: number, itemName: string, isMultiple = true): string {\n    if (!isMultiple) {\n      return itemName;\n    }\n    if (numberOfItems > 0) {\n      return `${itemName} (${numberOfItems} item${numberOfItems > 1 ? 's' : ''}) `;\n    }\n    return itemName;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'msToHours',\n  pure: true\n})\nexport class MsToHoursPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n\n    if (!value) {\n      return '';\n    } else {\n      let seconds = value / 1000;\n      // 2- Extract hours:\n      const hours = parseInt((seconds / 3600).toString(), 10); // 3,600 seconds in 1 hour\n\n      seconds = seconds % 3600; // seconds remaining after extracting hours\n      // 3- Extract minutes:\n      const minutes = ('0' + parseInt((seconds / 60).toString(), 10)).slice(-2); // 60 seconds in 1 minute\n      // 4- Keep only seconds not extracted to minutes:\n      seconds = seconds % 60;\n      return ('(' + hours + ':' + minutes + ' hrs)');\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'msToSec',\n  pure: true\n})\nexport class MsToSecPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n\n    if (!value) {\n      return '';\n    } else {\n      if (value < 1000) {\n        return (value + ' ms');\n      }\n      const result = [];\n      let seconds = value / 1000;\n      // 2- Extract hours:\n      //      const hours = ('0' + parseInt((seconds / 3600).toString(), 10)).slice(-2); // 3,600 seconds in 1 hour\n      const hours = Math.floor(seconds / 3600) % 100;\n      if (hours) {\n        result.push(hours.toString().padStart(2, '0') + 'h');\n      }\n\n      seconds = seconds % 3600; // seconds remaining after extracting hours\n      // 3- Extract minutes:\n      const minutes = Math.floor(seconds / 60) % 100;\n      if (minutes) {\n        result.push(minutes.toString().padStart(2, '0') + 'm');\n      }\n      //      const minutes = ('0' + parseInt((seconds / 60).toString(), 10)).slice(-2); // 60 seconds in 1 minute\n      // 4- Keep only seconds not extracted to minutes:\n      result.push(Math.floor(seconds % 60).toString().padStart(2, '0') + 's');\n\n      return result.join(' ');\n    }\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {NA} from '../../../app.constants';\n\n@Pipe({\n  name: 'NA'\n})\nexport class NAPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return value ? value : NA;\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'noUnderscore'\n})\nexport class NoUnderscorePipe implements PipeTransform {\n\n  transform(value: string, args?: any): any {\n    if (value) {\n      value = value.replace(/[_-]/g, ' ');\n    }\n    return value;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'numberToK'\n})\nexport class NumberToKPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    let showFloat = false;\n    let number;\n    if(value < 1000 || isNaN(value)) {\n      return value;\n    }\n    let str = '';\n    let power = 1;\n    if (value >= 1000 && value < 1000 * 1000) {\n      power = 3;\n      str   = 'K';\n      if(value > 999 && value <= 9999 ) {\n        showFloat = true;\n      }\n    }\n    else if(value >= 1000 * 1000 && value < 1000 * 1000 * 1000) {\n      power = 6;\n      str   = 'M';\n    }\n    else {\n      power = 9;\n        str   = 'B';\n    }\n    if( showFloat ) {\n      number = parseFloat((value / (Math.pow(10, power))).toFixed(1));\n    }\n    else {\n      number = Math.floor((value / (Math.pow(10, power))));\n    }\n\n    return number + '' + str;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'projectLocation'\n})\nexport class ProjectLocationPipe implements PipeTransform {\n\n  transform(value: string, ...args: unknown[]): string {\n    if (!value) {\n      return '';\n    }\n    const lastSeparator = value.lastIndexOf('/');\n    return lastSeparator > 0 ? value.substring(0, lastSeparator) : 'Projects root';\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {getOr} from 'lodash/fp';\n\n@Pipe({\n  name: 'replaceViaMapPipe',\n})\nexport class ReplaceViaMapPipe implements PipeTransform {\n\n  transform(value: string, replaceMap: { [key: string]: string }): string {\n    if (!value || !replaceMap) {\n      return value;\n    }\n    return getOr(value, value, replaceMap);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n\n  constructor(protected sanitizer: DomSanitizer) {}\n\n  public transform(value: any, type: 'html' | 'style' | 'script' | 'url' | 'resourceUrl'): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n    switch (type) {\n      case 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\n      case 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\n      case 'script': return this.sanitizer.bypassSecurityTrustScript(value);\n      case 'url': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      case 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      default: throw new Error(`Invalid safe type specified: ${type}`);\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'safeUrlParameter'\n})\nexport class safeAngularUrlParameterPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if (!value) {\n      return;\n    }\n    return encodeURIComponent(value);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'camelToTitle',\n  pure: true\n})\nexport class CamelToTitlePipe implements PipeTransform {\n\n  transform(value: string): string {\n\n    if (!value || typeof(value) !== 'string') {\n      return value;\n    }\n\n    const words = value.match(/[A-Za-z][a-z]*/g);\n\n    return words.map(this.capitalize).join(' ');\n  }\n\n  capitalize(word) {\n    return word.charAt(0).toUpperCase() + word.substring(1);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'FilenameFromPath'\n})\nexport class FilenameFromPath implements PipeTransform {\n\n  transform(value: string, args?: any): any {\n    if (value) {\n      value = value.replace(/.*[^\\/]\\//, '').replace(/\\?.*$/, '');\n    }\n    return value || '';\n\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'floor'\n})\nexport class FloorPipe implements PipeTransform {\n\n  transform(value: number, decimalDigits= 0): number {\n    const magicNum = Math.pow(10, decimalDigits);\n\n    return Math.floor(value * magicNum) / magicNum;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'join'\n})\nexport class JoinPipe implements PipeTransform {\n\n  defaultSeparator = ', ';\n  transform(value: Array<string>, separator?: any): any {\n    if(!Array.isArray(value)) {\n      throw 'Join pipe accept arrays only.';\n    }\n\n    return value.join(separator || this.defaultSeparator);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n  name: 'keyval'\n})\nexport class KeyvalPipe implements PipeTransform {\n\n  transform(arr: Array<object>, key, value): any {\n\n    if(!Array.isArray(arr)) {\n      if(!arr) {\n        return ''\n      }\n      throw 'Keyval pipe accept arrays only.';\n    }\n    if(!key) {\n      throw 'Keyval pipe key is required.';\n    }\n    if(!value) {\n      throw 'Keyval pipe value is required.';\n    }\n\n    const map = arr.reduce((map, obj) => {\n      if(!obj[key]) {\n        throw `Keyval pipe: key: ${key} is not object: .` + JSON.stringify(obj);\n      }\n      if(!obj[value]) {\n        throw `Keyval pipe: value: ${value} is not exists on object: .` + JSON.stringify(obj);\n      }\n      map[obj[key]] = obj[value];\n      return map;\n    }, {});\n\n    let str = '';\n    let first = true;\n    Object.entries(map).forEach(([key, value]) => {\n      str += first ? `${key}=${value}` : ',' + `${key}=${value}`;\n      first = false;\n    });\n\n    return str;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {uniqBy} from 'lodash/fp';\n\n@Pipe({\n  name: 'uniqueBy'})\nexport class UniqueByPipe implements PipeTransform {\n\n  transform(arr: Array<any>, key: string | (any) | null): any {\n\n    if (!Array.isArray(arr)) {\n      return '';\n    }\n\n    return uniqBy(key, arr);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'keyValue'\n})\nexport class KeyValuePipe implements PipeTransform {\n\n  transform(value: Map<any, any>, args?: any): Array<{key: any, value: any}> {\n    return Object.entries(value).map(([key, val]) => ({key, value: val}));\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'toExponential'\n})\nexport class ToExponentialPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if (value === 0) {\n      return 0;\n    }\n    if (!value) {\n      return;\n    }\n    return Number.parseFloat(value).toExponential(3);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'timeTillNow'\n})\nexport class TimeTillNowPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    if (!value) {\n      return '';\n    }\n    const now       = new Date();\n    const startDate = new Date(value);\n    const ms = now.getTime() - startDate.getTime();\n    let seconds = ms / 1000;\n    // 2- Extract hours:\n    const hours = parseInt((seconds / 3600).toString(), 10); // 3,600 seconds in 1 hour\n\n    seconds = seconds % 3600; // seconds remaining after extracting hours\n    // 3- Extract minutes:\n    const minutes = ('0' + parseInt((seconds / 60).toString(), 10)).slice(-2); // 60 seconds in 1 minute\n    // 4- Keep only seconds not extracted to minutes:\n    seconds = seconds % 60;\n    return ( hours + ':' + minutes + ' hrs');\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {isReadOnly} from '../utils/shared-utils';\n\n@Pipe({\n  name: 'hasExampleItem'\n})\nexport class HasExampleItemPipe implements PipeTransform {\n\n  transform(value: Array<any>, args?: any): any {\n    return value.find(item => isReadOnly(item));\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {IOption} from '@common/shared/ui-components/inputs/select-autocomplete-with-chips/select-autocomplete-with-chips.component';\n\n@Pipe({\n  name: 'selectOptionValueToLabel',\n})\nexport class SelectOptionValueToLabelPipe implements PipeTransform {\n  transform(value: string, options: Array<IOption>): string {\n    if (!options) {\n      return value;\n    }\n    const option = options.find(option => option.value === value);\n    return option ? option.label : value;\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'labelValue'\n})\nexport class LabelValuePipe implements PipeTransform {\n  constructor() {\n  }\n\n  transform(value: string[], args?: any): Array<{ label: string; value: string }> {\n    if (!value) {\n      return;\n    }\n    if (!value.every(item => typeof item === 'string')) {\n      return value as any;\n    }\n    return value.map(item => ({label: item === '*' ? 'Any Label' : item, value: item}));\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'filterById',\n})\nexport class FilterByIdPipe implements PipeTransform {\n\n  transform(obj: any, id: string, mapTo: string): any[] {\n    if (!obj || !id) {\n      return obj;\n    }\n    return obj.filter(parameter=> parameter.id!== id).map(parameter => parameter[mapTo])\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'toPropertyArray',\n})\nexport class ToPropertyArrayPipe implements PipeTransform {\n\n  transform(arr: any[], property: string): string[] {\n    if (!arr || !property) {\n      return arr;\n    }\n    return arr.map(parameter=> parameter[property]);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as uuid from 'uuid';\n\n@Pipe({\n  name: 'uuid'\n})\nexport class UuidPipe implements PipeTransform {\n\n  transform(value: string): string {\n    return `${value}-${uuid.v4()}`;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {isEmpty} from 'lodash/fp';\n\n@Pipe({\n  name: 'isEmpty'\n})\nexport class IsEmptyPipe implements PipeTransform {\n\n  transform(value: unknown): unknown {\n    return isEmpty(value);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CamelToTitlePipe} from './camel-to-title.pipe';\nimport {FilenameFromPath} from './filename-from-path.pipe';\nimport {FilterPipe} from './filter.pipe';\nimport {FloorPipe} from './floor.pipe';\nimport {JoinPipe} from './join.pipe';\nimport {KeyvalPipe} from './keyval.pipe';\nimport {NoUnderscorePipe} from './no-underscore.pipe';\nimport {NumberToKPipe} from './number-to-k.pipe';\nimport {UniqueByPipe} from './unique-by.pipe';\nimport {KeyValuePipe} from './key-value.pipe';\nimport {NAPipe} from './na.pipe';\nimport {MsToHoursPipe} from './ms-to-hours.pipe';\nimport {SortPipe} from './sort.pipe';\nimport {ToExponentialPipe} from './to-exponential.pipe';\nimport {HighlightSearchTextPipe} from './highlight-search-text.pipe';\nimport {HideHashPipe} from './hide-hash.pipe';\nimport {TimeAgoPipe} from './timeAgo';\nimport {TimeTillNowPipe} from './time-till-now.pipe';\nimport {MsToSecPipe} from './ms-to-sec.pipe';\nimport {HasExampleItemPipe} from './has-example-item.pipe';\nimport {AdvancedFilterPipe} from './advanced-filter.pipe';\nimport {SafePipe} from './safe.pipe';\nimport {SelectOptionValueToLabelPipe} from './selectOptionValueToLabel.pipe';\nimport {IsVideoPipe} from './is-video.pipe';\nimport {ToPercentagePipe} from './to-precentage.pipe';\nimport {SimpleFilterPipe} from './simple-filter.pipe';\nimport {IsAudioPipe} from './is-audio.pipe';\nimport {ShowSelectedFirstPipe} from './show-selected-first.pipe';\nimport {CountPipe} from './count.pipe';\nimport {LabelValuePipe} from './label-value.pipe';\nimport {HideHashTitlePipe} from './hide-hash-title.pipe';\nimport {safeAngularUrlParameterPipe} from './safeAngularUrlParameter.pipe';\nimport {ReplaceViaMapPipe} from './replaceViaMap';\nimport {FilterByIdPipe} from './filterById.pipe';\nimport {FilterOutPipe} from './filterOut.pipe';\nimport {DurationPipe} from \"./duration.pipe\";\nimport {BreadcrumbsEllipsisPipe} from './breadcrumbs-ellipsis.pipe';\nimport {ShortProjectNamePipe} from './short-project-name.pipe';\nimport {ProjectLocationPipe} from \"./project-location.pipe\";\nimport {StringIncludedInArrayPipe} from './string-included-in-array.pipe';\nimport {FilterLast} from \"./filterLast.pipe\";\nimport {ToPropertyArrayPipe} from \"@common/shared/pipes/toPropertyArray.pipe\";\nimport {MenuItemTextPipe} from \"@common/shared/pipes/menu-item-text.pipe\";\nimport {InitialsPipe} from './initials.pipe';\nimport {UuidPipe} from './uuid.pipe';\nimport {FilterInternalPipe} from './filter-internal.pipe';\nimport {IdToObjectsArrayPipe} from \"./idToObjectsArray.pipe\";\nimport {IsEmptyPipe} from './is-empty.pipe';\nimport {HighlightSearchPipe} from './highlight-search.pipe';\nimport { TemplateInjectorPipe } from './template-injector.pipe';\nimport { TestConditionalPipe } from './test-conditional.pipe';\nimport { GroupHasErrorsPipe } from './group-has-errors.pipe';\nimport { FormgroupHasRequiredFieldPipe } from './formgroup-has-required-field.pipe';\n\nconst pipes = [\n  CamelToTitlePipe, FilenameFromPath, FilterPipe, FloorPipe, KeyValuePipe, NAPipe, SortPipe, IsVideoPipe, IsAudioPipe,FilterInternalPipe,UuidPipe,\n  JoinPipe, KeyvalPipe, LabelValuePipe, NoUnderscorePipe, NumberToKPipe, UniqueByPipe, MsToHoursPipe, MsToSecPipe, DurationPipe,\n  ToExponentialPipe, HighlightSearchTextPipe, HighlightSearchPipe, HideHashPipe, HideHashTitlePipe, TimeAgoPipe, TimeTillNowPipe, HasExampleItemPipe, safeAngularUrlParameterPipe,\n  AdvancedFilterPipe, SafePipe, SelectOptionValueToLabelPipe, ToPercentagePipe, ReplaceViaMapPipe, FilterByIdPipe, FilterLast, FilterOutPipe, SimpleFilterPipe,\n  BreadcrumbsEllipsisPipe, ShortProjectNamePipe, ProjectLocationPipe,StringIncludedInArrayPipe, ToPropertyArrayPipe, MenuItemTextPipe, InitialsPipe, IdToObjectsArrayPipe, IsEmptyPipe,\n  TemplateInjectorPipe, TestConditionalPipe, GroupHasErrorsPipe, FormgroupHasRequiredFieldPipe\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [pipes, ShowSelectedFirstPipe, CountPipe ],\n  providers: [pipes],\n    exports: [pipes, ShowSelectedFirstPipe, CountPipe]\n})\nexport class SharedPipesModule {\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {escapeRegex} from '../utils/shared-utils';\n\n@Pipe({\n  name: 'highlightSearch'\n})\nexport class HighlightSearchPipe implements PipeTransform {\n\n  transform(value: any, args: any): any {\n    if (!args || typeof args !== 'string' ) {\n      return value;\n    }\n    const re           = new RegExp(escapeRegex(args), 'gi'); // 'gi' for case insensitive and can use 'g' if you want the search to be case sensitive.\n    const originalTerm = value.match(re) && value.match(re)[0];\n    if (originalTerm) {\n      return value.replace(re, '<span class=\"highlight-text\">' + originalTerm + '</span>');\n    } else {\n      return value;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {getOr} from 'lodash/fp';\n\n@Pipe({\n  name: 'templateInjector',\n})\nexport class TemplateInjectorPipe implements PipeTransform {\n\n  transform(formChanged, formGroup:any, index: number): string {\n    if(!formGroup.collapsibleTitleTemplate){\n      return `${formGroup.title || formGroup.name || 'Item '} #${index+1}`\n    }\n    const nameValueMap = {};\n    formGroup.fields.forEach(field=> nameValueMap[field.name] = field.val )\n    const match = new RegExp(/\\$\\{[ ]*([.a-zA-Z_-]*)[ ]*\\}/ig);\n    const variables = Array.from(formGroup.collapsibleTitleTemplate.matchAll(match));\n    let label = formGroup.collapsibleTitleTemplate;\n    variables.forEach(variableArr => {\n      const getter = variableArr[1];\n      const val = getOr('', getter, nameValueMap);\n      label = label.replace('${index}', (index+1).toString());\n      label = label.replace(variableArr[0], val===null? '': val);\n      label = label? label: `${formGroup.title || formGroup.name || 'Item '} #${index+1}`\n    });\n    return label;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'testConditional',\n})\nexport class TestConditionalPipe implements PipeTransform {\n\n  transform(form: any, groupedApplicationForm: [string, any[]][], conditional: {\n    op: string, entries: [{\n      name: string,\n      value: string\n    }]\n  }, groupName?: string, groupIndex?: number): boolean {\n    let conditions = []\n    conditional?.entries?.forEach(ent => {\n        const fieldVal = groupName ?\n          groupedApplicationForm.filter(group => group[0] === groupName)[0][1][groupIndex].fields.filter(field => field.name === ent.name)[0].val :\n          groupedApplicationForm.filter(field => field[0] === ent.name)[0][1][0].fields[0].val\n        const r = new RegExp(ent.value);\n        conditions.push(r.test(fieldVal));\n      }\n    )\n    if (conditional?.op === 'or') {\n      return conditions.some(con => con);\n    } else {\n      return conditions.filter((con) => !con).length === 0;\n    }\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'groupHasErrors'\n})\nexport class GroupHasErrorsPipe implements PipeTransform {\n  transform(formValueChanged, invalid): string {\n    return invalid? 'Group configuration is invalid': '';\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'formgroupHasRequiredField'\n})\nexport class FormgroupHasRequiredFieldPipe implements PipeTransform {\n\n  transform(formGroup: any): string {\n    return formGroup.fields.some(field => field.required)? '*': '';\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'shortProjectName'\n})\nexport class ShortProjectNamePipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (!value) {\n      return '';\n    }\n    const shortName = value.substring(value.lastIndexOf('/') + 1);\n    return `${((value.startsWith('[') && !shortName.startsWith('['))? '[' : '') + shortName }`;\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\nexport function sortByArr(a, b, colsOrder=[]) {\n  const indexOfA = colsOrder.indexOf(a);\n  const indexOfB = colsOrder.indexOf(b);\n  return ((indexOfA >= 0) ? indexOfA : 99) - ((indexOfB >= 0) ? indexOfB : 99);\n}\n\n@Pipe({\n  name: 'showSelectedFirst'\n})\nexport class ShowSelectedFirstPipe implements PipeTransform {\n  transform(arr: Array<any>, selectedArr: Array<any>): Array<any> {\n    if (arr.length > 0 && selectedArr.length > 0) {\n      return arr.sort((a, b) => sortByArr(a.value, b.value, selectedArr));\n    } else {\n      return arr;\n    }\n  }\n}\n\n\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'simpleFilter'\n})\nexport class SimpleFilterPipe implements PipeTransform {\n  transform(items: any[], term: string): any {\n    if (!term) {\n      return items;\n    }\n    return items.filter(item => item.toLowerCase().includes(term.toLowerCase()));\n  }\n}\n\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {sortByField} from '../../tasks/tasks.utils';\n\n@Pipe({\n  name: 'sort'\n})\nexport class SortPipe implements PipeTransform {\n\n  transform(arr: Array<any>, field: string): any[] {\n    return field ? sortByField(arr, field) : [...arr].sort();\n  }\n}\n\n@Pipe({\n  name: 'sortHumanize'\n})\nexport class SortHumanizePipe implements PipeTransform {\n  private collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\n\n  transform(array: Array<any>, field?: string): any[] {\n    const arr = [...array];\n    if(field) {\n      arr.sort((a, b) => this.collator.compare(a[field], b[field]));\n    } else {\n      arr.sort((a, b) => this.collator.compare(a, b));\n    }\n    return arr;\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'stringIncludedInArray'\n})\nexport class StringIncludedInArrayPipe implements PipeTransform {\n\n  transform(value: string, stingsArr: string[] = []): boolean {\n    if (!value) {\n      return false;\n    }\n    return stingsArr.includes(value);\n  }\n\n}\n","import {Pipe, PipeTransform, NgZone, ChangeDetectorRef, OnDestroy} from '@angular/core';\n\n@Pipe({\n  name: 'timeAgo',\n  pure: false\n})\nexport class TimeAgoPipe implements PipeTransform, OnDestroy {\n  private timer: number;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef, private ngZone: NgZone) {\n  }\n\n  transform(value: any) {\n    if (!(Date.parse(value) > 0 && !Number.isInteger(value))) {\n      return value;\n    }\n    this.removeTimer();\n    // let d            = this.convertUTCDateToLocalDate(new Date(value));\n    if (!value.endsWith('+00:00')) {\n      value = value + '+00:00';\n    }\n    const d            = new Date(value);\n    const now          = new Date();\n    const seconds      = Math.round(Math.abs((now.getTime() - d.getTime()) / 1000));\n    const timeToUpdate = (Number.isNaN(seconds)) ? 1000 : this.getSecondsUntilUpdate(seconds) * 1000;\n    this.timer         = this.ngZone.runOutsideAngular(() => {\n      if (typeof window !== 'undefined') {\n        return window.setTimeout(() => {\n          this.ngZone.run(() => this.changeDetectorRef.markForCheck());\n        }, timeToUpdate);\n      }\n      return null;\n    });\n    const minutes      = Math.round(Math.abs(seconds / 60));\n    const hours        = Math.round(Math.abs(minutes / 60));\n    const days         = Math.round(Math.abs(hours / 24));\n    const months       = Math.round(Math.abs(days / 30.416));\n    const years        = Math.round(Math.abs(days / 365));\n    if (Number.isNaN(seconds)) {\n      return '';\n    } else if (seconds <= 45) {\n      return 'a few seconds ago';\n    } else if (seconds <= 90) {\n      return 'a minute ago';\n    } else if (minutes <= 45) {\n      return minutes + ' minutes ago';\n    } else if (minutes <= 90) {\n      return 'an hour ago';\n    } else if (hours <= 22) {\n      return hours + ' hours ago';\n    } else if (hours <= 36) {\n      return 'a day ago';\n    } else if (days <= 25) {\n      return days + ' days ago';\n    } else if (days <= 45) {\n      return 'a month ago';\n    } else if (days <= 345) {\n      return months + ' months ago';\n    } else if (days <= 545) {\n      return 'a year ago';\n    } else { // (days > 545)\n      return years + ' years ago';\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.removeTimer();\n  }\n\n  private removeTimer() {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  private getSecondsUntilUpdate(seconds: number) {\n    const min = 60;\n    const hr  = min * 60;\n    const day = hr * 24;\n    if (seconds < min) { // less than 1 min, update every 2 secs\n      return 2;\n    } else if (seconds < hr) { // less than an hour, update every 30 secs\n      return 30;\n    } else if (seconds < day) { // less then a day, update every 5 mins\n      return 300;\n    } else { // update every hour\n      return 3600;\n    }\n  }\n\n  convertUTCDateToLocalDate(date) {\n    if (date) {\n      const newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n      const offset  = date.getTimezoneOffset() / 60;\n      const hours   = date.getHours();\n      newDate.setHours(hours - offset);\n      return newDate;\n    }\n    return;\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'toPercentage'\n})\nexport class ToPercentagePipe implements PipeTransform {\n\n  transform(value: any, ...args: any[]): any {\n    if (value !== -1) {\n      return Math.floor(value * 100);\n    } else {\n      return null;\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalComponent} from './portal.component';\nimport {PortalModule} from '@angular/cdk/portal';\n\n@NgModule({\n  declarations: [PortalComponent],\n  exports     : [PortalComponent],\n  imports     : [\n    CommonModule,\n    PortalModule\n  ]\n})\nexport class SMPortalModule {\n}\n","import {ISmAction} from '../../core/models/actions';\nimport {Project} from '../../../business-logic/model/projects/project';\nimport {CreationStatusEnum} from './project-dialog.reducer';\nimport {ProjectsCreateRequest} from '../../../business-logic/model/projects/projectsCreateRequest';\nimport {createAction, props} from \"@ngrx/store\";\n\nconst CREATE_PROJECT_DIALOG_PREFIX = 'CREATE_PROJECT_DIALOG_';\n\nexport const CREATE_PROJECT_ACTIONS = {\n  GET_PROJECTS           : CREATE_PROJECT_DIALOG_PREFIX + 'GET_PROJECTS',\n  SET_PROJECTS           : CREATE_PROJECT_DIALOG_PREFIX + 'SET_PROJECTS',\n  RESET_STATE            : CREATE_PROJECT_DIALOG_PREFIX + 'RESET_STATE',\n  CREATE_NEW_PROJECT     : CREATE_PROJECT_DIALOG_PREFIX + 'CREATE_NEW_PROJECT',\n  SET_CREATION_STATUS    : CREATE_PROJECT_DIALOG_PREFIX + 'SET_CREATION_STATUS',\n  NAVIGATE_TO_NEW_PROJECT: CREATE_PROJECT_DIALOG_PREFIX + 'NAVIGATE_TO_NEW_PROJECT'\n};\n\n\nexport class GetProjects implements ISmAction {\n  readonly type = CREATE_PROJECT_ACTIONS.GET_PROJECTS;\n\n  constructor() {\n  }\n}\n\nexport class SetProjects implements ISmAction {\n  readonly type = CREATE_PROJECT_ACTIONS.SET_PROJECTS;\n  public payload: { projects: Array<Project> };\n\n  constructor(projects: Array<Project>) {\n    this.payload = {projects};\n  }\n}\n\nexport class ResetState implements ISmAction {\n  readonly type = CREATE_PROJECT_ACTIONS.RESET_STATE;\n\n  constructor() {\n  }\n}\n\n\n\nexport class CreateNewProject implements ISmAction {\n  readonly type = CREATE_PROJECT_ACTIONS.CREATE_NEW_PROJECT;\n\n  constructor(public payload: ProjectsCreateRequest) {\n  }\n}\n\nexport class NavigateToNewProject implements ISmAction {\n  readonly type = CREATE_PROJECT_ACTIONS.NAVIGATE_TO_NEW_PROJECT;\n\n  constructor(public payload: string) {\n    this.payload = payload;\n  }\n}\nexport class SetNewProjectCreationStatus implements ISmAction {\n  readonly type = CREATE_PROJECT_ACTIONS.SET_CREATION_STATUS;\n  public payload: { creationStatus: CreationStatusEnum };\n\n  constructor(creationStatus: CreationStatusEnum) {\n    this.payload = {creationStatus};\n  }\n}\n\nexport const moveProject = createAction(\n  CREATE_PROJECT_DIALOG_PREFIX + 'MOVE_PROJECT',\n  props<{project?: string; new_location?: string; name: string}>()\n);\n","<form #projectForm='ngForm' class=\"d-flex flex-column\">\n  <mat-form-field appearance=\"outline\" hideRequiredMarker class=\"mat-light\">\n    <mat-label>Project name</mat-label>\n    <mat-error *ngIf=\"name.touched && name.errors?.required\">*Please add name.</mat-error>\n    <mat-error *ngIf=\"name.touched && name.errors?.uniqueName\">*Project name in this path already exists.</mat-error>\n    <mat-error *ngIf=\"name.touched && name.errors?.minlength\">*Project name should contain more than 3 characters.</mat-error>\n    <mat-error *ngIf=\"name.touched && name.errors?.pattern\">Project name shouldn't contain slash (/)</mat-error>\n    <input name=\"projectName\"\n           [(ngModel)]=\"project.name\"\n           #name=\"ngModel\"\n           matInput\n           autocomplete=\"off\"\n           smUniqueNameValidator\n           [forbiddenPrefix]=\"location.value + '/'\"\n           [existingNames]=\"projectsNames\"\n           [pattern]=\"'^[^/]+$'\"\n           required minlength=\"3\">\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\" hideRequiredMarker\n                  (click)=\"location.value && clearLocation(); location.reset(); locationRef.blur(); locationRef.focus()\">\n    <mat-error *ngIf=\"location.touched && location.errors?.required\">*Please add location.</mat-error>\n    <mat-error *ngIf=\"location?.errors?.minlength\">Please provide a name longer than 3 characters</mat-error>\n\n    <mat-label>Create in</mat-label>\n    <input type=\"text\"\n           matInput\n           #location=\"ngModel\"\n           #locationRef\n           name=\"location\"\n           [ngModel]=\"project.parent\"\n           [matAutocomplete]=\"auto\"\n           placeholder=\"Search for project path\"\n           required\n           minlength=\"3\"\n           (blur)=\"detectChanges()\"\n           (click)=\"location.value && clearLocation(); location.reset(); locationRef.blur(); locationRef.focus()\">\n    <span matSuffix *ngIf=\"location.value && (!isAutoCompleteOpen) && !(project.parent | stringIncludedInArray:projectsNames)\" class=\"creat-new-suffix\">(Create New)</span>\n    <i matSuffix [class]=\"'fa mr2 ' + (location.value? 'fa-times pointer':'fa-search')\"\n       (click)=\"location.value && clearLocation(); location.reset(); locationRef.focus()\"\n       smClickStopPropagation></i>\n    <mat-autocomplete (opened)=\"setIsAutoCompleteOpen(true)\"\n                      (closed)=\"setIsAutoCompleteOpen(false)\"\n                      (optionSelected)=\"locationSelected($event)\"\n                      #auto=\"matAutocomplete\" autoActiveFirstOption\n                      class=\"light-theme\" classList=\"light-theme\">\n      <mat-option\n        class=\"item\"\n        *ngIf=\"(location.value && !(location.value | stringIncludedInArray:projectsNames))\"\n        [value]=\"location.value\"\n      >\"{{location.value}}\" <span class=\"new\">(Create New)</span></mat-option>\n      <mat-option\n        *ngFor=\"let projectName of projectsNames | simpleFilter:location.value\"\n        [value]=\"projectName\" [smTooltip]=\"projectName\" matTooltipPosition=\"above\"\n      >\n        <div [innerHTML]=\"projectName | highlightSearchText:location.value\"></div>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\" hideRequiredMarker>\n    <mat-error *ngIf=\"description?.touched && description?.invalid\">*Please add description.\n    </mat-error>\n    <mat-label>Description</mat-label>\n    <textarea class=\"project-description\"\n              name=\"description\"\n              matInput\n              [(ngModel)]=\"project.description\"\n              #description=\"ngModel\"\n    ></textarea>\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\">\n    <mat-error *ngIf=\"default_output_destination?.touched && default_output_destination?.errors?.required\">*Please add\n      default destination.\n    </mat-error>\n    <mat-error *ngIf=\"default_output_destination?.touched && default_output_destination?.errors?.pattern\">*Illegal\n      output destination (e.g. s3://bucket. gs://bucket)\n    </mat-error>\n    <mat-label>Default output destination</mat-label>\n    <input class=\"project-output-dest\"\n           matInput\n           name=\"default_output_destination\"\n           [(ngModel)]=\"project.default_output_destination\"\n           #default_output_destination=\"ngModel\"\n           [pattern]=\"outputDestPattern\"\n           placeholder=\"e.g. s3://bucket. gs://bucket\">\n  </mat-form-field>\n  <div class=\"row\">\n    <div class=\"col-24 create-project-button\">\n      <button class=\"btn btn-dark-fill center\" [disabled]=\"projectForm.invalid\" (click)=\"send()\">CREATE PROJECT\n      </button>\n    </div>\n  </div>\n</form>\n","import {ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {URI_REGEX} from '../../../../app.constants';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {NgForm} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent} from \"@angular/material/autocomplete\";\n\n\n@Component({\n  selector: 'sm-create-new-project-form',\n  templateUrl: './create-new-project-form.component.html',\n  styleUrls: ['./create-new-project-form.component.scss']\n})\nexport class CreateNewProjectFormComponent implements OnChanges {\n  constructor(private changeDetection: ChangeDetectorRef) {\n  }\n\n  public projectsNames: Array<string>;\n  public outputDestPattern = `${URI_REGEX.S3_WITH_BUCKET}$|${URI_REGEX.S3_WITH_BUCKET_AND_HOST}$|${URI_REGEX.FILE}$|${URI_REGEX.NON_AWS_S3}$|${URI_REGEX.GS_WITH_BUCKET}$|${URI_REGEX.GS_WITH_BUCKET_AND_HOST}$`;\n  public project = {\n    name: '',\n    description: '',\n    default_output_destination: null,\n    system_tags: [],\n    parent: ''\n  };\n  private _projects: Project[];\n\n\n  @Input() set projects(projects) {\n    this._projects = projects;\n    this.projectsNames = ['Projects root'].concat(projects.map(project => project.name));\n    // this.projectsNames =projects.map(project => project.name);\n  }\n\n  get projects(): Project[] {\n    return this._projects;\n  }\n\n  @Input() baseProjectId;\n\n  @Output() projectCreated = new EventEmitter();\n  @ViewChild('projectForm') public form: NgForm;\n  isAutoCompleteOpen: boolean;\n\n  send() {\n    if (this.project.default_output_destination === '') {\n      this.project.default_output_destination = null;\n    }\n    this.projectCreated.emit(this.project);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.projects.length > 0) {\n      this.project.parent = this.baseProjectId? this.projects.find(project => project.id === this.baseProjectId)?.name: 'Projects root';\n    }\n  }\n\n  detectChanges() {\n    // this.form.controls.projectName.updateValueAndValidity();\n    this.changeDetection.detectChanges();\n  }\n\n  clearLocation() {\n    this.project.parent = '';\n  }\n\n\n  setIsAutoCompleteOpen(focus: boolean) {\n    this.isAutoCompleteOpen = focus;\n  }\n\n  locationSelected($event: MatAutocompleteSelectedEvent) {\n    this.project.parent = $event.option.value;\n  }\n}\n\n","<div class=\"dynamic-subtitle\">\n  <div class=\"line\">Move <span class=\"p-name\">{{projectName | shortProjectName}}</span> from <span\n    class=\"p-name\">{{projectName | projectLocation}}</span></div>\n  <div class=\"line\">To <span *ngIf=\"project.parent; else placeH\" class=\"p-name\">{{project.parent}}</span>\n    <ng-template #placeH><span class=\"p-holder\">Project…</span></ng-template>\n  </div>\n</div>\n<form #moveToForm=\"ngForm\" (submit)=\"send()\">\n  <mat-form-field class=\"w-100\"\n                  appearance=\"outline\"\n                  hideRequiredMarker=\"true\"\n                  (click)=\"project.parent && clear(); projectInputRef.blur(); projectInputRef.focus()\">\n    <mat-label>Destination</mat-label>\n    <input matInput type=\"text\"\n           [matAutocomplete]=\"auto\"\n           [ngModel]=\"project.parent\"\n           name=\"projectName\"\n           placeholder=\"Search for project path\"\n           #projectInputRef\n           #projectInput=\"ngModel\"\n           smUniquePathValidator\n           [currentName]=\"projectName | shortProjectName\"\n           [existingPaths]=\"projectsNames\"\n           smUniqueNameValidator\n           smInvalidPrefixValidator\n           [invalidPrefix]=\"projectName\"\n           [existingNames]=\"[projectName | projectLocation]\"\n           required\n           minlength=\"3\"\n           (keydown.enter)=\"projectInput.control.markAsTouched()\"\n    >\n    <span matSuffix *ngIf=\"projectInput.value && (!isAutoCompleteOpen) && !(project.parent | stringIncludedInArray:projectsNames)\" class=\"creat-new-suffix\">(Create New)</span>\n    <i matSuffix [class]=\"'fa mr2 ' + (project.parent? 'fa-times pointer':'fa-search')\"\n       (click)=\"project.parent && clear(); projectInputRef.focus()\"\n       smClickStopPropagation></i>\n    <mat-error *ngIf=\"projectInput?.errors?.required\">Please provide a Project</mat-error>\n    <mat-error *ngIf=\"projectInput?.errors?.minlength\">Please provide a project name longer than 3 characters</mat-error>\n    <mat-error *ngIf=\"projectInput?.errors?.uniqueName\">Can't move a project to it's current location</mat-error>\n    <mat-error *ngIf=\"projectInput?.errors?.invalidPrefix\">Can't move a project to it's nested projects</mat-error>\n    <mat-error *ngIf=\"projectInput?.errors?.uniquePath\">{{projectInput.value}} already contains a project named {{projectName | shortProjectName}}</mat-error>\n    <mat-autocomplete #auto=\"matAutocomplete\"\n                      name=\"ExperimentProject\"\n                      (opened)=\"setIsAutoCompleteOpen(true)\"\n                      (closed)=\"setIsAutoCompleteOpen(false)\"\n                      (optionSelected)=\"locationSelected($event)\"\n                      class=\"light-theme\"\n                      classList=\"light-theme\"\n                      autoActiveFirstOption\n    >\n      <mat-option\n        class=\"item\"\n        *ngIf=\"(projectInput.value && !(projectInput.value | stringIncludedInArray:projectsNames))\"\n        [value]=\"projectInput.value\"\n      >\"{{projectInput.value}}\" <span class=\"new\">(Create New)</span></mat-option>\n      <mat-option *ngFor=\"let projectName of projectsNames | simpleFilter:projectInput.value\" [value]=\"projectName\" [smTooltip]=\"projectName\" matTooltipPosition=\"above\">\n        <div [innerHTML]=\"projectName | highlightSearchText:projectInput.value\"></div>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n<div class=\"buttons d-flex justify-content-center\">\n  <button [disabled]=\"projectName === project?.parent || moveToForm.invalid\" (click)=\"send()\" cdkFocusInitial\n          class=\"btn btn-neon yes-button\" #moveButton>\n    MOVE\n  </button>\n  <button (click)=\"closeDialog()\" class=\"btn btn-outline-neon\">\n    CANCEL\n  </button>\n\n</div>\n","import {ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {NgForm} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent} from \"@angular/material/autocomplete\";\n\n\n@Component({\n  selector: 'sm-project-move-to-form',\n  templateUrl: './project-move-to-form.component.html',\n  styleUrls: ['./project-move-to-form.component.scss']\n})\nexport class ProjectMoveToFormComponent implements OnChanges, OnInit {\n  public projectName: string;\n  public isAutoCompleteOpen: boolean;\n  public filterText: string = '';\n  public projectsNames: Array<string>;\n  public project = {\n    parent: ''\n  };\n  private _projects: Project[];\n\n  @ViewChild('moveToForm', {static: true}) moveToForm: NgForm;\n\n  constructor(private changeDetection: ChangeDetectorRef) {\n  }\n\n  ngOnInit(): void {\n  }\n\n\n  @Input() set projects(projects) {\n    this._projects = projects;\n    this.projectsNames = ['Projects root'].concat(projects.map(project => project.name));\n  }\n\n  get projects(): Project[] {\n    return this._projects;\n  }\n\n  @Input() baseProjectId;\n\n  @Output() moveProject = new EventEmitter();\n  @Output() dismissDialog = new EventEmitter();\n  @ViewChild('projectForm') public form: NgForm;\n\n  send() {\n    this.moveProject.emit({location: this.project.parent, name: this.projectName});\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.projects.length > 0 && this.baseProjectId) {\n      this.projectName = this.projects.find(project => project.id === this.baseProjectId)?.name;\n    }\n  }\n\n  detectChanges() {\n    // this.form.controls.projectName.updateValueAndValidity();\n    this.changeDetection.detectChanges();\n  }\n\n  clear() {\n    this.project.parent = '';\n  }\n\n  setIsAutoCompleteOpen(focus: boolean) {\n    this.isAutoCompleteOpen = focus;\n  }\n\n\n  locationSelected($event: MatAutocompleteSelectedEvent) {\n    this.project.parent = $event.option.value;\n  }\n\n  closeDialog() {\n    this.dismissDialog.emit();\n  }\n}\n\n","<sm-dialog-template [iconClass]=\"modeParameters[mode]?.icon\" [header]=\"modeParameters[mode]?.header\">\n  <sm-create-new-project-form *ngIf=\"mode==='create'\" [projects]=\"projects$| async\" [baseProjectId]=\"baseProjectId\"  (projectCreated)=\"createProject($event)\">\n  </sm-create-new-project-form>\n  <sm-project-move-to-form *ngIf=\"mode==='move'\" [projects]=\"projects$| async\" [baseProjectId]=\"baseProjectId\"  (moveProject)=\"moveProject($event)\" (dismissDialog)=\"closeDialog()\">\n  </sm-project-move-to-form>\n\n</sm-dialog-template>\n","import * as createNewProjectActions from './project-dialog.actions';\nimport {moveProject} from './project-dialog.actions';\nimport * as createProjectSelectors from './project-dialog.reducer';\nimport {CREATION_STATUS} from './project-dialog.reducer';\n\nimport {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {Observable, Subscription} from 'rxjs';\nimport {ProjectsCreateRequest} from '../../../business-logic/model/projects/projectsCreateRequest';\n\n@Component({\n  selector: 'sm-project-create-dialog',\n  templateUrl: './project-dialog.component.html',\n  styleUrls: ['./project-dialog.component.scss']\n})\nexport class ProjectDialogComponent implements OnInit, OnDestroy {\n  public projects$: Observable<any>;\n  private creationStatusSubscription: Subscription;\n  public baseProjectId: string;\n  public mode: string;\n  public header: string;\n  public modeParameters: { [mode: string]: { header: string; icon: string } } = {\n    create: {\n      header: 'NEW PROJECT',\n      icon: 'al-color blue-300 al-ico-projects'\n    },\n    move: {\n      header: 'MOVE TO',\n      icon: 'al-color blue-300 al-ico-move-to'\n    },\n\n  };\n\n  constructor(private store: Store<any>, private matDialogRef: MatDialogRef<ProjectDialogComponent>, @Inject(MAT_DIALOG_DATA) data: { projectId: string, mode: string }) {\n    this.baseProjectId = data.projectId;\n    this.mode = data.mode;\n    this.projects$ = this.store.select(createProjectSelectors.selectProjects);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new createNewProjectActions.GetProjects());\n    this.creationStatusSubscription = this.store.select(createProjectSelectors.selectCreationStatus).subscribe(status => {\n      if (status === CREATION_STATUS.SUCCESS) {\n        return this.matDialogRef.close(true);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new createNewProjectActions.ResetState());\n    this.creationStatusSubscription.unsubscribe();\n  }\n\n  public createProject(projectForm) {\n    const project = this.convertFormToProject(projectForm);\n    this.store.dispatch(new createNewProjectActions.CreateNewProject(project));\n  }\n\n  moveProject(event) {\n    if (event.location === 'Projects root') {\n      event.location = '';\n    }\n    this.store.dispatch(moveProject({project: this.baseProjectId, new_location: event.location, name: event.name}));\n  }\n\n  private convertFormToProject(projectForm: any): ProjectsCreateRequest {\n    return {\n      name: `${projectForm.parent === 'Projects root' ? '' : projectForm.parent + '/'}${projectForm.name}`,\n      description: projectForm.description,\n      system_tags: projectForm.system_tags,\n      default_output_destination: projectForm.default_output_destination\n    };\n  }\n\n\n  closeDialog() {\n    this.matDialogRef.close();\n  }\n}\n","import * as createNewProjectActions from './project-dialog.actions';\nimport {CREATE_PROJECT_ACTIONS} from './project-dialog.actions';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {activeLoader, addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport {Actions, createEffect, Effect, ofType} from '@ngrx/effects';\nimport {ApiProjectsService} from '../../../business-logic/api-services/projects.service';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {Injectable} from '@angular/core';\nimport {CREATION_STATUS} from './project-dialog.reducer';\nimport {catchError, filter, map, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {getAllSystemProjects} from '../../core/actions/projects.actions';\nimport {Store} from '@ngrx/store';\nimport {selectActiveWorkspace} from '../../core/reducers/users-reducer';\nimport {ShortProjectNamePipe} from '../pipes/short-project-name.pipe';\nimport {ProjectLocationPipe} from '../pipes/project-location.pipe';\n\n@Injectable()\nexport class ProjectDialogEffects {\n  constructor(\n    private actions: Actions,\n    private projectsApiService: ApiProjectsService,\n    private router: Router,\n    private store: Store<any>,\n    private shortProjectName: ShortProjectNamePipe,\n    private projectLocation: ProjectLocationPipe\n) {\n  }\n\n  @Effect()\n  activeLoader = this.actions.pipe(\n    ofType(CREATE_PROJECT_ACTIONS.CREATE_NEW_PROJECT, CREATE_PROJECT_ACTIONS.GET_PROJECTS),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect({dispatch: false})\n  navigateToNewProject = this.actions.pipe(\n    ofType<createNewProjectActions.NavigateToNewProject>(CREATE_PROJECT_ACTIONS.NAVIGATE_TO_NEW_PROJECT),\n    filter(action => !!action.payload),\n    map((action) => this.router.navigateByUrl(`projects/${action.payload}`))\n  );\n\n  @Effect()\n  createProject = this.actions.pipe(\n    ofType<createNewProjectActions.CreateNewProject>(CREATE_PROJECT_ACTIONS.CREATE_NEW_PROJECT),\n    withLatestFrom(this.store.select(selectActiveWorkspace)),\n    switchMap(([action]) => this.projectsApiService.projectsCreate(action.payload)\n      .pipe(\n        mergeMap(() => [\n            deactivateLoader(action.type),\n            new createNewProjectActions.SetNewProjectCreationStatus(CREATION_STATUS.SUCCESS),\n            getAllSystemProjects(),\n            addMessage(MESSAGES_SEVERITY.SUCCESS, `${this.shortProjectName.transform(action.payload.name)} has been created successfully in ${this.projectLocation.transform(action.payload.name)}`),\n          ]\n        ),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error), addMessage(MESSAGES_SEVERITY.ERROR, 'Project Created Failed'), new createNewProjectActions.SetNewProjectCreationStatus(CREATION_STATUS.FAILED)])\n      )\n    )\n  );\n\n  moveProject = createEffect(() => this.actions.pipe(\n    ofType(createNewProjectActions.moveProject),\n    withLatestFrom(this.store.select(selectActiveWorkspace)),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    switchMap(([action]) => this.projectsApiService.projectsMove({project: action.project, new_location: action.new_location})\n      .pipe(\n        mergeMap(() => [\n            deactivateLoader(action.type),\n            new createNewProjectActions.SetNewProjectCreationStatus(CREATION_STATUS.SUCCESS),\n            getAllSystemProjects(),\n            addMessage(MESSAGES_SEVERITY.SUCCESS, `${this.shortProjectName.transform(action.name)} has been moved from ${this.projectLocation.transform(action.name)} to ${action.new_location}`),\n          ]\n        ),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error), addMessage(MESSAGES_SEVERITY.ERROR, 'Project Move Failed'), new createNewProjectActions.SetNewProjectCreationStatus(CREATION_STATUS.FAILED)])\n      )\n    )\n  ));\n\n  @Effect()\n  getAllProjects = this.actions.pipe(\n    ofType<createNewProjectActions.GetProjects>(CREATE_PROJECT_ACTIONS.GET_PROJECTS),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    switchMap(action => this.projectsApiService.projectsGetAllEx({only_fields: ['name']})\n      .pipe(\n        mergeMap(res => [deactivateLoader(action.type), new createNewProjectActions.SetProjects(res.projects)]),\n        catchError(error => [requestFailed(error)])\n      )\n    )\n  );\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {SMMaterialModule} from '../material/material.module';\nimport {projectDialogReducer} from './project-dialog.reducer';\nimport {ProjectDialogEffects} from './project-dialog.effects';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {UiComponentsModule} from '../ui-components/ui-components.module';\nimport {ProjectDialogComponent} from './project-dialog.component';\nimport {CreateNewProjectFormComponent} from './create-new-project-form/create-new-project-form.component';\nimport {SharedPipesModule} from '../pipes/shared-pipes.module';\nimport {ProjectMoveToFormComponent} from \"./project-move-to-form/project-move-to-form.component\";\n\n@NgModule({\n  imports: [\n    UiComponentsModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SMMaterialModule,\n    StoreModule.forFeature('projectCreateDialog', projectDialogReducer),\n    EffectsModule.forFeature([ProjectDialogEffects]),\n    SharedPipesModule\n  ],\n  declarations: [ProjectDialogComponent, CreateNewProjectFormComponent, ProjectMoveToFormComponent]\n})\nexport class ProjectDialogModule { }\n","import {Project} from '../../../business-logic/model/projects/project';\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {CREATE_PROJECT_ACTIONS} from './project-dialog.actions';\nimport {sortBy} from 'lodash/fp';\n\nexport type CreationStatusEnum = 'success' | 'failed' | 'inProgress';\nexport const CREATION_STATUS = {\n  SUCCESS    : 'success' as CreationStatusEnum,\n  FAILED     : 'failed' as CreationStatusEnum,\n  IN_PROGRESS: 'inProgress' as CreationStatusEnum,\n};\n\nexport interface ICreateProjectDialog {\n  projects: Array<Project>;\n  creationStatus: CreationStatusEnum;\n}\n\nconst createProjectInitState: ICreateProjectDialog = {\n  projects      : [],\n  creationStatus: null\n};\n\nexport const selectCreateProjectDialog = createFeatureSelector<ICreateProjectDialog>('projectCreateDialog');\nexport const selectProjects            = createSelector(selectCreateProjectDialog, (state): Array<Project> => state.projects);\nexport const selectCreationStatus      = createSelector(selectCreateProjectDialog, (state): CreationStatusEnum => state.creationStatus);\n\nexport function projectDialogReducer<ActionReducer>(state: ICreateProjectDialog = createProjectInitState, action): ICreateProjectDialog {\n  switch (action.type) {\n    case CREATE_PROJECT_ACTIONS.SET_CREATION_STATUS:\n      return {...state, creationStatus: action.payload.creationStatus};\n    case CREATE_PROJECT_ACTIONS.SET_PROJECTS:\n      return {...state, projects: sortBy('name', action.payload.projects)};\n    case CREATE_PROJECT_ACTIONS.RESET_STATE:\n      return {...createProjectInitState};\n    default:\n      return state;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {IHue} from './color-hash.model';\nimport {BehaviorSubject} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {UsersState} from '../../../core/reducers/users-reducer';\nimport {filter, take} from 'rxjs/operators';\nimport {selectColorPreferences} from '../../ui-components/directives/choose-color/choose-color.reducer';\nimport {addUpdateColorPreferences, ColorPreference} from '../../ui-components/directives/choose-color/choose-color.actions';\nimport {getHslContrast, hexToRgb, hslToRgb, RGB2HEX, rgbToHsl} from './color-hash.utils';\nimport stc from 'string-to-color';\nimport hexRgb from 'hex-rgb';\n\nexport interface ColorCache {[label: string]: number[]};\nexport const DOT_PLACEHOLDER = '--DOT--';\n\n\n@Injectable()\nexport class ColorHashService {\n  hueRanges: Array<IHue>;\n\n  hash;\n  lightness;\n  private _colorCache: BehaviorSubject<ColorCache> = new BehaviorSubject({});\n  getColorCache() {\n    return this._colorCache.asObservable();\n  }\n\n  setColorCache(obj: ColorCache) {\n    this._colorCache.next(obj);\n  }\n\n  constructor(private store: Store<UsersState>) {\n    this.store.select(selectColorPreferences)\n      .pipe(\n        filter(preferenceColors => !!preferenceColors),\n        take(1)\n      )\n      .subscribe(preferenceColors => this.batchUpdateColorCache(preferenceColors));\n  }\n\n  public initColor(label: string) {\n    const colorCache = this._colorCache.getValue();\n    if (colorCache && colorCache[label]) {\n      return colorCache[label];\n    }\n    const {red, green, blue} = hexRgb(stc(label));\n    const color = [red, green, blue];\n    this.setColorForString(label, color, false);\n    return color;\n  }\n\n  public getColorsObservable() {\n    return this.getColorCache();\n  }\n\n  private batchUpdateColorCache(colors: ColorPreference) {\n    const newColorCache = {...this._colorCache.getValue(), ...colors};\n    const filteredCache = {};\n    Object.keys(newColorCache).forEach(color => {\n      const regex             = new RegExp(DOT_PLACEHOLDER, 'g');\n      const cleanKey          = color.replace(regex, '.');\n      filteredCache[cleanKey] = newColorCache[color];\n    });\n    this.setColorCache(filteredCache);\n  }\n\n  private updateColorCache(str: string, color: number[]) {\n    const newColorCache = this._colorCache.getValue();\n    newColorCache[str]  = color;\n    this.setColorCache(newColorCache);\n  }\n\n  setColorForString(str: string, color: number[], savePreference: boolean = true) {\n    this.updateColorCache(str, color);\n    if (savePreference) {\n      const cleanString     = str.replace(/\\./, DOT_PLACEHOLDER);\n      this.store.dispatch(addUpdateColorPreferences({[cleanString]: color}));\n    }\n  }\n\n  public hex(hash: string) {\n    const rgb = this.initColor(hash);\n    return RGB2HEX(rgb);\n  }\n\n  public getRgbString(str, opacity = -1) {\n    const color = this.initColor(str);\n    if (opacity !== -1) {\n      return `rgba(${color[0]},${color[1]},${color[2]},${opacity})`;\n    } else {\n      return `rgb(${color[0]},${color[1]},${color[2]})`;\n    }\n  }\n\n  getMonochromaticHarmony(color, isDarkBg = false) {\n    const backgroundSaturation = 0.10;\n    const minLightness         = 0.20;\n    const maxLightness         = 0.95;\n    const stepSize             = 0.05;\n    const contrastLimit        = 3.9;\n\n    const rgb         = Array.isArray(color) ? color : hexToRgb(color);\n    const originalHsl = rgbToHsl(rgb);\n    const hsl         = [...originalHsl];\n    hsl[1]            = backgroundSaturation;\n    hsl[2]            = isDarkBg ? minLightness : maxLightness;\n    let contrast      = getHslContrast(originalHsl, hsl);\n    while (contrast < contrastLimit) {\n      contrast = getHslContrast(originalHsl, hsl);\n      hsl[2]   = isDarkBg ? hsl[2] + stepSize : hsl[2] - stepSize;\n      if ((!isDarkBg && hsl[2] < minLightness) || (isDarkBg && hsl[2] > maxLightness)) {\n        break;\n      }\n    }\n    return hslToRgb(hsl);\n  }\n}\n\n","export function rgbToHsl(rgbArray): [number, number, number] {\n  let [r, g, b] = [...rgbArray];\n  r /= 255, g /= 255, b /= 255;\n\n  const max   = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h, s, l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s       = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, l];\n}\n\nexport function hslToRgb(hslArray) {\n  let [h, s, l, a] = [...hslArray];\n  let r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), a ? a : null];\n}\n\nexport function hue2rgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n\nexport function getLuminanace(r, g, b) {\n  const a = [r, g, b].map(function (v) {\n    v /= 255;\n    return v <= 0.03928\n      ? v / 12.92\n      : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\nexport function getHslContrast(hsl1, hsl2): number {\n  return getContrast(hslToRgb(hsl1), hslToRgb(hsl2));\n}\n\nexport function getContrast(rgb1, rgb2) {\n  const l1 = getLuminanace(rgb1[0], rgb1[1], rgb1[2]) + 0.05;\n  const l2 = getLuminanace(rgb2[0], rgb2[1], rgb2[2]) + 0.05;\n  return (Math.max(l1, l2) / Math.min(l1, l2));\n}\n\n\nexport const RGB2HEX = (rgbArray: number[]) => {\n  if (!rgbArray) {\n    return '#888888';\n  }\n  return '#' + rgbArray.map(x => {\n    const base16 = x.toString(16);\n    return (base16.length == 1) ? '0' + base16 : base16;  //Add zero if we get only one character\n  }).join('');\n};\n\nexport const rgba2String = (rgba: number[]) => `rgba(${rgba.join(',')})`;\n\nexport const normalizeColorToString = (color) => {\n  if (typeof color === 'string') {\n    if (color.includes('#')) {\n      return color; // It's already hex\n    }\n    if (color.includes('rgb')) {\n      // rgb() or rgba()\n      const openParenthisis    = color.indexOf('(');\n      const closingParenthisis = color.indexOf(')');\n      color             = color.slice(openParenthisis + 1, closingParenthisis).split(',');\n    }\n  }\n  if (Array.isArray(color)) {\n    if (color.length === 3) {\n      return RGB2HEX(color);\n    } else if (color.length === 4) {\n      return rgba2String(color);\n    }\n  }\n};\n\n/**\n * Convert HSL to RGB\n *\n * @see {@link http://zh.wikipedia.org/wiki/HSL和HSV色彩空间} for further information.\n * @param {Number} H Hue ∈ [0, 360)\n * @param {Number} S Saturation ∈ [0, 1]\n * @param {Number} L Lightness ∈ [0, 1]\n * @returns {Array} R, G, B ∈ [0, 255]\n */\nexport function HSL2RGB(H, S, L) {\n  H /= 360;\n\n  const q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n  const p = 2 * L - q;\n\n  return [H + 1 / 3, H, H - 1 / 3].map(function (color) {\n    if (color < 0) {\n      color++;\n    }\n    if (color > 1) {\n      color--;\n    }\n    if (color < 1 / 6) {\n      color = p + (q - p) * 6 * color;\n    } else if (color < 0.5) {\n      color = q;\n    } else if (color < 2 / 3) {\n      color = p + (q - p) * 6 * (2 / 3 - color);\n    } else {\n      color = p;\n    }\n    return Math.round(color * 255);\n  });\n}\n\nexport const hexToRgb = hex => {\n  hex          = hex.replace('#', '');\n  const bigint = parseInt(hex, 16);\n  const r      = (bigint >> 16) & 255;\n  const g      = (bigint >> 8) & 255;\n  const b      = bigint & 255;\n\n  return [r, g, b];\n};\n\nexport const rgbaToValues = (color: string) =>\n  color.slice(5, -1).split(',').map(c => parseFloat(c));\n\nexport const invertRgb = (rgb: [number, number, number]) => rgb.map(c => 255 - c);\n","import {Injectable} from '@angular/core';\nimport {environment} from '../../../../environments/environment';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, of, timer, throwError} from 'rxjs';\nimport {catchError, map, retryWhen, mergeMap} from 'rxjs/operators';\nimport {Environment} from '../../../../environments/base';\nimport { retryOperation } from '../utils/promie-with-retry';\n\nexport const fetchConfigOutSideAngular = async (): Promise<Environment> => {\n  return retryOperation(() => fetch('/configuration.json').then(res => res.json()), 500, 2) as Promise<Environment>;\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n\n  public static globalEnvironment = environment as Environment;\n  public globalEnvironmentObservable = new BehaviorSubject(environment as Environment);\n\n  constructor(private httpClient: HttpClient,) {\n  }\n\n  initConfigurationService() {\n    if ((window as any).configuration) {\n      this.setEnv((window as any).configuration);\n      return of(null);\n    }\n    return this.httpClient.get('/configuration.json')\n      .pipe(\n        retryWhen(errors => errors.pipe(\n            mergeMap((err, i) => i > 2 ? throwError('Error from retry!') : timer(500))\n        )),\n        catchError(() => of({})),\n        map(env => {\n          ConfigurationService.globalEnvironment = {...ConfigurationService.globalEnvironment, ...env};\n          this.globalEnvironmentObservable.next(ConfigurationService.globalEnvironment);\n        })\n      );\n  }\n\n  setEnv(env) {\n    ConfigurationService.globalEnvironment = {...ConfigurationService.globalEnvironment, ...env};\n    this.globalEnvironmentObservable.next(ConfigurationService.globalEnvironment);\n  }\n  // If someone must have it the rxjs way\n  getEnvironment() {\n    return this.globalEnvironmentObservable.asObservable();\n  }\n\n  getStaticEnvironment() {\n    return ConfigurationService.globalEnvironment;\n  }\n}\n","import { Injectable } from '@angular/core';\n\ninterface Error {\n  meta: {\n    result_code: number;\n    result_subcode: number;\n    result_msg: string;\n    error_data?: any;\n  };\n  data: any;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorService {\n\n  template(strings, ...keys) {\n    return (values => {\n      const result = [strings[0]];\n      keys.forEach((key, i) => {\n        const value = values[key];\n        result.push(value, strings[i + 1]);\n      });\n      return result.join('');\n    });\n  }\n\n  private codes = {\n    400: {\n      51: this.template`This operation could not be completed at this time. Please try again later. \\n${'resultMsg'}`,\n      52: this.template`Could not complete identity verification. The provider may be down - Please try again later`,\n      53: this.template`Could not complete identity verification. The provider may be down - Please try again later`,\n      54: this.template`Could not resolve link destination. Contact the person who provided you with the link to join their team.`,\n      55: this.template`Could not complete identity verification. Your sign-up session has probably timed out, please try again.\n** If this issue persists, the identity provider may be down - please try again later.`,\n      56: this.template`The invitation to ${'user_name'}'s team has expired. Contact ${'user_name'} to join their team, or sign up for a free standalone account.`,\n      57: this.template`Account already exists for this ${'provider'}  identity. Use 'Log In' Instead.`,\n      58: this.template`No account exists. Use the provider you signed up with or sign up to create a new account`,\n      62: this.template`Please check your email to continue the signup process`,\n      67: this.template`${'email'} is not registered - please contact your admin`,\n      1205: this.template`This workspace is at its limit for concurrently running instances.`\n    }\n  };\n\n  constructor() { }\n\n  getErrorMsg(error: Error, extraParams: Record<string, string> = {}) {\n    const template = this.codes?.[error?.meta?.result_code]?.[error?.meta?.result_subcode];\n    if (template) {\n      let params = {resultMsg: error?.meta?.result_msg, ...extraParams};\n      if (error?.meta?.error_data) {\n        params = {...error.meta.error_data, ...params};\n      }\n      try {\n        return template(params);\n      } catch {\n        console.warn('failed to render error message', error);\n      }\n    }\n    return error?.meta?.result_msg || '';\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {catchError, filter, map, mergeMap, retryWhen, switchMap, tap} from 'rxjs/operators';\nimport {HTTP} from '~/app.constants';\nimport {UsersGetAllResponse} from '~/business-logic/model/users/usersGetAllResponse';\nimport {AuthCreateUserResponse} from '~/business-logic/model/auth/authCreateUserResponse';\nimport {v1 as uuidV1} from 'uuid';\nimport {EMPTY, Observable, of, throwError, timer} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {LoginModeResponse} from '~/business-logic/model/LoginModeResponse';\nimport {clone} from 'lodash/fp';\nimport {ApiLoginService} from '~/business-logic/api-services/login.service';\nimport {ConfigurationService} from './configuration.service';\nimport {Environment} from '../../../../environments/base';\nimport {USER_PREFERENCES_KEY, UserPreferences} from '@common/user-preferences';\nimport {setUserLoginState} from '@common/login/login.actions';\nimport {fetchCurrentUser} from '@common/core/actions/users.actions';\nimport {Store} from '@ngrx/store';\nimport {ConfirmDialogConfig} from '@common/shared/ui-components/overlay/confirm-dialog/confirm-dialog.model';\nimport {Router} from '@angular/router';\n\nexport type LoginMode = 'simple' | 'password' | 'ssoOnly';\n\nexport const LoginModeEnum = {\n  simple: 'simple' as LoginMode,\n  password: 'password' as LoginMode,\n  ssoOnly: 'ssoOnly' as LoginMode\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseLoginService {\n  signupMode: boolean;\n  protected basePath = HTTP.API_BASE_URL;\n  private userKey: string;\n  private userSecret: string;\n  private companyID: string;\n  private _loginMode: LoginMode;\n  private _guestUser: { enabled: boolean; username: string; password: string };\n  private environment: Environment;\n  get guestUser() {\n    return clone(this._guestUser);\n  }\n  private _sso: {name: string; url: string; displayName?: string}[];\n  get sso() {\n    return this._sso;\n  }\n  protected _authenticated: boolean;\n  get authenticated(): boolean {\n    return this._authenticated;\n  }\n\n  constructor(\n    protected httpClient: HttpClient,\n    protected loginApi: ApiLoginService,\n    protected dialog: MatDialog,\n    protected configService: ConfigurationService,\n    protected store: Store,\n    protected router: Router,\n    protected userPreferences: UserPreferences\n  ) {\n    configService.globalEnvironmentObservable.subscribe(env => {\n      const firstLogin = !window.localStorage.getItem(USER_PREFERENCES_KEY.firstLogin);\n      this.environment = env;\n      this.signupMode = !!this.environment.communityServer && firstLogin;\n    });\n  }\n\n  initCredentials() {\n    const fromEnv = () => {\n      this.userKey = this.environment.userKey;\n      this.userSecret = this.environment.userSecret;\n      this.companyID = this.environment.companyID;\n    };\n\n    return this.getLoginMode().pipe(\n      retryWhen(errors => errors.pipe(\n        mergeMap((err, i) => i > 2 ? throwError('Error from retry!') : timer(500))\n      )),\n      catchError(() => {\n        this.openServerError();\n        return of({});\n      }),\n      switchMap(mode => mode === LoginModeEnum.simple ? this.httpClient.get('credentials.json') : of(fromEnv())),\n      tap((credentials: any) => {\n        this.userKey = credentials.userKey;\n        this.userSecret = credentials.userSecret;\n        this.companyID = credentials.companyID;\n      }),\n      catchError(() => of(fromEnv()))\n    );\n  }\n\n  getHeaders(): HttpHeaders {\n    let headers = new HttpHeaders();\n    const auth = window.btoa(this.userKey + ':' + this.userSecret);\n    headers = headers.append('Authorization', 'Basic ' + auth);\n    //    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers;\n  }\n\n  getLoginMode(): Observable<LoginMode> {\n    if (this._loginMode !== undefined) {\n      return of(this._loginMode);\n    } else {\n      return this.getLoginSupportedModes(this.signupMode && 'signup')\n        .pipe(\n          // for testing: map(res => ({...res, server_errors: {missed_es_upgrade: true}}) ),\n          tap(res => (res?.server_errors && this.shouldOpenServerError(res.server_errors)) && this.openEs7MessageDialog(res.server_errors)),\n          filter(res => !this.shouldOpenServerError(res?.server_errors)),\n          tap((res: LoginModeResponse) => {\n            this._authenticated = res.authenticated;\n            this._loginMode = res.basic.enabled ? LoginModeEnum.password : res.sso_providers?.length > 0 ? LoginModeEnum.ssoOnly : LoginModeEnum.simple;\n            this._guestUser = res.basic.guest;\n            this._sso = res.sso_providers;\n          }),\n          map(() => this._loginMode)\n        );\n    }\n  }\n\n  public getLoginSupportedModes(additionalState = ''): Observable<LoginModeResponse> {\n    const url = new URL(window.location.href);\n    let state = url.searchParams.get('redirect') ??\n      url.searchParams.get('state') ??\n      (url.pathname === '/login' ? '/' : url.pathname + url.search);\n    if (additionalState && state) {\n      const stateUrl = new URL(`http://aaa${state}`);\n      stateUrl.searchParams.append(additionalState, '');\n      state = stateUrl.pathname + stateUrl.search;\n    }\n    return this.loginApi.loginSupportedModes({\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      callback_url_prefix: url.origin + '/callback_',\n      state: (state === '/' || state.startsWith('callback_') || state.startsWith('/callback_')) ? undefined : state\n    }).pipe(map((res: LoginModeResponse) => {\n      const auth0 = res.sso_providers.find(provider => provider.name == 'auth0');\n      if (auth0 && this.signupMode) {\n        const auth0Url = new URL(auth0.url);\n        auth0Url.searchParams.set('screen_hint', 'signup');\n        auth0.url = auth0Url.toString();\n      }\n      return {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        ...res,\n        ...(res.sso_providers ?\n          {sso_providers: res.sso_providers.map(provider => ({...provider, displayName: provider.display_name}))} :\n          res.sso && {sso_providers: Object.keys(res.sso).map((key: string) => ({name: key, url: res.sso[key]}))})\n        /* eslint-enable @typescript-eslint/naming-convention */\n      };\n    }));\n  }\n\n  getUsers() {\n    return this.httpClient.post<UsersGetAllResponse>(`${this.basePath}/users.get_all`, null, {headers: this.getHeaders()})\n      .pipe(\n        map((x: any) => x.data.users)\n      );\n  }\n\n  passwordLogin(user: string, password: string) {\n    let headers = new HttpHeaders();\n    const auth = window.btoa(user + ':' + password);\n    headers = headers.append('Authorization', 'Basic ' + auth);\n    headers = headers.append('Access-Control-Allow-Credentials', '*');\n    return this.httpClient.post<AuthCreateUserResponse>(`${this.basePath}/auth.login`, null, {headers, withCredentials: true});\n  }\n\n  login(userId: string) {\n    let headers = this.getHeaders();\n    headers = headers.append(`${this.environment.headerPrefix}-Impersonate-As`, userId);\n    return this.httpClient.post(`${this.basePath}/auth.login`, null, {headers, withCredentials: true});\n  }\n\n  createUser(name: string) {\n    let headers = this.getHeaders();\n    headers = headers.append('Content-Type', 'application/json');\n    const data = {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      email: uuidV1() + '@test.ai',\n      name,\n      company: this.companyID,\n      given_name: name.split(' ')[0],\n      family_name: name.split(' ')[1] ? name.split(' ')[1] : name.split(' ')[0]\n      /* eslint-enable @typescript-eslint/naming-convention */\n    };\n    return this.httpClient.post<AuthCreateUserResponse>(`${this.basePath}/auth.create_user`, data, {headers})\n      .pipe(map((x: any) => x.data.id));\n  }\n\n  autoLogin(name: string, callback: (res) => void) {\n    return this.createUser(name)\n      .subscribe(id => this.login(id)\n        .subscribe((res: any) => {\n          callback(res);\n        }));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private shouldOpenServerError(serverErrors: {missed_es_upgrade: boolean; es_connection_error: boolean}) {\n    return serverErrors?.missed_es_upgrade || serverErrors?.es_connection_error;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private openEs7MessageDialog(serverErrors: {missed_es_upgrade: boolean; es_connection_error: boolean}) {\n\n    // Mocking application header\n    const imgElement = new Image();\n    imgElement.setAttribute('src', this.environment.branding.logo);\n    imgElement.setAttribute('style', 'width: 100%; height: 64px; background-color: #141822; padding: 15px;');\n    document.body.appendChild(imgElement);\n\n    const body = `The ClearML Server database seems to be unavailable.<BR>Possible reasons for this state are:<BR><BR>\n<ul>\n  ${serverErrors?.missed_es_upgrade ? '<li>Upgrading the Trains Server from a version earlier than v0.16 without performing the required data migration (see <a target=\"_blank\" href=\"https://allegro.ai/clearml/docs/deploying_trains/trains_server_es7_migration/\">instructions</a>).</li>' : ''}\n  <li>Misconfiguration of the Elasticsearch container storage: Check the directory mappings in the docker-compose YAML configuration file\n     are correct and the target directories have the right permissions (see <a target=\"_blank\" href=\"https://allegro.ai/clearml/docs/deploying_trains/trains_deploy_overview/#option-3-a-self-hosted-trains-server\">documentation</a>).</li>\n  <li>Other errors in the database startup sequence: Check the elasticsearch logs in the elasticsearch container for problem description.</li>\n</ul>\n<BR>\nAfter the issue is resolved and Trains Server is up and running, reload this page.`;\n\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      disableClose: true,\n      data: {\n        title: 'Database Error',\n        body,\n\n        yes: 'Reload',\n        iconClass: 'i-alert'\n      }\n    });\n    confirmDialogRef.afterClosed().subscribe(() => {\n      window.location.reload();\n    });\n  }\n\n  private openServerError() {\n    // Mocking application header\n    const imgElement = new Image();\n    imgElement.setAttribute('src', this.environment.branding.logo);\n    imgElement.setAttribute('style', 'width: 100%; height: 64px; background-color: #141822; padding: 15px;');\n    document.body.appendChild(imgElement);\n\n    const body = this.environment.serverDownMessage;\n\n    const confirmDialogRef = this.dialog.open(ConfirmDialogComponent, {\n      disableClose: true,\n      data: {\n        width: 440,\n        title: 'Server Unavailable',\n        body,\n        yes: 'Reload',\n        iconClass: 'i-alert',\n        centerText: true\n      } as ConfirmDialogConfig\n    });\n    confirmDialogRef.afterClosed().subscribe(() => {\n      window.location.reload();\n    });\n  }\n\n  clearLoginCache() {\n    this._loginMode = undefined;\n  }\n\n  afterLogin(resolve, store) {\n    this.userPreferences.loadPreferences()\n      .subscribe(() => {\n        store.dispatch(fetchCurrentUser());\n        resolve(null);\n      });\n  }\n\n  loginFlow(resolve, skipInvite = false) {\n    if (location.search.includes('invite') && !skipInvite) {\n      const currentURL = new URL(location.href);\n      const inviteId = currentURL.searchParams.get('invite');\n      this.store.dispatch(setUserLoginState({user: null, inviteId, crmForm: null}));\n    }\n    const redirectToLogin = (status) => {\n      if (status === 401) {\n        const redirectUrl: string = window.location.pathname + window.location.search;\n        if (\n          !['/login/signup', '/login', '/dashboard', '/'].includes(redirectUrl) &&\n          (this.guestUser?.enabled || ConfigurationService.globalEnvironment.autoLogin)\n        ) {\n          if (this.guestUser?.enabled) {\n            this.passwordLogin(this.guestUser.username, this.guestUser.password)\n              .subscribe(() => this.afterLogin.bind(this)(resolve, this.store));\n          } else if (ConfigurationService.globalEnvironment.autoLogin) {\n            const name = `${(new Date()).getTime().toString()}`;\n            this.autoLogin(name, this.afterLogin.bind(this, resolve, this.store));\n          } else {\n            resolve(null);\n          }\n        } else if (!['/login/signup', '/login'].includes(redirectUrl)) {\n          const targetUrl = (redirectUrl && redirectUrl != '/') ? `/login?redirect=${encodeURIComponent(redirectUrl)}` : '/login';\n          window.history.replaceState(window.history.state, '', targetUrl);\n        }\n      }\n      resolve(null);\n      return EMPTY;\n    };\n\n    if (this.authenticated === false) {\n      redirectToLogin(401);\n    } else {\n      this.store.dispatch(fetchCurrentUser());\n      this.userPreferences.loadPreferences().pipe(\n        catchError((err) => redirectToLogin(err.status))\n      ).subscribe(\n        () => {\n          resolve(null);\n        },\n        () => {\n          // Do nothing\n        });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {setTagColors, TagColor} from '../../core/actions/projects.actions';\nimport {Store} from '@ngrx/store';\nimport {selectTagColors, selectTagsColors} from '../../core/reducers/projects.reducer';\nimport {Subscription} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagColorService {\n  public static predefined = [\n    {foreground: 'white', background: '#803d3d'},\n    {foreground: 'white', background: '#833e65'},\n    {foreground: 'white', background: '#492d4e'},\n    {foreground: 'white', background: '#5b3b80'},\n    {foreground: 'white', background: '#38406e'},\n    {foreground: 'white', background: '#013b6a'},\n    {foreground: 'white', background: '#023f5c'},\n    {foreground: 'white', background: '#385879'},\n    {foreground: 'white', background: '#3a7777'},\n    {foreground: 'white', background: '#326c34'},\n    {foreground: 'white', background: '#2e521b'},\n    {foreground: 'white', background: '#44573f'},\n    {foreground: 'white', background: '#605c2b'},\n    {foreground: 'white', background: '#846300'},\n    {foreground: 'white', background: '#895200'},\n    {foreground: 'white', background: '#7b331e'},\n    {foreground: 'white', background: '#6e5056'},\n    {foreground: 'white', background: '#596c71'},\n    {foreground: 'white', background: '#2a4958'},\n    {foreground: 'white', background: '#434141'},\n  ] as TagColor[];\n\n  private tagsColors: { [p: string]: TagColor };\n\n  constructor(private store: Store) {\n    store.select(selectTagsColors).subscribe(tagsColors => this.tagsColors = tagsColors);\n  }\n\n  getColor(tag: string) {\n    return this.store.select(selectTagColors, {tag})\n      .pipe(map(tagColor => tagColor ? tagColor : this.calcColor(tag) ));\n  }\n\n  calcColor(tag: string) {\n    const sum = Array.from(tag)\n      .map(chr => chr.charCodeAt(0))\n      .reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n    return  {...TagColorService.predefined[sum % 20]};\n  }\n\n  setColor(tag: string, colors: Partial<TagColor>) {\n    if (!colors.background || !colors.foreground) {\n      const curr = this.tagsColors[tag] || this.calcColor(tag);\n      this.store.dispatch(setTagColors({tag, colors: {\n        background: colors.background || curr.background,\n        foreground: colors.foreground || curr.foreground\n      }}));\n    } else {\n      this.store.dispatch(setTagColors({tag, colors: colors as TagColor}));\n    }\n  }\n}\n\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {CopyClipboardComponent} from './ui-components/indicators/copy-clipboard/copy-clipboard.component';\nimport {InlineEditComponent} from './ui-components/inputs/inline-edit/inline-edit.component';\nimport {SpinnerComponent} from './ui-components/overlay/spinner/spinner.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ClipboardModule} from 'ngx-clipboard';\nimport {UiComponentsModule} from './ui-components/ui-components.module';\nimport {ChipsModule} from './ui-components/buttons/chips/chips.module';\nimport {SharedPipesModule} from './pipes/shared-pipes.module';\nimport {ExperimentCardComponent} from './ui-components/panel/experiment-card/experiment-card.component';\nimport {ModelCardComponent} from './ui-components/panel/model-card/model-card.component';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {ExperimentInfoHeaderStatusProgressBarComponent} from './experiment-info-header-status-progress-bar/experiment-info-header-status-progress-bar.component';\nimport {ExperimentInfoHeaderStatusIconLabelComponent} from './experiment-info-header-status-icon-label/experiment-info-header-status-icon-label.component';\nimport {TableModule} from 'primeng/table';\nimport {SectionHeaderComponent} from './components/section-header/section-header.component';\nimport {LineChartComponent} from './components/charts/line-chart/line-chart.component';\nimport {DonutComponent} from './components/charts/donut/donut.component';\nimport {NgxFilesizeModule} from 'ngx-filesize';\nimport {NgxJsonViewerComponent} from './components/ngx-json-viewer/ngx-json-viewer.component';\nimport {ExperimentRefreshComponent} from './components/experiment-refresh/experiment-refresh.component';\nimport {LeavingBeforeSaveAlertGuard} from './guards/leaving-before-save-alert.guard';\nimport {CustomColumnsListComponent} from './components/custom-columns-list/custom-columns-list.component';\nimport { BaseContextMenuComponent } from './components/base-context-menu/base-context-menu.component';\nimport {EntityFooterComponent} from './entity-page/entity-footer/entity-footer.component';\nimport {CheckPermissionDirective} from '../../shared/directives/check-permission.directive';\nimport {ScrollTextareaComponent} from './components/scroll-textarea/scroll-textarea.component';\nimport { ShowOnlyUserWorkComponent } from './components/show-only-user-work/show-only-user-work.component';\nimport {GeneralLeavingBeforeSaveAlertGuard} from './guards/general-leaving-before-save-alert.guard';\nimport {SortHumanizePipe} from './pipes/sort.pipe';\nimport { ScatterPlotComponent } from './components/charts/scatter-plot/scatter-plot.component';\nimport {\n  ClearFiltersButtonComponent,\n} from './components/clear-filters-button/clear-filters-button.component';\nimport { AppendComponentOnTopElementDirective } from './directive/append-component-on-top-element.directive';\nimport {MultiLineTooltipComponent} from './components/multi-line-tooltip/multi-line-tooltip.component';\n\nconst _declarations = [\n  ExperimentInfoHeaderStatusProgressBarComponent,\n  ExperimentInfoHeaderStatusIconLabelComponent,\n  ModelCardComponent,\n  ExperimentCardComponent,\n  SpinnerComponent,\n  InlineEditComponent,\n  CopyClipboardComponent,\n  SectionHeaderComponent,\n  LineChartComponent,\n  DonutComponent,\n  NgxJsonViewerComponent,\n  ExperimentRefreshComponent,\n  CustomColumnsListComponent,\n  EntityFooterComponent,\n  CheckPermissionDirective,\n  ScrollTextareaComponent,\n  SortHumanizePipe,\n  ShowOnlyUserWorkComponent,\n  AppendComponentOnTopElementDirective,\n  MultiLineTooltipComponent,\n];\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TableModule,\n    ClipboardModule,\n    UiComponentsModule,\n    SharedPipesModule,\n    MatProgressSpinnerModule,\n    MatButtonToggleModule,\n    MatSnackBarModule,\n    NgxFilesizeModule,\n    ChipsModule\n  ],\n  declarations: [\n    _declarations,\n    BaseContextMenuComponent,\n    ScatterPlotComponent,\n    ClearFiltersButtonComponent,\n  ],\n    exports: [..._declarations, UiComponentsModule, TableModule, ClipboardModule, SharedPipesModule, MatSnackBarModule,\n        NgxFilesizeModule, ScatterPlotComponent, ClearFiltersButtonComponent\n    ],\n  providers   : [LeavingBeforeSaveAlertGuard, GeneralLeavingBeforeSaveAlertGuard]\n})\nexport class SMSharedModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ChipsComponent} from './chips.component';\nimport {ChooseColorModule} from '../../directives/choose-color/choose-color.module';\n\n\n@NgModule({\n  imports     : [\n    CommonModule,\n    ChooseColorModule\n  ],\n  providers   : [],\n  declarations: [ChipsComponent],\n  exports     : [ChipsComponent],\n})\n\nexport class ChipsModule { }\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector   : 'sm-loading-button',\n  templateUrl: './loading-button.component.html',\n  styleUrls  : ['./loading-button.component.scss']\n})\nexport class LoadingButtonComponent {\n  @Input() label    = 'CREATE NEW';\n  @Input() disabled = false;\n  @Input() loading;\n}\n","<button class=\"btn btn-dark-fill ld-ext-right \" [ngClass]=\"{'running': loading}\" [disabled]=\"disabled\">\n\n  <div class=\"button-label\">{{label}}</div>\n\n  <ng-content></ng-content>\n\n  <div class=\"ld ld-ring ld-cycle\"></div>\n</button>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-toggle-archive',\n  templateUrl: './toggle-archive.component.html',\n  styleUrls  : ['./toggle-archive.component.scss']\n})\nexport class ToggleArchiveComponent implements OnInit {\n  @Input() showArchived: boolean;\n  @Output() toggleArchived = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<button (click)=\"toggleArchived.emit(!showArchived)\" class=\"btn btn-primary d-flex justify-content-between align-items-center\">\n  <i [class]=\"'al-icon sm ' + (showArchived? ' al-ico-exit-archive' : 'al-ico-archive' )\"></i>\n  <span class=\"button-label\">{{showArchived? 'EXIT': 'OPEN'}} ARCHIVE</span>\n</button>\n","<div class=\"code-footer\" [ngClass]=\"{'open-code': isCodeOpen}\" [style.top]=\"isCodeOpen? openCodeTop: closedCodeTop\" >\n  <div class=\"code\" [ngClass]=\"{'open-code': isCodeOpen}\" [style.height]=\"isCodeOpen && codeHeight\">\n      <pre class=\"prettyprint\" *ngIf=\"hack\">\n        <div class=\"lang-python\">{{codeResult}}</div>\n      </pre>\n    </div>\n  <div *ngIf=\"!isCodeOpen\" class=\"closed-code-label pointer\" (click)=\"isCodeOpen = true\">\n    {{closedCodeLabel}}\n  </div>\n  <div *ngIf=\"isCodeOpen\" class=\"closed-code-label pointer\" ngxClipboard [cbContent]=\"codeResult\"\n       (cbOnSuccess)=\"textCopied()\" [ngClass]=\"{'copied': copied}\">\n    <div *ngIf=\"copied\" class=\"icon i-v-neon copied-v\"></div>\n    {{copied? ' COPIED': 'COPY TO CLIPBOARD'}}\n  </div>\n</div>\n","import {Component, Input, ChangeDetectorRef} from '@angular/core';\n\ndeclare const nunjucks;\ndeclare const PR;\n\n@Component({\n  selector   : 'sm-code',\n  templateUrl: './code.component.html',\n  styleUrls  : ['./code.component.scss']\n})\nexport class CodeComponent {\n\n  public CODE_TEMPLATES_PATH = 'examples/code/';\n  public hack: boolean       = true;\n  public isCodeOpen: boolean = false;\n  public copied: boolean     = false;\n  public codeResult: string;\n\n  @Input() closedCodeLabel;\n  @Input() codeSnippet: string;\n  @Input() codeHeight    = '25vh';\n  @Input() openCodeTop   = '0vh';\n  @Input() closedCodeTop = '0vh';\n  @Input() codeTemplateFileName: string;\n\n  @Input() set params(params) {\n    if (params) {\n      this.copied = false;\n      nunjucks.render(this.CODE_TEMPLATES_PATH + this.codeTemplateFileName, params, (err, res) => {\n        this.codeResult = res;\n        this.rerenderCode();\n      });\n      this.rerenderCode();\n    }\n  }\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {\n    nunjucks.configure('static', {web: {useCache: true, async: true}});\n  }\n  public textCopied(){\n    this.copied = true;\n    setTimeout(() => {\n      this.copied = false;\n      this.changeDetectorRef.detectChanges();\n    }, 2000);\n  }\n\n  private rerenderCode() {\n    if (!this.changeDetectorRef['destroyed']) {\n      this.hack = false;\n      this.changeDetectorRef.detectChanges();\n      this.hack = true;\n      this.changeDetectorRef.detectChanges();\n      PR.prettyPrint();\n    }\n  }\n}\n","<div class=\"title\">{{titleText}}</div>\n<sm-search\n  [value]=\"searchText\"\n  [minimumChars]=\"0\"\n  [debounceTime]=\"0\"\n  placeholder=\"Search parameters\"\n  class=\"underline-search\"\n  (valueChanged)=\"searchQ($event)\"\n></sm-search>\n<div class=\"actions\">\n  <div class=\"pointer\" (click)=\"onClearSelection()\">Clear Selection</div>\n  <ng-content></ng-content>\n</div>\n<div class=\"list\">\n  <mat-expansion-panel *ngFor=\"let bigItem of (itemsObjectList | keyvalue: compareByKey); trackBy: trackByKeyFn\"\n                       [expanded]=\"searchText?.length > 0\"\n                       [hidden]=\"(bigItem.value | advancedFilter:searchText).length === 0\">\n    <mat-expansion-panel-header expandedHeight=\"40px\" collapsedHeight=\"40px\" (click)=\"toggleExpand(bigItem.key)\">\n      <div class=\"ellipsis item-key\" [smTooltip]=\"renameMap[bigItem.key]\" [showDelay]=\"500\">{{renameMap[bigItem.key] || bigItem.key}}</div>\n    </mat-expansion-panel-header>\n    <div *ngFor=\"let item of bigItem.value | filter:searchText:'value'; trackBy: trackByValFn\"\n         class=\"item pointer\"\n         [class.disabled]=\"cb.disabled\"\n         [smTooltip]=\"!item.checked && selectionLimitReached? 'You can only select up to ' + limitSelection + ' parameters' : ''\"\n         customClass=\"parameter-tooltip\"\n         (click)=\"!cb.disabled && toggleParamToDisplay(bigItem.key + '.' + item.value, item.checked)\">\n      <mat-checkbox #cb\n                    smClickStopPropagation\n                    [ngModel]=\"item.checked\"\n                    [disabled]=\"selectionLimitReached && !item.checked\"\n                    (ngModelChange)=\"toggleParamToDisplay(bigItem.key + '.' + item.value, item.checked)\"\n      >\n      </mat-checkbox>\n      <label class=\"ellipsis\">{{item.value}}</label>\n    </div>\n  </mat-expansion-panel>\n</div>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {compareByFieldFunc} from '@common/tasks/tasks.utils';\n\nexport type HyperParams<T> = ReadonlyMap<string, T[]>;\n\n@Component({\n  selector: 'sm-grouped-checked-filter-list',\n  templateUrl: './grouped-checked-filter-list.component.html',\n  styleUrls: ['./grouped-checked-filter-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GroupedCheckedFilterListComponent {\n\n  renameMap = {_legacy: 'General'};\n\n  public expanded = {};\n  public searchText: string;\n  public itemsObjectList: HyperParams<{ checked: boolean; value: string }>;\n  public selectionLimitReached: boolean;\n\n  @Input() limitSelection = 9999;\n  @Input() titleText: string;\n  @Input() placeholderText: string;\n  @Input() selectedItemsListMapper = (data) => data.id;\n  @Input() selectedItemsListPrefix = 'hyperparams.';\n  private _itemsList: { [section: string]: { [key: string]: any } };\n  private _selectedItemsList: string[];\n\n  @Input() set selectedItemsList(selectedItemsList: any[]) {\n    this._selectedItemsList = selectedItemsList;\n    if (selectedItemsList && this.itemsList) {\n      this.itemsObjectList = this.getItemsObjectList(this.itemsList);\n    }\n    this.selectionLimitReached = selectedItemsList && (Object.values(selectedItemsList) as any).flat().length >= this.limitSelection;\n  }\n\n  get selectedItemsList() {\n    return this._selectedItemsList;\n  }\n\n  @Input() filterItemsLabel: string;\n  @Input() selectFilteredItems: boolean;\n\n  @Input() set itemsList(itemsList: { [section: string]: { [key: string]: any } }) {\n    this._itemsList = itemsList;\n    if (this.selectedItemsList && itemsList) {\n      this.itemsObjectList = this.getItemsObjectList(itemsList);\n    }\n  }\n\n  get itemsList() {\n    return this._itemsList;\n  }\n\n  private getItemsObjectList = (itemsList: { [section: string]: { [key: string]: string } }) =>\n    Object.entries(itemsList).reduce((acc, [section, params]) => ({\n          ...acc,\n          [section]: Object.entries(params).map(([paramKey,]) => ({\n              value: paramKey,\n              checked: this.selectedItemsList.map(this.selectedItemsListMapper).includes(`${this.selectedItemsListPrefix}${section}.${paramKey}`)\n            }))\n        })\n      , {}) as HyperParams<{ checked: boolean; value: string }>;\n\n  @Output() selectedItems = new EventEmitter<{ param: string; value: any }>();\n  @Output() clearSelection = new EventEmitter();\n  @Output() hideFilteredItems = new EventEmitter();\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  public toggleParamToDisplay(param, value) {\n    this.selectedItems.emit({param, value});\n  }\n\n  public searchQ(value) {\n    this.searchText = value;\n    this.changeDetectorRef.detectChanges();\n\n  }\n\n  onClearSelection() {\n    this.clearSelection.emit();\n  }\n\n  trackByKeyFn = (index, item) => item.key;\n\n  trackByValFn = (index, item) => item.value;\n\n  compareByKey = compareByFieldFunc('key');\n\n  toggleExpand(name) {\n    this.expanded[name] = !this.expanded[name];\n  }\n}\n","<div *ngIf=\"showRow\" class=\"labeled-row\">\n  <div class=\"label-container\" [ngClass]=\"labelClass\">{{label}}</div>\n  <div class=\"content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'sm-labeled-row',\n  templateUrl: './labeled-row.component.html',\n  styleUrls: ['./labeled-row.component.scss']\n})\nexport class LabeledRowComponent implements OnInit {\n  @Input() label: string;\n  @Input() showRow? = true;\n  @Input() labelClass: string;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {SelectableListItem} from '../selectable-list/selectable-list.model';\n\n@Component({\n  selector       : 'sm-selectable-filter-list',\n  templateUrl    : './selectable-filter-list.component.html',\n  styleUrls      : ['./selectable-filter-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectableFilterListComponent {\n  private _searchTerm: string;\n  private _list: Array<SelectableListItem>;\n  public filteredList: SelectableListItem[];\n  public searchText: string;\n\n  @Input() set searchTerm(searchTerm: string) {\n    this.filteredList = this.list ? this.filterList(this.list, searchTerm) : [];\n    this._searchTerm  = searchTerm;\n  }\n\n  get searchTerm() {\n    return this._searchTerm;\n  }\n\n  @Input() checkedList: Array<any> = [];\n  @Input() selected: string;\n  @Input() placeholder: string = 'Search';\n  @Input() titleLabel: string;\n  @Input() checkAllIcon: string;\n  @Output() itemSelect             = new EventEmitter<string>();\n  @Output() hiddenChanged          = new EventEmitter<Array<SelectableListItem['value']>>();\n  @Output() searchTermChanged      = new EventEmitter<string>();\n\n  @Input() set list(list: Array<SelectableListItem>) {\n    this._list        = list;\n    this.filteredList = this.filterList(list, this.searchTerm);\n  }\n\n  get list() {\n    return this._list;\n  }\n\n  filterList(list, searchTerm): Array<SelectableListItem> {\n    if (!searchTerm || searchTerm === '') {\n      return list.slice();\n    } else {\n      return list.filter((item) => item.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n  }\n\n  onSearchTermChanged(value: string) {\n    this.searchText = value;\n    this.searchTermChanged.emit(value);\n  }\n\n  public toggleHide(id) {\n    const newHiddenList = this.checkedList.includes(id) ? this.checkedList.filter(i => i !== id) : [...this.checkedList, id];\n    this.hiddenChanged.emit(newHiddenList);\n  }\n\n  toggleHideAll() {\n    if (this.checkedList.length > 0) {\n      this.hiddenChanged.emit([]);\n\n    } else {\n      const allValues = this.list.map((i) => i.value);\n      this.hiddenChanged.emit(allValues);\n    }\n  }\n\n}\n","<div class=\"d-flex justify-content-between mb-2\">\n  <span class=\"font-weight-bold\">{{titleLabel}}</span>\n</div>\n<sm-search\n  [value]=\"searchText\"\n  class=\"underline-search\"\n  [minimumChars]=\"0\"\n  [debounceTime]=\"0\"\n  [placeholder]=\"placeholder\"\n  (valueChanged)=\"onSearchTermChanged($event)\"\n></sm-search>\n<span class=\"toggle-all-text\" (click)=\"toggleHideAll()\">{{checkedList.length > 0 ? 'Show all' : 'Hide all'}} </span>\n<sm-selectable-list\n  [list]=\"filteredList\"\n  [selected]=\"selected\"\n  [checkedList]=\"checkedList\"\n  (onItemSelect)=\"itemSelect.emit($event)\"\n  (onItemCheck)=\"toggleHide($event)\"\n>\n</sm-selectable-list>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {PlotData} from 'plotly.js';\nimport {isEqual} from 'lodash/fp';\n\nexport interface GroupedList {\n  [metric: string]: { [variant: string]: { [experimentId: string]: PlotData } };\n}\n\n@Component({\n  selector: 'sm-selectable-grouped-filter-list',\n  templateUrl: './selectable-grouped-filter-list.component.html',\n  styleUrls: ['./selectable-grouped-filter-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectableGroupedFilterListComponent {\n  private _searchTerm: string;\n  private _list: GroupedList;\n  public filteredList: GroupedList;\n  public searchText: string;\n\n  @Input() set list(list: GroupedList) {\n    if (!isEqual(this._list, list)) {\n      this.hideChildrenForHiddenParent(list);\n    }\n    this._list = list;\n    this.filteredList = this.filterList(list, this.searchTerm);\n  }\n\n  get list() {\n    return this._list;\n  }\n\n  @Input() set searchTerm(searchTerm: string) {\n    this.filteredList = this.list ? this.filterList(this.list, searchTerm) : [];\n    this._searchTerm = searchTerm;\n  }\n\n  get searchTerm() {\n    return this._searchTerm;\n  }\n\n  @Input() checkedList: Array<any> = [];\n  @Input() selected: string;\n  @Input() titleLabel: string;\n  @Input() checkAllIcon: string;\n  @Output() itemSelect = new EventEmitter<string>();\n  @Output() hiddenChanged = new EventEmitter<any>();\n  @Output() searchTermChanged = new EventEmitter<string>();\n\n\n  filterList(list, searchTerm) {\n    if (!searchTerm || searchTerm === '') {\n      return list;\n    } else {\n      const filtered = {};\n      Object.keys(list).forEach(key => {\n        if (key.toLowerCase().includes(searchTerm.toLowerCase())) {\n          filtered[key] = list[key];\n        } else {\n          const subFiltered = {};\n          Object.keys(list[key]).forEach(subKey => {\n            if (subKey.toLowerCase().includes((searchTerm).toLowerCase())) {\n              subFiltered[subKey] = list[key][subKey];\n            }\n          });\n          if (Object.keys(subFiltered).length > 0) {\n            filtered[key] = subFiltered;\n          }\n        }\n      });\n      return filtered;\n    }\n  }\n\n  private hideChildrenForHiddenParent(list: GroupedList) {\n    const newHiddenList = [...this.checkedList];\n    let hiddenListChanged = false;\n    Object.entries(list).forEach(([parent, children]) => {\n      if (this.checkedList.includes(parent) && Object.keys(children).length > 0) {\n        hiddenListChanged = true;\n        Array.prototype.push.apply(newHiddenList, (Object.keys(children).map(child => parent + child)));\n      }\n    });\n    if (hiddenListChanged) {\n      this.hiddenChanged.emit(Array.from(new Set(newHiddenList)));\n    }\n  }\n\n  onSearchTermChanged(value: string) {\n    this.searchText = value;\n    this.searchTermChanged.emit(value);\n  }\n\n  public toggleHide({pathString, parent}) {\n    let newHiddenList = this.checkedList.includes(pathString) ? this.checkedList.filter(i => i !== pathString) : [...this.checkedList, pathString];\n    newHiddenList = this.AreAllChildrenHidden(parent, newHiddenList) ? [...newHiddenList, parent] : newHiddenList.filter(i => i !== parent);\n    this.hiddenChanged.emit(newHiddenList);\n  }\n\n  private AreAllChildrenHidden(parent, newHiddenList: any[]) {\n    return Object.keys(this.list[parent]).every(item => newHiddenList.includes(parent + item));\n  }\n\n  toggleHideAll() {\n    if (Object.keys(this.checkedList).length > 0) {\n      this.hiddenChanged.emit([]);\n    } else {\n      const allValues = [];\n      Object.keys(this.list).forEach(key => {\n        allValues.push(key);\n        Object.keys(this.list[key]).forEach(itemKey => {\n          allValues.push(key + itemKey);\n        });\n      });\n      this.hiddenChanged.emit(allValues);\n    }\n  }\n\n  toggleHideGroup(event) {\n    const key = event.key;\n    let allValues = [...this.checkedList];\n    if (event.hide) {\n      allValues = !allValues.includes(key) ? [...allValues, key] : allValues;\n      Object.keys(this.list[key]).forEach(itemKey => {\n        const keyItemKey = key + itemKey;\n        if (!allValues.includes(keyItemKey)) {\n          allValues.push(keyItemKey);\n        }\n      });\n    } else {\n      allValues = allValues.filter(i => i !== key);\n      Object.keys(this.list[key]).forEach(itemKey => {\n        const keyItemKey = key + itemKey;\n        if (allValues.includes(keyItemKey)) {\n          allValues = allValues.filter(longKey => longKey !== (keyItemKey));\n        }\n      });\n    }\n    this.hiddenChanged.emit(allValues);\n  }\n}\n","<div class=\"d-flex justify-content-between mb-2\">\n  <span class=\"font-weight-bold\">{{titleLabel}}</span>\n</div>\n<sm-search\n  [value]=\"searchText\"\n  [minimumChars]=\"0\"\n  [debounceTime]=\"0\"\n  class=\"underline-search\"\n  placeholder=\"Find scalars\"\n  (valueChanged)=\"onSearchTermChanged($event)\"\n></sm-search>\n<span class=\"toggle-all-text\" (click)=\"toggleHideAll()\">{{checkedList.length > 0 ? 'Show all' : 'Hide all'}} </span>\n<sm-grouped-selectable-list\n  [list]=\"filteredList\"\n  [searchTerm]=\"searchTerm\"\n  [selected]=\"selected\"\n  [checkedList]=\"checkedList\"\n  (onItemSelect)=\"itemSelect.emit($event)\"\n  (onItemCheck)=\"toggleHide($event)\"\n  (onGroupCheck)=\"toggleHideGroup($event)\"\n>\n</sm-grouped-selectable-list>\n","<ul class=\"list\">\n  <li\n    *ngFor=\"let item of showList\"\n    class=\"item\"\n    [class.unchecked]=\"!item.visible\"\n    (click)=\"onItemSelect.emit(item.value)\"\n  >\n    <div class=\"pointer ellipsis pr-3\" [smTooltip]=\"item.value\" [showDelay]=\"500\">{{item.value}}</div>\n    <i (click)=\"onItemCheck.emit(item.value); $event.stopPropagation()\" class=\"fa\" [class]=\"item.visible? checkIcon[0] : checkIcon[1]\"></i>\n  </li>\n</ul>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {SelectableListItem} from './selectable-list.model';\n\n@Component({\n  selector       : 'sm-selectable-list',\n  templateUrl    : './selectable-list.component.html',\n  styleUrls      : ['./selectable-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectableListComponent implements OnChanges{\n  public showList: SelectableListItem[] = [];\n\n  @Input() list: SelectableListItem[] = [];\n  @Input() checkedList: string[];\n  @Input() selected: SelectableListItem['value'];\n  @Input() checkIcon: string[]               = ['fa-eye', 'fa-eye-slash'];\n  @Output() onItemSelect                   = new EventEmitter<string>();\n  @Output() onItemCheck                    = new EventEmitter<string>();\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.list || changes.checkedList)) {\n      this.showList = this.list.map(item => ({...item, visible: !this.checkedList.includes(item.name) } as SelectableListItem));\n      this.cdr.detectChanges();\n    }\n  }\n}\n","<div class=\"row headers\" *ngIf=\"!hideHeaders\">\n  <div *ngFor=\"let col of cols; trackBy: trackById\" [class]=\"col.class\">{{col.header}}</div>\n</div>\n<div cdkDropList (cdkDropListDropped)=\"drop($event)\" [cdkDropListDisabled]=\"!enableDragAndDrop\">\n  <div\n    *ngFor=\"let row of rowsData; let i = index; trackBy: trackByFn\"\n    cdkDrag\n    cdkDragPreviewContainer=\"parent\"\n    class=\"table-row\"\n    [class.toggleable]=\"isRowToggleable(i)\"\n    [class.open]=\"open[i]\"\n    [class.draggable]=\"enableDragAndDrop\"\n    (click)=\"toggleRow(i)\"\n  >\n    <div class=\"row align-items-center\">\n      <ng-template\n        [ngTemplateOutlet]=\"templateRef\"\n        [ngTemplateOutletContext]=\"{$implicit: cols[i], row: row, rowIndex: i}\">\n      </ng-template>\n    </div>\n  </div>\n  <div *ngIf=\"rowsData?.length === 0\" class=\"empty-state\">\n    {{ noDataMessage || 'No data to show'}}\n  </div>\n</div>\n","import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {FormsTrackBy, trackById} from '../../../utils/forms-track-by';\n\n@Component({\n  selector: 'sm-simple-table-2',\n  templateUrl: './simple-table.component.html',\n  styleUrls: ['./simple-table.component.scss'],\n})\nexport class SimpleTableComponent2 extends FormsTrackBy {\n\n  public open = [];\n  public trackById = trackById;\n\n  get formData() {\n    return this.rowsData;\n  }\n  @Input() rowsConfig: Array<{ collapsible: boolean }> = [];\n  @Input() rowsData: Array<any>;\n  @Input() cols: { class: string; header: string; subHeader?: string }[];\n  @Input() hideHeaders = false;\n  @Input() enableDragAndDrop = false;\n  @Input() noDataMessage: string;\n  @Output() entryDropped = new EventEmitter<CdkDragDrop<any>>();\n\n  @ContentChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  isRowToggleable(rowIndex) {\n    return this.rowsConfig[rowIndex] && this.rowsConfig[rowIndex].collapsible;\n  }\n\n  toggleRow(rowIndex) {\n    if (this.isRowToggleable(rowIndex)) {\n      this.open[rowIndex] = !this.open[rowIndex];\n    }\n  }\n\n  drop($event: CdkDragDrop<any, any>) {\n    this.entryDropped.emit($event);\n  }\n}\n","<div class=\"table-card\"\n     [class.two-columns]=\"tableType === 'model'\"\n     [ngClass]=\"{'selected':selected, 'odd': odd, 'checked':checked, 'contexted': activeContextRow?.id ===rowData?.id && contextMenuOpen}\">\n    <div class=\"d-flex align-items-start justify-content-around content-row mx-2\">\n      <ng-content select=\"sm-checkbox-control\"></ng-content>\n    </div>\n    <div *ngIf=\"rowData.type\" class=\"d-flex align-items-start justify-content-around content-row mr-3\">\n      <ng-content select=\"sm-experiment-type-icon-label\"></ng-content>\n    </div>\n    <div class=\"d-flex flex-column flex-grow-1 columns-container\">\n      <div class=\"d-flex content-row flex-shrink-1\">\n        <div class=\"name-container\">\n          <div class=\"ellipsis name\">{{cardName}}</div>\n          <ng-content select=\"[sm-name-icon]\"></ng-content>\n\n        </div>\n        <div class=\"d-flex ml-auto\">\n          <ng-content select=\"sm-experiment-system-tags\"></ng-content>\n          <ng-content select=\"sm-experiment-status-icon-label\"></ng-content>\n          <ng-content select=\"sm-model-tags\"></ng-content>\n        </div>\n      </div>\n      <ng-content select=\"sm-tag-list\"></ng-content>\n      <ng-content select=\"[compact-columns-data]\"></ng-content>\n  </div>\n","import {Component, Input} from '@angular/core';\nimport {get} from 'lodash/fp';\n\n@Component({\n  selector   : 'sm-table-card',\n  templateUrl: './table-card.component.html',\n  styleUrls  : ['./table-card.component.scss']\n})\nexport class TableCardComponent {\n  public odd: boolean;\n  @Input() columns;\n  @Input() cardName;\n  @Input() rowData;\n  @Input() activeContextRow;\n  @Input() contextMenuOpen;\n  @Input() tableType;\n\n\n  @Input() set rowNumber(rowNumber) {\n    this.odd = rowNumber % 2 === 1;\n  }\n\n  @Input() selected;\n  @Input() checked: boolean;\n\n  constructor() {\n  }\n\n  _get(selector, obj) {\n    return get(selector, obj);\n  }\n\n  getValueFromRow(row) {\n    return get(row.id, this.rowData);\n  }\n}\n","import {TableSelectionState} from '@common/constants';\nimport {allItemsAreSelected} from '../../../utils/shared-utils';\nimport {unionBy} from 'lodash/fp';\nimport {AfterViewInit, EventEmitter, Input, Output, QueryList, ViewChildren, Directive, OnDestroy} from '@angular/core';\nimport {ISmCol, TABLE_SORT_ORDER, TableSortOrderEnum} from './table.consts';\nimport {filter, take} from 'rxjs/operators';\nimport {TableComponent} from './table.component';\nimport {SortMeta} from 'primeng/api';\n\n@Directive()\nexport abstract class BaseTableView implements AfterViewInit, OnDestroy{\n  public selectionState: TableSelectionState;\n  protected entitiesKey: string;\n  public selectedEntitiesKey: string;\n  public contextMenuActive: boolean;\n  public table: TableComponent;\n\n  @Input() selectionMode: 'multiple' | 'single' | null = 'single';\n  @Input() colsOrder: string[];\n  private _tableSortFields: SortMeta[];\n  public tableSortFieldsObject: {[fieldName: string]: {index: number; field: string; order: TableSortOrderEnum}} = {};\n\n  @Input() set tableSortFields(tableSortFields: SortMeta[]) {\n    this._tableSortFields = tableSortFields;\n    this.tableSortFieldsObject = tableSortFields.reduce((acc, sortField, i) => {\n      acc[sortField.field] = {\n        index: i,\n        field: sortField.field,\n        order: sortField.order > 0 ? TABLE_SORT_ORDER.ASC : TABLE_SORT_ORDER.DESC\n      };\n      return acc;\n    }, {});\n  }\n\n  get tableSortFields() {\n    return this._tableSortFields;\n  }\n\n  @Input() tableSortOrder: TableSortOrderEnum;\n  @Input() minimizedView: boolean;\n  protected prevSelected: any;\n\n  @Input() set split(size: number) {\n    this.table?.resize();\n  }\n\n\n  @Output() filterChanged = new EventEmitter() as EventEmitter<{ col: ISmCol; value: any; andFilter?: boolean }>;\n  @Output() columnsReordered = new EventEmitter<string[]>();\n  @ViewChildren(TableComponent) tables: QueryList<TableComponent>;\n\n  ngAfterViewInit(): void {\n    this.tables.changes\n      .pipe(filter((comps: QueryList<TableComponent>) => !!comps.first), take(1))\n      .subscribe((comps: QueryList<TableComponent>) => {\n        this.table = comps.first;\n        window.setTimeout(() => this.table?.focusSelected());\n        this.afterTableInit();\n      });\n    this.tables.forEach(item => this.table = item);\n  }\n\n  updateSelectionState() {\n    this.selectionState = allItemsAreSelected(this[this.entitiesKey], this[this.selectedEntitiesKey]) ? 'All' : this[this.selectedEntitiesKey].length > 0 ? 'Partial' : 'None';\n  }\n\n  headerCheckboxClicked() {\n    let selectionUnion;\n    if (this.selectionState === 'None') {\n      selectionUnion = unionBy('id', this[this.entitiesKey], this[this.selectedEntitiesKey]);\n    } else {\n      selectionUnion = [];\n    }\n    this.emitSelection(selectionUnion);\n  }\n\n  isRowSelected(entity: { id: any }) {\n    if (!entity || this[this.selectedEntitiesKey] === undefined) {\n      return false;\n    }\n\n    return this[this.selectedEntitiesKey].length > 0 &&\n      (this[this.selectedEntitiesKey].some((selectedEntity: { id: any }) => selectedEntity.id === entity.id));\n  }\n\n  setContextMenuStatus(menuStatus: boolean) {\n    this.contextMenuActive = menuStatus;\n  }\n\n  getSelectionRange<T>(change: { field: string; value: boolean; event: Event }, entity: T): T[] {\n    let addList = [entity];\n    if ((change.event as MouseEvent).shiftKey && this.prevSelected) {\n      let index1 = this[this.entitiesKey].indexOf(this.prevSelected);\n      let index2 = this[this.entitiesKey].indexOf(entity);\n      if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n      }\n      addList = this[this.entitiesKey].slice(index1, index2 + 1);\n    }\n    this.prevSelected = entity;\n    return addList;\n  }\n\n  tableFilterChanged(col: ISmCol, event) {\n    this.filterChanged.emit({col, value: event.value, andFilter: event.andFilter});\n    this.scrollTableToTop();\n  }\n\n  tableAllFiltersChanged(event: {col: string; value: unknown; matchMode?: string}) {\n    this.filterChanged.emit({col: {id: event.col}, value: event.value, andFilter: event.matchMode === 'AND'});\n    this.scrollTableToTop();\n  }\n\n  scrollTableToTop() {\n    this.table?.table.scrollTo({top: 0});\n  }\n\n  afterTableInit() {\n    const key = this.selectedEntitiesKey.slice(0, -1);\n    if (this[key]) {\n      window.setTimeout(() => this.table.scrollToElement(this[key]), 100);\n    }\n  }\n\n  abstract emitSelection(selection: any[]);\n\n  ngOnDestroy(): void {\n    this.table = null;\n  }\n}\n","<div class=\"filter-sort-container d-flex align-items-center\"\n     [ngClass]=\"isFiltered() ? 'active' : 'deactive'\">\n  <div mat-button class='cell pointer'>\n    <i [class]=\"'icon ' + (isFiltered()? 'i-filter-on':'i-filter-off')\" [matMenuTriggerFor]=\"menu\"></i>\n  </div>\n  <mat-menu #menu=\"matMenu\" class=\"table-card-filter-menu\" classList=\"light-theme\">\n    <ng-container *ngFor=\"let option of (options | keyvalue); trackBy: trackByKey\">\n      <ng-template let-col\n                   [ngTemplateOutletContext]=\"{$implicit: getColumnByOption(option)}\"\n                   [ngTemplateOutlet]=\"column\" #column\n      >\n        <button mat-menu-item [matMenuTriggerFor]=\"subMenu\" (menuOpened)=\"menuOpened.emit(col)\">\n          <i [class.hidden]=\"!isOptionFiltered(option.key)\" class=\"filter-point icon i-v-black xs\"></i> {{col?.header}}\n        </button>\n        <mat-menu #subMenu=\"matMenu\" class=\"table-card-filter-menu light-theme\" (close)=\"closeMenu(col)\">\n          <form class=\"filter-form\">\n            <mat-form-field appearance=\"fill\" *ngIf=\"col?.searchableFilter\" smClickStopPropagation class=\"tags-menu-input w-100\">\n              <input matInput (input)=\"setSearchTerm($event, option.key)\" name=\"filter\" [(ngModel)]=\"searchTerms[option.key]\" autocomplete=\"off\">\n              <i matSuffix [class]=\"'fa mr2 ' + (searchTerms[option.key]? 'fa-times pointer':'fa-search')\" (click)=\"searchTerms[option.key] && clearSearch(option.key)\"></i>\n            </mat-form-field>\n          </form>\n          <div *ngIf=\"col?.andFilter\" class=\"filter-type\" smClickStopPropagation>\n          <span class=\"link mr-3\" [class.selected]=\"filterMatch[option.key] !== 'AND'\"\n                (click)=\"toggleCombination(option.key)\">Any</span>\n            <span class=\"link\" [class.selected]=\"filterMatch[option.key] === 'AND'\"\n                  (click)=\"toggleCombination(option.key)\">All</span>\n          </div>\n          <div class=\"results\" [class.scroll]=\"col.searchableFilter\" *ngIf=\"col\" smClickStopPropagation>\n             <sm-checkbox-three-state-list\n               [supportExcludeFilter]=\"col.excludeFilter\"\n               [checkedList]=\"value[col.id]\"\n               [options]=\"option.value | filter : searchTerms[option.key]: 'label'\"\n               (filterChanged)=\"emitFilterChangedCheckBox(option.key, $event)\"\n             > </sm-checkbox-three-state-list>\n          </div>\n          <div class=\"fixed-options\" *ngIf=\"option.key==='tags'\">\n            <mat-divider></mat-divider>\n            <div *ngIf=\"subOptions?.length\" class=\"fixed-options-subheader\">\n              {{fixedOptionsSubheader}}\n            </div>\n            <sm-menu-item\n              *ngFor=\"let option of subOptions; trackBy: trackByLabel\"\n              [itemLabel]=\"option.label\"\n              [checked]=\"subValue?.includes(option.value)\" [selectable]=\"true\" [itemValue]=\"option.value\"\n              (itemClicked)=\"onSubFilterChanged({id:'system_tags'},$event)\"\n            ></sm-menu-item>\n          </div>\n        </mat-menu>\n      </ng-template>\n    </ng-container>\n  </mat-menu>\n</div>\n\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {ISmCol} from '../table.consts';\nimport {addOrRemoveFromArray} from '../../../../utils/shared-utils';\nimport {MatMenuTrigger} from '@angular/material/menu';\n\n@Component({\n  selector   : 'sm-table-card-filter-template',\n  templateUrl: './table-card-filter-template.component.html',\n  styleUrls  : ['./table-card-filter-template.component.scss']\n})\nexport class TableCardFilterTemplateComponent {\n\n  private _value: Array<string>;\n  public searchTerms = {};\n\n  @Input() set value(value: any) {\n    this._value = value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  @Input() fixedOptionsSubheader;\n  @Input() subValue: string[] = [];\n  @Input() subOptions: {label: string; value: string}[];\n  @Input() options: { [col: string]: { label: string; value: string; tooltip?: string }[] };\n  @Input() columns: ISmCol[];\n  @Input() filterMatch: {[colId: string]: string};\n  @Output() subFilterChanged = new EventEmitter();\n  @Output() filterChanged = new EventEmitter<{col: string; value: unknown; matchMode?: string}>();\n  @Output() menuClosed = new EventEmitter<ISmCol>();\n  @Output() menuOpened = new EventEmitter<ISmCol>();\n\n  @ViewChild(MatMenuTrigger, {static: true}) trigger: MatMenuTrigger;\n\n  trackByKey = (index: number, item: {key: string; value: { label: string; value: string; tooltip?: string }[]}) => item['key'];\n  trackByLabel = (index: number, item) => item.label;\n\n  onFilterChanged(colId: string, val) {\n    if (val) {\n      const newValues = addOrRemoveFromArray(this.value[colId], val.itemValue);\n      this.filterChanged.emit({col: colId, value: newValues, matchMode: this.filterMatch?.[colId]});\n    }\n  }\n\n  emitFilterChangedCheckBox(colId: string, values: string[]) {\n    this.filterChanged.emit({col: colId, value: values, matchMode: this.filterMatch?.[colId]});\n\n  }\n  onSubFilterChanged(col, val) {\n    if (val) {\n      const newValues = addOrRemoveFromArray(this.subValue, val.itemValue);\n      this.subFilterChanged.emit({col, value: newValues});\n    }\n  }\n\n  isFiltered() {\n    return ((this.value && Object.keys(this.value).filter(col => this.value[col].length > 0).length > 0) || (this.subValue && this.subValue.length > 0));\n  }\n\n\n  isOptionFiltered(key: string) {\n    return this.value && this.value[key]?.length > 0;\n  }\n\n\n  setSearchTerm($event, key: string) {\n    this.searchTerms[key] = $event.target.value;\n  }\n\n  closeMenu(col: ISmCol) {\n    this.searchTerms = {};\n    this.menuClosed.emit(col);\n  }\n\n  clearSearch(key: string) {\n    this.searchTerms[key]='';\n    this.setSearchTerm({target:{value:''}}, key);\n  }\n\n  toggleCombination(colId: string) {\n    this.filterMatch[colId] = this.filterMatch[colId] === 'AND' ? '' : 'AND';\n    if (this.value?.[colId]?.length > 1) {\n      this.filterChanged.emit({col: colId, value: this.value[colId], matchMode: this.filterMatch[colId]});\n    }\n  }\n\n  getColumnByOption(option: any) {\n    return this.columns.find(col => col.id === option.key);\n  }\n}\n","import {ChangeDetectorRef, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {getValueOrDefault, hasValue} from '../../../../utils/helpers.util';\n\nexport interface IDurationThan {\n  checked: boolean;\n  value: number | '' | null;\n}\n\nexport const emptyDuration ={\n  checked: false,\n  value: 0\n};\n\nexport type DurationParameters = 'lessThan' | 'greaterThan';\n\n@Component({\n  template: ''\n})\nexport abstract class TableDurationSortBase {\n  @Output() filterChanged = new EventEmitter<{ value: any }>();\n  @Output() onHasError = new EventEmitter<boolean>();\n\n  @Input() set value(value: Array<string | number | null>) {\n    this.updateValue(value);\n  }\n\n  abstract parseServerDataFunction(data: null | string | number): number;\n  abstract prepareDataToServerFunction(data: null | string | number): string | number | null;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n  lessThan: IDurationThan = {\n    checked: false,\n    value: null\n  };\n\n  greaterThan: IDurationThan = {\n    checked: false,\n    value: null\n  };\n\n  hasTimeError = false;\n  private isFirstTimeUpdate = true;\n  public updateValue(value: Array<string | number | null>): void {\n\n    if(value === undefined || value?.length === 0) {\n      this.greaterThan = emptyDuration;\n      this.lessThan = emptyDuration;\n      this.isFirstTimeUpdate = true;\n      this._updateValue();\n      return;\n    }\n\n    if (this.isFirstTimeUpdate) {\n      this.isFirstTimeUpdate = false;\n      const data = dataInputOutputHelper.decodeFromServerData(value, {greaterThan: this.greaterThan, lessThan: this.lessThan}, this.parseServerDataFunction);\n      this.greaterThan = data.greaterThan;\n      this.lessThan    = data.lessThan;\n      this._updateValue();\n    }\n\n  }\n\n  /**\n   * If we need to have data adjustment after we have a new value;\n   * If no uses, keep it empty;\n   */\n  abstract _updateValue(): void;\n\n  get isFiltered(): boolean {\n    return this.shouldValidate();\n  }\n\n  /**\n   * Set checkbox as active or not and update the State;\n   * @param checked;\n   * @param checkBoxName\n   */\n  public setCheckBox(checked: boolean, checkBoxName: DurationParameters, shouldValidate = true): void {\n    this[checkBoxName] = {...this[checkBoxName], checked};\n    shouldValidate && this.validateAfterChanges();\n  }\n\n  /**\n   * Set the time for the current object;\n   * If checked, update the Store;\n   * @param value\n   * @param valueName\n   */\n  public timeStampChanged(value: number, valueName: DurationParameters): void {\n    if (this.checkIfSameValues(value, valueName)) {\n      return;\n    }\n    if (!hasValue(this[valueName].value) && hasValue(value)) {\n      this.setCheckBox(true, valueName, false);\n    } else if (!hasValue(value)) {\n      this.setCheckBox(false, valueName);\n    }\n\n    this[valueName] = {...this[valueName], value};\n\n    if (this[valueName]?.checked) {\n      this.validateAfterChanges();\n    }\n\n  }\n\n  /**\n   * Prevent from updating if we have the same value from the input;\n   * @param value\n   * @param valueName\n   * @private\n   */\n  private checkIfSameValues(value: number, valueName: DurationParameters) {\n    return value === this[valueName].value;\n  }\n\n  /**\n   * After value changed \\ checkbox active Validate if need to update the Store;\n   * @private\n   */\n  private validateAfterChanges() {\n    if (this.shouldValidate()) {\n      const isValidAfterChanges = this.isValidAfterChanges();\n      this.hasTimeError = !isValidAfterChanges;\n      this.onHasError.emit(!isValidAfterChanges);\n      if (isValidAfterChanges) {\n        this.updateState();\n      } else {\n        this.cdr.detectChanges();\n      }\n      return;\n    }\n\n    if (!this.lessThan.checked && !this.greaterThan.checked) {\n      this.resetValues();\n      return;\n    }\n  }\n\n  private resetValues() {\n    this.updateState();\n  }\n\n  private shouldValidate() {\n    return this.greaterThan.checked || this.lessThan.checked;\n  }\n\n  private isValidAfterChanges() {\n    if (this.greaterThan.checked && this.lessThan.checked) {\n      return this.lessThan.value >= this.greaterThan.value;\n    }\n    return this.greaterThan.checked || this.lessThan.checked;\n  }\n\n  /**\n   * Update the Store;\n   * @private\n   */\n  private updateState() {\n    const value = dataInputOutputHelper.encodeToServerData({greaterThan: this.greaterThan, lessThan: this.lessThan}, this.prepareDataToServerFunction);\n    this.filterChanged.emit({value});\n  }\n}\n\nconst enum SERVER_POSITION {\n  GREATER_THAN,\n  LESS_THAN\n}\n/**\n * Server communication helper;\n * to the server [greaterThan, lessThan]\n * from the server [greaterThan, lessThan] -> {greaterThan, lessThan}\n */\nexport class dataInputOutputHelper {\n    static encodeToServerData(\n                              data: { greaterThan: IDurationThan; lessThan: IDurationThan },\n                              prepareDataToServerFunction: (data) => string | number\n    ): Array<string | number | null> {\n      let greaterThan = null;\n      let lessThan = null;\n      const positions = [] as Array<string | number | null>;\n\n      if (data?.greaterThan?.checked) {\n        greaterThan = prepareDataToServerFunction(data.greaterThan.value);\n      }\n      if (data?.lessThan?.checked) {\n        lessThan = prepareDataToServerFunction(data.lessThan.value);\n      }\n\n      if (lessThan !== null || greaterThan !== null) {\n        positions[SERVER_POSITION.LESS_THAN] = lessThan;\n        positions[SERVER_POSITION.GREATER_THAN] = greaterThan;\n      }\n\n      return positions;\n    }\n  static decodeFromServerData(\n              data: Array<string | number | null> | null = [],\n              useOldValues?: {greaterThan?: IDurationThan; lessThan?: IDurationThan},\n              parseServerDataFunction?: (data) => number): {greaterThan: IDurationThan; lessThan: IDurationThan}\n  {\n      // no data from the store\n      if(data.length === 0) {\n        return {\n          greaterThan: {\n            value: useOldValues?.greaterThan.value ?? null,\n            checked: false\n          },\n          lessThan: {\n            value: useOldValues?.lessThan.value ?? null,\n            checked: false\n          }\n        };\n      }\n      // got data from the store\n      return {\n        greaterThan: {\n          value: (getValueOrDefault(parseServerDataFunction(data[SERVER_POSITION.GREATER_THAN]), useOldValues?.greaterThan.value ?? null) ),\n          checked: data[SERVER_POSITION.GREATER_THAN] !== null && data[SERVER_POSITION.GREATER_THAN] !== ''\n        },\n        lessThan: {\n          value: (getValueOrDefault(parseServerDataFunction(data[SERVER_POSITION.LESS_THAN]), useOldValues?.lessThan.value ?? null) ),\n          checked: data[SERVER_POSITION.LESS_THAN] !== null && data[SERVER_POSITION.LESS_THAN] !== ''\n        }\n      };\n    }\n}\n","<form class=\"filter-form p-4\" #templateForm=\"ngForm\" smClickStopPropagation smKeyDownStopPropagation>\n  <div>\n    <div class=\"mb-1 label\">From</div>\n    <div class=\"d-flex \">\n      <!--<sm-checkbox-control\n        [formData]=\"greaterThan.checked\"\n        (formDataChanged)=\"setCheckBox(hasGreaterThanValue ? $event.value : false, 'greaterThan')\"\n        class=\"align-self-center pr-2\"\n      >\n      </sm-checkbox-control>-->\n\n      <div class=\"input-duration d-flex align-items-center\">\n        <div class=\"input-border-duration-container pr-3 \">\n          <div class=\"d-flex align-items-center mat-datepicker-container\">\n            <input matInput\n                   [value]=\"_greaterThan.date\"\n                   [matDatepicker]=\"fromPicker\"\n                   placeholder=\"Date\"\n                   (dateChange)=\"$event.value ? setCheckBox(true, 'greaterThan') : null;\n                                  onDateHandler($any($event.value), '_greaterThan')\"\n            >\n            <mat-datepicker-toggle matSuffix [for]=\"fromPicker\"></mat-datepicker-toggle>\n            <mat-datepicker #fromPicker [startAt]=\"$any(_greaterThan.date)\"></mat-datepicker>\n          </div>\n        </div>\n        <div class=\"input-border-duration-container\">\n          <sm-duration-input-list name=\"lessThan\"\n                                  [durationValue]=\"_greaterThan.date ? _greaterThan.time || MINIMUM_TIME_DISPLAY : null\"\n                                  [inputs]=\"[{type: 'hours', placeholder: '--'}, {type: 'minutes', placeholder: '--'}]\"\n                                  [returnFactor]=\"1000\"\n                                  [readonly]=\"!_greaterThan.date\"\n                                  (onDurationChanged)=\"onTimeHandler($event, '_greaterThan')\"></sm-duration-input-list>\n        </div>\n      </div>\n      <div class=\"d-flex align-items-center pl-2\">\n        <i [class]=\"'al-icon ' + (hasGreaterThanValue ? 'al-ico-dialog-x' : 'al-ico-time') + ' sm'\"\n           (click)=\"hasGreaterThanValue ? onResetHandler('greaterThan') : onAutoFillCurrentTimeHandler('greaterThan')\"\n           [smTooltip]=\"hasGreaterThanValue ? 'Clear' : 'Autofill current time'\"\n\n           matTooltipPosition=\"above\"\n        ></i>\n      </div>\n\n    </div>\n  </div>\n\n  <div class=\"pt-2\">\n    <div class=\"mb-1 label\">To</div>\n    <div class=\"d-flex \">\n    <!--  <sm-checkbox-control\n        (formDataChanged)=\"setNowCheckBox(hasLessThanValue ? $event.value : false, 'lessThan')\"\n        [formData]=\"isNowChecked\"\n        class=\"align-self-center pr-2\"\n      >\n      </sm-checkbox-control>-->\n\n      <div class=\"input-duration d-flex align-items-center\" >\n          <div class=\"input-border-duration-container pr-3 \">\n          <div class=\"d-flex align-items-center mat-datepicker-container\">\n            <input matInput\n                   class=\"input-to\"\n                   [value]=\"_lessThan.date\"\n                   [matDatepicker]=\"toPicker\"\n                   placeholder=\"Now\"\n                   (dateChange)=\"$event.value ? setCheckBox(true, 'lessThan') : null;\n                                  onDateHandler($any($event.value), '_lessThan')\"\n            >\n            <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\n            <mat-datepicker #toPicker [startAt]=\"_lessThan.date\"></mat-datepicker>\n          </div>\n        </div>\n        <div class=\"input-border-duration-container\">\n          <sm-duration-input-list\n            [durationValue]=\"_lessThan.date ? _lessThan.time || MINIMUM_TIME_DISPLAY : null\"\n            name=\"greaterThan\"\n            [inputs]=\"[{type: 'hours', placeholder: '--'}, {type: 'minutes', placeholder: '--'}]\"\n            (onDurationChanged)=\"onTimeHandler($event, '_lessThan')\"\n            [readonly]=\"!_lessThan.date\"\n            [returnFactor]=\"1000\"></sm-duration-input-list>\n        </div>\n      </div>\n      <div class=\"d-flex align-items-center pl-2\">\n        <i *ngIf=\"hasLessThanValue\"\n          [class]=\"'al-icon ' + (hasLessThanValue ? 'al-ico-dialog-x' : 'al-ico-time') + ' sm'\"\n           (click)=\"hasLessThanValue ? onResetToDateInput() : onFakeNowCheckbox()\"\n           [smTooltip]=\"hasLessThanValue ? 'Clear' : 'Autofill current time'\"\n           matTooltipPosition=\"above\"\n        ></i>\n      </div>\n    </div>\n  </div>\n</form>\n\n<sm-table-filter-duration-error *ngIf=\"hasTimeError\" [isFullWidth]=\"true\"></sm-table-filter-duration-error>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {DurationParameters, TableDurationSortBase} from '../table-duration-sort.base';\nimport {TIME_IN_MILLI} from '../../../../../utils/time-util';\nimport {MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\nimport {isNil} from 'lodash/fp';\nimport {hasValue} from '../../../../../utils/helpers.util';\n\nexport const MY_DATE_FORMATS = {\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  },\n};\n\ntype privateParameters = '_lessThan' | '_greaterThan';\nconst fromPrivateToGlobal = (privateParameters: privateParameters) => privateParameters.replace('_', '') as DurationParameters;\nconst fromGlobalToPrivate = (parameter: DurationParameters) => '_' + parameter.replace('_', '') as privateParameters;\nconst addUserTimezoneToIsoDate = (data) => {\n  const myDate = new Date(data);\n  const offset = myDate.getTimezoneOffset() * TIME_IN_MILLI.ONE_MIN;\n\n  const withOffset = myDate.getTime();\n  const withoutOffset = withOffset - offset;\n  return withoutOffset;\n}\n@Component({\n  selector: 'sm-table-filter-duration-date-time',\n  templateUrl: './table-filter-duration-date-time.component.html',\n  styleUrls: ['./table-filter-duration-date-time.component.scss'],\n  providers:[\n    { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n    { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS }\n\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableFilterDurationDateTimeComponent  extends TableDurationSortBase implements OnInit {\n  _selectedDate: Date;\n  _selectedTimeInSeconds: number;\n\n  _lessThan = {\n    date: undefined,\n    time: 0\n  };\n  _greaterThan = {\n    date: undefined,\n    time: 0\n  };\n  isFakeNowCheckbox = false;\n  MINIMUM_TIME_DISPLAY = 0.001\n  constructor(cdr: ChangeDetectorRef) {\n    super(cdr);\n  }\n\n  ngOnInit(): void {\n  }\n\n  get hasGreaterThanValue() {\n    return this._greaterThan.date || this._greaterThan.time;\n  }\n  get hasLessThanValue() {\n    return this.isFakeNowCheckbox || this._lessThan.date || this._lessThan.time;\n  }\n  parseServerDataFunction(data): number {\n    if (data) {\n      return addUserTimezoneToIsoDate(data)\n    }\n    return +new Date(data || 0);\n  }\n\n  prepareDataToServerFunction(data): string | null {\n    return  isNil(data) || data === '' || isNaN(data) ? null : new Date(data).toISOString().split('.')[0];\n  }\n\n\n  _updateValue() {\n    const {lessThan: {value: lessThanValue}, greaterThan: {value: greaterThanValue}} = this;\n\n    let lessThanDate, greaterThanDate;\n\n    if (lessThanValue) {\n      lessThanDate = mutedDateToNoHourMinutesSeconds(new Date(lessThanValue));\n    }\n    if (greaterThanValue) {\n      greaterThanDate = mutedDateToNoHourMinutesSeconds(new Date(greaterThanValue));\n    }\n    const lessThanTime = lessThanValue || 0;\n    const greaterThanTime = greaterThanValue || 0;\n\n    this._lessThan = {time: getTimeInSecondsFromDate(lessThanTime), date: lessThanDate};\n    this._greaterThan = {time: getTimeInSecondsFromDate(greaterThanTime), date: greaterThanDate};\n  }\n\n  /**\n   * Handle the change in mat datepicker\n   * @param value\n   * @param valueName\n   * @param emitValue\n   */\n  onDateHandler(value: Date, valueName: privateParameters, emitValue = true): void {\n    this[valueName] = {...this[valueName], date: value};\n    if (!hasValue(value)) {\n      this[valueName] = {...this[valueName], time: null};\n      this.setCheckBox(false, fromPrivateToGlobal(valueName));\n    }else if (!hasValue(this[valueName].time) || this[valueName].time < this.MINIMUM_TIME_DISPLAY) {\n      this.onTimeHandler(this.MINIMUM_TIME_DISPLAY, valueName, false);\n    }\n    emitValue && this.combineDateAndTimeAndEmitValue(valueName);\n  }\n\n  /**\n   * Handle changed in the time component\n   * @param value\n   * @param valueName\n   * @param emitValue\n   */\n  onTimeHandler(value: number, valueName: privateParameters, emitValue = true): void {\n    this[valueName] = {...this[valueName], time: value};\n    emitValue && this.combineDateAndTimeAndEmitValue(valueName);\n  }\n\n  combineDateAndTimeAndEmitValue(valueName: privateParameters): void {\n    const {time: timeInSeconds, date} = this[valueName];\n\n    const timeObject = new Date(+date + timeInSeconds * TIME_IN_MILLI.ONE_SEC);\n\n    const parameterName = valueName.substr(1) as DurationParameters;\n    const returnDateObject = date ? +timeObject : undefined;\n\n    this.timeStampChanged(returnDateObject, parameterName);\n  }\n\n  onResetToDateInput() {\n    this.isFakeNowCheckbox = false;\n    this.onResetHandler('lessThan');\n  }\n  onResetHandler(paramName: DurationParameters): void {\n    const privateParam = fromGlobalToPrivate(paramName);\n\n    this.setCheckBox(false, paramName);\n    this.onDateHandler(null, privateParam, false);\n    this.onTimeHandler(0, privateParam);\n  }\n\n  onAutoFillCurrentTimeHandler(paramName: DurationParameters) {\n    const privateParam = `_${paramName}` as privateParameters;\n\n    let currentTime = new Date();\n\n    const timeInSecondsFromDate = getTimeInSecondsFromDate(currentTime);\n\n    this.onTimeHandler(timeInSecondsFromDate, privateParam as privateParameters, true);\n    currentTime = mutedDateToNoHourMinutesSeconds(currentTime);\n\n    this.onDateHandler(currentTime, privateParam);\n\n    return true;\n  }\n\n  onFakeNowCheckbox() {\n      this.isFakeNowCheckbox = true;\n  }\n}\n\n/**\n * Remove Seconds, Minutes and Hours from Date object\n * @param date\n */\nfunction mutedDateToNoHourMinutesSeconds(_date: Date | number) {\n  const date = new Date(_date);\n  date.setSeconds(0);\n  date.setMinutes(0);\n  date.setHours(0);\n  return date;\n}\n\n/**\n * Get how many seconds in the Date object;\n * @example getTimeInSecondsFromDate(01-01-2021 00:01:00)  => 60 seconds\n * @param _date\n */\nexport function getTimeInSecondsFromDate(_date: number | Date): number {\n  if (_date === 0) { return 0; }\n\n  const date = new Date(_date);\n  const seconds = date.getSeconds();\n  const minutes = date.getMinutes() * 60;\n  const hours = date.getHours() * 60 * 60;\n  return seconds + minutes + hours;\n}\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'sm-table-filter-duration-error',\n  templateUrl: './table-filter-duration-error.component.html',\n  styleUrls: ['./table-filter-duration-error.component.scss']\n})\nexport class TableFilterDurationErrorComponent implements OnInit {\n\n  @Input() hasError: boolean;\n  @Input() isFullWidth;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"error pl-4 pb-4\" [class.is-full-width]=\"isFullWidth\">When two terms are specified, the first must precede (or equal) the second</div>\n","<form class=\"filter-form p-4\" #templateForm=\"ngForm\" smClickStopPropagation smKeyDownStopPropagation [formGroup]=\"iterationsForm\">\n\n  <div>\n    <div class=\"mb-1 label\">Equals or greater than</div>\n    <div class=\"d-flex \">\n     <!-- <sm-checkbox-control\n        (formDataChanged)=\"setCheckBox($event.value, 'greaterThan')\"\n        [formData]=\"greaterThan.checked\"\n        class=\"align-self-center pr-2\"\n      >\n      </sm-checkbox-control>-->\n      <div class=\"input-border-duration-container\">\n        <div>\n          <input\n                 matInput\n                 formControlName=\"greaterThan\"\n                 type=\"number\"\n                 name=\"greaterThan\"\n          >\n        </div>\n        <div class=\"reset\">\n          <i *ngIf=\"greaterThan.value !== null\"\n             [class]=\"'al-icon al-ico-dialog-x sm'\"\n             (click)=\"iterationsForm.get('greaterThan').setValue(null)\"\n          ></i>\n        </div>\n      </div>\n\n    </div>\n  </div>\n  <sm-divider [label]=\"'and'\"></sm-divider>\n  <div>\n    <div class=\"mb-1 label\">Equals or less than</div>\n    <div class=\"d-flex \" >\n    <!--  <sm-checkbox-control\n        [formData]=\"lessThan.checked\"\n        (formDataChanged)=\"setCheckBox($event.value, 'lessThan')\"\n        class=\"align-self-center pr-2\"\n      >\n      </sm-checkbox-control>-->\n      <div class=\"input-border-duration-container\">\n        <div>\n          <input\n                   type=\"number\"\n                   formControlName=\"lessThan\"\n                   name=\"greaterThan\"\n          >\n        </div>\n        <div class=\"reset\">\n          <i *ngIf=\"lessThan.value !== null\"\n             [class]=\"'al-icon al-ico-dialog-x sm'\"\n             (click)=\"iterationsForm.get('lessThan').setValue(null)\"\n          ></i>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</form>\n\n<sm-table-filter-duration-error *ngIf=\"hasTimeError\"  [isFullWidth]=\"true\"></sm-table-filter-duration-error>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {IDurationThan, DurationParameters, TableDurationSortBase} from '../table-duration-sort.base';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {distinctUntilChanged, debounceTime, map} from 'rxjs/operators';\nimport {merge, Subscription} from 'rxjs';\nimport {isNil} from 'lodash/fp';\n\nfunction getDurationValue(data: IDurationThan) {\n  return isNil(data.value) || !data.checked ? '' : data.value;\n}\n\n\n@Component({\n  selector: 'sm-table-filter-duration-numeric',\n  templateUrl: './table-filter-duration-numeric.component.html',\n  styleUrls: ['./table-filter-duration-numeric.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class TableFilterDurationNumericComponent extends TableDurationSortBase implements OnInit, OnDestroy {\n  iterationsForm = new FormGroup( {\n    greaterThan: new FormControl(''),\n    lessThan: new FormControl('')\n  });\n  private subscription: Subscription;\n\n  constructor(cdr: ChangeDetectorRef) {\n    super(cdr);\n  }\n\n  ngOnInit(): void {\n    const greaterThan$ = this.iterationsForm.get('greaterThan').valueChanges.pipe( map (value => ({name: 'greaterThan', value})));\n    const lessThan$ = this.iterationsForm.get('lessThan').valueChanges.pipe( map (value => ({name: 'lessThan', value})));\n\n    this.subscription = merge(greaterThan$, lessThan$ )\n      .pipe(\n        debounceTime(200),\n        distinctUntilChanged()\n      )\n      .subscribe( ({value, name}: {value: number; name: DurationParameters}) => {\n        if (this[name].checked !== !!value) {\n          this.setCheckBox(!!value, name, false);\n        }\n        this.timeStampChanged(value, name);\n      });\n  }\n\n  parseServerDataFunction(data): number {\n    return +data;\n  }\n  prepareDataToServerFunction(data): string | number | null {\n    return isNil(data) || data === '' ? null : +data ;\n  }\n  _updateValue(): void {\n    const greaterThan = getDurationValue(this.greaterThan);\n    const lessThan = getDurationValue(this.lessThan);\n    this.iterationsForm.get('greaterThan').setValue(greaterThan);\n    this.iterationsForm.get('lessThan').setValue(lessThan);\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","<form class=\"filter-form p-4\" #templateForm=\"ngForm\" smClickStopPropagation smKeyDownStopPropagation>\n  <div>\n    <div class=\"mb-1 label\">Equals or greater than</div>\n    <div class=\"d-flex \" >\n    <!--  <sm-checkbox-control\n        (formDataChanged)=\"setCheckBox($event.value, 'greaterThan')\"\n        [formData]=\"greaterThan.checked\"\n        class=\"align-self-center pr-2\"\n      >\n      </sm-checkbox-control>-->\n      <div class=\"input-duration\">\n        <div class=\"input-border-duration-container \">\n          <sm-duration-input-list\n            [durationValue]=\"greaterThan.value\"\n            name=\"greaterThan\"\n            [inputs]=\"['days', 'hours', 'minutes', 'seconds']\"\n            [hasResetIcon]=\"true\"\n            (onDurationChanged)=\"timeStampChanged($event > 0 ? $event : null, 'greaterThan')\"\n            (onResetIcon)=\"timeStampChanged(null, 'greaterThan')\"\n            [returnFactor]=\"1000\">\n          </sm-duration-input-list>\n        </div>\n      </div>\n    </div>\n  </div>\n  <sm-divider [label]=\"'and'\"></sm-divider>\n  <div>\n    <div class=\"mb-1 label\">Equals or less than</div>\n    <div class=\"d-flex \" >\n     <!-- <sm-checkbox-control\n        [formData]=\"lessThan.checked\"\n        (formDataChanged)=\"setCheckBox($event.value, 'lessThan')\"\n        class=\"align-self-center pr-2\"\n      >\n      </sm-checkbox-control>-->\n      <div class=\"input-duration\">\n        <div class=\"input-border-duration-container \">\n          <sm-duration-input-list name=\"lessThan\"\n                                  [ngModel]=\"lessThan.value\"\n                                  [durationValue]=\"{standalone: true}\"\n                                  [inputs]=\"['days', 'hours', 'minutes', 'seconds']\"\n                                  [returnFactor]=\"1000\"\n                                  [hasResetIcon]=\"true\"\n                                  (onResetIcon)=\"timeStampChanged(null, 'lessThan')\"\n                                  (onDurationChanged)=\"timeStampChanged($event > 0 ? $event : null, 'lessThan')\">\n          </sm-duration-input-list>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\n<sm-table-filter-duration-error *ngIf=\"hasTimeError\"></sm-table-filter-duration-error>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {DurationParameters, TableDurationSortBase} from '../table-duration-sort.base';\nimport {isNil} from 'lodash/fp';\n\n@Component({\n  selector: 'sm-table-filter-duration',\n  templateUrl: './table-filter-duration.component.html',\n  styleUrls: ['./table-filter-duration.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class TableFilterDurationComponent extends TableDurationSortBase implements OnInit {\n\n  constructor(cdr: ChangeDetectorRef) {\n    super(cdr);\n  }\n\n  ngOnInit(): void {\n  }\n\n  _updateValue(): void {\n  }\n\n  parseServerDataFunction(data): number {\n    return +data;\n  }\n\n  prepareDataToServerFunction(data): number {\n    return isNil(data) || data === '' ? null : +data ;\n  }\n\n  timeStampChanged(value: number, name: DurationParameters) {\n    if (this[name].checked !== !!value) {\n      this.setCheckBox(!!value, name, false);\n    }\n    super.timeStampChanged(value, name);\n  }\n\n}\n","<div class=\"filter-sort-container d-flex align-items-center\" [class.active]=\"value?.length > 0 || subValue?.length > 0\">\n  <div class='d-flex pointer'>\n    <i class=\"sort-icon\" [class]=\"enableSort?  'icon sm ' + sortedClass():''\" (click)=\"switchSortOrder($event)\"></i>\n  </div>\n  <ng-template #headerWithoutFilters>\n    <div [smTooltip]=\"tooltip ? header : undefined\"\n         matTooltipPosition=\"above\"\n         class=\"menu-button pointer\"\n         [class.active]=\"isSorted\"\n         (click)=\"enableSort && switchSortOrder($event)\">{{header}}\n    </div>\n  </ng-template>\n  <ng-container *ngIf=\"enableFilter; else: headerWithoutFilters\">\n    <div\n      (click)=\"enableSort && switchSortOrder($event)\"\n      [class.pointer]=\"enableSort\"\n      [smTooltip]=\"tooltip ? header : undefined\"\n      matTooltipPosition=\"above\"\n      class=\"ellipsis menu-button\"\n      [class.active]=\"isSorted || isFiltered()\">{{header}}</div>\n    <sm-menu #menu\n             smMenuClass=\"light-theme\"\n             [enableSearch]=\"enableSearch\"\n             [fixedOptionsSubheader]=\"subOptions?.length ? fixedOptionsSubheader : ''\"\n             (searchValueChanged)=\"searchValueChanged.emit($any($event.target).value)\"\n             [searchValue]=\"searchValue\"\n             [buttonClass]=\"'table-filter-button ' + (isFiltered() ? 'active' : 'deactive')\"\n             [iconClass]=\"'icon ' + (isFiltered()? 'i-filter-on':'i-filter-off')\"\n             (menuClosed)=\"menuClosed.emit()\"\n         (menuOpened)=\"menuOpened.emit()\"\n    >\n      <ng-container [ngSwitch]=\"filterType\">\n        <sm-table-filter-duration\n          *ngSwitchCase=\"FILTER_TYPE.duration\"\n          [value]=\"value\"\n          (filterChanged)=\"filterChanged.emit($event)\"></sm-table-filter-duration>\n        <sm-table-filter-duration-numeric\n          *ngSwitchCase=\"FILTER_TYPE.durationNumeric\"\n          [value]=\"value\"\n          (filterChanged)=\"filterChanged.emit($event)\"\n        ></sm-table-filter-duration-numeric>\n        <sm-table-filter-duration-date-time\n          *ngSwitchCase=\"FILTER_TYPE.durationDate\"\n          [value]=\"value\"\n          (filterChanged)=\"filterChanged.emit($event)\"\n        ></sm-table-filter-duration-date-time>\n        <ng-container *ngSwitchDefault>\n          <div *ngIf=\"supportAndFilter\" class=\"filter-type\" smClickStopPropagation>\n            <span class=\"link mr-3\" [class.selected]=\"!andFilter\" (click)=\"toggleCombination()\">Any</span>\n            <span class=\"link\" [class.selected]=\"andFilter\" (click)=\"toggleCombination()\">All</span>\n          </div>\n          <div [class.options-section]=\"enableSearch\" smClickStopPropagation class=\"d-flex align-items-start flex-column table-filter-sort-template checkbox-list\">\n            <sm-checkbox-three-state-list\n              [supportExcludeFilter]=\"supportExcludeFilter\"\n              [options]=\"options\"\n              [checkedList]=\"value\"\n              (filterChanged)=\"emitFilterChanged($event)\"\n            ></sm-checkbox-three-state-list>\n            <div fixedOptions>\n              <sm-menu-item\n                *ngFor=\"let option of subOptions; trackBy: trackByLabel\"\n                [itemLabel]=\"option.label\"\n                [checked]=\"subValue?.includes(option.value)\" [selectable]=\"true\" [itemValue]=\"option.value\"\n                (itemClicked)=\"onSubFilterChanged($event)\"\n              ></sm-menu-item>\n            </div>\n          </div>\n        </ng-container>\n      </ng-container>\n      <div *ngIf=\"columnExplain && options.length\" class=\"column-explanation\">{{columnExplain}}</div>\n\n    </sm-menu>\n  </ng-container>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ColHeaderFilterTypeEnum, ISmCol, TABLE_SORT_ORDER, TableSortOrderEnum} from '../table.consts';\nimport {addOrRemoveFromArray} from '../../../../utils/shared-utils';\n\n@Component({\n  selector: 'sm-table-filter-sort-template',\n  templateUrl: './table-filter-sort-template.component.html',\n  styleUrls: ['./table-filter-sort-template.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableFilterSortTemplateComponent {\n\n  public readonly TABLE_SORT_ORDER = TABLE_SORT_ORDER;\n\n  public formControl = new FormControl();\n  header;\n  enableSort = true;\n  enableFilter: boolean;\n  enableSearch = false;\n  isSorted: boolean;\n  filterType: ColHeaderFilterTypeEnum;\n  supportAndFilter: boolean;\n  supportExcludeFilter: boolean;\n  columnExplain: string;\n  private _value: string[];\n\n  FILTER_TYPE = ColHeaderFilterTypeEnum;\n  @Input() sortOrder: { index: number; field: string; order: TableSortOrderEnum };\n\n  @Input() set column(col: ISmCol) {\n    this.header = col.header;\n    this.enableSort = col.sortable;\n    this.enableFilter = col.filterable;\n    this.enableSearch = col.searchableFilter;\n    this.filterType = col.filterType;\n    this.supportAndFilter = col.andFilter;\n    this.supportExcludeFilter = col.excludeFilter;\n    this.columnExplain = col.columnExplain;\n  }\n\n  @Input() searchValue;\n  @Input() fixedOptionsSubheader;\n\n  @Input() set value(filters: Array<string>) {\n    if (Array.isArray(filters)) {\n      this.formControl.setValue(filters);\n      this._value = filters;\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  @Input() subValue: string[] = [];\n  @Input() andFilter: boolean = null;\n\n  @Input() options: Array<{ label: string; value: string; tooltip?: string }>;\n  @Input() subOptions: Array<{ label: string; value: string }>;\n  @Input() tooltip: boolean = false;\n  @Output() filterChanged = new EventEmitter();\n  @Output() subFilterChanged = new EventEmitter();\n  @Output() menuClosed = new EventEmitter();\n  @Output() menuOpened = new EventEmitter();\n  @Output() sortOrderChanged = new EventEmitter<boolean>();\n  @Output() searchValueChanged = new EventEmitter<string>();\n\n  constructor() {}\n  trackByLabel = (index: number, item) => item.label;\n\n  switchSortOrder($event: MouseEvent) {\n    this.sortOrderChanged.emit($event.shiftKey);\n  }\n\n  onSubFilterChanged(val) {\n    if (val) {\n      const newValues = addOrRemoveFromArray(this.subValue, val.itemValue);\n      this.subFilterChanged.emit({value: newValues});\n    }\n  }\n\n  isFiltered() {\n    const filtered = (this.value && this.value.length > 0) || (this.subValue && this.subValue.length > 0);\n    return filtered;\n  }\n\n  sortedClass() {\n    switch (this.sortOrder?.order) {\n      case TABLE_SORT_ORDER.DESC:\n        this.isSorted = true;\n        return 'i-sort-on-down';\n      case  TABLE_SORT_ORDER.ASC:\n        this.isSorted = true;\n        return 'i-sort-on-up';\n      default:\n        this.isSorted = false;\n        return 'i-sort-off';\n    }\n  }\n\n  toggleCombination() {\n    this.andFilter = !this.andFilter;\n    this.emitFilterChanged();\n  }\n\n  emitFilterChanged(value?: string[]) {\n    this.filterChanged.emit({\n      value: value || this.value,\n      andFilter: this.andFilter\n    });\n  }\n}\n","export function custumFilterFunc() {\n  // this._first = 0;\n  if (this.lazy) {\n    this.onLazyLoad.emit(this.createLazyLoadMetadata());\n  }\n  else {\n    if (!this.value || !this.columns) {\n      return;\n    }\n    this.filteredValue = [];\n    for (let i = 0; i < this.value.length; i++) {\n      let localMatch = true;\n      let globalMatch = false;\n      for (let j = 0; j < this.columns.length; j++) {\n        const col = this.columns[j], filterMeta = this.filters[col.filterField || col.field];\n        // local\n        if (filterMeta) {\n          const filterValue = filterMeta.value, filterField = col.filterField || col.field,\n            filterMatchMode = filterMeta.matchMode || 'startsWith',\n            dataFieldValue = this.resolveFieldData(this.value[i], filterField);\n          const filterConstraint = this.filterConstraints[filterMatchMode];\n          if (!filterConstraint(dataFieldValue, filterValue)) {\n            localMatch = false;\n          }\n          if (!localMatch) {\n            break;\n          }\n        }\n        // global\n        if (!col.excludeGlobalFilter && this.globalFilter && !globalMatch) {\n          globalMatch = this.filterConstraints['contains'](this.resolveFieldData(this.value[i], col.filterField || col.field), this.globalFilter.value);\n        }\n      }\n      let matches = localMatch;\n      if (this.globalFilter) {\n        matches = localMatch && globalMatch;\n      }\n      if (matches) {\n        this.filteredValue.push(this.value[i]);\n      }\n    }\n    if (this.filteredValue.length === this.value.length) {\n      this.filteredValue = null;\n    }\n    if (this.paginator) {\n      this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n    }\n    this.updateDataToRender(this.filteredValue || this.value);\n  }\n  this.onFilter.emit({\n    filters      : this.filters,\n    filteredValue: this.filteredValue || this.value\n  });\n}\n\nexport function custumSortSingle() {\n  if (this.value) {\n    if (this.sortColumn && this.sortColumn.sortable === 'custom') {\n      this.preventSortPropagation = true;\n      this.sortColumn.sortFunction.emit({\n        field: this.sortField,\n        order: this.sortOrder\n      });\n    }\n    else {\n      this.value.sort((data1, data2) => {\n        const value1 = this.resolveFieldData(data1, this.sortField);\n        const value2 = this.resolveFieldData(data2, this.sortField);\n        let result = null;\n        if (value1 == null && value2 != null) {\n          result = -1;\n        } else if (value1 != null && value2 == null) {\n          result = 1;\n        } else if (value1 == null && value2 == null) {\n          result = 0;\n        } else if (typeof value1 === 'string' && typeof value2 === 'string') {\n          result = value1.localeCompare(value2);\n        } else {\n          result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n        }\n        return (this.sortOrder * result);\n      });\n    }\n    // this._first = 0;\n    if (this.hasFilter()) {\n      this._filter();\n    }\n  }\n}\n","import {AfterViewInit, Directive} from '@angular/core';\nimport {ResizableColumn} from 'primeng/table';\nimport {fromEvent, Subscription} from 'rxjs';\n\n@Directive({\n  selector: '[smResizableColumn]'\n})\nexport class ResizableColumnDirective extends ResizableColumn implements AfterViewInit{\n  private sub: Subscription;\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (this.resizer) {\n      this.sub = fromEvent(this.resizer, 'dblclick').subscribe((event: MouseEvent) => {\n        const width = this.calcWidth(this.el.nativeElement);\n        const delta = width - this.el.nativeElement.offsetWidth;\n        this.dt.onColumnResizeBegin(event);\n        this.dt.onColumnResize({pageX: event.pageX + delta});\n        this.dt.onColumnResizeEnd();\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.sub?.unsubscribe();\n  }\n\n  private calcWidth(column: HTMLTableHeaderCellElement) {\n    const index = column.cellIndex;\n    const table = this.dt;\n    const rows = [...table.el.nativeElement.getElementsByTagName('tr')] as HTMLTableRowElement[];\n\n    const dummyContainer = document.createElement('span');\n    dummyContainer.style.position = 'fixed';\n    // attach the dummy container to our table so all relevant styles will apply to it\n    table.el.nativeElement.appendChild(dummyContainer);\n\n    this.cloneItemIntoDummy(column, dummyContainer);\n    // add all relevant cells to dummy container\n    rows.forEach(row => {\n      const cells = row.getElementsByTagName('td');\n      if (cells.length > index) {\n        this.cloneItemIntoDummy(cells.item(index), dummyContainer);\n      }\n    });\n    // measure and detach container\n    const width = dummyContainer.offsetWidth;\n    table.el.nativeElement.removeChild(dummyContainer);\n\n    return width;\n  }\n\n  private cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void {\n    // shamelessly copied from ag-grid\n    // make a deep clone of the cell\n    const eCellClone: HTMLElement = eCell.cloneNode(true) as HTMLElement;\n    // the original has a fixed width, we remove this to allow the natural width based on content\n    eCellClone.style.width = '';\n    // the original has position = absolute, we need to remove this so it's positioned normally\n    eCellClone.style.position = 'static';\n    eCellClone.style.left = '';\n    // we put the cell into a containing div, as otherwise the cells would just line up\n    // on the same line, standard flow layout, by putting them into divs, they are laid\n    // out one per line\n    const eCloneParent = document.createElement('div');\n\n    // table-row, so that each cell is on a row.\n    eCloneParent.style.display = 'table-row';\n    eCloneParent.appendChild(eCellClone);\n    eDummyContainer.appendChild(eCloneParent);\n  }\n\n}\n","<p-table\n  class=\"table\"\n  dataKey=\"id\"\n  [filterDelay]=\"0\"\n  [globalFilterFields]=\"enableTableSearch? globalFilterFields: null\"\n  [scrollHeight]=\"'flex'\"\n  [autoLayout]=\"false\"\n  [columns]=\"columns\"\n  [selectionMode]=\"selectionMode\"\n  [rows]=\"rowsNumber\"\n  [value]=\"tableData\"\n  [selection]=\"selection\"\n  [reorderableColumns]=\"reorderableColumns\"\n  [resizableColumns]=\"resizableColumns && !minView\"\n  columnResizeMode=\"expand\"\n  [scrollable]=\"scrollable || resizableColumns\"\n  [virtualScroll]=\"virtualScroll\"\n  [virtualRowHeight]=\"minView ? cardHeight : rowHeight\"\n  (onColReorder)=\"onColReorder($event)\"\n  [first]=\"first\"\n  [rowHover]=\"true\"\n  [contextMenu]=\"cm\"\n  (firstChange)=\"onFirstChanged($event)\"\n  (onSort)=\"onSortChanged($event)\"\n  (onRowSelect)=\"onRowSelected($event)\"\n  (onRowUnselect)=\"onRowDeselected($event)\"\n  (onContextMenuSelect)=\"openContext($event)\"\n  (onColResize)=\"colResize($event)\"\n  [rowTrackBy]=\"trackByFunction\"\n>\n  <ng-template pTemplate=\"emptymessage\">\n    <tr class=\"no-data-row\">\n      <div [attr.colspan]=\"columns.length\" [class.simple]=\"simple\">\n        <div class=\"no-data\" [style.margin-left.px]=\"buttonLeft\">{{noDataMessage}}</div>\n      </div>\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\" let-columns *ngIf=\"!noHeader\">\n    <tr class=\"header ui-state-default\" *ngIf=\"!minView; else cardHeader\">\n      <th *ngFor=\"let col of columns; trackBy: trackByColFn\"\n          [attr.data-col-id]=\"col.id\"\n          pReorderableColumn\n          smResizableColumn\n          [pResizableColumnDisabled]=\"col?.disableDrag\"\n          [pReorderableColumnDisabled]=\"!reorderableColumns || col?.disableDrag\"\n          [class.disable-drag]=\"!reorderableColumns || col?.disableDrag\"\n          [class.resize-enabled]=\"resizableColumns\"\n          [class.resize-disabled]=\"!resizableColumns\"\n          [class.selected-col-header]=\"col?.disablePointerEvents\"\n          [style.min-width]=\"col.style?.minWidth\"\n          [style.max-width]=\"col.style?.maxWidth\"\n          [style.flex-basis]=\"col.style?.width\"\n      >\n        <ng-container [ngSwitch]=\"col?.headerType\">\n          <ng-container *ngSwitchCase=\"ColHeaderTypeEnum.sortFilter\">\n            <ng-container *ngTemplateOutlet=\"sortFilterTemplate; context: {$implicit: col}\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"ColHeaderTypeEnum.checkBox\">\n            <ng-container *ngTemplateOutlet=\"checkboxTemplate; context: {$implicit: col}\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <div class=\"col-header\" [class.text-center]=\"col.textCenter\">{{col.header}}</div>\n          </ng-container>\n        </ng-container>\n      </th>\n    </tr>\n    <ng-template #cardHeader>\n      <tr class=\"header\">\n        <th class=\"table-header\" style=\"flex-basis:100%\">\n          <div class=\"table-header-title\">{{minimizedTableHeader}}</div>\n          <div class=\"table-actions\">\n            <div class=\"recent-title\">\n              <sm-menu header=\"SORTED BY \" class=\"menu\">\n                <div *ngFor=\"let col of sortableCols\">\n                  <sm-menu-item [itemLabel]=\"col.header\"\n                                [sortOrder]=\"getOrder(col.id)\"\n                                (itemClicked)=\"sortItemClick($event, col.id)\"></sm-menu-item>\n                </div>\n              </sm-menu>\n            </div>\n            <ng-container *ngTemplateOutlet=\"cardHeaderTemplate\"></ng-container>\n          </div>\n        </th>\n      </tr>\n    </ng-template>\n  </ng-template>\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-index=\"rowIndex\">\n    <tr\n      [pSelectableRow]=\"rowData\"\n      [pContextMenuRow]=\"rowData\"\n      [style.height.px]=\"minView ? this.cardHeight : this.rowHeight\"\n      [class.even]=\"(index + 1) % 2 === 0\"\n      [class.checked]=\"isRowSelected(rowData)\"\n      [class.simple]=\"simple\"\n      [class.contexted]=\"activeContextRow?.id ===rowData?.id && contextMenuOpen\"\n      [class.selected]=\"selectionMode==='single'? selection?.id === rowData?.id : selection?.includes(rowData)\"\n      [class.cards-table]=\"minView\"\n      [class.pointer]=\"!!selectionMode\"\n      (click)=\"!minView && rowClicked.emit({e: $event, data: rowData})\"\n    >\n      <ng-container *ngIf=\"!minView; else cardBody\">\n        <td\n          *ngFor=\"let col of columns; trackBy: trackByColFn; index as i\"\n          [class.ui-resizable-column]=\"resizableColumns\"\n          [class.simple]=\"simple\"\n          [style.min-width]=\"col.style?.minWidth\"\n          [style.max-width]=\"col.style?.maxWidth\"\n          [style.flex-basis]=\"col.style?.width\"\n        >\n          <ng-container *ngIf=\"bodyTemplate\">\n            <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {$implicit: col, rowData: rowData, rowIndex: index}\">\n            </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"!bodyTemplate\">\n            {{getBodyData(rowData, col)}}\n          </ng-container>\n        </td>\n      </ng-container>\n     <ng-template #cardBody>\n        <td class=\"pointer p-0\" role=\"button\">\n          <ng-container\n            *ngTemplateOutlet=\"cardTemplate;  context: {rowData: rowData, rowNumber: index, selected:  (selectionMode==='single'? selection?.id === rowData.id :  selection?.includes(rowData))}\">\n          </ng-container>\n        </td>\n      </ng-template>\n    </tr>\n    <tr *ngIf=\"index === rowsNumber - 1 && lazyLoading && !noMoreData\" class=\"table-load-more\">\n      <div class=\"load-more-wrapper\">\n        <button #loadButton\n                class=\"btn btn-primary\"\n                (click)=\"loadMore()\"\n                [style.margin-left.px]=\"buttonLeft\">\n          <i *ngIf=\"loading\" class=\"load-spinner\"></i>\n          {{loading ? 'LOADING...' : 'LOAD MORE' }}\n        </button>\n      </div>\n    </tr>\n  </ng-template>\n  <ng-template pTemplate=\"footer\" let-columns>\n    <ng-container *ngTemplateOutlet=\"footerTemplate\">\n    </ng-container>\n  </ng-template>\n</p-table>\n<p-contextMenu #cm [model]=\"menuItems\" class=\"d-none\"></p-contextMenu>\n","import {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  Renderer2,\n  TemplateRef,\n  TrackByFunction,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {get} from 'lodash/fp';\nimport {MenuItem, PrimeTemplate, SortMeta} from 'primeng/api';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {ContextMenu} from 'primeng/contextmenu';\nimport {Table} from 'primeng/table';\nimport {Subject, Subscription} from 'rxjs';\nimport {filter, take, throttleTime} from 'rxjs/operators';\nimport {custumFilterFunc, custumSortSingle} from './overrideFilterFunc';\nimport {ColHeaderTypeEnum, ISmCol, TableSortOrderEnum} from './table.consts';\nimport {sortCol} from '../../../utils/tableParamEncode';\nimport {Store} from '@ngrx/store';\nimport {selectScaleFactor} from '@common/core/reducers/view.reducer';\nimport {trackById} from '@common/shared/utils/forms-track-by';\n\n@Component({\n  selector: 'sm-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableComponent implements AfterContentInit, AfterViewInit, OnInit, OnDestroy {\n\n  public active = false;\n  public bodyTemplate: TemplateRef<any>;\n  public sortTemplate: TemplateRef<any>;\n  public cardTemplate: TemplateRef<any>;\n  public footerTemplate: TemplateRef<any>;\n  public cardHeaderTemplate: TemplateRef<any>;\n  public checkboxTemplate: any;\n  public sortFilterTemplate: any;\n  public headerTemplate: TemplateRef<any>;\n  public trackByColFn: TrackByFunction<ISmCol> = trackById;\n  private loadMoreSubscription: Subscription;\n  private loadMoreDebouncer: Subject<any>;\n  public menuItems = [] as MenuItem[];\n  minView: boolean;\n  private _filters: { [s: string]: FilterMetadata };\n\n\n  readonly ColHeaderTypeEnum = ColHeaderTypeEnum;\n  table: Table;\n  @ViewChildren(Table) public tableComp: QueryList<Table>;\n  loadButton: ElementRef<HTMLDivElement>;\n  @ViewChildren('loadButton') loadButtons: QueryList<ElementRef<HTMLDivElement>>;\n  @ViewChild('cm', {static: true}) menu: ContextMenu;\n  @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n  private _tableData: any;\n  private _columnsOrder: string[];\n  public loading: boolean;\n  private scrollLeft = 0;\n  public buttonLeft: number;\n  private resizeTimer: number;\n  private scaleFactor: number;\n  private waiting: boolean;\n  private scrollContainer: HTMLDivElement;\n\n  @Input() set tableData(tableData) {\n    this.loading = false;\n    this.rowsNumber = tableData ? tableData.length : 0;\n    this._tableData = tableData;\n  }\n\n  get tableData() {\n    return this._tableData;\n  }\n\n  _columns: ISmCol[];\n\n  @Input() set columnsOrder(columnsOrder: string[]) {\n    this._columnsOrder = columnsOrder;\n    this.orderColumns();\n  }\n\n  get columnsOrder() {\n    return this._columnsOrder;\n  }\n\n  @Input() set columns(columns: ISmCol[]) {\n    this._columns = columns.filter(col => !col.hidden);\n    this.orderColumns();\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  @Input() reorderableColumns = false;\n  @Input() resizableColumns = false;\n  @Input() scrollable = false;\n  @Input() sortOrder: TableSortOrderEnum;\n  @Input() sortFields: SortMeta[];\n  @Input() selection: any;\n  @Input() activeContextRow;\n  @Input() contextMenuOpen = false;\n  @Input() first = 0;\n  @Input() rowsNumber = 10;\n  @Input() selectionMode: 'multiple' | 'single' | null = 'single';\n  @Input() rowHeight = 48;\n  @Input() cardHeight = 90;\n  @Input() lazyLoading = false;\n  @Input() keyboardControl: boolean = false;\n  @Input() noMoreData: boolean;\n  @Input() rowHover: boolean;\n  @Input() noHeader: boolean = false;\n  @Input() simple: boolean = false;\n\n\n  @Input() set minimizedView(minView: boolean) {\n    const delay = this.minView === undefined ? 0 : 3000;\n\n    this.minView = minView;\n    if (!minView) {\n      window.setTimeout(() => this.table && this.updateFilter());\n    }\n    this.resize(delay);\n  }\n\n  @Input() set filters(filters: { [s: string]: FilterMetadata }) {\n    this._filters = filters;\n    if (!this.minView) {\n      this.table.filters = filters;\n      if (this.active) {\n        this.table.first = 0;\n        this.firstChanged.emit(0);\n      }\n    }\n  }\n\n  @Input() noDataMessage = 'No data to show';\n  @Input() checkedItems = [];\n  @Input() virtualScroll: boolean;\n  @Input() globalFilterFields: string[];\n  @Input() enableTableSearch: boolean = false;\n  @Input() minimizedTableHeader: string;\n\n  @Output() sortChanged = new EventEmitter<{ field: ISmCol['id']; isShift: boolean }>();\n  @Output() rowClicked = new EventEmitter();\n  @Output() rowSelectionChanged = new EventEmitter<{ data: Array<any>; originalEvent?: Event }>();\n  @Output() firstChanged = new EventEmitter();\n  @Output() loadMoreClicked = new EventEmitter();\n  @Output() onRowRightClick = new EventEmitter();\n  @Output() colReordered = new EventEmitter();\n  @Output() columnResized = new EventEmitter<{ columnId: string; widthPx: number }>();\n  search: string;\n\n  @HostListener('window:resize')\n  resize(delay = 50) {\n    window.clearTimeout(this.resizeTimer);\n    this.resizeTimer = window.setTimeout(() => {\n      this.updateLoadButton(null);\n      if (this.table && this.resizableColumns) {\n        const element = (this.table.el.nativeElement as HTMLDivElement);\n        let totalWidth = 0;\n        if (this.minView) {\n          const scrollableBody = element.getElementsByClassName('p-datatable-wrapper')[0];\n          const scroll = scrollableBody && scrollableBody.scrollHeight > scrollableBody.clientHeight ? 8 : 0;\n          let width = element.getBoundingClientRect().width - scroll;\n          if (this.scaleFactor) {\n            width *= this.scaleFactor / 100;\n          }\n          this.table.resizeColumnElement = element.getElementsByTagName('th')[0];\n          this.table.resizeTableCells(width, null);\n          totalWidth = width;\n        } else {\n          this.columns.forEach((col, index) => {\n            if(col.style?.width?.endsWith('px')) {\n              const colWidth = parseInt(col.style.width.slice(0, -2));\n              totalWidth += colWidth;\n              this.table.resizeColumnElement = element.getElementsByTagName('th')[index];\n              this.table.resizeTableCells(colWidth, null);\n            } else {\n              const width = element.getElementsByTagName('th')[index].getBoundingClientRect().width;\n              totalWidth += this.scaleFactor ? width * this.scaleFactor / 100 : width;\n            }\n          });\n        }\n        this.table.tableViewChild.nativeElement.style.width = `${totalWidth}px`;\n      }\n    }, delay);\n  }\n\n  @HostListener('keydown', ['$event'])\n  keyDownHandler(event: KeyboardEvent) {\n    if (this.keyboardControl === false || !['ArrowDown', 'ArrowUp'].includes(event.key)) {\n      return;\n    }\n    event.preventDefault();\n    if (event.key == 'ArrowDown') {\n      this.incrementIndex(1);\n    } else if (event.key == 'ArrowUp') {\n      this.incrementIndex((-1));\n    }\n    setTimeout(() => {\n      let selected = this.element.nativeElement.querySelectorAll('.table-card.selected');\n      if (selected.length < 1) {\n        selected = this.element.nativeElement.querySelectorAll('tr.ui-state-highlight'); // support obsolote scrolling in table\n      }\n      if (selected && selected.length === 1) {\n        selected[0].scrollIntoView({block: 'nearest', inline: 'nearest'});\n      }\n      selected = null;\n    }, 0);\n\n  }\n\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private cdr: ChangeDetectorRef,\n    private store: Store\n  ) {\n    this.loadMoreDebouncer = new Subject();\n    this.loadMoreSubscription = this.loadMoreDebouncer\n      .pipe(throttleTime(1500))\n      .subscribe(\n        () => this.loadMoreClicked.emit()\n      );\n\n    store.select(selectScaleFactor)\n      .pipe(filter(s => !!s), take(1))\n      .subscribe(scale => this.scaleFactor = scale);\n  }\n\n  ngOnInit(): void {\n    // In order to know if we should reset first to 0 on filter input.\n    this.active = true;\n  }\n\n  ngAfterViewInit(): void {\n    const gotTable = (item: Table) => {\n      if (!this.table) {\n        this.table = item;\n        this.scrollContainer = this.table.el.nativeElement.getElementsByClassName('p-datatable-wrapper')[0] as HTMLDivElement;\n        if (this.scrollContainer) {\n          this.scrollContainer.onscroll = (e: Event) => {\n            if (!this.waiting) {\n              this.waiting = true;\n              window.setTimeout(() => {\n                this.waiting = false;\n                this.updateLoadButton(e);\n              }, 60);\n            }\n          };\n        }\n        this.updateLoadButton(null);\n        this.updateFilter();\n      }\n    };\n\n    this.tableComp.changes\n      .pipe(filter((comps: QueryList<Table>) => !!comps.first), take(1))\n      .subscribe((comps: QueryList<Table>) => gotTable(comps.first));\n    this.tableComp.forEach(gotTable);\n    this.loadButtons.changes\n      .pipe(filter((comps: QueryList<ElementRef<HTMLDivElement>>) => !!comps.first), take(1))\n      .subscribe((comps: QueryList<ElementRef<HTMLDivElement>>) => {\n        this.loadButton = comps.first;\n        this.updateLoadButton(null);\n      });\n  }\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'sort':\n          this.sortTemplate = item.template;\n          break;\n        case 'card':\n          this.cardTemplate = item.template;\n          break;\n        case 'sort-filter':\n          this.sortFilterTemplate = item.template;\n          break;\n        case 'checkbox':\n          this.checkboxTemplate = item.template;\n          break;\n        case 'cardFilter':\n          this.cardHeaderTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        default:\n          this.bodyTemplate = item.template;\n          break;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.loadMoreSubscription.unsubscribe();\n    this.loadMoreDebouncer.complete();\n    this.loadMoreDebouncer.unsubscribe();\n    this.scrollContainer = null;\n    this.menu = null;\n    this.table = null;\n    this.loadButton = null;\n  }\n\n  onSortChanged(event) {\n    this.sortChanged.emit(event);\n  }\n\n  onRowSelected(event) {\n    if (this.selection && event.data.id === this.selection.id) {\n      this.rowSelectionChanged.emit({data: null, originalEvent: event.originalEvent});\n    } else {\n      this.rowSelectionChanged.emit(event);\n    }\n  }\n\n  onRowDeselected(event) {\n    if (this.minView) {\n      this.rowSelectionChanged.emit({data: null, originalEvent: event.originalEvent});\n      this.scrollToElement(event.data);\n    } else {\n      this.rowSelectionChanged.emit({data: this.table?.selection, originalEvent: event.originalEvent});\n    }\n  }\n  public scrollToIndex(index){\n    this.table.scrollToVirtualIndex(index);\n  }\n\n  public scrollToElement(data) {\n    const rowIndex = this.tableData.findIndex(row => row.id === data.id);\n    if (rowIndex > -1 && this.table) {\n      const row = this.table.el.nativeElement.getElementsByTagName('tr')[rowIndex] as HTMLTableRowElement;\n      if (row) {\n        let location = row.offsetTop;\n        if (rowIndex + 1 === this.tableData.length) {\n          location += row.getBoundingClientRect().height;\n        }\n        this.table.scrollTo({top: location, behavior: 'smooth'});\n      }\n    }\n  }\n\n  onFirstChanged(event) {\n    this.firstChanged.emit(event);\n  }\n\n  openContext(e: { originalEvent: MouseEvent; data: any }) {\n    if (this.onRowRightClick.observers.length > 0) {\n      this.onRowRightClick.emit({e: e.originalEvent, rowData: e.data});\n      if (this.table) {\n        this.table.contextMenuSelection = null;\n      }\n      window.setTimeout(() => this.menu.hide());\n    }\n  }\n\n  trackByFunction(index: number, item) {\n    return item?.id || item?.name || index;\n  }\n\n  public locateInTable() {\n    const selectedTask = this.selection;\n    const tableData = this.table.filteredValue ? this.table.filteredValue : this.table.value;\n    const rowIndex = tableData.findIndex((task) => task.id === selectedTask.id);\n    const first = rowIndex > 0 ? (rowIndex - rowIndex % 10) : 0;\n    this.first = first;\n    this.firstChanged.emit(first);\n  }\n\n  getBodyData(rowData, col) {\n    return get(col.id, rowData);\n  }\n\n  incrementIndex(change: number) {\n    const currentIndex = this.getCurrentIndex();\n    if (currentIndex == -1) {\n      return;\n    }\n    if (this.tableData.length && this.tableData.length - currentIndex < 3 && !this.noMoreData) {\n      this.loadMore();\n    }\n    const nextSelected = (this.selection) ? this.tableData[currentIndex + change] : this.tableData[0];\n    if (nextSelected) {\n      this.rowSelectionChanged.emit({data: nextSelected});\n    }\n  }\n\n  getCurrentIndex() {\n    if (this.selection) {\n      return this.tableData.findIndex((row) => row.id === this.selection.id);\n    } else {\n      return 0;\n    }\n  }\n\n  loadMore() {\n    this.loading = true;\n    this.loadMoreDebouncer.next();\n  }\n\n  onColReorder($event: any) {\n    const columnsList = $event.columns.map(column => column.id);\n    this.colReordered.emit(columnsList);\n  }\n\n  orderColumns() {\n    if (this.columns && this.columnsOrder) {\n      this.columns.sort((a, b) => sortCol(a.id, b.id, this.columnsOrder)\n      );\n    }\n  }\n\n  isRowSelected(entity: { id: any }) {\n    if (!entity) {\n      return false;\n    }\n\n    return this.checkedItems?.length > 0 &&\n      (this.checkedItems.some((selectedEntity: { id: any }) => selectedEntity.id === entity.id));\n  }\n\n  private updateLoadButton(e: Event) {\n    if (e) {\n      this.scrollLeft = (e.target as HTMLDivElement).scrollLeft;\n    }\n    if (this.table?.el?.nativeElement) {\n      this.buttonLeft = (this.table.el.nativeElement.getBoundingClientRect().width / 2) - 70 + this.scrollLeft;\n    }\n    this.cdr.detectChanges();\n  }\n\n  private updateFilter() {\n    if (this.minView) {\n      // Overriding prime ng filter and sort functions so that it wont reset first after data change.\n      this.table._filter = custumFilterFunc.bind(this.table);\n      this.table.sortSingle = custumSortSingle.bind(this.table);\n\n      this.table.filters = this._filters;\n    }\n  }\n\n  focusSelected() {\n    this.table.el.nativeElement.getElementsByClassName('selected')[0]?.focus();\n  }\n\n  colResize({delta, element}: { delta: number; element: HTMLTableHeaderCellElement }) {\n    if (delta) {\n      const width = element.clientWidth;\n      const columnId = element.attributes['data-col-id']?.value;\n      this.columnResized.emit({columnId, widthPx: width});\n      this.resize();\n      // this.updateColumnsWidth(columnId, width, delta);\n    }\n  }\n\n  updateColumnsWidth(columnId, width: number, delta: number) {\n    if (columnId) {\n      const colIndex = this.columns.findIndex(col => col.id === columnId);\n      delta = width - parseInt(this.columns[colIndex].style?.width, 10);\n      if (width < 30) {\n        width = 30;\n      }\n      this.columns[colIndex].style = {...this.columns[colIndex].style, width: `${width}px`};\n      if(this.columns[colIndex + 1]) {\n        const newWidth = parseInt(this.columns[colIndex + 1]?.style.width, 10) - delta;\n        if (newWidth < 30) {\n          this.columns[colIndex + 1].style = {...this.columns[colIndex + 1].style, width: '30px'};\n          this.columns[colIndex].style = {...this.columns[colIndex].style, width: `${width - 30 + newWidth}px`};\n        } else {\n          this.columns[colIndex + 1].style = {...this.columns[colIndex + 1].style, width: `${newWidth}px`};\n        }\n      }\n    }\n    this.columns.forEach((col) => {\n      this.columnResized.emit({columnId: col.id, widthPx: parseInt(col.style.width, 10)});\n    });\n  }\n\n  get sortableCols() {\n    return this.columns.filter(col => col.sortable);\n  }\n\n  sortItemClick($event: { event?: MouseEvent; itemValue: string }, colId: string) {\n    this.sortChanged.emit({isShift: $event.event.shiftKey, field: colId});\n  }\n\n  getOrder(colId: string) {\n    return this.sortFields.find(field => field.field === colId)?.order;\n  }\n}\n","export enum ColHeaderTypeEnum {\n  sort       = 'sort',\n  sortFilter = 'sort-filter',\n  checkBox   = 'checkbox',\n  title      = 'none'\n}\nexport enum ColHeaderFilterTypeEnum {\n  duration        = 'duration',         // days-hours-minutes\n  durationNumeric = 'duration-numeric', // number\n  durationDate    = 'duration-date',    // DD-MM-YYYY hours:minutes\n}\n\nexport type TableSortOrderEnum = 1 | -1;\nexport const TABLE_SORT_ORDER = {\n  ASC : 1 as TableSortOrderEnum,\n  DESC: -1 as TableSortOrderEnum,\n};\n\ndeclare type FilterMatchModeEnum = 'startsWith' | 'contains' | 'endsWidth' | 'equals' | 'notEquals' | 'in';\n\n\nexport interface ISmCol {\n  id: string; // unique id, by default, will be use as the table data param (e.g name and data[name]).\n  getter?: string | string[];\n  header?: string; // the title header.\n  label?: string; // Labels to show in cards mode..\n  hidden?: boolean; // the column visibility.\n  static?: boolean;\n  headerType?: ColHeaderTypeEnum;\n  filterType?: ColHeaderFilterTypeEnum;\n  sortable?: boolean; // determine if the column shell be sortable\n  searchableFilter?: boolean;\n  filterable?: boolean; // determine if the column shell be filterable\n  isFiltered?: boolean; // deprecated.\n  isSorted?: boolean; // deprecated.\n  filterMatchMode?: FilterMatchModeEnum; // the filter method.\n  style?: {width?: string; minWidth?: string; maxWidth?: string}; // the column style.\n  headerStyleClass?: string; // the header css class name.\n  bodyTemplateRef?: string; // redundant.\n  bodyStyleClass?: string;\n  disableDrag?: boolean; // Disable drag on this col\n  disablePointerEvents?: boolean; // Disable pointer events for this col header (for selection col)\n  metric_hash?: string;\n  variant_hash?: string;\n  isParam?: boolean;\n  valueType?: string;\n  projectId?: string;\n  textCenter?: boolean;\n  andFilter?: boolean;\n  excludeFilter?: boolean;\n  columnExplain?: string;\n}\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'sm-vertical-labeled-row',\n  templateUrl: './vertical-labeled-row.component.html',\n  styleUrls: ['./vertical-labeled-row.component.scss']\n})\nexport class VerticalLabeledRowComponent implements OnInit {\n  @Input() label: string;\n  @Input() showRow? = true;\n  @Input() labelClass: string;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"labeled-row\">\n  <div class=\"label\">{{label}}</div>\n  <div class=\"value ellipsis\">\n    <ng-content></ng-content>\n  </div>\n</div>\n\n","import {createAction, props} from '@ngrx/store';\n\nexport interface ColorPreference {\n  [key: string]: number[];\n}\n\nexport interface ColorPickerProps {\n  top: number;\n  left: number;\n  theme: string;\n  defaultColor: string;\n  cacheKey: string;\n  alpha?: boolean;\n}\n\nexport const CHOOSE_COLOR_PREFIX          = 'CHOOSE_COLOR_';\n\nexport const addUpdateColorPreferences = createAction(\n  CHOOSE_COLOR_PREFIX + 'ADD_UPDATE_COLOR_PREFERENCES',\n  props<ColorPreference>()\n);\n\nexport const showColorPicker = createAction(\n  CHOOSE_COLOR_PREFIX + 'SHOW_PICKER',\n  props<ColorPickerProps>()\n);\n","import {Directive, ElementRef, HostListener, Input} from '@angular/core';\nimport {ColorHashService} from '../../../services/color-hash/color-hash.service';\nimport {normalizeColorToString} from '../../../services/color-hash/color-hash.utils';\nimport {Store} from '@ngrx/store';\nimport {showColorPicker} from './choose-color.actions';\n\n@Directive({\n  selector: '[smChooseColor]',\n})\nexport class ChooseColorDirective {\n  readonly colorTopOffset    = 100;\n  readonly colorPickerWidth  = 230;\n  readonly colorPickerHeight = 460 - this.colorTopOffset;\n  @Input() colorButtonRef;\n  @Input() colorButtonClass: string;\n  @Input() stringToColor: string;\n  @Input() colorPickerWithAlpha: boolean = false;\n  private _defaultColor: number[];\n  private defaultColorString: string;\n\n  @Input() set defaultColor(defaultColor: number[]) {\n    this._defaultColor = defaultColor;\n    this.defaultColorString = normalizeColorToString(defaultColor);\n  }\n\n  get defaultColor() {\n    return this._defaultColor;\n  }\n\n  @HostListener('mousedown', ['$event'])\n  public onMouseDown(event: MouseEvent): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent): void {\n    const elementsWithClass = this.colorButtonClass ? Array.from(this.el.nativeElement.querySelectorAll(this.colorButtonClass)) : [];\n    const matchingEl        = elementsWithClass.find(el => el === event.target);\n    const matchingRef       = this.colorButtonRef && this.colorButtonRef.nativeElement ? this.colorButtonRef.nativeElement : this.colorButtonRef;\n\n    if (matchingEl || matchingRef === event.target) {\n      event.stopPropagation();\n      this.openColorPicker(event);\n    }\n  }\n\n  constructor(private el: ElementRef, private store: Store<any>) {}\n\n  openColorPicker(event: MouseEvent) {\n    let top = event.pageY - (this.colorPickerHeight / 3);\n    let left = event.pageX;\n    if (event.pageY + this.colorPickerHeight >= (window.innerHeight || document.documentElement.clientHeight)) {\n      top = (event.pageY) - this.colorPickerHeight;\n    }\n    if (event.clientX + this.colorPickerWidth >= (window.innerWidth || document.documentElement.clientWidth)) {\n      left = (event.clientX) - this.colorPickerWidth;\n    }\n\n    this.store.dispatch(showColorPicker({\n      top,\n      left,\n      theme: 'light',\n      defaultColor: this.defaultColorString,\n      cacheKey: this.stringToColor,\n      alpha: this.colorPickerWithAlpha\n    }));\n    event.stopPropagation();\n  }\n\n}\n\nexport const attachColorChooser = (text: string, buttonElement: Element, colorHash: ColorHashService, store: Store<any>, withAlpha?: boolean) => {\n  const directive = new ChooseColorDirective(new ElementRef(buttonElement), store);\n  directive.colorButtonRef = new ElementRef(buttonElement);\n  directive.stringToColor  = text;\n  directive.colorPickerWithAlpha = withAlpha;\n  const listener = (e: MouseEvent) => {\n    directive.defaultColor = colorHash.initColor(text);\n    directive.openColorPicker(e);\n  };\n  buttonElement.removeEventListener('click', listener);\n  buttonElement.addEventListener('click', listener);\n};\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ChooseColorDirective} from './choose-color.directive';\nimport {ColorPickerWrapperComponent} from '../../inputs/color-picker/color-picker-wrapper.component';\nimport {ColorPickerModule} from 'ngx-color-picker';\nimport {SMPortalModule} from '../../../portal/portal.module';\nimport {StoreModule} from '@ngrx/store';\nimport {colorPreferenceReducer} from './choose-color.reducer';\n\n\nexport const colorSyncedKeys    = [\n  'colorPreferences',\n];\n\nconst _declarations = [\n  ChooseColorDirective,\n  ColorPickerWrapperComponent\n];\n\n@NgModule({\n  providers      : [\n    ChooseColorDirective,\n  ],\n  declarations   : _declarations,\n  imports        : [\n    CommonModule,\n    ColorPickerModule,\n    SMPortalModule,\n    StoreModule.forFeature('colorsPreference', colorPreferenceReducer),\n  ],\n  exports        : _declarations\n})\nexport class ChooseColorModule {\n}\n","import {Action, createReducer, createSelector, on} from '@ngrx/store';\nimport {addUpdateColorPreferences, ColorPickerProps, ColorPreference, showColorPicker} from './choose-color.actions';\n\nexport interface ColorPreferenceState {\n  colorPreferences: ColorPreference;\n  pickerProps: ColorPickerProps;\n}\n\nexport const initialState: ColorPreferenceState = {\n  colorPreferences: null,\n  pickerProps: null\n};\n\nexport const colors = state => state.colorsPreference as ColorPreferenceState;\nexport const selectColorPreferences = createSelector(colors, state => state.colorPreferences);\nexport const selectColorPickerProps = createSelector(colors, state => state.pickerProps);\n\nconst reducer = createReducer(\n  initialState,\n  on(addUpdateColorPreferences, (state, action) => ({...state, colorPreferences: {...state.colorPreferences, ...action}})),\n  on(showColorPicker, (state , action) => ({...state, pickerProps: action}))\n);\n\nexport function colorPreferenceReducer(state: ColorPreferenceState | undefined, action: Action) {\n  return reducer(state, action);\n}\n","import {Directive, HostListener} from '@angular/core';\n\n@Directive({\n  selector: '[smClickStopPropagation]'\n})\nexport class ClickStopPropagationDirective {\n  @HostListener('click', ['$event'])\n  public onClick(event: any): void {\n    event.stopPropagation();\n  }\n}\n","import {AfterViewInit, Directive, ElementRef, HostListener} from '@angular/core';\n\n@Directive({\n  selector: '[smEllipsisMiddleDirective]'\n})\nexport class EllipsisMiddleDirective implements AfterViewInit {\n  private timeoutSubscription: NodeJS.Timer;\n\n  constructor(private el: ElementRef) {\n  }\n\n  ngAfterViewInit(): void {\n    this.cropTextToFit(this.el);\n  }\n\n  @HostListener('window:resize')\n  onResize() {\n    clearTimeout(this.timeoutSubscription);\n    this.timeoutSubscription = setTimeout(this.cropTextToFit.bind(this, this.el), 75);\n  }\n\n  private cropTextToFit = (el: ElementRef) => {\n    const o = el.nativeElement;\n    let txt = o.innerText;\n\n    while (o.scrollWidth > o.clientWidth && txt.length > 0) {\n      txt = txt.substring(0, txt.length / 2 - 1) + txt.substring(txt.length / 2 + 1, txt.length);\n      o.innerHTML = txt.substring(0, txt.length / 2) + '...' + txt.substring(txt.length / 2, txt.length);\n    }\n  };\n}\n\n\n","import { Directive } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\n\n\n@Directive({\n  selector: '[smHesitate]',\n  inputs: [ 'delay', 'action' ],\n  outputs: [ 'hesitateEvents: smHesitate' ],\n  exportAs: 'hesitate'\n})\nexport class HesitateDirective implements OnInit, OnDestroy {\n  public delay: number;\n  public action = 'enter' as 'enter' | 'leave';\n  public hesitateEvents: EventEmitter<void>;\n\n  private elementRef: ElementRef;\n  private renderer: Renderer2;\n  private listeners: (() => void)[] | null;\n  private timer: number;\n  private zone: NgZone;\n  public hesitateStatus = false;\n\n  // I initialize the hesitate directive.\n  constructor(\n    elementRef: ElementRef,\n    renderer: Renderer2,\n    zone: NgZone\n  ) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.zone = zone;\n\n    this.delay = 2000;\n    this.hesitateEvents = new EventEmitter();\n    this.timer = 0;\n    this.listeners = null;\n  }\n\n  // I cancel any pending hesitation timer.\n  // --\n  // NOTE: This is method is PUBLIC so that it may be consumed as part of the EXPORTED\n  // API in the View of the calling context.\n  public cancel(): void {\n    this.hesitateStatus = false;\n    clearTimeout( this.timer );\n  }\n\n  // I get called once when the host element is being unmounted.\n  public ngOnDestroy(): void {\n    this.cancel();\n    // If we have event-handler bindings, unbind them all.\n    if ( this.listeners ) {\n      for ( const listener of this.listeners ) {\n        listener();\n      }\n    }\n  }\n\n  // I get called once after the host element has been mounted and the inputs have been\n  // bound for the first time.\n  public ngOnInit(): void {\n    // Instead of using host bindings, which would trigger change-detection digests\n    // when the events are triggered, we want to drop-down out of the core NgZone so\n    // that we can setup our event-handlers without adding processing overhead.\n    if (this.action === 'enter') {\n      this.zone.runOutsideAngular(\n        () => {\n          this.listeners = [\n            this.renderer.listen(this.elementRef.nativeElement, 'mouseenter', this.handleMouseenter),\n            this.renderer.listen(this.elementRef.nativeElement, 'mousedown', this.handleMousedown),\n            this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', this.handleMouseleave)\n          ];\n        }\n      );\n    } else {\n      this.zone.runOutsideAngular(\n        () => {\n          this.listeners = [\n            this.renderer.listen(this.elementRef.nativeElement, 'mouseenter', this.handleMouseleave),\n            this.renderer.listen(this.elementRef.nativeElement, 'mousedown', this.handleMousedown),\n            this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', this.handleMouseenter)\n          ];\n        }\n      );\n\n    }\n  }\n\n  // I handle the mousedown event inside the host element.\n  // --\n  // CAUTION: Currently OUTSIDE the core NgZone.\n  private handleMousedown = ( event: MouseEvent ): void => {\n    // If the user shows any mouse-activity (other than enter/leave) inside the host\n    // element, we want to cancel the hesitation timer. Such mouse activity indicates\n    // non-hesitation intent on behalf of the user.\n    this.cancel();\n  };\n\n\n  // I handle the mouseevent event inside the host element.\n  // --\n  // CAUTION: Currently OUTSIDE the core NgZone.\n  private handleMouseenter = ( event: MouseEvent ): void => {\n    // When the user enters the host, start the hesitation timer. This timer will be\n    // fulfilled if the user remains inside of the host without performing any other\n    // meaningful actions.\n    this.hesitateStatus = true;\n    this.timer = window.setTimeout( this.handleTimerThreshold, this.delay );\n  };\n\n\n  // I handle the mouseleave event inside the host element.\n  // --\n  // CAUTION: Currently OUTSIDE the core NgZone.\n  private handleMouseleave = ( event: MouseEvent ): void => {\n    this.cancel();\n  };\n\n\n  // I handle the timer threshold event.\n  // --\n  // CAUTION: Currently OUTSIDE the core NgZone.\n  private handleTimerThreshold = (): void => {\n    // Once the hesitation timer threshold has been surpassed, we want to trigger an\n    // output event. This time, however, we want to trigger Angular change-detection.\n    // As such, we have set up into the Angular zone for the emission.\n    this.zone.runGuarded(\n      () => {\n        this.hesitateEvents.emit();\n      }\n    );\n  };\n}\n","import {Directive, HostListener} from '@angular/core';\n\n@Directive({\n  selector: '[smKeyDownStopPropagation]'\n})\nexport class KeydownStopPropagationDirective {\n  @HostListener('keydown', ['$event'])\n  public onClick(event: any): void {\n    event.stopPropagation();\n  }\n}\n","import {AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output} from '@angular/core';\nimport {fromEvent, Subject, timer} from 'rxjs';\nimport {debounceTime, takeUntil} from 'rxjs/operators';\n\nconst isElementOverflow = ({ clientWidth, clientHeight, scrollWidth, scrollHeight }) =>\n  Math.abs(scrollHeight - clientHeight) > 2 || Math.abs(scrollWidth - clientWidth) > 2;\n\n@Directive({\n  selector: '[smOverflows]'\n})\nexport class OverflowsDirective implements AfterViewInit, OnDestroy {\n  @Output() onOverflows = new EventEmitter<boolean>();\n\n  @Input()  set smOverflows(name) {\n    this.isEllipsisWithTimeDelay();\n  }\n\n  private onDestroySubscription$ = new Subject();\n  private readonly host: Element;\n  public lastResult;\n  constructor(_host: ElementRef) {\n    this.host = _host.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    fromEvent(window, 'resize')\n      .pipe(\n        debounceTime(50),\n        takeUntil(this.onDestroySubscription$)\n      )\n      .subscribe(() => this.isEllipsis());\n  }\n\n  private isEllipsisWithTimeDelay(delay = 100) {\n    timer(delay).subscribe(() => this.isEllipsis());\n  }\n  private isEllipsis() {\n    if (this.host.textContent !== '') {\n      const hasOverflow = isElementOverflow(this.host);\n      if (hasOverflow !== this.lastResult) {\n        this.onOverflows.emit(hasOverflow);\n        this.lastResult = hasOverflow;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.onDestroySubscription$.next();\n  }\n}\n","import {EventEmitter, Input, OnDestroy, OnInit, Output, Directive} from '@angular/core';\nimport {ImmutableForm} from './immutableForm.model';\nimport {ValidatorFn} from '@angular/forms';\nimport {isEmpty, isEqual} from 'lodash/fp';\n\n@Directive()\nexport class ImmutableFormField implements OnInit, OnDestroy, ImmutableForm {\n  protected _formData;\n\n  @Input() set formData(formData: any) {\n    this._formData = formData;\n    this.formDataUpdated(formData);\n  }\n\n  get formData() {\n    return this._formData;\n  }\n\n  @Input() fieldName: string;\n  @Input() errors: Map<string, boolean> = <Map<string, boolean>>{};\n  @Input() header: string; // the input title.\n  @Input() placeHolder: string = ''; // the input title.\n  @Input() validators: Array<ValidatorFn>;\n  @Input() showErrors: boolean = true; // boolean to determine when the errors should be displayed.\n  @Input() isReadonly: boolean;\n  @Input() inputClassName: string = 'form-control';\n  @Input() readonlyClassName: string;\n  @Input() readonlyLabel: string;\n  @Input() disabled: boolean;\n  // a map of the error messages for each error when the key is the error key and the value is the error message.\n  @Input() errorMessages;\n\n  @Output() formDataChanged = new EventEmitter<{ field: string; value: any; event: Event }>();\n  @Output() errorsChanged = new EventEmitter<{ field: string; errors: Map<string, boolean> }>();\n\n  ngOnInit() {\n    // if (!this.fieldName) {\n    //   console.error('please specify field name');\n    // }\n    this.checkValidity(this.formData);\n  }\n\n  ngOnDestroy() {\n    this.errorsChanged.emit({field: this.fieldName, errors: null});\n  }\n\n  fieldValueChanged(value, event) {\n    this.checkValidity(value);\n    this.formDataChanged.emit({field: this.fieldName, value: value, event});\n  }\n\n  hasErrors() {\n    return !isEmpty(this.errors);\n  }\n\n  getCurrentError() {\n    if (!this.showErrors || !this.errors || !this.errorMessages) {\n      return '';\n    }\n    const activeErrors = this.errors;\n    return activeErrors ? this.errorMessages[Object.keys(activeErrors)[0]] : null;\n  }\n\n  checkValidity(newValue) {\n    if (this.validators) {\n      let errors = <Map<string, boolean>>{};\n      this.validators.forEach(validatorFn => {\n        const err = validatorFn(<any>{value: newValue});\n        errors = err ? {...errors, ...err} : errors;\n      });\n\n      errors = isEmpty(errors) ? null : errors;\n\n      if (!isEqual(errors, this.errors)) {\n        this.errorsChanged.emit({field: this.fieldName, errors});\n      }\n    }\n  }\n\n  formDataUpdated(formData) {\n  }\n\n}\n","<span class=\"layout\"\n      [ngClass]=\"inputClassName\"\n      [class.disabled]=\"disabled\"\n      (click)=\"fieldValueChanged($event)\"\n>\n  <span\n    *ngIf=\"!isReadonly\"\n    role=\"button\"\n    class=\"purple-v\"\n    [ngClass]=\"inputClassName\"\n    [class.checked] = \"state === 'All' || state === 'Partial'\"\n    [class.readonly] = \"isReadonly\"\n    [smTooltip]=\"getCurrentError()\"\n    tooltipType='validation'\n    [showTooltip]=\"showErrors\"\n  >\n    <i class=\"fas\" [ngClass]=\"{\n    'fa-plus': special && !formData,\n    'fa-trash fa-sm': special && !!formData,\n    'al-ico fa-sm al-color white al-ico-completed': state === 'All',\n    spacer: state === 'None',\n    'fa-minus': state === 'Partial'\n    }\">\n    </i>\n  </span>\n  <span\n    *ngIf=\"label\"\n    [class]=\"readonlyClassName + ' checkbox-label ellipsis'\"\n    [ngClass]=\"isReadonly ? '' : 'pointer'\"\n  >{{label}}\n  </span>\n</span>\n","import {ChangeDetectionStrategy, Component, Input, AfterViewInit, ChangeDetectorRef} from '@angular/core';\nimport {ImmutableFormField} from '../immutableFormField';\nimport {isString} from 'lodash/fp';\nimport {TableSelectionState} from '../../../../constants';\n\n@Component({\n  selector: 'sm-checkbox-control',\n  templateUrl: './checkbox-control.component.html',\n  styleUrls: ['./checkbox-control.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxControlComponent extends ImmutableFormField implements AfterViewInit {\n\n  public special = false;\n  public state: TableSelectionState = null;\n\n  @Input() label: string;\n\n  constructor(private cdr: ChangeDetectorRef) {\n    super();\n    this.inputClassName = '';\n  }\n\n  ngAfterViewInit() {\n    this.formDataUpdated(null);\n  }\n\n  fieldValueChanged(event) {\n    if (this.disabled) {\n      return;\n    }\n    event.stopPropagation();\n\n    if (!this.isReadonly) {\n      super.fieldValueChanged(!this.formData, event);\n    }\n    // this.formDataChanged.emit({field: this.fieldName, value: !this.formData});\n  }\n\n  formDataUpdated(formData) {\n    if (this.inputClassName === 'add-or-remove') {\n      this.special = true;\n      this.state = null;\n    } else if (!isString(this.formData)) {\n      this.state = this.formData === true ? 'All' : 'None';\n    } else {\n      this.state = <TableSelectionState>this.formData;\n    }\n    this.cdr.detectChanges();\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {CircleTypeEnum} from '../../../../../shared/constants/non-common-consts';\n\n\n@Component({\n  selector: 'sm-circle-counter',\n  templateUrl: './circle-counter.component.html',\n  styleUrls: ['./circle-counter.component.scss']\n})\nexport class CircleCounterComponent implements OnInit {\n  @Input() counter: any;\n  @Input() label: string;\n  @Input() underLabel: string;\n  @Input() type: CircleTypeEnum = CircleTypeEnum.empty;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"counter-container\">\n  <div [class]=\"'circle-counter ' + type\">\n    <div class=\"counter\">{{counter | numberToK}}</div>\n  </div>\n  <div class=\"counter-label\">{{label}}</div>\n  <div class=\"counter-label leave-space\">{{underLabel}}</div>\n</div>\n","<div class=\"counter-container\">\n  <div [class]=\"'d-flex justify-content-center align-items-center circle ' + (status || type)\">\n    <i *ngIf=\"status\" [class]=\"'icon sm-md white i-'+ status\"></i>\n    <i *ngIf=\"type\" [class]=\"'al-icon xl al-color white al-ico-type-'+ type.replace('_', '-')\"></i>\n  </div>\n  <div class=\"counter-label\">{{EXPERIMENTS_STATUS_LABELS[(status|| type)]}}</div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TaskStatusEnum} from '../../../../../business-logic/model/tasks/taskStatusEnum';\nimport {EXPERIMENTS_STATUS_LABELS} from '../../../../../shared/constants/non-common-consts';\nimport {TaskTypeEnum} from '../../../../../business-logic/model/tasks/taskTypeEnum';\n\n\n@Component({\n  selector   : 'sm-circle-status',\n  templateUrl: './circle-status.component.html',\n  styleUrls  : ['./circle-status.component.scss']\n})\nexport class CircleStatusComponent {\n  @Input() status: TaskStatusEnum;\n  @Input() type: TaskTypeEnum;\n  public readonly EXPERIMENTS_STATUS_LABELS = EXPERIMENTS_STATUS_LABELS;\n}\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input} from '@angular/core';\n\n@Component({\n  selector   : 'sm-copy-clipboard',\n  templateUrl: './copy-clipboard.component.html',\n  styleUrls  : ['./copy-clipboard.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CopyClipboardComponent {\n\n  @Input() clipboardText: string;\n  @Input() disabled = false;\n  @Input() label: string = 'Copy to clipboard';\n  @Input() tooltipText = 'Copy to clipboard';\n  @Input() hideBackground = false;\n  @Input() theme: string;\n  @Input() copyIcon: string;\n\n  public copied = false;\n\n  constructor(private cdr:ChangeDetectorRef) {\n  }\n\n  copyToClipboard() {\n    this.copied = true;\n    this.cdr.detectChanges();\n    setTimeout(() => {\n      this.copied = false;\n      this.cdr.detectChanges();\n    }, 5000);\n  }\n\n}\n","<button smTooltip=\"{{tooltipText}}\"\n        [matTooltipPosition]=\"'above'\"\n        type=\"button\"\n        ngxClipboard\n        smClickStopPropagation\n        class=\"btn btn-primary\"\n        [class]=\"theme\"\n        [class.hideBackground]=\"hideBackground\"\n        [cbContent]=\"clipboardText\"\n        [disabled]=\"disabled\"\n        (cbOnSuccess)=\"copyToClipboard()\"\n>\n  <i class=\"al-icon sm-md\" [class]=\"copied ? 'al-ico-success' : copyIcon || 'al-ico-copy-to-clipboard'\" [class.mr-2]=\"label\"></i>\n  <span>{{label}}</span>\n</button>\n","import {Component, ElementRef, Input, Renderer2} from '@angular/core';\n\n@Component({\n  selector: 'sm-divider',\n  template: `\n    <span class=\"\">{{label}}</span>\n  `,\n  styleUrls: ['./divider.component.scss']\n})\nexport class DividerComponent {\n\n  @Input() label: string;\n\n  @Input() set width(width: number) {\n    this.setCssVar('width', width);\n  }\n\n  @Input() set margin(margin: number) {\n    this.setCssVar('margin', margin);\n  }\n\n  constructor(private element: ElementRef,\n              private renderer: Renderer2) {\n  }\n\n  setCssVar(name: string, valueInPx: number) {\n    this.renderer.setProperty(this.element.nativeElement, 'style', `--${name}: ${valueInPx}px`);\n  }\n}\n\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {addMessage} from '../../../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../../../app.constants';\nimport {Store} from '@ngrx/store';\nimport {ThemeEnum} from '../../../../experiments/shared/common-experiments.const';\nimport { last } from 'lodash/fp';\n\n@Component({\n  selector   : 'sm-snippet-error',\n  templateUrl: './snippet-error.component.html',\n  styleUrls  : ['./snippet-error.component.scss']\n})\n\n\nexport class SnippetErrorComponent implements OnInit {\n\n\n  constructor(private store: Store<any>) {\n  }\n\n  @Output() openImageClicked = new EventEmitter();\n  private _copyContent: string;\n  public baseFile: string;\n  @Input() set copyContent(content: string) {\n    this._copyContent = content;\n    this.baseFile = last(content?.split('/') || '');\n  }\n  get copyContent() {\n    return this._copyContent;\n  }\n\n  @Input() theme: ThemeEnum = ThemeEnum.Dark;\n  public ThemeEnum           = ThemeEnum;\n\n  ngOnInit() {\n  }\n\n  copyToClipboardSuccess(success: boolean) {\n    this.store.dispatch(addMessage(success ? MESSAGES_SEVERITY.SUCCESS : MESSAGES_SEVERITY.ERROR, success ? 'Path copied to clipboard' : 'No path to copy'));\n  }\n\n}\n","<div class=\"frame text-center\" [ngClass]=\"{\n'dark-theme':theme===ThemeEnum.Dark,\n'light-theme': theme===ThemeEnum.Light\n}\" >\n  <div class=\"labeled-icon\">\n    <i class=\" mb-3 al-icon xl al-ico-alert-outline al-color \" [ngClass]=\"{\n    'light-grey-blue': theme=== ThemeEnum.Light,\n    'neon-yellow': theme===ThemeEnum.Dark\n   }\"></i>\n    <div class=\"label\">Unable to load image</div>\n    <div class=\"label\">{{baseFile}}</div>\n  </div>\n  <div class=\"d-flex justify-content-between buttons-footer align-items-center\">\n    <div class=\"clickable-icon d-flex align-items-center justify-content-center pointer\"\n         ngxClipboard\n         smTooltip=\"Copy Image URL\"\n         [cbContent]=\"copyContent\"\n         (cbOnSuccess)=\"copyToClipboardSuccess(true)\">\n      <i class=\"fas fa-copy\"></i>\n    </div>\n    <div class=\"clickable-icon d-flex align-items-center justify-content-center pointer\"\n         smTooltip=\"Open Image\"\n         (click)=\"openImageClicked.emit()\"\n    >\n      <i class=\"fas fa-external-link-alt\"></i>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector   : 'sm-tag',\n  templateUrl: './tag.component.html',\n  styleUrls  : ['./tag.component.scss']\n})\nexport class TagComponent implements OnInit {\n  @Input() label: string;\n  @Input() className: string;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<span [class]=\"(className ? className : '') + ' tag'\">\n  {{label}}\n</span>\n","import {Directive, Input} from '@angular/core';\nimport {MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, MatTooltipDefaultOptions} from '@angular/material/tooltip';\n\nexport type TooltipTypeEnum = 'help' | 'validation' | 'error';\n\n@Directive({\n  selector: '[smTooltip]',\n  providers: [\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {position: 'after'} as MatTooltipDefaultOptions\n    }\n  ]\n})\nexport class TooltipDirective extends MatTooltip {\n\n  public readonly TOOLTIP_TYPE = {\n    HELP: 'help' as TooltipTypeEnum,\n    VALIDATION: 'validation' as TooltipTypeEnum,\n    ERROR: 'error' as TooltipTypeEnum,\n  };\n\n  @Input() set smTooltip(message) {\n    this.tooltipClass = `sm-tooltip ${this.tooltipType} ${this.customClass}`;\n    this.message = message;\n  }\n\n  @Input() tooltipType: TooltipTypeEnum = 'help';\n  @Input() customClass: string;\n\n  @Input() set showTooltip(show) {\n    show && this.show();\n  }\n\n  @Input() showDelay = 0;\n\n}\n","<mat-button-toggle-group [formControl]=\"formControl\" name=\"fontStyle\" aria-label=\"Font Style\">\n  <mat-button-toggle *ngFor=\"let option of options\" [value]=\"option.value\">{{option.label}}</mat-button-toggle>\n</mat-button-toggle-group>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n@Component({\n  selector       : 'sm-button-toggle',\n  templateUrl    : './button-toggle.component.html',\n  styleUrls      : ['./button-toggle.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonToggleComponent implements OnInit {\n\n  public formControl = new FormControl();\n  private valueChangesSubs: any;\n\n  @Input() options: Array<{ value: any; label: string; icon?: string }>;\n\n  @Input() set value(value: any) {\n    this.formControl.setValue(value);\n  }\n\n  @Output() valueChanged = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.valueChangesSubs = this.formControl.valueChanges\n      .pipe(\n        distinctUntilChanged()\n      )\n      .subscribe(value => {\n        this.valueChanged.emit(value);\n      });\n  }\n\n}\n","<div\n  class=\"color-picker-wrapper\"\n  [class.light-theme]=\"props?.theme === 'light'\"\n  [style.top.px]=\"props?.top\"\n  [style.left.px]=\"props?.left\">\n  <div\n    *ngIf=\"props?.alpha; else noAlpha\"\n    [(colorPicker)]=\"defaultColor\"\n    [(cpToggle)]=\"toggle\"\n    [cpOKButton]=\"true\"\n    [cpCancelButton]=\"true\"\n    [cpSaveClickOutside]=\"false\"\n    [cpOKButtonClass]=\"'btn btn-primary btn-xs'\"\n    [cpCancelButtonClass]=\"'btn btn-primary btn-xs m-3'\"\n    [cpAlphaChannel]=\"'forced'\"\n    [cpDisableInput]=\"true\"\n    [cpPresetColors]=\"presetColors\"\n    (colorPickerSelect)=\"selectColor($event)\">\n  </div>\n<!--  cpAlphaChannel dynamic change doesn't work -> ngIf-->\n  <ng-template #noAlpha>\n  <div\n    [(colorPicker)]=\"defaultColor\"\n    [(cpToggle)]=\"toggle\"\n    [cpOKButton]=\"true\"\n    [cpCancelButton]=\"true\"\n    [cpSaveClickOutside]=\"false\"\n    [cpOKButtonClass]=\"'btn btn-primary btn-xs'\"\n    [cpCancelButtonClass]=\"'btn btn-primary btn-xs m-3'\"\n    [cpAlphaChannel]=\"'disabled'\"\n    [cpDisableInput]=\"true\"\n    [cpPresetColors]=\"presetColors\"\n    (colorPickerSelect)=\"selectColor($event)\">\n  </div>\n  </ng-template>\n</div>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectColorPickerProps} from '../../directives/choose-color/choose-color.reducer';\nimport {Subscription} from 'rxjs';\nimport {ColorPickerProps} from '../../directives/choose-color/choose-color.actions';\nimport {hexToRgb, rgbaToValues} from '../../../services/color-hash/color-hash.utils';\nimport {ColorHashService} from '../../../services/color-hash/color-hash.service';\n\n@Component({\n  selector   : 'sm-color-picker-wrapper',\n  templateUrl: './color-picker-wrapper.component.html',\n  styleUrls  : ['./color-picker-wrapper.component.scss']\n})\nexport class ColorPickerWrapperComponent implements OnInit, OnDestroy  {\n\n  public defaultColor: string;\n  public presetColors = [\n    '#1f77b4',  // muted blue\n    '#ff7f0e',  // safety orange\n    '#2ca02c',  // cooked asparagus green\n    '#d62728',  // brick red\n    '#9467bd',  // muted purple\n    '#8c564b',  // chestnut brown\n    '#e377c2',  // raspberry yogurt pink\n    '#7f7f7f',  // middle gray\n    '#bcbd22',  // curry yellow-green\n    '#17becf',   // blue-teal\n    '#af1d41',\n    '#d5d728'\n\n  ];\n  private propsSub: Subscription;\n  public props: ColorPickerProps;\n  public toggle = false;\n\n  constructor(private store: Store<any>, private colorHashService: ColorHashService) {\n  }\n\n  ngOnInit() {\n    this.propsSub = this.store.select(selectColorPickerProps)\n      .subscribe((props) => {\n        this.props = props;\n        this.defaultColor = props?.defaultColor;\n        this.toggle = !!props;\n      });\n  }\n\n  selectColor(event: string) {\n    let color;\n    if (event.startsWith('rgba')) {\n      color = rgbaToValues(event);\n    } else {\n      color = hexToRgb(event.length === 9 ? event.slice(0,7) : event);\n    }\n    this.colorHashService.setColorForString(this.props.cacheKey, color);\n  }\n\n  ngOnDestroy(): void {\n    this.propsSub.unsubscribe();\n  }\n}\n","import {TemplateFormSectionBase} from '../../template-forms-ui/templateFormSectionBase';\nimport {ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, Output} from '@angular/core';\nimport {TIME_IN_MILLI} from '../../../utils/time-util';\n\n@Component({\n  template: ''\n})\nexport abstract class DurationInputBase  extends TemplateFormSectionBase {\n  public ms = '000';\n  public seconds = '00';\n  public minutes = '00';\n  public hours = '00';\n  public days = '000';\n\n  hasTimes = {\n    ms: true,\n    seconds: false,\n    minutes: false,\n    hours: false,\n    days: false,\n  };\n\n  @Input() returnFactor = 1;\n  @Input() readonly = false;\n\n  @Output() onEditing = new EventEmitter<boolean>();\n  @Output() onDurationChanged = new EventEmitter();\n\n  get value() {return this.ngModelValue;}\n  set value(val) {  // this value is updated by programmatic changes if( ngModelValue !== undefined && this.ngModelValue !== ngModelValue){\n    if (val !== undefined && val !== this.val && val !== '0') {\n\n      val = `${val || 0}`;\n      const _val = +val * this.returnFactor;\n      this.onEditing.emit(false);\n      this.ngModelValue = val;\n      this.val = val;\n\n      // calc the ms,seconds,min with the value * factor\n      this.msToHMSMS(_val);\n      this.cdr?.detectChanges();\n    /*  // return\n      this.onChange(val);\n      this.onTouch(val);*/\n    }\n  }\n\n  constructor(private eRef: ElementRef, protected cdr?: ChangeDetectorRef) {\n    super();\n    this.valueFromInherit = false\n  }\n\n  get hasNoValues() {\n    return  this.seconds === '00' &&\n            this.minutes === '00' &&\n            this.hours === '00' &&\n            this.ms === '000' &&\n            this.days === '000';\n  }\n  @HostListener('document:click', ['$event'])\n  clickOut(event) {\n    if (!this.eRef.nativeElement.contains(event.target)) {\n      this.value = this.ngModelValue;\n    }\n  }\n\n  msToHMSMS(ms: number): void {\n    const days = Math.floor(ms / TIME_IN_MILLI.ONE_DAY);\n    ms = ms - (days * TIME_IN_MILLI.ONE_DAY);\n    const hours = Math.floor(ms / TIME_IN_MILLI.ONE_HOUR);\n    ms = ms - (hours * TIME_IN_MILLI.ONE_HOUR);\n    const minutes = Math.floor(ms / TIME_IN_MILLI.ONE_MIN);\n    ms = ms - (minutes * TIME_IN_MILLI.ONE_MIN);\n\n    const seconds = Math.floor(ms / TIME_IN_MILLI.ONE_SEC);\n    const convertedMs = ms - (seconds * TIME_IN_MILLI.ONE_SEC);\n    this.days = this.toThreeDigits(days);\n    this.hours = this.toTwoDigits(hours);\n    this.minutes = this.toTwoDigits(minutes);\n    this.seconds = this.toTwoDigits(seconds);\n    this.ms = this.toThreeDigits(convertedMs);\n  }\n\n  currentTimeInMs() {\n    return  (+this.ms || 0) +\n            (this.hasTimes.seconds ? +this.seconds * TIME_IN_MILLI.ONE_SEC || 0 : 0) +\n            (this.hasTimes.minutes ? +this.minutes * TIME_IN_MILLI.ONE_MIN || 0 : 0) +\n            (this.hasTimes.hours ? +this.hours * TIME_IN_MILLI.ONE_HOUR || 0 : 0) +\n            (this.hasTimes.days ?  +this.days * TIME_IN_MILLI.ONE_DAY || 0 : 0);\n  }\n\n  toTwoDigits(n: number) {\n    return n > 9 ? '' + n : '0' + n;\n  }\n\n  toThreeDigits(n: number) {\n    return n > 99 ? ('' + n) : (n > 9 ? '0' + n : '00' + n);\n  }\n\n  onChangePartial($event: any) {\n    this.onEditing.emit(false);\n\n    const ms = this.currentTimeInMs();\n    this.msToHMSMS(ms);\n    this.val = ms;\n    const res = ms / this.returnFactor\n    this.onChange(res);\n    this.onDurationChanged.emit(res)\n  }\n\n  checkChars($event: KeyboardEvent) {\n    const isNumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].includes($event.key);\n    if (isNumbers) {\n      this.onEditing.emit(true);\n\n    }\n    return isNumbers;\n  }\n\n  focusOutInput() {\n    const ms = this.currentTimeInMs();\n    this.msToHMSMS(ms);\n    this.val = ms;\n    const res = ms / this.returnFactor;\n    this.onChange(res);\n    this.onDurationChanged.emit(res);\n  }\n\n}\n","<ng-form #templateForm=\"ngForm\">\n  <div class=\"inputs-container d-flex align-items-center\"\n       [class.active]=\"!hasNoValues\">\n      <ng-container *ngFor=\"let input of data; trackBy: trackBy; let index = index; let last = last;\">\n        <input #inputRef\n               [class]=\"'text-center max-length-' + input.maxLength\"\n               matInput\n               [attr.name]=\"input.type\"\n               (input)=\"setValue(inputRef.value, input.type)\"\n               [value]=\"hasNoValues && input.placeholder ? input.placeholder : this[input.type]\"\n               (keypress)=\"checkChars($event)\"\n               (keyup)=\"(inputRef.selectionStart === input.maxLength ) && setNextInputFocus(index)\"\n               (keyup.enter)=\"onChangePartial($event)\"\n               (keyup.arrowRight)=\"(inputRef.selectionStart === input.maxLength || inputRef.value.length <= 1)  && setNextInputFocus(index)\"\n               (keyup.arrowLeft)=\"inputRef.selectionEnd === 0 && setPreviousInputFocus(index)\"\n               (blur)=\"focusOutInput()\"\n               [attr.maxlength]=\"input.maxLength\"\n               smKeyDownStopPropagation\n               (focus)=\"inputRef.select()\"\n               [smTooltip]=\"input.type.charAt(0).toUpperCase() + input.type.slice(1)\"\n               matTooltipPosition=\"above\"\n               [readonly]=\"readonly\"\n        >\n        <i class=\"al-icon al-ico-time-colon\" *ngIf=\"!last\"></i>\n      </ng-container>\n    <ng-container *ngIf=\"hasResetIcon\">\n      <div class=\"reset\">\n        <i *ngIf=\"val > 0\"\n           [class]=\"'al-icon al-ico-dialog-x sm'\"\n           (click)=\"onResetIcon.emit()\"\n        ></i>\n      </div>\n    </ng-container>\n    <ng-content select=\"[after-inputs]\"></ng-content>\n  </div>\n</ng-form>\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef, EventEmitter,\n  forwardRef,\n  Input, OnChanges,\n  OnInit, Output, QueryList, SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DurationInputBase} from '../duration-input/duration-input.base';\nimport {isUndefined} from 'lodash/fp';\n\nexport type DURATION_INPUT_TYPE = 'hours' | 'seconds' | 'ms' | 'days' | 'minutes';\n\nexport interface DurationInputInterface  {\n  type: DURATION_INPUT_TYPE;\n  placeholder?: string;\n  maxLength?: number;\n}\nconst maxLengthMapper = {\n  ms: 3,\n  seconds: 2,\n  hours: 2,\n  minutes: 2,\n  days: 3\n};\n\nexport class DurationInput implements DurationInputInterface {\n  placeholder: string;\n  maxLength: number;\n  constructor(public type: DURATION_INPUT_TYPE, placeholder?: string, maxLength?: number) {\n    this.maxLength = maxLength ?? maxLengthMapper[type];\n    this.placeholder = placeholder ?? '0'.padStart(this.maxLength, '0');\n  }\n}\n\nexport function durationInputFactory(values: Array<DURATION_INPUT_TYPE | DurationInput | DurationInputInterface>): DurationInput[] {\n\n  if (!values && values.length === 0) { return null; }\n\n  // the class it self\n  if (values[0] instanceof DurationInput) {\n    return values as DurationInput[];\n  }\n\n  // strings = ['ms', 'minutes', 'days']\n  if (isUndefined((values[0] as DurationInputInterface).type)) {\n    return (values as unknown as Array<DURATION_INPUT_TYPE>).map( (value) => new DurationInput(value) );\n  }\n\n  // an object {type: 'ms'}\n  if (!isUndefined((values[0] as DurationInputInterface).type)) {\n    return (values as unknown as Array<DurationInputInterface>).map( value => new DurationInput(value.type, value.placeholder, value.maxLength));\n  }\n\n  return null;\n}\n\n@Component({\n  selector: 'sm-duration-input-list',\n  templateUrl: './duration-input-list.component.html',\n  styleUrls: ['./duration-input-list.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DurationInputListComponent),\n      multi: true\n    }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DurationInputListComponent extends DurationInputBase implements OnInit, AfterViewInit, OnChanges {\n  @ViewChildren('inputRef') private elReference: QueryList<ElementRef>;\n\n  @Input() set inputs(inputs: Array<DURATION_INPUT_TYPE | DurationInput | DurationInputInterface> ) {\n    this.data = durationInputFactory(inputs);\n    this.data.forEach( input => this.hasTimes[input.type] = true)\n  }\n  @Input() hasResetIcon = false;\n  @Input() durationValue;  // this value is updated by programmatic changes if( ngModelValue !== undefined && this.ngModelValue !== ngModelValue){\n\n  @Output() onResetIcon = new EventEmitter<null>();\n  data: Array<DurationInput>;\n\n\n  trackBy(index, item) {\n    return index;\n  }\n  constructor(eRef: ElementRef, cdr: ChangeDetectorRef) {\n    super(eRef, cdr);\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.durationValue) {\n      this.setValues(changes.durationValue.currentValue)\n    }\n  }\n\n  setNextInputFocus(index: number) {\n    return [...this.elReference][index + 1]?.nativeElement.focus();\n  }\n\n  setPreviousInputFocus(index: number) {\n\n    return [...this.elReference][index - 1]?.nativeElement.focus();\n  }\n\n  setValue(value: string, input: DURATION_INPUT_TYPE) {\n    this[input] = value;\n  }\n\n  private setValues(val) {\n    if (val === null) {\n      this.msToHMSMS(0);\n      this.ngModelValue = 0;\n      this.val = val;\n      this.cdr?.detectChanges();\n      return;\n    }\n\n    if (typeof val === 'object') { return;}\n\n    if (val !== undefined && val !== this.val && val !== '0') {\n      val = `${val || 0}`;\n      const _val = +val * this.returnFactor;\n      this.onEditing.emit(false);\n      this.ngModelValue = val;\n      this.val = val;\n\n      // calc the ms,seconds,min with the value * factor\n      this.msToHMSMS(_val);\n      this.cdr?.detectChanges();\n    }\n  }\n}\n\n","<div class=\"editable-div\">\n  <div [style.display]=\"active ? 'none': 'block'\" >\n    <div class=\"d-flex align-items-center\" #template (click)=\"(!inlineDisabled) && inlineActivated($event)\"\n      ><ng-content></ng-content>\n      <i *ngIf=\"editable && !inlineDisabled\" class='p2 al-icon al-ico-edit sm-md pull-right editable-pen pointer'></i>\n    </div>\n  </div>\n    <div *ngIf=\"editable\" [style.display]=\" ! active ? 'none': 'block'\" tabindex=\"12\">\n      <form #form class=\"inline-edit-form\" [class.multiline]=\"multiline\">\n        <input type=\"text\" class=\"form-control inline-edit-input\"\n               *ngIf=\"!multiline\"\n               (blur)=\"inlineCanceled()\"\n               [(ngModel)]=\"inlineValue\"\n               name=\"inline\"\n               [pattern]=\"pattern\"\n               [minLength]=\"minLength\"\n               (keydown.tab)=\"form.checkValidity() && inlineSaved()\"\n               (keydown.escape)=\"inlineCanceled()\"\n               (keydown.enter)=\"form.checkValidity() && inlineSaved()\"\n               #inlineInput />\n\n        <textarea class=\"form-control inline-edit-textarea\"\n                  *ngIf=\"multiline\"\n                  (blur)=\"inlineCanceled()\"\n                  [(ngModel)]=\"inlineValue\"\n                  name=\"inline\"\n                  [pattern]=\"pattern\"\n                  (keydown.tab)=\"inlineSaved()\"\n                  (keydown.escape)=\"inlineCanceled()\"\n                  [rows]=\"multiline?rows:1\"\n                  #inlineInput>{{inlineValue}}\n        </textarea>\n        <div class=\"buttons\">\n          <i [class.disabled]=\"!form.checkValidity() || inlineValue?.length < minLength\" class=\"sm al-ico-success inline-edit-approve pointer\" (click)=\"stopProp($event)\" (mousedown)=\"form.checkValidity() && inlineSaved()\"></i>\n          <i class=\"sm al-ico-dialog-x inline-edit-close pointer\" [id]=\"CANCEL_BUTTON\"  (click)=\"stopProp($event); cancelClicked($event);\"></i>\n        </div>\n      </form>\n    </div>\n</div>\n","import {Component, ElementRef, EventEmitter, Input, OnDestroy, Output, Renderer2, ViewChild} from '@angular/core';\nimport { ICONS } from '../../../../constants';\n\n@Component({\n  selector: 'sm-inline-edit',\n  templateUrl: './inline-edit.component.html',\n  styleUrls: ['./inline-edit.component.scss']\n})\nexport class InlineEditComponent implements OnDestroy {\n  public readonly CANCEL_BUTTON = 'CANCEL_BUTTON';\n  public readonly SAVE_BUTTON = 'SAVE_BUTTON';\n  public ICONS = ICONS;\n  public active = false;\n  public inlineValue: string;\n  private shouldSave: boolean = true;\n\n  @Input() pattern;\n  @Input() minLength = 0;\n  @Input() originalText;\n\n  // *DEFAULTS*\n  @Input() editable = true;\n  @Input() minWidth: number = 100;\n  @Input() multiline: boolean = false;\n  @Input() rows: number = 3; // Only relevant to multiline\n  @Input() inlineDisabled = false;\n\n  @Output() inlineActiveStateChanged = new EventEmitter<boolean>();\n  @Output() textChanged = new EventEmitter<string>();\n  @Output() inlineFocusOutEvent = new EventEmitter<boolean>();\n  @Output() cancel = new EventEmitter();\n  @Output() cancelClick = new EventEmitter<Event>();\n  @ViewChild('inlineInput') inlineInput: ElementRef;\n  @ViewChild('template', {static: true}) template: ElementRef;\n\n  constructor(private renderer: Renderer2) {\n  }\n\n  public inlineCanceled() {\n    this.inlineValue = this.originalText;\n    this.active = false;\n    this.inlineActiveStateChanged.emit(false);\n    this.cancel.emit();\n  }\n\n  public inlineSaved() {\n    this.inlineValue = this.inlineInput.nativeElement.value;\n    if (this.inlineValue != this.originalText) {\n      this.textChanged.emit(this.inlineValue);\n    }\n    this.active = false;\n    this.inlineActiveStateChanged.emit(false);\n  }\n\n  public inlineActivated(event?: Event) {\n    if (!this.editable) {\n      return;\n    }\n\n    const templateWidth = Math.max(this.template.nativeElement.getBoundingClientRect().width, 250);\n    this.renderer.setStyle(this.inlineInput.nativeElement, 'width', `${templateWidth}px`);\n    this.inlineValue = this.originalText;\n    this.active = true;\n    this.inlineActiveStateChanged.emit(true);\n    event?.stopPropagation();\n    setTimeout(() => this.inlineInput.nativeElement.focus(), 50);\n  }\n\n  cancelClicked(event: Event) {\n    this.cancelClick.emit(event);\n    this.shouldSave = false;\n    this.inlineCanceled();\n  }\n\n  stopProp(e: MouseEvent) {\n    e.stopPropagation();\n  }\n\n  ngOnDestroy(): void {\n    this.inlineCanceled();\n    this.inlineInput = null;\n    this.template = null;\n  }\n}\n","<span class=\"search-input-container\" [class.expand]=\"expandOnHover\" [class.active]=\"active\" [class.focused]=\"focused\"\n      (dblclick)=\"$event.stopPropagation()\"  (mouseover)=\"updateActive(true)\" (mouseleave)=\"updateActive(false)\">\n  <span class=\"search-input\" [class.expand]=\"expandOnHover\">\n  <input\n    [class.active]=\"active\"\n    #searchBar\n    [placeholder]=\"placeholder\"\n    (focusin)=\"focusInput(true)\"\n    (focusout)=\"focusInput(false)\"\n    (input)=\"onChange($event)\"\n    (keydown.enter)=\"valueChanged.emit(searchBar.value)\"\n  >\n  <i *ngIf=\"!hideIcons && searchBar.value.length === 0; else hideIcons ? noIcon : showX\"\n     class=\"icon-button fa fa-search\"></i>\n    <ng-template #showX>\n    <i class=\"icon-button fa fa-times pointer\" [class.active]=\"active\" (click)=\"clear()\"></i>\n  </ng-template>\n    <div *ngIf=\"enableJumpToNextResult\" class=\"separator\" [class.active]=\"active\"></div>\n    <i  *ngIf=\"enableJumpToNextResult\" class=\"icon-button fas fa-chevron-up\" [class.active]=\"active\"\n       (click)=\"jump(false)\" [class.disabled]=\"searchCounterIndex<1\"></i>\n    <i *ngIf=\"enableJumpToNextResult\" class=\"icon-button fas fa-chevron-down\" [class.active]=\"active\"\n       (click)=\"jump(true)\" [class.disabled]=\"searchCounterIndex+1===searchResultsCount\"></i>\n  <ng-template #noIcon>\n    <ng-content></ng-content>\n  </ng-template>\n  </span>\n</span>\n<div *ngIf=\"enableJumpToNextResult && active && searchBar.value.length > 0\" class=\"match\">Match {{searchCounterIndex+1}}/{{searchResultsCount}}</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output, SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport {Subject, timer} from 'rxjs';\nimport {debounce, filter, tap} from 'rxjs/operators';\n\n\n@Component({\n  selector: 'sm-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SearchComponent implements OnInit, OnChanges {\n\n  public value$ = new Subject();\n\n  @Input() minimumChars = 3;\n  @Input() debounceTime = 300;\n  @Input() placeholder: string = 'Type to search';\n  @Input() hideIcons: boolean = false;\n  @Input() expandOnHover = false;\n  @Input() enableJumpToNextResult = false;\n  @Input() searchResultsCount = null;\n  searchCounterIndex = -1;\n  public empty = true;\n  public active: boolean = true;\n  public countResults: number;\n  public focused: boolean;\n\n  @Input() set value(value: string) {\n    this.searchBarInput.nativeElement.value = value || '';\n  }\n\n  @Output() valueChanged = new EventEmitter<string>();\n  @Output() jumpToResult = new EventEmitter<number>();\n  @ViewChild('searchBar', {static: true}) searchBarInput;\n\n  ngOnInit(): void {\n    this.value$.pipe(\n      tap((val: string) => this.empty = val?.length === 0),\n      debounce((val: string) => val.length > 0 ? timer(this.debounceTime) : timer(0)),\n      filter(val => val.length >= this.minimumChars || val.length === 0)\n    )\n      .subscribe((value: string) => {\n        if(value.length>=this.minimumChars){\n          this.valueChanged.emit(value);\n          this.searchResultsCount > 0 && this.jump(true);\n        } else {\n          this.valueChanged.emit('');\n          this.searchResultsCount = 0;\n        }\n      });\n  }\n\n  onChange(event) {\n    if (event.key === 'Escape' || event.key === 'Esc') {\n      this.clear();\n    } else {\n      this.value$.next(this.searchBarInput.nativeElement.value);\n      this.searchCounterIndex = -1;\n    }\n  }\n\n  clear(focus=true) {\n    this.value$.next('');\n    this.searchBarInput.nativeElement.value = '';\n    focus && this.searchBarInput.nativeElement.focus();\n    this.searchCounterIndex = -1;\n  }\n\n  updateActive(active: boolean) {\n    if (this.expandOnHover) {\n      if (this.empty) {\n        this.active = active;\n      } else {\n        this.active = true;\n      }\n    }\n  }\n\n  jump(next: boolean) {\n    this.searchCounterIndex = next ? this.searchCounterIndex + 1 : this.searchCounterIndex - 1;\n    this.jumpToResult.emit(this.searchCounterIndex);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.expandOnHover) {\n      this.active = !changes.expandOnHover.currentValue;\n    }\n  }\n\n  focusInput($event: boolean) {\n    this.focused = $event;\n  }\n}\n","<sm-dialog-template [header]=\"alertMessage\" [subHeader]=\"alertSubMessage\" iconClass=\"i-alert\">\n  <div *ngIf=\"moreInfo || resultMessage\" (click)=\"openToggle()\" class=\"pointer\">\n    <i class=\"more-info-icon fa fa-angle-right\" [ngClass]=\"{'info-open': isOpen}\"></i>More info\n  </div>\n  <div *ngIf=\"moreInfo || resultMessage\" class=\"more-info\" [ngClass]=\"{'info-open': isOpen}\">\n    <a></a>\n    <div>{{resultMessage}}</div>\n    <div *ngFor=\"let entityName of moreInfoEntities\">\n      <br>\n      <div>Relevant {{entityName}}:</div>\n      <div *ngFor=\"let entity of moreInfo[entityName]\" class=\"entities\">\n        <a [href]=\"buildUrl(entity, entityName)\" target=\"_blank\"> {{entity.name}}</a>\n      </div>\n    </div>\n  </div>\n  <div class=\"d-flex justify-content-center\" style=\"margin-top: 40px\">\n    <button class=\"btn btn-neon\" mat-dialog-close>\n      {{okMessage}}\n    </button>\n  </div>\n\n</sm-dialog-template>\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {get} from 'lodash/fp';\nimport {isAnnotationTask} from '../../../utils/shared-utils';\n\n@Component({\n  selector   : 'sm-alert-dialog',\n  templateUrl: './alert-dialog.component.html',\n  styleUrls  : ['./alert-dialog.component.scss']\n})\nexport class AlertDialogComponent {\n\n  public alertMessage;\n  public alertSubMessage;\n  public okMessage;\n  public moreInfoEntities: string[];\n  public isOpen = false;\n  private _moreInfo: any;\n  private _resultMessage: string;\n\n  set moreInfo(moreInfo) {\n    this._moreInfo        = moreInfo;\n    this.moreInfoEntities = moreInfo && Object.keys(moreInfo);\n  }\n\n  get moreInfo() {\n    return this._moreInfo;\n  }\n\n  set resultMessage(resultMessage) {\n    this._resultMessage = resultMessage;\n  }\n\n  get resultMessage() {\n    return this._resultMessage;\n  }\n\n  constructor(@Inject(MAT_DIALOG_DATA) data: { alertMessage: string, alertSubMessage: string, okMessage: string, moreInfo: any, resultMessage: string }) {\n    this.alertMessage    = data.alertMessage || '';\n    this.alertSubMessage = data.alertSubMessage;\n    this.moreInfo        = data.moreInfo;\n    this.okMessage       = data.okMessage || 'OK';\n    this.resultMessage   = data.resultMessage;\n  }\n\n  openToggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n  buildUrl(entity, entityName) {\n    if (entityName === 'datasets') {\n      return `/datasets/${entity.id}`;\n    }\n    if (entityName === 'tasks' && isAnnotationTask(entity)) {\n      return `/annotations?annotationId=${entity.id}`;\n    }\n    return `/projects/${get('project.id', entity) || '*'}/experiments/${entity.id}`;\n  }\n}\n","<sm-dialog-template [displayX]=\"displayX && !dialogRef.disableClose\" [header]=\"title\"\n                    (xClicked)=\"closeDialog(undefined)\" [closeOnX]=\"false\"\n                    [iconClass]=\"iconClass\" [iconData]=\"iconData\">\n  <div *ngIf=\"reference\" class=\"reference\">{{reference}}</div>\n  <div class=\"body\" [class.text-center]=\"this.centerText\" [innerHTML]=\"body | safe: 'html'\"></div>\n  <ng-content></ng-content>\n\n\n  <div *ngIf=\"showNeverShowAgain\" class=\"body mt-4\" >\n    <mat-checkbox [(ngModel)]=\"neverShowAgain\">\n      <span class=\"chkbx-label\">Don't show again</span>\n    </mat-checkbox>\n  </div>\n  <div class=\"buttons\">\n\n    <button *ngIf=\"no\" (click)=\"closeDialog(false)\" class=\"btn btn-outline-neon yes-button\">\n      {{no}}\n    </button>\n    <button (click)=\"closeDialog(true)\" class=\"btn btn-neon\" *ngIf=\"yes\">\n      {{yes}}\n    </button>\n\n  </div>\n\n</sm-dialog-template>\n","import {Component, ElementRef, Inject, Input, Renderer2} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogConfig} from './confirm-dialog.model';\n\n@Component({\n  selector: 'sm-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent {\n\n  @Input() displayX: boolean = true;\n  showNeverShowAgain: boolean;\n  title: string;\n  body: string;\n  yes = 'OK';\n  no = 'Cancel';\n  iconClass = '';\n  iconData = '';\n  codeSnippet = '';\n  externalData: string = null;\n  public reference: string;\n  neverShowAgain: boolean;\n  centerText: boolean;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogConfig,\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>,\n    private ref: ElementRef, private renderer: Renderer2\n  ) {\n    this.title = data.title || '';\n    this.reference = data.reference || '';\n    this.body = data.body || '';\n    this.yes = data.yes || '';\n    this.no = data.no || '';\n    this.iconClass = data.iconClass || '';\n    this.iconData = data.iconData || '';\n    this.codeSnippet = data.codeSnippet || '';\n    this.showNeverShowAgain = data.showNeverShowAgain || false;\n    this.centerText = data.centerText ?? false;\n    const width = data.width || 640;\n\n    renderer.setStyle(ref.nativeElement, 'width', `${width}px`);\n  }\n\n  closeDialog(isConfirmed) {\n    if(isConfirmed) {\n      this.dialogRef.close({isConfirmed: isConfirmed, neverShowAgain: this.neverShowAgain});\n    } else {\n      this.dialogRef.close(isConfirmed);\n    }\n  }\n}\n","<div class=\"dialog-template-container\" [ngClass]=\"containerClass\">\n\n  <div *ngIf=\"displayX\" style=\"position: relative\">\n    <i (click)=\"onXPressed()\" class=\"pointer stick-to-corner al-icon al-ico-dialog-x al-color blue-400 sm-md\">\n    </i>\n  </div>\n\n  <div #container class=\"generic-container {{theme || 'light-theme'}}\" cdkScrollable>\n    <div class=\"d-flex flex-column\" *ngIf=\"iconClass\">\n      <div [class]=\"'al-icon icon xxl mx-auto '+ [iconClass]\"></div>\n    </div>\n    <div class=\"d-flex justify-content-center\" *ngIf=\"iconData\">\n        <div class=\"app-icon-image\" [style.background-image]=\"'url(' + iconData + ')'\"></div>\n      </div>\n      <div class=\"d-flex flex-column\" *ngIf=\"header\">\n      <div class=\"create-title mx-auto ellipsis\">{{header}}</div>\n    </div>\n    <div class=\"d-flex flex-column\" *ngIf=\"subHeader\">\n      <p class=\"sub-header mx-auto\" [innerHTML]=\"subHeader\"></p>\n    </div>\n    <ng-content></ng-content>\n  </div>\n  <sm-code *ngIf=\"codeTemplateFileName\"\n           [closedCodeLabel]=\"closedCodeLabel\"\n           [codeTemplateFileName]=\"codeTemplateFileName\"\n           [params]=\"codeParams\"></sm-code>\n</div>\n","import {Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n  selector   : 'sm-dialog-template',\n  templateUrl: './dialog-template.component.html',\n  styleUrls  : ['./dialog-template.component.scss']\n})\nexport class DialogTemplateComponent {\n\n\n  @Input() displayX: boolean = true;\n  @Input() closeOnX: boolean = true;\n\n  @Input() theme: string = 'light-theme';\n  @Input() containerClass: string;\n  @Input() closedCodeLabel: string = 'VIEW COMMAND LINE';\n  @Input() iconClass: string; // the icon class (see icons.scss).\n  @Input() iconData: string;\n  @Input() header: string;\n  @Input() subHeader: string;\n  @Input() codeParams;\n  @Input() codeTemplateFileName;\n  @Output() xClicked = new EventEmitter();\n\n  @ViewChild('container') container: ElementRef<HTMLDivElement>;\n  constructor(private dialog: MatDialogRef<DialogTemplateComponent, any>) {\n  }\n\n  onXPressed() {\n    if (this.closeOnX) {\n      this.dialog.close();\n    }\n    this.xClicked.emit();\n  }\n\n}\n\n","// TODO: (nir) need refactor to final validation solution\nexport function validateName(name: string) {\n  if (name.trim().length < 3) {\n    return false;\n  }\n  return true;\n}\n\nexport function validateNotEmptyArray(arr: Array<any>) {\n  if (arr && arr.length > 0) {\n    return true;\n  }\n  return false;\n}\n\nexport function validateProject(projectId: string) {\n  if (projectId && projectId !== '*') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n\nexport function areErrors(errors) {\n  return Object.values(errors).find((property: any) => !property.valid);\n}\n\n\nexport function validateJson(obj) {\n  try {\n    JSON.parse(obj);\n  } catch (e) {\n    return {json: false};\n  }\n  return null;\n}\n","<sm-dialog-template [header]=\"title\">\n  <div  class=\"data-text\">\n    <div class=\"data-text-ace\" #aceEditor></div>\n  </div>\n  <div>\n    <small *ngIf=\"this.showErrors\"\n           class=\"text-danger\">*Not a valid json.\n    </small>\n  </div>\n  <div class=\"buttons\">\n    <button (click)=\"closeDialog(false)\" class=\"btn btn-outline-neon yes-button\">\n      Cancel\n    </button>\n    <button (click)=\"closeDialog(!readOnly)\" class=\"btn btn-neon\">\n      OK\n    </button>\n  </div>\n\n</sm-dialog-template>\n","import {AfterViewInit, Component, ElementRef, HostListener, Inject, NgZone, ViewChild} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {JsonPipe} from '@angular/common';\nimport {validateJson} from '../../../utils/validation-utils';\nimport {Store} from '@ngrx/store';\nimport {addMessage} from '@common/core/actions/layout.actions';\nimport {Ace} from 'ace-builds';\n\ndeclare const ace;\n\nconst jsonPlaceholder = `e.q:\n\n      {\n        \"location\" : \"london\",\n        \"date\" : \"2019-01-31 22:41:03\"\n      }\n`;\nconst regularPlaceholder = '';\n@Component({\n  selector: 'sm-edit-json',\n  templateUrl: './edit-json.component.html',\n  styleUrls: ['./edit-json.component.scss'],\n  providers: [{provide: JsonPipe, useClass: JsonPipe}]\n})\nexport class EditJsonComponent implements AfterViewInit {\n  public errors: Map<string, boolean>;\n  public textData: string;\n  public showErrors: boolean;\n  public validators: Array<any> = [validateJson];\n\n  private _readOnly: boolean;\n  public placeHolder: string;\n  public title: string;\n  readonly typeJson: boolean;\n  @ViewChild('aceEditor') private aceEditorElement: ElementRef;\n  private aceEditor: Ace.Editor;\n  set readOnly(readOnly: boolean) {\n    this._readOnly = readOnly;\n  };\n\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent) {\n    if (e.key === 'Enter' && e.ctrlKey === true) {\n      this.closeDialog(!this.readOnly);\n    }\n  }\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { textData: string; readOnly: boolean; title: string; typeJson: boolean; placeHolder: string },\n    private dialogRef: MatDialogRef<EditJsonComponent, any>,\n    private jsonPipe: JsonPipe,\n    private store: Store<any>,\n    private zone: NgZone\n  ) {\n    this.typeJson = data.typeJson;\n    this.placeHolder = data.placeHolder;\n    this.textData = data.textData ? (this.typeJson ? jsonPipe.transform(data.textData) : data.textData) : undefined;\n    this.readOnly = data.readOnly;\n    this.title = data.title;\n  }\n\n  ngAfterViewInit() {\n    this.initAceEditor();\n  }\n\n  closeDialog(isConfirmed) {\n    if (isConfirmed) {\n      try {\n        const text = this.aceEditor.getValue();\n        this.dialogRef.close(text ? (this.typeJson ? JSON.parse(text) : text) : '');\n      } catch (e) {\n        this.store.dispatch(addMessage('warn', 'Not a valid JSON'))\n        // this.showErrors = true; // shows warning message bellow texterea\n      }\n    } else {\n      this.dialogRef.close();\n    }\n  }\n\n  textChanged() {\n    this.showErrors = false;\n  }\n\n  // we can make this to ace wrapper later on\n  private initAceEditor() {\n    this.zone.runOutsideAngular(() => {\n      const aceEditor = ace.edit(this.aceEditorElement.nativeElement)  as Ace.Editor;\n      aceEditor.setOptions({\n        readOnly: this.readOnly,\n        showLineNumbers: false,\n        showGutter: false,\n        fontSize: 14,\n        highlightActiveLine: false,\n        highlightSelectedWord: false,\n        showPrintMargin: false,\n        placeholder: this.typeJson ? jsonPlaceholder : regularPlaceholder,\n      });\n\n\n      aceEditor.renderer.setScrollMargin(12, 12, 12, 12);\n      aceEditor.renderer.setPadding(12);\n      (aceEditor.renderer.container.querySelector('.ace_cursor') as HTMLElement).style.color = 'white';\n\n      if (this.typeJson) {\n        aceEditor.session.setMode('ace/mode/json');\n        aceEditor.setTheme('ace/theme/monokai');\n      }\n      aceEditor.getSession().setValue(this.textData || '');\n      this.aceEditor = aceEditor;\n    });\n  }\n}\n","<sm-dialog-template [displayX]=\"true\"\n                    [header]=\"title\"\n                    [closeOnX]=\"true\"\n                    [iconClass]=\"iconClass\">\n\n  <div *ngIf=\"failed > 0\" class=\"errors-title\">The following {{failed == 1 ? '' : failed}} {{action.entityType}}{{failed > 1 ? 's' : ''}} failed to {{action.operationName}}:</div>\n  <ul class=\"list-container\">\n    <li *ngFor=\"let fail of failedList\">\n      <div>{{getName(fail)}}</div>\n      <div class=\"error-reason\">{{fail.error.msg}} </div>\n    </li>\n  </ul>\n\n  <div class=\"buttons\">\n    <button (click)=\"dialogRef.close()\" class=\"btn btn-neon yes-button\">\n      Close\n    </button>\n  </div>\n\n</sm-dialog-template>\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {openMoreInfoPopup} from '@common/core/actions/projects.actions';\nimport {htmlTextShorte} from '../../../utils/shared-utils';\n\n@Component({\n  selector: 'sm-operation-error-dialog',\n  templateUrl: './operation-error-dialog.component.html',\n  styleUrls: ['./operation-error-dialog.component.scss']\n})\nexport class OperationErrorDialogComponent {\n\n  public title: string;\n  public iconClass = '';\n  public action: ReturnType<typeof openMoreInfoPopup>;\n  public failed: number;\n  public failedList: any[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {\n                title: string;\n                action: ReturnType<typeof openMoreInfoPopup>;\n                iconClass: string;\n              },\n              public dialogRef: MatDialogRef<OperationErrorDialogComponent>) {\n    this.title = data.title || '';\n    this.action = data.action;\n    this.failedList = data.action.res.failed || [];\n    this.failed = data.action.res.failed.length || 0;\n    this.iconClass = data.iconClass || '';\n  }\n\n  getName(fail: any) {\n    return htmlTextShorte(this.action.parentAction.selectedEntities.find(entity => entity.id === fail.id)?.name);\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector   : 'sm-overlay',\n  templateUrl: './overlay.component.html',\n  styleUrls  : ['./overlay.component.scss']\n})\nexport class OverlayComponent {\n\n  @Input() backdropActive;\n  @Input() transparent: boolean = false;\n\n}\n","<div [ngClass]=\"{'overlay': backdropActive, 'transparent': transparent }\" smClickStopPropagation></div>\n","<sm-dialog-template [displayX]=\"displayX && !dialogRef.disableClose\" [header]=\"title\"\n                    (xClicked)=\"closeDialog(undefined)\" [closeOnX]=\"false\"\n                    iconClass=\"al-icon al-ico-get-link-dialog\">\n  <div class=\"d-flex\">\n    <div class=\"sub-title\" [innerHTML]=\"shared? sharedSubtitle: privateSubtitle\"></div>\n  </div>\n\n  <div class=\"share-link-container\"  *ngIf=\"shared\">\n    <div class=\"ellipsis share-link\">{{link}}</div>\n    <div ngxClipboard\n         smClickStopPropagation\n         [cbContent]=\"link\"\n         class=\"copy pointer\"\n         (cbOnSuccess)=\"copyToClipboardSuccess()\">\n      <i class=\"fas fa-copy\"></i>\n    </div>\n  </div>\n  <div class=\"d-flex justify-content-end\">\n    <a href=\"javascript:void(0)\" (click)=\"createLink()\">{{shared ? 'Remove' : 'Create'}} link</a>\n  </div>\n</sm-dialog-template>\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {IShareDialogConfig} from './share-dialog.model';\nimport {addMessage} from '../../../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../../../app.constants';\nimport {Store} from '@ngrx/store';\nimport {shareSelectedExperiments} from '../../../../experiments/actions/common-experiments-menu.actions';\n\n@Component({\n  selector: 'sm-share-dialog',\n  templateUrl: './share-dialog.component.html',\n  styleUrls: ['./share-dialog.component.scss']\n})\nexport class ShareDialogComponent {\n\n  displayX: boolean = true;\n\n  title: string;\n\n  public subTitle: string;\n  public link: string;\n  shared: boolean = false;\n  public sharedSubtitle: string;\n  public privateSubtitle: string;\n  private task: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: IShareDialogConfig,\n              public dialogRef: MatDialogRef<ShareDialogComponent>,\n              private store: Store<any>) {\n    this.title = data.title || '';\n    this.sharedSubtitle =`<b>Any registered user with this link</b> has read-only access to this task and all it’s contents (Artifacts, Results, etc.)`;\n    this.privateSubtitle =  `Create a shareable link to grant read access to<b> any registered user</b> you provide this link to.`;\n    this.task = data.task;\n\n    this.link = data.link || '';\n    this.shared = !!data.alreadyShared;\n  }\n\n  closeDialog(isConfirmed) {\n    this.dialogRef.close({isConfirmed, shared: this.shared});\n  }\n\n  copyToClipboardSuccess() {\n    this.store.dispatch(addMessage(MESSAGES_SEVERITY.SUCCESS, 'URL copied successfully'));\n  }\n\n  createLink() {\n    this.store.dispatch(shareSelectedExperiments({share: !this.shared, task:this.task}));\n\n    this.shared = !this.shared;\n  }\n}\n","import {Store} from '@ngrx/store';\nimport {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {selectLoading} from '@common/core/reducers/view.reducer';\nimport {NavigationStart, Router} from '@angular/router';\nimport {debounceTime, distinctUntilChanged, filter, map} from 'rxjs/operators';\nimport {resetLoader} from '@common/core/actions/layout.actions';\nimport {Observable, Subscription} from 'rxjs';\n\n@Component({\n  selector: 'sm-spinner',\n  template: `\n    <div *ngIf=\"showSpinner\">\n      <div class=\"loader-container\">\n        <div class=\"circle\"></div>\n      </div>\n      <!--<div class=\"spinner-overlay\"></div>-->\n    </div>\n  `,\n  styleUrls: ['./spinner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpinnerComponent implements OnInit, OnDestroy {\n  public showSpinner: boolean;\n  private spinnerSubscribe: Subscription;\n  private navEndSubscription: Subscription;\n  private loading$: Observable<{ [p: string]: boolean }>;\n\n  constructor(private store: Store<any>, private router: Router, private cdr: ChangeDetectorRef) {\n    this.loading$ = store.select(selectLoading)\n\n  }\n\n  ngOnInit() {\n    this.spinnerSubscribe = this.loading$.pipe(\n      debounceTime(300)\n    ).subscribe(loaders => {\n        this.showSpinner = Object.values(loaders).some((value) => value)\n        this.cdr.detectChanges();\n    });\n\n    this.navEndSubscription = this.router.events\n      .pipe(\n        filter(event => event instanceof NavigationStart),\n        map((event: NavigationStart) => event.url.split('?')[0]),\n        distinctUntilChanged()\n      ).subscribe(() => {\n        this.store.dispatch(resetLoader());\n        this.cdr.detectChanges();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.navEndSubscription.unsubscribe();\n    this.spinnerSubscribe.unsubscribe();\n  }\n}\n","<div class=\"height-container\" [class.show]=\"active\">\n</div>\n<div class=\"absolute-container\" [class.show]=\"active\">\n  <div class=\"header-container\" [class.show]=\"active\">\n    <div class=\"notifier-container\" [class.show]=\"active\">\n      <div></div>\n      <div class=\"update-container\">A newer version of ClearML server ( {{newVersionName}}) is available. <a\n        [href]=\"newVersionUrl\" class=\"link\" target=\"_blank\"> See details.</a></div>\n      <i class=\"fas fa-times pointer p-2\" (click)=\"dismiss()\"></i>\n    </div>\n  </div>\n</div>\n<div class=\"circle-container\" [class.show]=\"!active\">\n  <div *ngIf=\"areAvailableUpdates\"><i class=\"fas fa-circle pointer notification-bell\" (click)=\"show()\"></i>\n  </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {User} from '../../../../../business-logic/model/users/user';\n\n@Component({\n  selector   : 'sm-update-notifier',\n  templateUrl: './update-notifier.component.html',\n  styleUrls  : ['./update-notifier.component.scss']\n})\nexport class UpdateNotifierComponent implements OnInit {\n  public active      = false;\n  areAvailableUpdates = false;\n  private _availableUpdates: any;\n  public newVersionUrl: string;\n  public newVersionName: string;\n\n  @Input() dismissedVersion: string;\n\n  @Input() set availableUpdates(availableUpdates) {\n    this.areAvailableUpdates = availableUpdates?.['trains-server']?.['newer_available'];\n    this.newVersionUrl       = availableUpdates?.['trains-server']?.['url'];\n    this.newVersionName      = availableUpdates?.['trains-server']?.['version'];\n    this._availableUpdates   = availableUpdates;\n    if (this.areAvailableUpdates && this.dismissedVersion !== this.newVersionName) {\n      this.active = true;\n      this.notifierActive.emit(true);\n    }\n  }\n\n  @Input() set currentUser(user: User) {\n    if (user && user.role == 'guest') {\n      this.areAvailableUpdates = false;\n      this.active = false;\n      this.notifierActive.emit(false);\n    } else {\n      this.areAvailableUpdates = this._availableUpdates?.['trains-server']?.['newer_available'];\n      if (this.areAvailableUpdates && this.dismissedVersion !== this.newVersionName) {\n        this.active = true;\n        this.notifierActive.emit(true);\n      }\n    }\n  }\n\n  @Output() versionDismissed = new EventEmitter();\n  @Output() notifierActive = new EventEmitter();\n\n  get availableUpdates() {\n    return this._availableUpdates;\n  }\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  dismiss() {\n    this.active = false;\n    this.notifierActive.emit(false);\n    this.versionDismissed.emit(this.newVersionName);\n  }\n\n  show() {\n    this.active = true;\n    this.notifierActive.emit(true);\n  }\n}\n","<div class=\"card\">\n  <div class=\"folder-tab\" smClickStopPropagation *ngIf=\"isFolder\">\n    <div class=\"first-tab\" [class.not-active]=\"showSecondTab\" (click)=\"setShowSecondTab(false)\"\n         [class.hide-second-tab]=\"oneTabMode\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"20\" viewBox=\"0 0 64 20\"\n           *ngIf=\"!showSecondTab ;else secondTabActive \">\n        <path *ngIf=\"!oneTabMode && !secondTabIsHovered\" d=\"M30.06,0H64V20H30.06C29.93,19.78,30.06,11.93,30.06,0Z\"\n              fill=\"#2c3246\"/>\n        <path *ngIf=\"!oneTabMode && secondTabIsHovered\" d=\"M30.06,0H64V20H30.06C29.93,19.78,30.06,11.93,30.06,0Z\"\n              fill=\"#5a658e\"/>\n        <path *ngIf=\"!highlightFirstTab\" d=\"M35.61,0H6A6,6,0,0,0,0,6V20H60C44.82,12.36,49.37,0,35.61,0Z\" fill=\"#384161\"\n              (mouseenter)=\"setHighlightFirstTab(true)\" (mouseleave)=\"setHighlightFirstTab(false)\"/>\n        <path *ngIf=\"highlightFirstTab\" d=\"M35.61,0H6A6,6,0,0,0,0,6V20H60C44.82,12.36,49.37,0,35.61,0Z\" fill=\"#5a658e\"\n              (mouseenter)=\"setHighlightFirstTab(true)\" (mouseleave)=\"setHighlightFirstTab(false)\"/>\n      </svg>\n      <ng-template #secondTabActive>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"20\" viewBox=\"0 0 64 20\">\n          <path *ngIf=\"!highlightFirstTab\" d=\"M35.61,0H6A6,6,0,0,0,0,6V20H60C44.82,12.36,49.37,0,35.61,0Z\"\n                fill=\"#384161\" (mouseenter)=\"setHighlightFirstTab(true)\" (mouseleave)=\"setHighlightFirstTab(false)\"/>\n          <path *ngIf=\"highlightFirstTab\" d=\"M35.61,0H6A6,6,0,0,0,0,6V20H60C44.82,12.36,49.37,0,35.61,0Z\" fill=\"#5a658e\"\n                (mouseenter)=\"setHighlightFirstTab(true)\" (mouseleave)=\"setHighlightFirstTab(false)\"/>\n          <path d=\"M64,0V20H30C45.18,12.36,40.63,0,54.39,0Z\" fill=\"#2c3246\"/>\n        </svg>\n      </ng-template>\n    </div>\n    <div *ngIf=\"!oneTabMode\" [class.tab-hovered]=\"secondTabIsHovered\" [class.show-second-tab]=\"showSecondTab\"\n         class=\"middle-tab\" (click)=\"setShowSecondTab(true)\" [class.second-tab-active]=\"showSecondTab\"\n         (mouseenter)=\"setSecondTabHover(true)\" (mouseleave)=\"setSecondTabHover(false)\">{{subFolderTitle}}</div>\n    <div *ngIf=\"!oneTabMode\" [class.tab-hovered]=\"secondTabIsHovered\" [class.show-second-tab]=\"showSecondTab\"\n         class=\"second-tab\" (click)=\"setShowSecondTab(true)\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"20\" viewBox=\"0 0 28 20\">\n        <path *ngIf=\"!secondTabIsHovered || showSecondTab\" d=\"M3.61,0C17.37,0,12.82,12.36,28,20H0V0Z\" fill=\"#2c3246\"/>\n        <path *ngIf=\"secondTabIsHovered && !showSecondTab\" d=\"M3.61,0C17.37,0,12.82,12.36,28,20H0V0Z\" fill=\"#5a658e\"/>\n      </svg>\n    </div>\n  </div>\n  <div class=\"card-container\" [class.is-folder]=\"isFolder\" [style.height.px]=\"height\">\n    <div class=\"tab-container first-tab-container\" [class.hide]=\"showSecondTab\" [class.is-folder]=\"isFolder\"\n         [class.first-tab-hovered]=\"highlightFirstTab\" [class.tab-hovered]=\"secondTabIsHovered\"\n         (mouseenter)=\"setHighlightFirstTab(true)\" (mouseleave)=\"setHighlightFirstTab(false)\">\n      <header [class.empty]=\"(!header) && headerWarp?.children.length===0 \">\n        <div #headerWarp>\n          {{header}}\n          <ng-content select=\"[header-content]\"></ng-content>\n          <ng-content select=\"[headerButtons]\"></ng-content>\n        </div>\n      </header>\n      <div *ngIf=\"showSeperator\" class=\"line\"></div>\n      <div class=\"card-body\">\n        <ng-content></ng-content>\n      </div>\n      <footer>\n        <ng-content select=\"[footer]\">\n        </ng-content>\n        <div *ngIf=\"(isExample || !!ribbonText)\" class=\"ribbon\">\n          <div class=\"txt d-flex justify-content-center w-100\">\n            <div>{{ribbonText ? ribbonText : 'EXAMPLE' }}</div>\n          </div>\n        </div>\n      </footer>\n    </div>\n    <div class=\"tab-container second-tab-container\" [class.show]=\"showSecondTab\">\n      <ng-content select=\"[secondTab]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'sm-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit {\n\n  @Input() header: string;\n  @Input() height: number;\n\n  // TODO: delete the following:\n  @Input() collapsed = false;\n  @Input() collapsible = false;\n  @Input() fixedSize = false;\n  @Input() overflowVisible = false;\n  @Input() cardSign = '';\n  @Input() showSeperator = true;\n  @Input() whiteHeader = false;\n  @Input() whiterHeader = false;\n  @Input() isExample = false;\n  @Input() isFolder = false;\n  @Input() subFolderTitle = '';\n  @Input() oneTabMode: boolean;\n  @Input() ribbonText: string;\n\n\n  public showSecondTab = false;\n  public secondTabIsHovered: boolean;\n  public highlightFirstTab: boolean;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  setShowSecondTab(show: boolean) {\n    this.showSecondTab = show;\n  }\n\n  setSecondTabHover(isHovered: boolean) {\n    this.secondTabIsHovered = isHovered;\n  }\n\n  setHighlightFirstTab(highlight: boolean) {\n    this.highlightFirstTab = highlight;\n  }\n}\n","<mat-checkbox *ngFor=\"let option of options; let i = index trackBy: trackByValFn\"\n              class=\"w-100 d-flex\"\n              [value]=\"option.value\"\n              [checked]=\"checkedList?.includes(option.value) || indeterminateState[option.value] === checkboxState.exclude\"\n              [indeterminate]=\"indeterminateState[option.value] === checkboxState.exclude\"\n              (change)=\"onFilterChanged($event)\"\n>\n  <span [smTooltip]=\"option.tooltip || option.value\" class=\"ellipsis label\"> {{option.label}}</span>\n</mat-checkbox>\n<div *ngIf=\"options?.length===0\" class=\"empty-menu flex-middle\">No item found</div>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {excludedKey} from '@common/shared/utils/tableParamEncode';\nimport {addOrRemoveFromArray} from '@common/shared/utils/shared-utils';\n\nexport enum CheckboxState {\n  empty,\n  checked,\n  exclude\n}\n\n@Component({\n  selector: 'sm-checkbox-three-state-list',\n  templateUrl: './checkbox-three-state-list.component.html',\n  styleUrls: ['./checkbox-three-state-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxThreeStateListComponent implements OnInit {\n  @Input() options: Array<{ label: string; value: string; tooltip?: string }> = [];\n  @Input() supportExcludeFilter: boolean;\n  @Input() set checkedList(checkedList: Array<string>) {\n    if (Array.isArray(checkedList)) {\n      if (this.supportExcludeFilter) {\n        const {value, exclude} = separateValueAndExcludeFromFilters(checkedList);\n        this._checkedList = value;\n        this.indeterminateState = {};\n        this.excludeList = exclude;\n        return;\n      }\n      this._checkedList = checkedList;\n    }\n\n    this._checkedList = checkedList;\n  }\n  @Output() filterChanged = new EventEmitter();\n\n  get checkedList() {\n    return this._checkedList;\n  }\n\n  get excludeList() {\n    return this._excludeList;\n  }\n\n  set excludeList(excludeList: string[]) {\n     this._excludeList = excludeList;\n    (excludeList || []).forEach( _value => this.indeterminateState[_value] = CheckboxState.exclude);\n  }\n\n  public indeterminateState: Record<string, CheckboxState> = {};\n  public checkboxState = CheckboxState;\n  public trackByValFn = (index, item) => item.value;\n\n  private _checkedList: string[];\n  private _excludeList: string[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n\n  onFilterChanged(val) {\n    if (val) {\n      if (this.supportExcludeFilter && val.source.value !== null) {\n        this.checkIndeterminateStateAndEmit(val);\n        return;\n      }\n\n      const newValues = addOrRemoveFromArray(this.checkedList, val.source.value);\n      this.emitFilterChanged(newValues);\n    }\n  }\n\n  emitFilterChanged(values?: string[], exclude = '') {\n    const value = this.supportExcludeFilter\n      ? [...(values || this.checkedList), ...this.getExcludedValues(exclude)]\n      : values;\n    this.filterChanged.emit(value);\n  }\n\n  private getExcludedValues(exclude) {\n    return (this._excludeList || []).concat(exclude).filter(Boolean).map(_exclude => excludedKey + _exclude);\n  }\n\n  private checkIndeterminateStateAndEmit(val) {\n    const value = val.source.value;\n    const indeterminateCurrentState =\n      this.indeterminateState[value] || (this.checkedList.find( v => v === value) ? CheckboxState.checked : CheckboxState.empty);\n\n    switch(indeterminateCurrentState) {\n      case CheckboxState.checked: {\n        val.source.checked = true;\n        this.indeterminateState[value] = CheckboxState.exclude;\n        const newValues = this.checkedList.filter( v => v !== value);\n        this.emitFilterChanged(newValues, value);\n        break;\n      }\n      case CheckboxState.exclude:\n        val.source.checked = true;\n        this.indeterminateState[value] = CheckboxState.empty;\n        this._excludeList = this.excludeList.filter(exclude => exclude !== value);\n        this.emitFilterChanged();\n        break;\n      case CheckboxState.empty:\n      default:{\n        this.indeterminateState[value] = CheckboxState.checked;\n        const newValues = addOrRemoveFromArray(this.checkedList, value);\n        this.emitFilterChanged(newValues);\n      }\n    }\n    return;\n  }\n}\n\nfunction separateValueAndExcludeFromFilters(filters: string[]) {\n  return filters.reduce((state, currentFilter) => {\n    if(currentFilter === null || !currentFilter.startsWith(excludedKey)) {\n      state.value.push(currentFilter);\n    }else {\n      state.exclude.push(currentFilter.substring(excludedKey.length));\n    }\n    return state;\n  }, {value: [], exclude: []});\n}\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'sm-compare-footer',\n  templateUrl: './compare-footer.component.html',\n  styleUrls: ['./compare-footer.component.scss']\n})\nexport class CompareFooterComponent implements OnInit {\n\n  @Input() visible = false;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div\n  class=\"footer-container dark-theme d-flex justify-content-start align-items-center\"\n  [class.show-container]=\"visible\"\n>\n  <ng-content></ng-content>\n</div>\n","<div class=\"editable-container h-100\" [class.dark-theme]=\"isDarkTheme\" [class]=\"containerClass\" [class.edit-mode]=\"inEditMode && !disableInEditMode\" [class.disable-edit]=\"disableEditable\"\n     (dblclick)=\"editable && !disableEditable && (!inEditMode) && editModeChanged(true)\">\n  <div class=\"edit-wrapper d-flex flex-row-reverse\">\n    <button *ngIf=\"!disableEditable && !inEditMode && editable && !hideEditButton\" id=\"editSection\" class=\"edit-pen btn-dark-fill pointer\"\n            (click)=\"editModeChanged(true)\">\n      <i class=\"fa fa-pencil\"></i> EDIT\n    </button>\n    <ng-content *ngIf=\"!disableEditable && !inEditMode && editable\"  select=\"[extra-buttons]\"></ng-content>\n    <ng-content select=\"[search-button]\"></ng-content>\n  </div>\n  <ng-content formData></ng-content>\n  <div class=\"cancel-save action-button edit-mode\" *ngIf=\"inEditMode && !disableInEditMode\">\n    <button class=\"btn btn-dark-fill cancel\" (click)=\"cancelClickedEvent()\">CANCEL</button>\n    <sm-loading-button\n      *ngIf=\"!hideSaveButton\"\n      [disabled]=\"disableSave\" label=\"SAVE\"\n      [loading]=\"saving\"\n      (click)=\"!disableSave && !saving && saveSection()\"\n      class=\"action-button\"></sm-loading-button>\n  </div>\n</div>\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {setBackdrop} from '@common/core/actions/layout.actions';\nimport {MatDialog} from '@angular/material/dialog';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {delay, first, tap, throttleTime} from 'rxjs/operators';\n\n@Component({\n  selector   : 'sm-editable-section',\n  templateUrl: './editable-section.component.html',\n  styleUrls  : ['./editable-section.component.scss']\n})\nexport class EditableSectionComponent implements OnInit, OnDestroy {\n  public inEditMode = false;\n  @Input() editable;\n  @Input() disableEditable = false;\n  @Input() disableSave = false;\n  @Input() disableInEditMode = false;\n  @Input() hideSaveButton = false;\n  @Input() containerClass = '';\n  @Input() hideEditButton = false;\n  @Input() isDarkTheme = false;\n\n  private _saving = false;\n  private scrollSub: Subscription;\n  @Input() set saving(saving) {\n    if (this._saving && !saving) {\n      this.inEditMode = false;\n    }\n    this._saving = saving;\n  }\n\n  get saving(): boolean {\n    return this._saving;\n  }\n\n  @Output() saveClicked = new EventEmitter();\n  @Output() cancelClicked = new EventEmitter();\n  @Output() activateEditClicked = new EventEmitter();\n\n  @HostListener('document:keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent) {\n    if (this.inEditMode && this.matDialog.openDialogs.length === 0) {\n      if ((e.key == 'Escape')) {\n        this.cancelClickedEvent();\n      }\n      if ((e.key == 'Enter') && e.ctrlKey === true && !this.disableSave) {\n        this.saveSection();\n      }\n    }\n  }\n\n  constructor(private store: Store<any>, private matDialog: MatDialog, public elementRef: ElementRef) {\n  }\n\n  editModeChanged(editMode) {\n    this.inEditMode = editMode;\n    this.activateEditClicked.emit(editMode);\n    this.store.dispatch(setBackdrop({payload: editMode}));\n    if(editMode) {\n      setTimeout(() => {\n        this.listenScrollEvent();\n      }, 50);\n    } else {\n      this.unsubscribeToEventListener();\n    }\n  }\n\n  cancelClickedEvent() {\n    this.inEditMode = false;\n    this.store.dispatch(setBackdrop({payload: false}));\n    this.cancelClicked.emit();\n    this.unsubscribeToEventListener();\n  }\n\n  saveSection() {\n    this.saveClicked.emit();\n    this.unsubscribeToEventListener();\n  }\n\n  ngOnInit() {\n  }\n\n  unsubscribeToEventListener() {\n    this.scrollSub?.unsubscribe();\n  }\n\n  getEdges() {\n    const {top, height, bottom} = this.elementRef.nativeElement.getBoundingClientRect();\n    return {\n      top,\n      bottom,\n      height\n    };\n  }\n  ngOnDestroy(): void {\n    this.unsubscribeToEventListener();\n    if (this.inEditMode) {\n      this.cancelClickedEvent();\n    }\n  }\n\n  private listenScrollEvent() {\n    const {height: initHeight} = this.getEdges();\n    let initBottom;\n    const factor = initHeight / 2;\n\n    const scroll$ = fromEvent(window,'wheel', {passive: false}).pipe(\n      tap(() => {\n        if (initBottom === undefined) {\n          const {bottom: currentBottom} = this.getEdges();\n          initBottom = currentBottom;\n        }\n      }),\n      throttleTime(10),\n      tap((event: WheelEvent) => {\n        const {bottom: currentBottom} = this.getEdges();\n        const deltaY = Math.abs(event.deltaY);\n\n        const isDownDirection = event.deltaY > 0;\n        const isTopEdge = !isDownDirection && initBottom + factor - deltaY < currentBottom;\n        const isBottomEdge = isDownDirection && initBottom - currentBottom - deltaY > factor;\n\n        const scrolledMoreThanHeight = Math.abs(initBottom - currentBottom ) > initHeight;\n\n        if (deltaY > factor || scrolledMoreThanHeight) {\n          this.elementRef.nativeElement.scrollIntoView({behavior: 'smooth', block: 'nearest'});\n          event.preventDefault();\n          return;\n        }\n        if ( isBottomEdge || isTopEdge)  {\n          event.preventDefault();\n        }\n\n      })\n    );\n    this.scrollSub = scroll$.subscribe();\n  }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {isEmpty} from 'lodash/fp';\nimport {ITask} from '../../../../../business-logic/model/al-task';\nimport {TIME_FORMAT_STRING} from '../../../../constants';\n\n\n@Component({\n  selector       : 'sm-experiment-card',\n  templateUrl    : './experiment-card.component.html',\n  styleUrls      : ['./experiment-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExperimentCardComponent {\n\n  public isEmpty = isEmpty;\n\n  @Input() experiment: any;\n  @Output() experimentCardClicked = new EventEmitter();\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n\n  public experimentClicked() {\n    this.experimentCardClicked.emit(this.experiment);\n  }\n\n}\n","<sm-card class=\"experiment-card high-card\" (click)=\"experimentClicked()\" [isExample]=\" ! experiment?.company?.id\" [height]=\"264\" >\n  <div header-content>\n    <div class=\"d-flex justify-content-between\">\n      <div class=\"title mr-auto\">{{experiment?.name }}</div>\n    </div>\n    <div style=\"padding-top: 5px\">\n      <div class=\"d-flex align-items-center justify-content-start\">\n        <span class=\"sub-title\">ID:  {{ experiment?.id}} </span>\n        <sm-copy-clipboard [clipboardText]=\"experiment?.id\" [label]=\"''\" [hideBackground]=\"true\"></sm-copy-clipboard>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"d-flex justify-content-around\">\n    <sm-circle-status [type]=\"experiment?.type\"></sm-circle-status>\n    <sm-circle-status [status]=\"experiment?.status\"></sm-circle-status>\n  </div>\n\n\n\n  <div footer class=\"brio-footer\">\n    <div  class=\"experiment-footer\">\n    <div class=\"top-labels ellipsis\">INITIAL INPUT MODEL:\n      {{experiment?.execution?.model?.name}}\n    </div>\n    <div class=\"top-labels d-flex justify-content-between\">\n      <span [smTooltip]=\"experiment.created | date : TIME_FORMAT_STRING\">Created {{experiment.created | timeAgo}}</span>\n      <span>{{experiment.user.name}}</span>\n    </div>\n    </div>\n  </div>\n</sm-card>\n","<div class=\"d-flex align-items-center\" mat-menu-item (click)=\"buttonClickedEvent($event)\" [disabled]=\"disabled\">\n  <sm-checkbox-control *ngIf=\"selectable\"\n                       [formData]=\"checked\"\n                       [fieldName]=\"itemValue\"\n                       (formDataChanged)=\"itemClickedEvent()\"\n  >\n  </sm-checkbox-control>\n  <i *ngIf=\"enableIcon\" [class]=\"'item-icon ' + iconClass\" [style.font-size.px]='iconFontSize'></i>\n  <div class=\"item-label\" [class.placeForIcon]=\"enableIcon\">\n    <div class=\"ellipsis\" [smTooltip]=\"enableTooltip? (itemTooltip || itemLabel): ''\">{{itemLabel}}</div>\n    <i *ngIf=\"sortOrder\" class=\"pt-1 ml-2\" [class]=\"sortOrder === TABLE_SORT_ORDER.ASC ? 'fa fa-arrow-down' : 'fa fa-arrow-up' \"></i>\n  </div>\n  <div *ngIf=\"removable\" (click)=\"removeItem($event)\" class=\"remove-button\"><i class=\"al-icon al-ico-trash al-color blue-300 pointer\"></i></div>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {TABLE_SORT_ORDER} from '../../data/table/table.consts';\n\n@Component({\n  selector   : 'sm-menu-item',\n  templateUrl: './menu-item.component.html',\n  styleUrls  : ['./menu-item.component.scss']\n})\nexport class MenuItemComponent {\n  @Input() iconFontSize: number = 14;\n  @Input() removable: boolean   = false;\n  @Input() disabled: boolean    = false;\n  @Input() itemLabel: string;\n  @Input() itemValue: string;\n  @Input() itemTooltip: string;\n  @Input() iconClass: string;\n  @Input() enableIcon: boolean  = true;\n  @Input() selectable: boolean  = false;\n  @Input() checked: boolean     = false;\n  @Input() sortOrder: number;\n  @Input() enableTooltip: boolean;\n  @Output() itemClicked         = new EventEmitter<{event?: MouseEvent; itemValue: string}>();\n  @Output() removeItemClicked   = new EventEmitter();\n  @Output() closeMenu           = new EventEmitter();\n\n  public TABLE_SORT_ORDER = TABLE_SORT_ORDER;\n\n  itemClickedEvent(event?: MouseEvent) {\n    if (!this.disabled) {\n      this.itemClicked.emit({event, itemValue: this.itemValue});\n    }\n  }\n\n  buttonClickedEvent(event) {\n    this.itemClickedEvent(event);\n    if (this.selectable) {\n      event.stopPropagation();\n    }\n  }\n\n  removeItem(event) {\n    this.removeItemClicked.emit(this.itemValue);\n    event.stopPropagation();\n  }\n\n}\n","<div class=\"d-flex justify-content-start align-items-center\" [smTooltip]=\"buttonTooltip\">\n  <i [class]=\"prefixIconClass\" *ngIf=\"prefixIconClass\" (click)=\"trigger.openMenu()\"></i>\n  <div mat-button\n       smClickStopPropagation\n       [matMenuTriggerFor]=\"menu\"\n       class=\" p-0 cell menu-button\"\n       [class]=\"buttonClass\"\n       [class.btn]=\"hasButtonClass\"\n       [class.hidden-button]=\"!showButton\"\n       (menuOpened)=\"menuOpened.emit()\"\n  >\n    {{header}}\n  </div>\n  <div class='cell pointer'>\n    <i [class]=\"iconClass\" *ngIf=\"showCart\" (click)=\"trigger.openMenu()\"></i>\n  </div>\n</div>\n<mat-menu\n  #menu=\"matMenu\"\n  class=\"sm-menu\"\n  [class]=\"smMenuClass + ' ' + panelClasses\"\n  [overlapTrigger]=\"false\"\n  [hasBackdrop]=\"showOverlay\"\n  (closed)=\"menuClosed.emit()\"\n>\n  <mat-form-field appearance=\"fill\" *ngIf=\"enableSearch\" smClickStopPropagation class=\"tags-menu-input w-100\">\n    <input matInput (input)=\"searchValueChanged.emit($event)\" [(ngModel)]=\"searchValue\" autocomplete=\"off\">\n    <i matSuffix [class]=\"'fa mr2 ' + (searchValue? 'fa-times pointer':'fa-search')\" (click)=\"searchValue && clearSearch()\"></i>\n  </mat-form-field>\n  <div class=\"results\" [class.search-results]=\"enableSearch\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"fixed-options\" >\n    <mat-divider *ngIf=\"fixedOptionsSubheader || refFixedOptions.hasChildNodes()\"></mat-divider>\n    <div *ngIf=\"fixedOptionsSubheader\" class=\"fixed-options-subheader\">\n      {{fixedOptionsSubheader}}\n    </div>\n    <div #refFixedOptions>\n      <ng-content select=\"[fixedOptions]\">\n\n      </ng-content>\n    </div>\n  </div>\n</mat-menu>\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {MatMenuTrigger} from '@angular/material/menu';\n\n@Component({\n  selector       : 'sm-menu',\n  templateUrl    : './menu.component.html',\n  styleUrls      : ['./menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuComponent implements AfterViewInit {\n  public isMenuOpen: boolean = false;\n\n  @Input() header: string;\n  @Input() buttonClass: string;\n  @Input() hasButtonClass = true;\n  @Input() smMenuClass: string;\n  @Input() panelClasses: string;\n  @Input() iconClass: string = 'fa fa-caret-down';\n  @Input() showCart: boolean = true;\n  @Input() openOnInit: boolean = false;\n  @Input() showButton: boolean = true;\n  @Input() showOverlay: boolean = true;\n  @Input() enableSearch: boolean = false;\n  @Input() searchValue: string;\n  @Input() fixedOptionsSubheader: string;\n  @Input() buttonTooltip: string;\n  @Input() prefixIconClass: string;\n  @Input() set position(position: { x: number; y: number }) {\n    this.movePosition(position);\n    this._position = position;\n  }\n\n  get position() {\n    return this._position;\n  }\n  public _position;\n  @Output() onMenuClosed = new EventEmitter();\n  @Output() menuClosed = new EventEmitter();\n  @Output() menuOpened = new EventEmitter();\n  @Output() searchValueChanged = new EventEmitter();\n  @ViewChild(MatMenuTrigger, {static: true}) trigger: MatMenuTrigger;\n  @ViewChild('menu', {static: true}) menu;\n\n  @HostListener('document:click', ['$event'])\n  clickOut(event) {\n    if (this.isMenuOpen && !this.showOverlay && !this.eRef.nativeElement.contains(event.target)) {\n      this.isMenuOpen = false;\n      this.trigger.closeMenu();\n    }\n  }\n\n  constructor(private renderer: Renderer2, private elRef: ElementRef, protected eRef: ElementRef) {\n  }\n\n  ngAfterViewInit(): void {\n    if (this.position) {\n      this.movePosition(this.position);\n    }\n    if (this.openOnInit) {\n      this.openMenu();\n    }\n  }\n\n  openMenu() {\n    this.isMenuOpen = true;\n    this.trigger.openMenu();\n  }\n\n  movePosition(position) {\n    if (!this.elRef.nativeElement || !position) {\n      return;\n    }\n    this.renderer.setStyle(this.elRef.nativeElement, 'position', 'fixed');\n    this.renderer.setStyle(this.elRef.nativeElement, 'left', position.x + 'px');\n    this.renderer.setStyle(this.elRef.nativeElement, 'top', position.y + 'px');\n  }\n\n  clearSearch() {\n    this.searchValue = '';\n    this.searchValueChanged.emit({target: {value: ''}});\n  }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {CircleTypeEnum} from '../../../../../shared/constants/non-common-consts';\nimport {Model} from '../../../../../business-logic/model/models/model';\nimport {TIME_FORMAT_STRING} from '../../../../constants';\n\n\n@Component({\n  selector: 'sm-model-card',\n  templateUrl: './model-card.component.html',\n  styleUrls: ['./model-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ModelCardComponent {\n\n  @Input() model: any; // TODO should be IModel\n  @Output() modelCardClicked = new EventEmitter();\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n  CircleTypeEnum = CircleTypeEnum;\n\n  public modelClicked() {\n    this.modelCardClicked.emit(this.model);\n  }\n\n  public numberOfLabels(labels: Model['labels']): number {\n    if (labels) {\n      return Object.keys(labels).length;\n    } else {\n      return 0;\n    }\n\n  }\n}\n","<sm-card class=\"model-card\" (click)=\"modelClicked()\" [isExample]=\"!model?.company?.id\" [height]=\"264\">\n  <div header-content>\n    <div class=\"d-flex justify-content-between\">\n      <div class=\"title mr-auto\">{{model?.name}}</div>\n    </div>\n    <div style=\"padding-top: 5px\">\n      <div class=\"d-flex align-items-center justify-content-start\">\n        <span class=\"sub-title\">ID:  {{model?.id}} </span>\n        <sm-copy-clipboard [clipboardText]=\"model?.id\" [label]=\"''\" [hideBackground]=\"true\"></sm-copy-clipboard>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"d-flex justify-content-around\">\n    <sm-circle-status [status]=\"model.framework\"></sm-circle-status>\n    <sm-circle-counter [counter]=\"numberOfLabels(model?.labels)\" label=\"LABELS\" [type]=\"CircleTypeEnum['model-labels']\"></sm-circle-counter>\n    <sm-circle-status [status]=\"model.ready? 'published' : 'created'\"></sm-circle-status>\n  </div>\n\n\n  <div footer class=\"brio-footer\">\n    <div class=\"model-footer\">\n      <div class=\"top-labels ellipsis\" [smTooltip]=\"model?.task?.name\">CREATOR EXPERIMENT:\n          {{model?.task?.name}}\n      </div>\n      <div class=\"top-labels ellipsis d-flex justify-content-between\">\n        <span [smTooltip]=\"model.created | date : TIME_FORMAT_STRING\">Created {{model.created | timeAgo}}</span>\n        <span>{{model?.user?.name}}</span>\n      </div>\n    </div>\n  </div>\n</sm-card>\n","<div [class]=\"'navbar-item ' + direction\" [ngClass]=\"{'active': active}\">\n  <div class=\"d-flex align-items-center\">{{header?.toUpperCase()}}<i *ngIf=\"multi\" class=\"ml-2 al-icon al-ico-dropdown-arrow sm\"></i></div>\n  <div>{{subHeader? subHeader: ''}}</div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'sm-navbar-item',\n  templateUrl: './navbar-item.component.html',\n  styleUrls: ['./navbar-item.component.scss'],\n})\nexport class NavbarItemComponent implements OnInit {\n\n  @Input() header: string;\n  @Input() active: boolean;\n  @Input() direction: 'bottom' | 'top' = 'bottom';\n  @Input() subHeader: string;\n  @Input() multi: boolean = false;\n\n  @Output() itemSelected = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-plus-card',\n  templateUrl: './plus-card.component.html',\n  styleUrls  : ['./plus-card.component.scss']\n})\nexport class PlusCardComponent implements OnInit {\n  @Input() folder: boolean = false;\n  @Output() plusCardClick = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  public plusCardClicked() {\n    this.plusCardClick.emit();\n  }\n\n}\n","<sm-card [showSeperator]=\"false\" [isFolder]=\"folder\" [oneTabMode]=\"true\" (click)=\"plusCardClicked()\">\n  <div class=\"plus-card-body d-flex pointer\">\n    <div class=\"al-icon al-ico-plus al-color blue-400 plus-icon xl\"></div>\n  </div>\n</sm-card>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Project} from '~/business-logic/model/projects/project';\n\n\n@Component({\n  selector: 'sm-project-card-menu',\n  templateUrl: './project-card-menu.component.html',\n  styleUrls: ['./project-card-menu.component.scss']\n})\nexport class ProjectCardMenuComponent {\n  @Output() deleteProjectClicked = new EventEmitter<Project>();\n  @Output() moveToClicked = new EventEmitter<string>();\n  @Output() newProjectClicked = new EventEmitter<string>();\n  @Output() projectNameInlineActivated = new EventEmitter();\n  @Input() project;\n}\n","<sm-card class=\"project-card\"\n         (click)=\"projectClicked()\"\n         [isExample]=\"!['All Experiments'].includes(project.name) && !isRootProject && (!project.company || ! project.company.id)\"\n         [isFolder]=\"true\"\n         [oneTabMode]=\"!(project?.sub_projects?.length>0)\"\n         [subFolderTitle]=\"project?.sub_projects?.length + ' sub projects'\"\n>\n  <div secondTab class=\"h-100\">\n    <div class=\"card-sp-list\" smClickStopPropagation>\n      <ul>\n        <li *ngFor=\"let subProject of project?.sub_projects\"><a class=\"d-flex align-items-center\"\n                                                                 (click)=\"subProjectClicked(subProject.id)\"\n                                                                [smTooltip]=\"subProject?.name\"\n                                                                matTooltipPosition=\"above\"\n                                                                [innerHTML]=\"subProject?.name | breadcrumbsEllipsis\"></a>\n        </li>\n      </ul>\n    </div>\n  </div>\n  <div header-content>\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <sm-inline-edit #projectName\n                      class=\"title edit-name dark\"\n                      [originalText]=\"project.name | shortProjectName\"\n                      [editable]=\"true\"\n                      pattern=\"^[^/]+$\"\n                      [minWidth]=\"250\"\n                      [inlineDisabled]=\"true\"\n                      (textChanged)=\"prepareProjectNameForChange($event)\"\n                      (inlineActiveStateChanged)=\"projectNameEditActiveChanged($event)\"\n\n      >\n        <span class=\"project-name\"\n              matTooltipPosition=\"above\"\n              [smTooltip]=\"project.name\"\n        >{{project.name | shortProjectName}}</span>\n      </sm-inline-edit>\n      <div *ngIf=\"project.system_tags?.includes('default')\" class=\"justify-content-end project-tag\">Sample</div>\n      <sm-project-card-menu-extended\n        class=\"menu-wrapper\"\n        *ngIf=\"!hideMenu\"\n        (deleteProjectClicked)=\"deleteProjectClicked.emit($event)\"\n        (moveToClicked)=\"moveToClicked.emit($event)\"\n        (newProjectClicked)=\"newProjectClicked.emit($event)\"\n        (projectNameInlineActivated)=\"projectName.inlineActivated()\"\n        [project]=\"project\"\n      >\n      </sm-project-card-menu-extended>\n    </div>\n\n  </div>\n  <div class=\"d-flex justify-content-around\">\n    <ng-template></ng-template>\n    <sm-circle-counter\n      [counter]=\"project.id === '*'? '∞' : project.stats?.active?.total_tasks\"\n      label=\"TOTAL\"\n      [type]=\"project.stats?.active?.total_tasks===0 ? circleTypeEnum.empty:circleTypeEnum.pending\"></sm-circle-counter>\n    <sm-circle-counter\n      [counter]=\"project.id === '*'? '∞' : project.stats?.active?.running_tasks\"\n      label=\"RUNNING\"\n      [type]=\"project.stats?.active?.running_tasks===0?circleTypeEnum.empty:circleTypeEnum.running\"></sm-circle-counter>\n    <sm-circle-counter [counter]=\"project.id === '*'? '∞' : project.stats?.active?.completed_tasks\"\n                       label=\"COMPLETED\"\n                       [type]=\"project.stats?.active?.completed_tasks===0? circleTypeEnum.empty:circleTypeEnum.completed\"\n                       underLabel=\"(24 hrs)\"></sm-circle-counter>\n  </div>\n  <div footer>\n    <div class=\"footer-title\">\n      COMPUTE TIME: {{computeTime}}\n    </div>\n  </div>\n</sm-card>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {ProjectsGetAllResponseSingle} from '~/business-logic/model/projects/projectsGetAllResponseSingle';\nimport {CircleTypeEnum} from '~/shared/constants/non-common-consts';\nimport {Project} from '~/business-logic/model/projects/project';\nimport {ICONS} from '@common/constants';\n\n\n@Component({\n  selector: 'sm-project-card',\n  templateUrl: './project-card.component.html',\n  styleUrls: ['./project-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectCardComponent {\n  private _project: ProjectsGetAllResponseSingle ;\n  public computeTime: string;\n\n  @Input() set project(data: ProjectsGetAllResponseSingle ) {\n    this._project = data;\n    this.computeTime = this.convertSecToDaysHrsMinsSec(data.stats?.active?.total_runtime)\n  };\n\n  get project() {\n    return this._project;\n  }\n  @Input() isRootProject;\n  @Input() hideMenu = false;\n  @Output() projectCardClicked = new EventEmitter<Project>();\n  @Output() projectNameChanged = new EventEmitter();\n  @Output() deleteProjectClicked = new EventEmitter<Project>();\n  @Output() moveToClicked = new EventEmitter<string>();\n  @Output() newProjectClicked = new EventEmitter<string>();\n  @ViewChild('projectName', {static: true}) projectName;\n  readonly circleTypeEnum = CircleTypeEnum;\n  readonly ICONS = ICONS;\n\n  private projectNameActive = false;\n\n  public convertSecToDaysHrsMinsSec(secs) {\n    const dayInSec = 60 * 60 * 24;\n    const hourInSec = 60 * 60;\n    const minInSec = 60;\n    const d = Math.floor(secs / dayInSec);\n    const h = Math.floor((secs - (d * dayInSec)) / hourInSec);\n    const m = Math.floor((secs - (d * dayInSec + h * hourInSec)) / minInSec);\n    const s = secs % 60;\n    const H = h < 10 ? '0' + h : h;\n    const M = m < 10 ? '0' + m : m;\n    const S = s < 10 ? '0' + s : s;\n    return `${d === 1 ? d + ' DAY ' : d > 1 ? d + ' DAYS ' : ''} ${H}:${M}:${S}`;\n  }\n\n  public projectClicked() {\n    if (!this.projectNameActive) {\n      this.projectCardClicked.emit(this.project);\n    }\n  }\n\n  public projectNameEditActiveChanged(active) {\n    setTimeout(() => this.projectNameActive = active, 100);\n  }\n\n  subProjectClicked(id: string) {\n    this.projectCardClicked.emit({id});\n  }\n\n  prepareProjectNameForChange(projectName: string) {\n    this.projectNameChanged.emit(this.project.name.substring(0, this.project.name.lastIndexOf('/') + 1) + projectName);\n  }\n}\n","<span class=\"sys-tag tag-item\" *ngFor=\"let tag of sysTags\">{{tag}}</span>\n<ng-container *ngIf=\"remove.observers.length > 0; else:noRemove\">\n  <sm-user-tag class=\"tag-item\"\n               *ngFor=\"let tag of tagsList; trackBy: trackFn\"\n               [colors]=\"tag.colorObservable | async\"\n               [caption]=\"tag.caption\"\n               [tooltip]=\"tooltip\"\n               [disabledRemove]=\"disableRemove\"\n               (remove)=\"removeTag($event)\"\n  ></sm-user-tag>\n</ng-container>\n\n<ng-template #noRemove>\n  <sm-user-tag class=\"tag-item\"\n               *ngFor=\"let tag of tagsList; trackBy: trackFn\"\n               [colors]=\"tag.colorObservable | async\"\n               [caption]=\"tag.caption\"\n               [tooltip]=\"tooltip\"\n  ></sm-user-tag>\n</ng-template>\n\n<sm-user-tag\n  class=\"add-button\"\n  [class.no-tags]=\"!tagsList?.length\"\n  *ngIf=\"add.observers.length > 0\"\n  caption=\"ADD TAG\"\n  [colors]=\"{foreground: '#a7b2d8', background: null}\"\n  (add)=\"add.emit($event)\"\n></sm-user-tag>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {TagColorService} from '../../../services/tag-color.service';\nimport {Observable} from 'rxjs';\n\nexport interface Tag {\n  caption: string;\n  colorObservable: Observable<{\n    background: string;\n    foreground: string;\n  }>;\n}\n\n@Component({\n  selector: 'sm-tag-list',\n  templateUrl: './tag-list.component.html',\n  styleUrls: ['./tag-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TagListComponent implements OnInit {\n  public disableRemove: boolean;\n  tagsList = [] as Tag[];\n\n  @Input() set tags(tags: string[]) {\n    this.tagsList = tags?.map((tag: string) => ({caption: tag, colorObservable: this.colorService.getColor(tag)}));\n    this.disableRemove = false;\n  }\n  @Input() sysTags = [] as string[];\n  @Input() tooltip: boolean = false;\n  @Output() remove = new EventEmitter();\n  @Output() add = new EventEmitter<MouseEvent>();\n\n  constructor(private colorService: TagColorService) { }\n\n  ngOnInit(): void {\n  }\n\n  public trackFn(index: number, tag: Tag) {\n    return tag.caption;\n  }\n\n  removeTag(tag: string) {\n    this.remove.emit(tag);\n    this.disableRemove = true;\n  }\n}\n","<form class=\"filter-form\" (ngSubmit)=\"addTag(filterText)\">\n  <mat-form-field appearance=\"standard\"\n                  class=\"tags-menu-input\"\n                  hideRequiredMarker=\"true\"\n                  floatLabel=\"never\">\n    <input #nameInput cdkFocusInitial smClickStopPropagation matInput placeholder=\"Add Tag\" name=\"filter\" [(ngModel)]=\"filterText\" class=\"filter\" autocomplete=\"off\">\n      <i matSuffix\n         [class]=\"'icon sm-md mr-3 ml-4 pointer ' + (tagsFilterByProject ? 'i-project-tags-filter-active' : 'i-project-tags-filter')\"\n         matTooltipPosition=\"above\"\n         smTooltip=\"Toggle all/project-only tags\"\n         (click)=\"projectTagsFilterToggle()\"\n         smClickStopPropagation></i>\n      <i matSuffix [class]=\"'fa mr2 ' + (filterText? 'fa-times pointer':'fa-search')\" (click)=\"filterText && clear()\" smClickStopPropagation></i>\n  </mat-form-field>\n</form>\n<div class=\"buttons-container\" [class.searching]=\"filterText\">\n  <button\n    class=\"item\"\n    *ngIf=\"filterText && !allTags.includes(filterText)\"\n    (click)=\"addTag(filterText)\"\n  >\"{{filterText}}\" <span class=\"new\">(Create New)</span></button>\n  <button\n    *ngFor=\"let tag of allTags | filter:tags | filter:filterText; trackBy: trackByFn\"\n    class=\"item\"\n    (click)=\"addTag(tag)\"\n  >{{tag}}</button>\n</div>\n<hr>\n<button class=\"item\" (click)=\"openTagColors()\">Tag Colors</button>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {getCompanyTags, getTags, openTagColorsMenu, setTagsFilterByProject} from '@common/core/actions/projects.actions';\nimport {ActivateEdit} from 'app/webapp-common/experiments/actions/common-experiments-info.actions';\nimport {ActivateModelEdit} from '@common/models/actions/models-info.actions';\n\n@Component({\n  selector: 'sm-tags-menu',\n  templateUrl: './tags-menu.component.html',\n  styleUrls: ['./tags-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TagsMenuComponent {\n  public filterText: string;\n  private firstTime = true;\n\n  get allTags(): string[] {\n    return this.tagsFilterByProject ? this.projectTags : this.companyTags;\n  }\n\n  @Input() tags: string[];\n  @Input() projectTags: string[];\n  @Input() companyTags: string[] = [];\n  @Input() tagsFilterByProject: boolean;\n  @Output() tagSelected = new EventEmitter<string>();\n\n  @ViewChild('nameInput') nameInput: ElementRef<HTMLInputElement>;\n\n\n  constructor(private store: Store, private cdr: ChangeDetectorRef, private elRef: ElementRef) {\n  }\n\n  openTagColors() {\n    window.setTimeout(() => {\n      this.store.dispatch(new ActivateEdit('tags'));\n      this.store.dispatch(new ActivateModelEdit('tags'));\n    }, 500);\n    this.store.dispatch(openTagColorsMenu());\n  }\n\n  addTag(tag: string) {\n    if (!this.tags.includes(tag)) {\n      this.tagSelected.emit(tag);\n      this.filterText = '';\n    }\n    this.elRef.nativeElement.click();\n  }\n\n  focus() {\n    if (this.tagsFilterByProject) {\n      this.firstTime = true;\n      this.store.dispatch(getTags());\n    } else {\n      this.firstTime = false;\n      this.store.dispatch(getCompanyTags());\n    }\n    this.nameInput.nativeElement.focus();\n    this.cdr.detectChanges();\n  }\n\n  clear() {\n    this.filterText = '';\n  }\n\n  projectTagsFilterToggle(): void {\n    if (this.tagsFilterByProject) {\n      if (this.firstTime) {\n        this.firstTime = false;\n        this.store.dispatch(getCompanyTags());\n      }\n    } else {\n      this.store.dispatch(getTags());\n    }\n    this.store.dispatch(setTagsFilterByProject({tagsFilterByProject: !this.tagsFilterByProject}));\n  }\n\n  trackByFn(index, item) {\n    return item;\n  }\n}\n","<span\n  class=content\n  [style.backgroundColor]=\"colors?.background\"\n  [style.color]=\"colors?.foreground\"\n  [class.add-button]=\"add.observers.length > 0\"\n  (click)=\"add.emit($event)\"\n  [smTooltip]=\"tooltip ? caption : undefined\"\n>\n  <i class=\"fas fa-plus\" *ngIf=\"add.observers.length > 0\"></i>\n  {{caption}}\n</span>\n<i class=\"fas fa-xs fa-times remove\"\n   *ngIf=\"remove.observers.length > 0 && !disabledRemove\"\n   [style.color]=\"colors?.foreground\"\n   (click)=\"onRemoveClicked(caption)\">\n</i>\n<mat-spinner *ngIf=\"disabledRemove\" class=\"icon sm white remove\" [diameter]=\"17\" [strokeWidth]=\"3\"></mat-spinner>\n<div class=\"arrow\" [class.add-button]=\"add.observers.length > 0\" [style.backgroundColor]=\"colors?.background\"></div>\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport {TagColor} from '../../../../core/actions/projects.actions';\n\n@Component({\n  selector: 'sm-user-tag',\n  templateUrl: './user-tag.component.html',\n  styleUrls: ['./user-tag.component.scss']\n})\nexport class UserTagComponent implements OnInit {\n  @Input() caption: string;\n  @Input() colors: TagColor;\n  @Input() foreground: string;\n  @Input() tooltip: boolean;\n  @Input() disabledRemove: boolean;\n  @Output() remove = new EventEmitter<string>();\n  @Output() add = new EventEmitter<MouseEvent>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onRemoveClicked(caption: string) {\n    this.remove.emit(caption);\n  }\n}\n","import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\n\nexport function validatePrefix(invalidPrefix?: string): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const forbidden = control.value?.startsWith(invalidPrefix);\n    return forbidden ? {invalidPrefix: {value: control.value}} : null;\n  };\n}\n\n@Directive({\n  selector: '[smInvalidPrefixValidator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: InvalidPrefixValidatorDirective, multi: true}]\n})\nexport class InvalidPrefixValidatorDirective implements Validator {\n  @Input('invalidPrefix') invalidPrefix: string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return validatePrefix(this.invalidPrefix)(control);\n  }\n}\n\n\n","import { Input, ViewChild, Directive } from '@angular/core';\nimport {ControlValueAccessor, NgForm} from '@angular/forms';\n\n@Directive()\nexport class TemplateFormSectionBase implements ControlValueAccessor {\n  public disabled: boolean;\n  public val = null;\n  public ngModelValue = null;\n  protected valueFromInherit = true;\n  @Input() inEditMode: boolean;\n  @ViewChild('templateForm', {static: true}) templateForm: NgForm;\n  onChange: any = () => {\n  };\n  onTouch: any = () => {\n  };\n\n  set value(val) {  // this value is updated by programmatic changes if( ngModelValue !== undefined && this.ngModelValue !== ngModelValue){\n    if (this.valueFromInherit && val !== undefined && val !== this.val) {\n      this.val = val;\n      this.onChange(val);\n      this.onTouch(val);\n    }\n  }\n\n// this method sets the value from outside\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n// upon UI element value changes, this method gets triggered\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n// upon touching the element, this method gets triggered\n  registerOnTouched(fn: any) {\n    this.onTouch = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n","import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\n\nexport const uniqueNameValidator = (names, forbiddenPrefix?, valuePrefix?): ValidatorFn =>\n  (control: AbstractControl): { [key: string]: any } | null => {\n    let value = control.value?.label || control.value?.name || control.value;\n    if (valuePrefix) {\n      value = valuePrefix + value;\n    }\n    const forbidden = names.includes(forbiddenPrefix ? forbiddenPrefix + value : value);\n    return forbidden ? {uniqueName: {value: control.value}} : null;\n  };\n\n@Directive({\n  selector: '[smUniqueNameValidator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: UniqueNameValidatorDirective, multi: true}]\n})\nexport class UniqueNameValidatorDirective implements Validator {\n  @Input() existingNames: Array<string>;\n  @Input() forbiddenPrefix: string;\n  @Input() valuePrefix: string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this.existingNames ? uniqueNameValidator(this.existingNames, this.forbiddenPrefix, this.valuePrefix)(control) : null;\n  }\n}\n\n\n","import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\n\nexport const uniqPathValidator = (names, currentName): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n  const forbidden = names.includes(control.value + '/' + currentName);\n  return forbidden ? {uniquePath: {value: control.value}} : null;\n};\n\n@Directive({\n  selector: '[smUniquePathValidator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: UniquePathValidatorDirective, multi: true}]\n})\nexport class UniquePathValidatorDirective implements Validator {\n  @Input() existingPaths: Array<string>;\n  @Input() currentName: string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this.existingPaths ? uniqPathValidator(this.existingPaths, this.currentName)(control) : null;\n  }\n}\n\n\n","<mat-expansion-panel *ngFor=\"let item of showList | keyvalue | sort:'key'; trackBy: trackByFn\"\n                     [expanded]=\"expanded[item.key]\"\n                     [hideToggle]=\"!item.value.hasChildren\"\n                     [class.no-children]=\"!item.value.hasChildren\">\n  <mat-expansion-panel-header\n    #panelH\n    expandedHeight=\"40px\"\n    collapsedHeight=\"40px\"\n    [class.has-children]=\"item.value.hasChildren\"\n    (click)=\"selectedItem(item, panelH)\"\n  >\n    <div class=\"header-container\" [ngClass]=\"{'unchecked' : isHideAllMode(item.value) || item.value.visible}\">\n      <div class=\"ellipsis item-key\" [smTooltip]=\"item.key\" [showDelay]=\"500\">{{item.key}}</div>\n      <div>\n        <i (click)=\"groupCheck(item); $event.stopPropagation()\"\n           [class]=\"(isHideAllMode(item.value) || item.value.visible? checkIcon[1] : checkIcon[0]) + ' fa icon'\"\n           ></i>\n      </div>\n    </div>\n\n  </mat-expansion-panel-header>\n  <ul class=\"list\">\n    <li\n      *ngFor=\"let listItem of item.value.data | keyvalue; trackBy: trackByFn\"\n      class=\"list-item\"\n      (click)=\"onItemSelect.emit(item.key + listItem.key)\"\n      [ngClass]=\"{unchecked: $any(listItem.value).visible}\"\n    >\n      <span class=\"pointer ellipsis w-100 pl-2 list-item-key\" [smTooltip]=\"listItem.key\" [showDelay]=\"500\">{{listItem.key}}</span>\n      <i (click)=\"onItemCheck.emit( {pathString: item.key+ listItem.key, parent: item.key}); $event.stopPropagation()\" [class]=\"($any(listItem.value).visible ? checkIcon[1] : checkIcon[0]) + ' fa icon'\"></i>\n    </li>\n  </ul>\n</mat-expansion-panel>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, TrackByFunction} from '@angular/core';\nimport {SelectableListItem} from './grouped-selectable-list.model';\nimport {GroupedList} from '../selectable-grouped-filter-list/selectable-grouped-filter-list.component';\nimport {MatExpansionPanelHeader} from '@angular/material/expansion';\n\n\ninterface GroupItem {\n  data: GroupedVisibleList;\n  visible: boolean;\n  hasChildren: boolean;\n}\n\nexport interface GroupedVisibleList {\n  [metric: string]: GroupItem;\n}\n\n@Component({\n  selector: 'sm-grouped-selectable-list',\n  templateUrl: './grouped-selectable-list.component.html',\n  styleUrls: ['./grouped-selectable-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GroupedSelectableListComponent implements OnChanges {\n  private _list: GroupedList;\n  public showList: GroupedVisibleList;\n  expanded = {};\n\n  checkIcon: string[] = ['fa-eye', 'fa-eye-slash'];\n  @Input() searchTerm: string;\n\n  @Input() set list(list) {\n    this._list = list;\n    if (!this.searchTerm || this.isFlatList()) {\n      this.toggleExpandedAll(false);\n    } else {\n      this.toggleExpandedAll(true);\n    }\n  }\n\n  get list() {\n    return this._list;\n  }\n\n  @Input() checkedList: Array<any>;\n  @Input() selected: SelectableListItem['value'];\n  // @Input() checkIcon: string[] = ['fa-eye', 'fa-eye-slash'];\n  @Output() onItemSelect = new EventEmitter<string>();\n  @Output() onItemCheck = new EventEmitter<{ pathString: string; parent: string }>();\n  @Output() onGroupCheck = new EventEmitter<any>();\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.list || changes.checkedList && this.list && this.checkedList)) {\n      this.showList = this.buildingNestedList();\n      this.cdr.detectChanges();\n    }\n  }\n\n  private buildingNestedList() {\n    return Object.entries(this.list).reduce((acc, [parent, children]) => {\n      acc[parent] = {\n        data: Object.keys(children).reduce((acc2, child) => {\n          acc2[child] = {data: children[child], visible: this.checkedList.includes(parent + child)};\n          return acc2;\n        }, {}),\n        visible: this.checkedList.includes(parent),\n        hasChildren: Object.keys(children).length > 0\n      };\n      return acc;\n    }, {}) as GroupedVisibleList;\n  }\n\n  public toggleExpandedAll(open) {\n    Object.keys(this.list).forEach(key => {\n      this.expanded[key] = open;\n    });\n  }\n\n  isHideAllMode(parent: GroupItem) {\n    const children = Object.values(parent.data);\n    return parent.hasChildren ? children.every(itemKey => itemKey.visible) : parent.visible;\n  }\n\n  trackByFn = (index, item) => index + item.key + item.value.hasChildren;\n\n  groupCheck(item: { key: string; value: GroupItem}) {\n    this.onGroupCheck.emit({key: item.key, hide: !this.isHideAllMode(item.value)});\n  }\n\n  selectedItem(item: { key: string; value: GroupItem}, panelH: MatExpansionPanelHeader) {\n    if (!item.value.hasChildren) {\n      this.onItemSelect.emit(item.key);\n      panelH._toggle();\n    }\n  }\n\n  private isFlatList() {\n    return Object.values(this.showList).every(item => !item.hasChildren);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport {CircleCounterComponent} from './indicators/circle-counter/circle-counter.component';\nimport {CardComponent} from './panel/card/card.component';\nimport {PlusCardComponent} from './panel/plus-card/plus-card.component';\nimport {NumberCounterComponent} from './indicators/number-counter/number-counter.component';\n\nimport {ClipboardModule} from 'ngx-clipboard';\n\nimport {NeonButtonComponent} from './buttons/neon-button/neon-button.component';\nimport {MenuComponent} from './panel/menu/menu.component';\nimport {SearchComponent} from './inputs/search/search.component';\nimport {NavbarItemComponent} from './panel/navbar-item/navbar-item.component';\nimport {ButtonToggleComponent} from './inputs/button-toggle/button-toggle.component';\nimport {ConfirmDialogComponent} from './overlay/confirm-dialog/confirm-dialog.component';\n\nimport {CodeComponent} from './data/code/code.component';\nimport {DialogTemplateComponent} from './overlay/dialog-template/dialog-template.component';\nimport {SMMaterialModule} from '../material/material.module';\nimport {AlertDialogComponent} from './overlay/alert-dialog/alert-dialog.component';\nimport {TooltipDirective} from './indicators/tooltip/tooltip.directive';\nimport {CheckboxControlComponent} from './forms/checkbox-control/checkbox-control.component';\nimport {SimpleTableComponent2} from './data/simple-table/simple-table.component';\nimport {ChipsModule} from './buttons/chips/chips.module';\nimport {TermsOfUseDialogComponent} from './overlay/terms-of-use-dialog/terms-of-use-dialog.component';\nimport {LeafComponent} from './overlay/leaf/leaf.component';\nimport {WizardDialogStepComponent} from './overlay/wizard-dialog-step/wizard-dialog-step.component';\nimport {LabeledRowComponent} from './data/labeled-row/labeled-row.component';\nimport {CircleStatusComponent} from './indicators/circle-status/circle-status.component';\nimport {MenuItemComponent} from './panel/menu-item/menu-item.component';\nimport {ClickStopPropagationDirective} from './directives/click-stop-propagation.directive';\nimport {TableComponent} from './data/table/table.component';\nimport {TableFilterSortTemplateComponent} from './data/table/table-filter-sort-template/table-filter-sort-template.component';\nimport {CompareFooterComponent} from './panel/compare-footer/compare-footer.component';\nimport {IconLabelComponent} from './data/icon-label/icon-label.component';\nimport {SelectableListComponent} from './data/selectable-list/selectable-list.component';\nimport {SelectableFilterListComponent} from './data/selectable-filter-list/selectable-filter-list.component';\nimport {ThrottledScrollListenerDirective} from './directives/throttled-scroll-listener.directive';\n\nimport {SharedPipesModule} from '../pipes/shared-pipes.module';\nimport {TableCardComponent} from './data/table-card/table-card.component';\nimport {ToggleArchiveComponent} from './buttons/toggle-archive/toggle-archive.component';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\n\nimport {TableCardFilterTemplateComponent} from './data/table/table-card-filter-template/table-card-filter-template.component';\nimport {EditableSectionComponent} from './panel/editable-section/editable-section.component';\nimport {LoadingButtonComponent} from './buttons/loading-button/loading-button.component';\nimport {OverlayComponent} from './overlay/overlay/overlay.component';\nimport {ChooseColorModule} from './directives/choose-color/choose-color.module';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {SMPortalModule} from '../portal/portal.module';\nimport {TableModule} from 'primeng/table';\nimport {ContextMenuModule} from 'primeng/contextmenu';\nimport {ClickPreventDefaultDirective} from './directives/click-prevent-default.directive';\nimport {TagComponent} from './indicators/tag/tag.component';\nimport {UniqueNameValidatorDirective} from './template-forms-ui/unique-name-validator.directive';\nimport {ForceInvalidValidatorDirective} from './template-forms-ui/force-invalid-validator.directive';\nimport {SelectableGroupedFilterListComponent} from './data/selectable-grouped-filter-list/selectable-grouped-filter-list.component';\nimport {GroupedSelectableListComponent} from './data/grouped-selectable-list/grouped-selectable-list.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {SnippetErrorComponent} from './indicators/snippet-error/snippet-error.component';\nimport {UpdateNotifierComponent} from './overlay/update-notifier/update-notifier.component';\nimport {SelectAutocompleteForTemplateFormsComponent} from './inputs/select-autocomplete-for-template-forms/select-autocomplete-for-template-forms.component';\nimport {UniqueInListValidatorDirective} from './template-forms-ui/unique-in-list-validator.directive';\nimport {UniqueInListSyncValidatorDirective} from './template-forms-ui/unique-in-list-sync-validator.directive';\nimport {UniqueInListSync2ValidatorDirective} from './template-forms-ui/unique-in-list-sync-validator-2.directive';\nimport {MaxNumberValidatorDirective} from './template-forms-ui/max-number-validator.directive';\nimport {NotAllowedStringsValidatorValidatorDirective} from './template-forms-ui/dont-allow-strings-validator.directive';\nimport {VerticalLabeledRowComponent} from './data/veritical-labeled-row/vertical-labeled-row.component';\nimport {RefreshButtonComponent} from '../components/refresh-button/refresh-button.component';\nimport {DurationInputComponent} from './inputs/duration-input/duration-input.component';\nimport {KeydownStopPropagationDirective} from './directives/keydown-stop-propagation.directive';\nimport {PreventArrowKeysDirective} from './directives/prevent-arrow-keys.directive';\nimport {EllipsisMiddleDirective} from './directives/ellipsis-middle.directive';\nimport {UserTagComponent} from './tags/user-tag/user-tag.component';\nimport {TagListComponent} from './tags/tag-list/tag-list.component';\nimport {TagsMenuComponent} from './tags/tags-menu/tags-menu.component';\nimport {TagColorMenuComponent} from './tags/tag-color-menu/tag-color-menu.component';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {ColorPickerModule} from 'ngx-color-picker';\nimport {EditJsonComponent} from './overlay/edit-json/edit-json.component';\nimport {ResizableColumnDirective} from './data/table/resizable-column.directive';\nimport {JsonValidatorDirective} from './template-forms-ui/json-validator.directive';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {GroupedCheckedFilterListComponent} from './data/grouped-checked-filter-list/grouped-checked-filter-list.component';\nimport {ShareDialogComponent} from './overlay/share-dialog/share-dialog.component';\nimport { HesitateDirective } from './directives/hesitate.directive';\nimport { DividerComponent } from './indicators/divider/divider.component';\nimport { DurationInputListComponent } from './inputs/duraion-input-list/duration-input-list.component';\nimport { TableFilterDurationComponent } from './data/table/table-duration-sort-template/table-filter-duration/table-filter-duration.component';\nimport { TableFilterDurationNumericComponent } from './data/table/table-duration-sort-template/table-filter-duration-numeric/table-filter-duration-numeric.component';\nimport { TableFilterDurationDateTimeComponent } from './data/table/table-duration-sort-template/table-filter-duration-date-time/table-filter-duration-date-time.component';\nimport {MatInputModule} from '@angular/material/input';\nimport {MAT_DATE_LOCALE, MatNativeDateModule} from '@angular/material/core';\nimport {SelectAutocompleteWithChipsComponent} from './inputs/select-autocomplete-with-chips/select-autocomplete-with-chips.component';\nimport { TableFilterDurationErrorComponent } from './data/table/table-duration-sort-template/table-filter-duration-error/table-filter-duration-error.component';\nimport {InvalidPrefixValidatorDirective} from './template-forms-ui/invalid-prefix-validator.directive';\nimport {UniquePathValidatorDirective} from './template-forms-ui/unique-path-validator.directive';\nimport {OperationErrorDialogComponent} from '@common/shared/ui-components/overlay/operation-error-dialog/operation-error-dialog.component';\nimport { CirclesInRowComponent } from './indicators/circles-in-row/circles-in-row.component';\nimport {RequiredAutocompleteSelectionValidatorDirective} from \"@common/shared/ui-components/template-forms-ui/required-autocomplete-selection-validator.directive\";\nimport {OverflowsDirective} from '@common/shared/ui-components/directives/overflows.directive';\nimport { RippleButtonComponent } from './buttons/ripple-button/ripple-button.component';\nimport { CheckboxThreeStateListComponent } from './panel/checkbox-three-state-list/checkbox-three-state-list.component';\nimport { TemplateAliasDirective } from './directives/template-alias.directive';\n\nconst declarations = [\n  DurationInputComponent,\n  UpdateNotifierComponent,\n  SnippetErrorComponent,\n  UniqueInListValidatorDirective,\n  UniqueInListSyncValidatorDirective,\n  UniqueInListSync2ValidatorDirective,\n  MaxNumberValidatorDirective,\n  SelectAutocompleteForTemplateFormsComponent,\n  SelectAutocompleteWithChipsComponent,\n  TableComponent,\n  TableFilterSortTemplateComponent,\n  TableCardFilterTemplateComponent,\n  CircleStatusComponent,\n  WizardDialogStepComponent,\n  LeafComponent,\n  ButtonToggleComponent,\n  SearchComponent,\n  CircleCounterComponent,\n  MenuComponent,\n  MenuItemComponent,\n  CardComponent,\n  PlusCardComponent,\n  NumberCounterComponent,\n  NeonButtonComponent,\n  NavbarItemComponent,\n  CodeComponent,\n  DialogTemplateComponent,\n  ConfirmDialogComponent,\n  OperationErrorDialogComponent,\n  EditJsonComponent,\n  ShareDialogComponent,\n  ClickStopPropagationDirective,\n  EllipsisMiddleDirective,\n  KeydownStopPropagationDirective,\n  PreventArrowKeysDirective,\n  ThrottledScrollListenerDirective,\n  JsonValidatorDirective,\n  AlertDialogComponent,\n  TooltipDirective,\n  CheckboxControlComponent,\n  SimpleTableComponent2,\n  SelectableListComponent,\n  GroupedCheckedFilterListComponent,\n  GroupedSelectableListComponent,\n  ClickPreventDefaultDirective,\n  SelectableFilterListComponent,\n  SelectableGroupedFilterListComponent,\n  LabeledRowComponent,\n  VerticalLabeledRowComponent,\n  CompareFooterComponent,\n  IconLabelComponent,\n  TableCardComponent,\n  ToggleArchiveComponent,\n  EditableSectionComponent,\n  OverlayComponent,\n  ToggleArchiveComponent,\n  TermsOfUseDialogComponent,\n  LoadingButtonComponent,\n  TagComponent,\n  UniqueNameValidatorDirective,\n  UniquePathValidatorDirective,\n  RequiredAutocompleteSelectionValidatorDirective,\n  InvalidPrefixValidatorDirective,\n  ForceInvalidValidatorDirective,\n  NotAllowedStringsValidatorValidatorDirective,\n  RefreshButtonComponent,\n  UserTagComponent,\n  TagListComponent,\n  HesitateDirective,\n  DividerComponent,\n  TableFilterDurationDateTimeComponent,\n  TableFilterDurationNumericComponent,\n  CirclesInRowComponent,\n  OverflowsDirective\n];\n\n@NgModule({\n  imports     : [\n    MatExpansionModule,\n    DragDropModule,\n    CommonModule,\n    ChipsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ClipboardModule,\n    TableModule,\n    ContextMenuModule,\n    SMMaterialModule,\n    MatButtonToggleModule,\n    SharedPipesModule,\n    ChooseColorModule,\n    PortalModule,\n    SMPortalModule,\n    ScrollingModule,\n    ColorPickerModule,\n    MatProgressSpinnerModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n  ],\n  providers   : [],\n  declarations: [...declarations, TagsMenuComponent, TagColorMenuComponent, ResizableColumnDirective, HesitateDirective, DurationInputListComponent, TableFilterDurationComponent, TableFilterDurationErrorComponent, RippleButtonComponent, CheckboxThreeStateListComponent, TemplateAliasDirective],\n  exports: [...declarations, ChipsModule, SMMaterialModule, ChooseColorModule, SMPortalModule, TagsMenuComponent, TableFilterDurationComponent, MatDatepickerModule, TemplateAliasDirective]\n})\nexport class UiComponentsModule {\n}\n","export abstract class FormsTrackBy {\n  private lengthChanged: boolean;\n  private previousLength: number;\n\n  abstract formData;\n\n  trackByFn = (index, val) => {\n    if ((this.lengthChanged === true) && (index === this.formData.length - 1)) {\n      this.previousLength = this.formData.length;\n      this.lengthChanged  = false;\n      return val;\n    }\n    if (this.previousLength > this.formData.length) {\n      this.lengthChanged = true;\n      return val;\n\n    }\n    if (index === this.formData.length - 1) {\n      this.previousLength = this.formData.length;\n    }\n    return index;\n  };\n}\n\nexport const trackByIndex = (index: number): number => index;\nexport const trackById = (index: number, val) => val.id;\n","import { isNil, isUndefined } from 'lodash/fp';\n\nexport function hasValue(value): boolean {\n  return !isUndefined(value) && !isNil(value);\n}\n\nexport function getValueOrDefault<T, F>(value: T, fallbackValue?: F): T | F {\n  return hasValue(value) ? value : fallbackValue;\n}\n","import {MEDIA_VIDEO_EXTENSIONS, MediaContentTypeEnum} from '../../../app.constants';\nimport {ActivatedRoute} from '@angular/router';\nimport {EXPERIMENT_GRAPH_ID_PREFIX} from '../../experiments/shared/common-experiments.const';\nimport {get, last} from 'lodash/fp';\nimport {User} from '../../../business-logic/model/users/user';\nimport {GetCurrentUserResponseUserObjectCompany} from '../../../business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {TABLE_SORT_ORDER} from '../ui-components/data/table/table.consts';\nimport {CloseScrollStrategy, Overlay} from '@angular/cdk/overlay';\nimport {Store} from '@ngrx/store';\nimport {mobilecheck} from '@common/shared/utils/mobile';\n\nexport const capitalizeFirstLetter = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst CRC_TABLE = () => {\n  const polynomial = 0x04C11DB7;\n  const table = new Array(256);\n\n  const reverse = (x, n) => {  // TODO\n    let b = 0;\n    while (--n >= 0) {\n      b <<= 1;\n      b |= x & 1;\n      x >>>= 1;\n    }\n    return b;\n  };\n\n  let i = -1;\n  while (++i < 256) {\n    let g = reverse(i, 32);\n    let j = -1;\n    while (++j < 8) {\n      g = ((g << 1) ^ (((g >>> 31) & 1) * polynomial)) >>> 0;\n    }\n    table[i] = reverse(g, 32);\n  }\n  return table;\n};\n\nexport const isVideo = (contentType: MediaContentTypeEnum, uri: string) => {\n\n  if (contentType) {\n    return (contentType.indexOf('video') > -1);\n  } else {\n    const extension = uri && uri.split('.').pop().split('?')[0];\n    return MEDIA_VIDEO_EXTENSIONS.includes(extension);\n  }\n};\n\nexport const isSourceVideo = (source) => {\n\n  const contentType = (source.preview && source.preview.content_type) ? source.preview.content_type : source.content_type;\n  const uri = (source.preview && source.preview.uri) ? source.preview.uri : source.uri;\n  if (source.dprs) {\n    return false;\n  }\n  return isVideo(contentType, uri);\n};\n\nexport const isHtmlPage = (url: string) => {\n  if (!url) {\n    return false;\n  }\n  const parsed = new URL(url);\n  const ext = last(parsed.pathname.split('.'));\n  return ['html', 'htm'].includes(ext);\n};\n\nexport const isTextFileURL = (url: string) => {\n  if (!url) {\n    return false;\n  }\n  const parsed = new URL(url);\n  const ext = last(parsed.pathname.split('.'));\n  return ['txt', 'text'].includes(ext);\n};\n\nexport const isHtmlOrText = (url: string) => {\n  if (!url) {\n    return false;\n  }\n  const parsed = new URL(url);\n  const ext = last(parsed.pathname.split('.'));\n  return ['txt', 'text', 'html', 'htm'].includes(ext);\n};\n\nexport const createModelLink = (uri, modelId, modelSignedUri) => {\n  const uriArray = uri.split('/');\n  const filename = uriArray[uriArray.length - 1];\n  const url = '/static/network?obj={\"path\":\"' + modelSignedUri + '\",\"fileName\":\"' + filename + '\",\"id\":\"' + modelId + '\"}';\n  return encodeURI(url);\n};\n\nexport const allItemsAreSelected = (itemsInView: { id: any }[], selectedItems: { id: any }[]) => {\n  if (itemsInView?.length === 0 || selectedItems.length === 0) {\n    return false;\n  } else {\n    const selectedItemsIds = selectedItems.map(item => item.id);\n    return (itemsInView?.every(item => selectedItemsIds.includes(item.id)));\n  }\n};\n\nexport const addOrRemoveFromArray = (arr: Array<any> = [], item) => {\n  if (arr.includes(item)) {\n    return arr.filter(arrItem => item !== arrItem);\n  } else {\n    return arr.concat([item]);\n  }\n};\n\nexport const scrollToElement = id => {\n  const element = document.getElementById(EXPERIMENT_GRAPH_ID_PREFIX + id);\n  if (!element) {\n    if (id) {\n      console.warn('Can not find metric element: ', id);\n    }\n    return;\n  }\n  element.scrollIntoView({block: 'start', behavior: 'smooth'});\n};\n\nexport const isScrolledIntoView = el => {\n  const rect = el.getBoundingClientRect();\n  const elemTop = rect.top;\n  const elemBottom = rect.bottom;\n\n  // Only completely visible elements return true:\n  // const isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\n  // Partially visible elements return true:\n  const isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n  return isVisible;\n};\n\nexport const getRouteFullUrl = (route: ActivatedRoute) => {\n  let path = route.routeConfig.path;\n  while (route.firstChild) {\n    route = route.firstChild;\n    path += '/' + route.snapshot.url.map(a => a.path).join('/');\n  }\n  return path;\n};\n\nexport const escapeRegex = (input: string) => input.replace(/[.+?^*${}()|[\\]\\\\]/g, '\\\\$&');\n\nexport const removeAlphaColor = (rgbaColor: string) => {\n  const rgbaColorArr = rgbaColor.substring(rgbaColor.indexOf('(') + 1, rgbaColor.indexOf(')')).split(',');\n  return `rgb(${rgbaColorArr[0]},${rgbaColorArr[1]},${rgbaColorArr[2]})`;\n};\n\nexport const isReadOnly = item => {\n  if (get('id', item) === '*') {\n    return false;\n  }\n  return (!get('company.id', item)) || (!!get('readOnly', item));\n};\n\nexport const isExample = item => item?.company && !item.company?.id;\n\nexport const isSharedAndNotOwner = (item, activeWorkSpace: GetCurrentUserResponseUserObjectCompany): boolean => {\n  const isSharedandNot = item?.system_tags.includes('shared') && item?.company?.id !== activeWorkSpace?.id && (!!item?.company.id);\n  return isSharedandNot;\n};\n\nexport const isAnnotationTask = entity => entity.system_tags && entity.system_tags.includes('Annotation');\n\nexport const getCssTheme = (el: HTMLElement): string => {\n  do {\n    if (el.classList.contains('dark-theme')) {\n      return 'dark-theme';\n    }\n    if (el.classList.contains('light-theme')) {\n      return 'light-theme';\n    }\n    el = ((el.parentElement || el.parentNode) as HTMLElement);\n  } while (el !== null && el.nodeType === 1);\n  return null;\n};\n\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nexport function crc32(str /* , polynomial = 0x04C11DB7, initialValue = 0xFFFFFFFF, finalXORValue = 0xFFFFFFFF*/) {\n  const s = String(str);\n  const table = CRC_TABLE;\n  const initialValue = arguments.length < 3 ? 0xFFFFFFFF : (arguments[2] >>> 0);\n  const finalXORValue = arguments.length < 4 ? 0xFFFFFFFF : (arguments[3] >>> 0);\n  let crc = initialValue;\n  const length = s.length;\n  let k = -1;\n  while (++k < length) {\n    const c = s.charCodeAt(k) % 255; // Modulus 255 not part of crc32, used to support non-english text. YK\n    if (c > 255) {\n      throw new RangeError();\n    }\n    const index = (crc & 255) ^ c;\n    crc = ((crc >>> 8) ^ table[index]) >>> 0;\n  }\n  return (crc ^ finalXORValue) >>> 0;\n}\n\nexport const htmlTextShorte = (name: string, limit = 80) => {\n  if (name.length > limit) {\n    return `<span title=\"${name}\">${name.slice(0, limit - 3)}...</span>`;\n  }\n  return name;\n};\n\nexport const findRegexRecursively = (object, field: string, regex: RegExp) => {\n  const currentValue = get(field, object);\n  if (currentValue) {\n    return regex.test(currentValue);\n  }\n  const nodes = field.split('.');\n  const node = nodes.shift();\n  const nodeValue = object[node];\n  if (!nodeValue) {\n    return false;\n  }\n  if (typeof nodeValue == 'string' || typeof nodeValue == 'number') {\n    return (nodes.length == 0 && typeof nodeValue == 'string') ? nodeValue.match(regex) : false;\n  }\n  for (const value of nodeValue) {\n    const result = findRegexRecursively(value, nodes.join('.'), regex);\n    if (result || result === null) {\n      return result;\n    }\n  }\n  return false;\n};\n\nexport const groupHyperParams = (hyperParams: any[]) => hyperParams.reduce((acc, {section, name, value}) => {\n  acc[section] = acc[section] || {};\n  acc[section][name] = acc[section][name] || {};\n  acc[section][name] = value;\n  return acc;\n}, {});\n\nexport const getScaleFactor = () => {\n  const isMac = (navigator.platform.indexOf('Mac') !== -1 || navigator.platform.indexOf('iPad') !== -1);\n  const isWin = navigator.platform.indexOf('Win') !== -1;\n  let dimensionRatio = 100;\n  let screenHeight: number;\n\n  if(mobilecheck()) {\n    return dimensionRatio;\n  }\n\n  try {\n    if ((isWin || isMac) && (window['chrome'] || window['safari'])) {\n      screenHeight = window.screen.height < window.screen.width ? window.screen.height : window.screen.width;\n      dimensionRatio = Math.max(60, Math.min(100, Math.round((100 * (screenHeight / 1080) / 10)) * 10));\n    }\n  } catch (err) {\n    dimensionRatio = 100;\n  }\n  dimensionRatio = 10000 / dimensionRatio;\n  return dimensionRatio;\n};\n\nexport const cleanUserData = (user: User): User => user && Object.entries(user).reduce((curr, [key, value]) => {\n  if (!(value === 'Unknown' || value === '')) {\n    curr[key] = value;\n  }\n  return curr;\n}, {});\n\nexport const addMultipleSortColumns = (oldOrders, colId, isShift) => {\n  let orders;\n  const currentSortField = oldOrders.find(field => field.field === colId);\n  const newField = {\n    field: colId,\n    order: currentSortField?.order ? (currentSortField.order * -1) : TABLE_SORT_ORDER.DESC\n  };\n\n  if (isShift) {\n    if (currentSortField) {\n      orders = oldOrders.map(field => field.field === colId ? newField : field);\n    } else {\n      orders = [...oldOrders, newField];\n    }\n  } else {\n    orders = [newField];\n  }\n  return orders;\n};\n\nexport const scrollFactory = (overlay: Overlay): () => CloseScrollStrategy => () => overlay.scrollStrategies.close();\n\nexport const loadExternalLibrary = (store: Store, url: string, action) => {\n  if (!url) {\n    return;\n  }\n  const init = () => {\n    const script: HTMLScriptElement = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n    script.onerror = () => console.error(`Error loading library from ${url}`);\n    script.crossOrigin = '' ;// 'use-credentials';\n    script.onload = () => store.dispatch(action());\n\n    const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n    head.appendChild(script);\n  };\n\n  setTimeout(init);\n};\n","export function mobilecheck(): boolean {\n  let check = false;\n  (function(a) {\n    if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)) ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window['opera']);\n  return check;\n}\n\n","import {\n  ISmCol,\n  TABLE_SORT_ORDER,\n  ColHeaderTypeEnum, ColHeaderFilterTypeEnum\n} from '../ui-components/data/table/table.consts';\nimport {FilterMetadata} from 'primeng/api/filtermetadata';\nimport {SortMeta} from 'primeng/api';\nimport {MetricValueType} from '@common/experiments-compare/reducers/experiments-compare-charts.reducer';\n\nexport interface TableFilter {\n  col?: string;\n  value?: any;\n  filterMatchMode?: string;\n}\n\nexport interface MetricColumn {\n  metricHash: string;\n  variantHash: string;\n  valueType: MetricValueType;\n  metric: string;\n  variant: string;\n}\n\nexport const getValueTypeName = (valueType: string) => valueType.replace('_', '').replace('value', '').toUpperCase();\n\nexport const encodeOrder = (orders: SortMeta[]): string[] => orders.map(order => `${order.order === TABLE_SORT_ORDER.DESC ? '-' : ''}${order.field}`);\n\nexport const encodeFilters = (filters: { [key: string]: FilterMetadata }) => {\n  if (filters) {\n    return Object.keys(filters)\n      .filter((key: string) => filters[key].value?.length)\n      .map((key: string) => {\n        const val = filters[key] as FilterMetadata;\n        return `${key}:${val.matchMode ? val.matchMode + ':' : ''}${val.value.join('+$+')}`;\n      }).join(',');\n  }\n};\nexport const excludedKey = '__$not';\nexport const uniqueFilterValueAndExcluded = (arr1 = [], arr2 = []) => Array.from(new Set(arr1.concat((arr2).map(key => key ? key.replace(/^__\\$not/,'') : key))));\nexport const addExcludeFilters = (arr1: string[]) => {\n  return arr1.reduce((returnArray, currentFilter) => {\n    if (currentFilter?.startsWith(excludedKey)) {\n      return  [...returnArray, excludedKey, currentFilter.substring(excludedKey.length)]\n    }\n    return [...returnArray, currentFilter];\n\n  }, []);\n}\nexport const decodeOrder = (orders: string[]): SortMeta[] => {\n  if (typeof orders === 'string') {\n    orders = [orders];\n  }\n  return orders.map(order => {\n    if (order[0] === '-') {\n      return {field: order.slice(1), order: -1} as SortMeta;\n    } else {\n      return {field: order, order: 1} as SortMeta;\n    }\n  });\n};\n\nexport const decodeFilter = (filters: string): TableFilter[] => filters.split(',').map((filter: string) => {\n  let mode: string;\n  const index = filter.indexOf(':AND');\n  if (index > -1) {\n    mode = 'AND';\n    filter = filter.replace(':AND', '');\n  }\n  const [col, values] = filter.split(/:(.+)/);\n  // if (parts.length === 3) {\n  //   mode = parts[1];\n  //   parts[1] = parts[2];\n  // }\n  return {col, filterMatchMode: mode, value: values?.split('+$+').map(x => x === '' ? null : x)};\n});\n\nexport const sortCol = (a, b, colsOrder) => {\n  const indexOfA = colsOrder.indexOf(a);\n  const indexOfB = colsOrder.indexOf(b);\n  return ((indexOfA >= 0) ? indexOfA : 99) - ((indexOfB >= 0) ? indexOfB : 99);\n};\n\nexport const encodeColumns = (mainCols: ISmCol[] | any, hiddenCols = {}, metricsCols = [], colsOrder = []): string[] => {\n  colsOrder = colsOrder.filter(col => !hiddenCols[col]);\n  return mainCols\n    .filter(col => !hiddenCols[col.id])\n    .concat(metricsCols ? metricsCols.filter(col => !hiddenCols[col.id]) : [])\n    .sort((a, b) => sortCol(a.id, b.id, colsOrder))\n    .map((col) => {\n      if (col.metric_hash) {\n        const headerParts = col.header.trim().split(' > ');\n        const variant = headerParts[1]?.replace(` ${getValueTypeName(col.valueType)}`, '');\n        return `m.${col.metric_hash}.${col.variant_hash}.${col.valueType}.${headerParts[0]}.${variant}`;\n      }\n      else {\n        return col.id;\n      }\n    });\n};\n\nexport const decodeColumns = (columns: string[]): [string[], MetricColumn[], string[], string[]] => {\n  const cols = [] as string[];\n  const metrics = [] as MetricColumn[];\n  const params = [] as string[];\n  const allIds = [] as string[];\n\n  columns.forEach(col => {\n    if (col.startsWith('m.')) {\n      const colParts = col.split('.');\n      const  [, metricHash, variantHash, valueType, metric, ...variant] = colParts;\n      metrics.push({\n        metricHash,\n        variantHash,\n        valueType: valueType as MetricValueType,\n        metric,\n        variant: variant.join('.')\n      });\n      allIds.push(`last_metrics.${colParts[1]}.${colParts[2]}.${colParts[3]}`);\n    }\n      else if (col.startsWith('hyperparams.')) {\n        // const colParts = col.split('.');\n        // const param = colParts[1] + (colParts[2] ? `.${colParts[2]}` : '');\n        params.push(col);\n        allIds.push(col);\n    }\n    else {\n      cols.push(col);\n      allIds.push(col);\n    }\n  });\n  return [cols, metrics, params, allIds];\n};\n\n\nexport const decodeHyperParam = (param: string): { name: string; section: string } => {\n  const split = param.replace('hyperparams.', '').split('.');\n  return {\n    name: split[1],\n    section: split[0]\n  };\n};\nexport const createMetricColumn = (column: MetricColumn, projectId: string): ISmCol => ({\n    id: `last_metrics.${column.metricHash}.${column.variantHash}.${column.valueType}`,\n    headerType: ColHeaderTypeEnum.sortFilter,\n    sortable: true,\n    filterable: true,\n    filterType: ColHeaderFilterTypeEnum.durationNumeric,\n    header: `${column.metric} > ${column.variant} ${getValueTypeName(column.valueType)}`,\n    hidden: false,\n    metric_hash: column.metricHash,\n    variant_hash: column.variantHash,\n    valueType: column.valueType,\n    projectId: projectId,\n    style: {width: '115px'},\n});\n\n","export const TASKS_STATUS = {\n  CREATED    : 'created',\n  IN_PROGRESS: 'in_progress',\n  QUEUED     : 'queued',\n  COMPLETED  : 'completed',\n  STARTED    : 'started',\n  UNKNOWN    : 'unknown',\n  PUBLISHED  : 'published',\n  PUBLISHING : 'publishing',\n  STOPPED    : 'stopped',\n  FAILED     : 'failed',\n  CLOSED     : 'closed'\n};\n\nexport const TASKS_EXECUTION_PROGRESS = {\n  UNKNOWN : 'unknown',\n  RUNNING : 'running',\n  STOPPING: 'stopping',\n  STOPPED : 'stopped'\n};\n\nexport const TAGS = {\n  HIDDEN: 'archived',\n  ANNOTATOR_INDEX_TAG_PREFIX: 'annotatorIndex',\n  ANNOTATED_NUMBER_TAG_PREFIX: 'annotatedNumber'\n};\n\nexport const HEAD = 'asc';\nexport const TAIL = 'desc';\n\n\nexport const VIEWS = {\n  TREE : 'TREE',\n  TABLE: 'TABLE'\n};\n\nexport const TASKS_TABLE_COL_FIELDS = {\n  RESULT   : 'output.result',\n  COMMENT  : 'comment',\n  ID       : 'id',\n  PROJECT  : 'project.name',\n  NAME     : 'name',\n  TYPE     : 'type',\n  STATUS   : 'status',\n  CREATED  : 'created',\n  COMPLETED: 'completed',\n  USER     : 'user.name',\n  PARENT   : 'parent.name'\n};\n\nexport const ASC  = 1;\nexport const DESC = -1;\n\nexport const metricsIterationsNumber = 5;\n\nexport const ARTIFACTS_TYPE = {\n  AUDIT_LOG: 'audit-log'\n};\n\nexport type ArtifactsTypesEnum = 'audit' | 'model';\nexport const ARTIFACTS_TYPES = {\n  AUDIT_LOG: 'audit-log' as ArtifactsTypesEnum,\n  Model    : 'model' as ArtifactsTypesEnum,\n};\n","import {Task} from '../../business-logic/model/tasks/task';\nimport {cloneDeep, sortBy} from 'lodash/fp';\nimport {SelectableListItem} from '@common/shared/ui-components/data/selectable-list/selectable-list.model';\nimport {GroupedList} from '@common/shared/ui-components/data/selectable-grouped-filter-list/selectable-grouped-filter-list.component';\nimport {Config} from 'plotly.js';\nimport {ExtData, ExtFrame, ExtLayout} from '../shared/experiment-graphs/single-graph/plotly-graph-base';\nimport {MetricsPlotEvent} from '../../business-logic/model/events/models';\nimport {KeyValue} from '@angular/common';\n\nexport interface IMultiplot {\n  [key: string]: { // i.e ROC\n    [key: number]: { // Iteration number\n      [key: string]: { // experimentId\n        name: string;\n        plots: ExtFrame[];\n      };\n    };\n  };\n}\n\nexport const mergeTasks = (tableTask, task) => {\n  task.project = tableTask.project;\n  task.user = tableTask.user;\n  task.task = tableTask.task;\n  return task;\n};\n\nexport const _mergeVariants = (base: Array<any>, variant) =>  base.slice().concat(variant);\n\nexport const _mergePlotsData = (base: any, toMerge: any) =>\n  JSON.stringify({...base, data: _mergeVariants(base.data, toMerge.data)});\n\nexport const getModelDesignKey = (modelDes): string => {\n  const modelStr = typeof modelDes == 'string';\n  if (!modelDes || modelStr) {\n    return undefined;\n  } else {\n    const desKeys = Object.keys(modelDes);\n    const firstNonEmptyKey = desKeys.find(key => !!modelDes[key]);\n    return firstNonEmptyKey ? firstNonEmptyKey : desKeys[0];\n  }\n};\n\nexport const getModelDesign = (modelDesc: Task['execution']['model_desc']): { key: string; value: any } => {\n  const key = getModelDesignKey(modelDesc);\n  return {key, value: key ? modelDesc[key] : modelDesc};\n};\n\nexport const prepareGraph = (data: ExtData[], layout: Partial<ExtLayout>, config: Partial<Config>, graph: Partial<MetricsPlotEvent>): Partial<ExtFrame> =>\n  ({\n    data,\n    layout,\n    config,\n    iter: graph.iter,\n    metric: graph.metric,\n    task: graph.task,\n    timestamp: graph.timestamp,\n    type: graph.type as unknown as string,\n    variant: graph.variant,\n    worker: graph['worker'],\n});\n\nexport const convertPlots = ({plots, experimentId}: {plots: {[title: string]: MetricsPlotEvent[]}; experimentId: string}): { [title: string]: ExtFrame[] } =>\n  Object.entries(plots).reduce((acc, [key, graphs]) => {\n  acc[key] = graphs?.map(graph => {\n    let json: {data: any; layout: any; config?: any};\n    try {\n      json = JSON.parse(graph.plot_str) as ExtFrame;\n      json.data.task = json.data.task || experimentId;\n    } catch (e) {\n      json = {data: [], layout: {title: 'Unknown data'}};\n    }\n    return prepareGraph(json.data, json.layout, json.config, graph);\n  });\n  return acc;\n}, {});\n\nexport const convertScalars = (scalars: GroupedList, experimentId: string): { [key: string]: ExtFrame[] } =>\n  Object.entries(scalars).reduce((acc, graphGroup) => {\n    const key = graphGroup[0];\n    const graph = graphGroup[1];\n\n    const chartData = Object.entries(graph).sort((a, b) => a[0] > b[0] ? 1 : -1)\n    .map(([, data]: [string, any]) => ({\n      task: experimentId,\n      ...data,\n      type: 'scatter'\n    }));\n\n    acc[key] = [prepareGraph(chartData, {type: 'scalar', title: key, xaxis: {title: 'Iterations'}}, {}, {metric: key})];\n    return acc;\n  }, {});\n\nexport const groupIterations = (plots: MetricsPlotEvent[]): {[title: string]: MetricsPlotEvent[]} => {\n  if (!plots.length) {\n    return {};\n  }\n  const sortedPlots = sortBy('iter', plots);\n  return sortedPlots\n    .reduce((groupedPlots, plot) => {\n      const metric = plot.metric;\n      groupedPlots[metric] = cloneDeep(groupedPlots[metric]) || [];\n      const index = groupedPlots[metric].findIndex((existingGraph) => plot.iter === existingGraph.iter);\n      const plotParsed = index > -1 && JSON.parse(plot.plot_str);\n      if (index > -1 && plotParsed.data && plotParsed.data[0] && ['scatter', 'bar'].includes(plotParsed.data[0].type)) {\n        const basePlotParsed = JSON.parse(groupedPlots[metric][index].plot_str);\n        groupedPlots[metric][index].plot_str = _mergePlotsData(basePlotParsed, plotParsed);\n      } else {\n        groupedPlots[metric].push(plot);\n      }\n      return groupedPlots;\n    }, {});\n};\n\nexport const prepareScalarList = (metricsScalar): GroupedList =>\n  Object.keys(metricsScalar || []).reduce((acc, curr) => {\n    acc[curr] = {};\n    return acc;\n}, {});\n\nexport const sortMetricsList = (list: string[]) =>\n  list ? sortBy(item => item.replace(':', '~').toLowerCase(), list) : list;\n\nexport const preparePlotsList = (groupedPlots: Map<string, any[]>): Array<SelectableListItem> => {\n  const list = groupedPlots ? Object.keys(groupedPlots) : [];\n  const sortedList = sortMetricsList(list);\n  return sortedList.map((item) => ({name: item, value: item}));\n};\n\n\nexport const sortByField = (arr: any[], field: string) =>\n  sortBy(item => item[field].replace(':', '~').toLowerCase(), arr);\n\nexport const compareByFieldFunc = (field) =>\n  (a: KeyValue<string, any>, b: KeyValue<string, any>) =>\n    a[field].replace(':', '~').toLowerCase() >\n    b[field].replace(':', '~').toLowerCase() ? 1 : -1;\n\nexport const mergeMultiMetrics = (metrics): { [key: string]: ExtFrame[] } => {\n  const graphsMap = {};\n  Object.keys(metrics).forEach(key => {\n    Object.keys(metrics[key]).forEach(itemKey => {\n      const chartData = Object.entries(metrics[key][itemKey])\n        .map(([variant, data]: [string, any]) => ({...data, type: 'scatter', task: variant}));\n      graphsMap[key + itemKey] = [prepareGraph(chartData, {\n        type: 'multiScalar',\n        title: key + ' / ' + itemKey\n      }, {}, {})];\n    });\n  });\n  return graphsMap;\n};\n\nexport const mergeMultiMetricsGroupedVariant = (metrics): { [key: string]: ExtFrame[] } => {\n  const graphsMap = {};\n  Object.keys(metrics).forEach(metric => {\n    const chartData = [];\n    Object.keys(metrics[metric]).forEach(variant => {\n      chartData.push(Object.entries(metrics[metric][variant])\n        .map(([taskId, data]: [string, any]) => ({\n          ...data,\n          type: 'scatter',\n          task: taskId,\n          name: `${variant} - ${data.name}`\n        }))\n      );\n    });\n    graphsMap[metric] = [prepareGraph((chartData as any).flat(), {type: 'multiScalar', title: metric}, {}, {})];\n  });\n  return graphsMap;\n};\n\nexport const convertMultiPlots = (plots): { [key: string]: ExtFrame[] } =>\n  Object.entries(plots).reduce((acc, graphGroup) => {\n    const key = graphGroup[0];\n    const graphs = graphGroup[1] as Array<any>;\n    acc[key] = Object.values(graphs).map(\n      graph => prepareGraph(graph.data, graph.layout, graph.config, {...graph, task: graph.task})\n    );\n    return acc;\n  }, {});\n\nexport const seperateMultiplotsVariants = (mixedPlot: IMultiplot, isMultipleVarients) => {\n  let charts = {};\n  const values = Object.values(mixedPlot);\n  if (!values || values.length === 0) {\n    return mixedPlot;\n  }\n  for (const variant of values) {\n    const duplicateNamesObject = Object.values(variant).reduce((acc, experiment) => {\n      const experimentName = Object.values(experiment)[0].name;\n      acc[experimentName] = acc[experimentName] !== undefined;\n      return acc;\n    }, {} as { [name: string]: boolean });\n\n    Object.entries(variant).map(experiment => {\n      const experimentId = experiment[0];\n      const shortExpId = experimentId.substr(0, 6);\n      const experimentData = experiment[1];\n\n      const iterationKey = Object.keys(experimentData)[0];\n      const iteration = (experimentData[iterationKey] as any);\n      const experimentName = duplicateNamesObject[iteration.name] ? iteration.name + '.' + shortExpId : iteration.name;\n      const plot = iteration.plots[0];\n      const parsed = JSON.parse(plot.plot_str);\n      const metric = isMultipleVarients ? plot.metric + '-' + plot.variant : plot.metric;\n      charts = multiplotsAddChartToGroup(charts, parsed, metric, experimentName, experimentId);\n    });\n  }\n\n  return charts;\n};\n\nexport const prepareMultiPlots = (multiPlots: MetricsPlotEvent) => {\n  if (!multiPlots) {\n    return multiPlots;\n  }\n  return Object.entries(multiPlots).reduce((acc, graph) => {\n    if (!graph[1]) {\n      return acc;\n    }\n    const isMultipleVarients = Object.keys(graph[1]).length > 1;\n    const graphsPerVariant = seperateMultiplotsVariants(graph[1] as IMultiplot, isMultipleVarients);\n    return {...acc, ...graphsPerVariant};\n  }, {});\n};\n\nexport const multiplotsAddChartToGroup = (charts, parsed, metric, experiment, experimentId) => {\n  const allowedTypes = ['scatter', 'bar'];\n  let fullName: string;\n  if (parsed.layout && parsed.layout.images) {\n    if (!charts[metric]) {\n      charts[metric] = {};\n    }\n    const index = Object.keys(charts[metric]).length;\n    charts[metric][index] = parsed;\n  }\n  for (let i = 0; i < parsed.data.length; i++) {\n    let isMultipleTasks = false;\n    const variant = parsed.data.slice()[i];\n    if (!variant) {\n      continue;\n    }\n    const metricName = metric;\n    if (!charts[metricName]) {\n      charts[metricName] = {};\n    }\n    if ((!variant.type || allowedTypes.includes(variant.type)) && variant.name) {\n      fullName = metric + '-' + variant.name;\n      variant.name = (experiment);\n      variant.task = (experimentId);\n    } else {\n      fullName = metric + '-' + experiment;\n    }\n    if (!charts[metricName][fullName]) {\n      charts[metricName][fullName] = Object.assign({}, parsed);\n      charts[metricName][fullName].data = [variant];\n    } else {\n      charts[metricName][fullName].data = _mergeVariants(charts[metricName][fullName].data.slice(), variant);\n      isMultipleTasks = true;\n    }\n    charts[metricName][fullName].layout = Object.assign({}, {...charts[metricName][fullName].layout});\n    charts[metricName][fullName].layout.title = fullName;\n    charts[metricName][fullName].layout.name = charts[metricName][fullName].layout.name ? `${charts[metricName][fullName].layout.name} - ${experiment}`: fullName;\n    charts[metricName][fullName].layout.barmode = isMultipleTasks ? 'group' : 'stack';\n  }\n  return charts;\n};\n\nexport const wordWrap = (str, maxWidth) => {\n\n  if (str.length <= maxWidth) {\n    return str;\n  }\n  const newLineStr = '<br>';\n  let done = false;\n  let found;\n  let res = '';\n  do {\n    found = false;\n    // Inserts new line at first whitespace of the line\n    for (let i = maxWidth - 1; i >= 0; i--) {\n      if (i > 0 && _testWhite(str.charAt(i))) {\n        res = res + [str.slice(0, i), newLineStr].join('');\n        str = str.slice(i + 1 || 1);\n        found = true;\n        break;\n      }\n    }\n    // Inserts new line at maxWidth position, the word is too long to wrap\n    if (!found) {\n      res += [str.slice(0, maxWidth), newLineStr].join('');\n      str = str.slice(maxWidth);\n    }\n\n    if (str.length < maxWidth) {\n      done = true;\n    }\n  } while (!done);\n\n  return res + str;\n};\n\nexport const _testWhite = (x) => {\n  const white = new RegExp(/^[\\s\\-_]$/);\n  return white.test(x.charAt(0));\n};\n\nexport const stripHtml = (s) => s.replace(/<[^>]*>?/gm, '');\n\nexport const timeInWords = (milliseconds: number, granularityLevel = 3) => {\n  let remaining = Math.floor(milliseconds / 1000);\n  if (remaining <= 0) {\n    return '0';\n  }\n  const output = [];\n  const timesConst = [12 * 30 * 24 * 60 * 60, 30 * 24 * 60 * 60, 24 * 60 * 60, 60 * 60, 60, 1];\n  const timeStringPlural = ['Years', 'Months', 'Days', 'Hours', 'Minutes', 'Seconds'];\n  const timeStringSingle = ['Year', 'Month', 'Day', 'Hour', 'Minute', 'Second'];\n  for (let i = 0; i < timesConst.length; i++) {\n    const unitCount = Math.floor(remaining / timesConst[i]);\n    if (unitCount === 0) {\n      continue;\n    }\n    remaining %= timesConst[i];\n    const unitString = unitCount > 1 ? `${unitCount} ${timeStringPlural[i]}` : `${unitCount} ${timeStringSingle[i]}`;\n    output.push(unitString);\n    if (output.length >= granularityLevel) {\n      break;\n    }\n  }\n  return output.join(' ');\n};\n\nexport const chooseTimeUnit = (data) => {\n  if (!data[0]?.x || !data[0]?.x[0] || !data[0]?.x[1]) {\n    return {time: 1000, str: 'Seconds'};\n  }\n  const first = data[0].x[0];\n  const last = data[0].x[data[0].x.length - 1];\n  const seconds = Math.floor((last - first) / 1000);\n  const timesConst = [12 * 30 * 24 * 60 * 60, 30 * 24 * 60 * 60, 24 * 60 * 60, 60 * 60, 60, 1];\n  const timeStringPlural = ['Years', 'Months', 'Days', 'Hours', 'Minutes', 'Seconds'];\n  for (let i = 0; i < timesConst.length; i++) {\n    if (seconds / timesConst[i + 1] > 100) {\n      return {time: timesConst[i] * 1000, str: timeStringPlural[i]};\n    }\n  }\n  const lastIndex = timesConst.length - 1;\n  return {time: timesConst[lastIndex] * 1000, str: timeStringPlural[lastIndex]};\n};\n","import {ApiUsersService} from '~/business-logic/api-services/users.service';\nimport {Observable, of} from 'rxjs';\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {cloneDeep, isEqual} from 'lodash/fp';\nimport {UsersSetPreferencesRequest} from '~/business-logic/model/users/usersSetPreferencesRequest';\nimport {ConfigurationService} from './shared/services/configuration.service';\nimport {LoginService} from '~/shared/services/login.service';\nimport {Injectable} from '@angular/core';\n\nconst USER_PREFERENCES_STORAGE_KEY = '_USER_PREFERENCES_';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const enum USER_PREFERENCES_KEY {\n  firstLogin = 'firstLogin',\n}\n\n@Injectable()\nexport class UserPreferences {\n\n  private preferences: { [key: string]: any };\n\n  constructor(private userService: ApiUsersService) {\n      this.removeFromLocalStorage();\n  }\n\n  loadPreferences(): Observable<{ [key: string]: any }> {\n    return this.userService.usersGetPreferences({})\n      .pipe(\n        map(res => res.preferences),\n        map(pref => {\n          this.preferences = pref;\n          this.checkIfFirstTimeLoginAndSaveData(pref);\n          this.cleanPreferencesInPreferences(pref);\n          let prefsString = JSON.stringify(pref);\n          prefsString = prefsString.split('--DOT--').join('.');\n          pref = JSON.parse(prefsString);\n          return pref;\n        }),\n        catchError((err) => {\n          // in case of 401 we have login logic in other places - throw it\n          if (err.status !== 401) {\n            return of({});\n          } else {\n            throw err;\n          }\n\n        }),\n        tap(preferences => this.preferences = preferences),\n      );\n  }\n\n  public setPreferences(key: string, value: any) {\n    if (this.preferences && !isEqual(this.preferences[key], value)) {\n      const prefs = {[key]: cloneDeep(value)};\n      this.preferences = {...this.preferences, ...prefs};\n      this.replaceDots(prefs);\n      this.saveToServer(prefs);\n      return;\n    }\n  }\n\n  private replaceDots(prefs: any) {\n    if (typeof prefs === 'string' || prefs === null || prefs === undefined) {\n      return;\n    }\n    Object.keys(prefs).forEach(key => {\n      this.replaceDots(prefs[key]);\n      if (key.includes('.')) {\n        const newKey = key.split('.').join('--DOT--');\n        prefs[newKey] = prefs[key];\n        delete prefs[key];\n      }\n    });\n  }\n\n  public getPreferences(key: string) {\n    return this.preferences[key];\n  }\n\n  public isReady() {\n    return !!this.preferences;\n  }\n\n  private checkIfFirstTimeLoginAndSaveData(pref) {\n    if (!pref.version) {\n      this.setPreferences('version', 1);\n      this.setPreferences(USER_PREFERENCES_KEY.firstLogin, true);\n      window.localStorage.setItem(USER_PREFERENCES_KEY.firstLogin, '0');\n    } else {\n      const firstLoginTime = window.localStorage.getItem(USER_PREFERENCES_KEY.firstLogin) || new Date().getTime().toString();\n      window.localStorage.setItem(USER_PREFERENCES_KEY.firstLogin, firstLoginTime);\n    }\n  }\n\n  private removeFromLocalStorage() {\n    localStorage.removeItem(USER_PREFERENCES_STORAGE_KEY);\n  }\n\n  private saveToServer(partialPreferences: { [key: string]: any }) {\n    this.userService.usersSetPreferences({preferences: partialPreferences} as UsersSetPreferencesRequest).subscribe();\n  }\n\n  private cleanPreferencesInPreferences(pref: { [key: string]: any }) {\n    if (pref.preferences) {\n      this.setPreferences('preferences', null);\n    }\n  }\n}\n\nexport const loadUserAndPreferences = (\n  loginService: LoginService,\n  confService: ConfigurationService,\n): () => Promise<any> => (): Promise<any> => new Promise((resolve) => {\n  confService.initConfigurationService().subscribe(() =>\n    loginService.initCredentials().subscribe(() => {\n      if (window.location.pathname.startsWith('/callback')) {\n        if (window.location.pathname.endsWith('verify')) {\n          const providerName = window.location.pathname.slice(10, -7);\n          const provider = loginService.sso.find(provide => provide.name === providerName);\n          window.location.href = provider.url;\n        } else {\n          loginService.ssoFlow(resolve);\n        }\n      } else {\n        loginService.loginFlow(resolve);\n      }\n    }));\n});\n","import versionConf from '../version.json';\n\nexport interface CommunityContext {\n  title?: string;\n  subtitle?: string;\n  background?: string;\n  backgroundPosition?: string;\n  list?: { icon: string; title: string; text: string }[];\n}\n\nexport interface GettingStartedContext {\n  install?: string;\n  configure?: string;\n  packageName?: string;\n}\n\nexport interface Legal {\n  TOULink?: string;\n  pricingLink?: string;\n}\n\nexport interface Environment {\n  production: boolean;\n  apiBaseUrl: string;\n  fileBaseUrl: string;\n  productName: string;\n  demo: boolean;\n  headerPrefix: string;\n  version: string;\n  userKey: string;\n  userSecret: string;\n  companyID: string;\n  loginNotice?: string;\n  loginBanner?: string;\n  autoLogin?: boolean;\n  whiteLabelLogo?: boolean;\n  whiteLabelLink?: any;\n  whiteLabelLoginTitle?: string;\n  whiteLabelLoginSubtitle?: string;\n  whiteLabelSlogan?: string;\n  communityServer?: boolean;\n  enterpriseServer?: boolean;\n  accountAdministration: boolean;\n  communityContext?: CommunityContext;\n  GTM_ID?: string;\n  hideUpdateNotice: boolean;\n  showSurvey: boolean;\n  plotlyURL: string;\n  slackLink: string;\n  docsLink: string;\n  useFilesProxy: boolean;\n  branding?: {faviconUrl?: string; logo?: string; logoSmall?: string};\n  gettingStartedContext?: GettingStartedContext;\n  serverDownMessage?: string;\n  legal: Legal;\n  loginPopup?: string;\n}\n\nexport const BASE_ENV = {\n  production: true,\n  apiBaseUrl: null,\n  fileBaseUrl: null,\n  productName: 'Acciona',\n  demo: false,\n  headerPrefix: 'X-Clearml',\n  version: versionConf.version,\n  userKey: 'EYVQ385RW7Y2QQUH88CZ7DWIQ1WUHP',\n  userSecret: 'yfc8KQo*GMXb*9p((qcYC7ByFIpF7I&4VH3BfUYXH%o9vX1ZUZQEEw1Inc)S',\n  companyID: 'd1bd92a3b039400cbafc60a7a5b1e52b',\n  loginNotice: '',\n  loginBanner: '',\n  autoLogin: false,\n  whiteLabelLogo: null,\n  whiteLabelLink: null,\n  whiteLabelLoginTitle: null,\n  whiteLabelLoginSubtitle: null,\n  whiteLabelSlogan: null,\n  communityContext: {\n    background: 'app/webapp-common/assets/icons/human-polygon.svg'\n  },\n  GTM_ID: null,\n  hideUpdateNotice: false,\n  showSurvey: false,\n  accountAdministration: false,\n  useFilesProxy: false,\n  legal: {TOULink: 'https://allegro.ai/legal-platform-tou/'},\n  plotlyURL: 'app/webapp-common/assets/plotly-1.58.4.min.js',\n  slackLink: 'https://join.slack.com/t/allegroai-trains/shared_invite/enQtOTQyMTI1MzQxMzE4LTY5NTUxOTY1NmQ1MzQ5MjRhMGRhZmM4ODE5NTNjMTg2NTBlZGQzZGVkMWU3ZDg1MGE1MjQxNDEzMWU2NmVjZmY',\n  docsLink: 'https://clear.ml/docs',\n  branding: {logo: '/assets/logo-white.svg?v=7', logoSmall: '/assets/c-logo.svg?=2'},\n  serverDownMessage: 'The ClearML server is currently unavailable.<BR>' +\n    'Please try to reload this page in a little while.<BR>' +\n    'If the problem persists, verify your network connection is working and check the ClearML server logs for possible errors'\n} as Environment;\n\n","import {BASE_ENV} from './base';\n\nexport const environment = {\n  ...BASE_ENV,\n  production  : true,\n};\n\n","/**\n * server\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ServerConfigRequest } from '../model/server/serverConfigRequest';\nimport { ServerInfoResponse } from '../model/server/serverInfoResponse';\nimport { ServerReportStatsOptionRequest } from '../model/server/serverReportStatsOptionRequest';\nimport { ServerReportStatsOptionResponse } from '../model/server/serverReportStatsOptionResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiServerService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Internal. Get server configuration. Secure section is not returned.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public serverConfig(request: ServerConfigRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling serverConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/server.config`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Show available endpoints\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public serverEndpoints(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling serverEndpoints.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/server.endpoints`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get the server collected statistics.\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public serverGetStats(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling serverGetStats.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<object>(`${this.basePath}/server.get_stats`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get server information, including version and build number\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public serverInfo(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling serverInfo.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ServerInfoResponse>(`${this.basePath}/server.info`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Internal. Get or set the report statistics option per-company\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public serverReportStatsOption(request: ServerReportStatsOptionRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling serverReportStatsOption.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<ServerReportStatsOptionResponse>(`${this.basePath}/server.report_stats_option`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * organization\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 2.14\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */\n\nimport {HTTP} from '../../app.constants';\nimport {SmApiRequestsService} from \"./api-requests.service\";\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { OrganizationGetTagsRequest } from '../model/organization/organizationGetTagsRequest';\nimport { OrganizationGetTagsResponse } from '../model/organization/organizationGetTagsResponse';\nimport { OrganizationGetUserCompaniesResponse } from '../model/organization/organizationGetUserCompaniesResponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiOrganizationService {\n\n    protected basePath = HTTP.API_BASE_URL;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected apiRequest: SmApiRequestsService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Get all the user and system tags used for the company tasks and models\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public organizationGetTags(request: OrganizationGetTagsRequest, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling organizationGetTags.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<OrganizationGetTagsResponse>(`${this.basePath}/organization.get_tags`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get details for all companies associated with the current user\n     * @param request request body\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public organizationGetUserCompanies(request: object, options?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (request === null || request === undefined) {\n            throw new Error('Required parameter request was null or undefined when calling organizationGetUserCompanies.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (options && options.async_enable) {\n            headers = headers.set(this.configuration.asyncHeader, '1');\n        }\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n\treturn this.apiRequest.post<OrganizationGetUserCompaniesResponse>(`${this.basePath}/organization.get_user_companies`,\n            request,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ApiTasksService} from './api-services/tasks.service';\nimport {ApiModelsService} from './api-services/models.service';\nimport {ApiAuthService} from './api-services/auth.service';\nimport {ApiEventsService} from './api-services/events.service';\nimport {ApiProjectsService} from './api-services/projects.service';\nimport {ApiUsersService} from './api-services/users.service';\nimport {HttpClientModule} from '@angular/common/http';\nimport {SmApiRequestsService} from './api-services/api-requests.service';\nimport {BlTasksService} from './services/tasks.service';\nimport {BlModelsService} from './services/models.service';\nimport {ApiQueuesService} from './api-services/queues.service';\nimport {ApiWorkersService} from './api-services/workers.service';\nimport {ApiServerService} from './api-services/server.service';\nimport {ApiOrganizationService} from './api-services/organization.service';\nimport {ApiLoginService} from './api-services/login.service';\n\n@NgModule({\n  imports     : [CommonModule, HttpClientModule],\n  declarations: [],\n  exports     : [],\n  providers   : [\n    SmApiRequestsService,\n    BlTasksService,\n    BlModelsService,\n    ApiTasksService,\n    ApiQueuesService,\n    ApiWorkersService,\n    ApiAuthService,\n    ApiModelsService,\n    ApiEventsService,\n    ApiProjectsService,\n    ApiUsersService,\n    ApiServerService,\n    ApiOrganizationService,\n    ApiLoginService\n  ]\n})\nexport class BusinessLogicModule {\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {selectCurrentUser} from '../../core/reducers/users-reducer';\nimport versionConf from '../../../../version.json';\nimport {Store} from '@ngrx/store';\nimport {setServerUpdatesAvailable} from '../../core/actions/layout.actions';\nimport {ApiServerService} from '~/business-logic/api-services/server.service';\nimport {filter, switchMap, take} from 'rxjs/operators';\nimport {ConfigurationService} from './configuration.service';\nimport {GetCurrentUserResponseUserObject} from '~/business-logic/model/users/getCurrentUserResponseUserObject';\nimport {ServerInfoResponse} from '~/business-logic/model/server/serverInfoResponse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerUpdatesService {\n  private initialized = false;\n  private currentUser: GetCurrentUserResponseUserObject;\n\n  constructor(private httpClient: HttpClient, private store: Store<any>, private serverService: ApiServerService) {\n    if (localStorage.getItem('currentVersion') !== versionConf.version) {\n      this.resetUpdateState();\n    }\n    this.store.select(selectCurrentUser).subscribe(user => this.currentUser = user);\n  }\n\n  private timeGap = 1000 * 60 * 60 * 24;\n\n  // private timeGap = 1000 * 10;\n\n  checkServerForUpdate(serverPath: string) {\n    const nextUpdateCheckTime = new Date(localStorage.getItem('nextCheckForUpdateTime'));\n    if (this.httpClient && (!nextUpdateCheckTime || nextUpdateCheckTime < new Date())) {\n      this.serverService.serverInfo({}).pipe(\n        take(1),\n        switchMap((infoRes: ServerInfoResponse) => this.httpClient.post<any>(`${serverPath}`, {\n          url: window.location.origin,\n          client: window.navigator.userAgent,\n          uid: this.currentUser?.id,\n          server_uuid: infoRes['uid'] || '',\n          time: new Date().toISOString(),\n          versions: {\n            ['clearml-server']: infoRes.version\n          }\n        })\n        )\n      ).pipe(filter(() => !ConfigurationService.globalEnvironment.hideUpdateNotice))\n        .subscribe(updateRes => {\n          this.store.dispatch(setServerUpdatesAvailable({availableUpdates: updateRes}));\n          localStorage.setItem('nextCheckForUpdateTime', new Date(new Date().getTime() + (this.timeGap)).toISOString());\n        });\n    }\n  }\n\n  checkForUpdates(serverPath: string) {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.checkServerForUpdate(serverPath);\n      setInterval(this.checkServerForUpdate.bind(this, serverPath), this.timeGap);\n    }\n  }\n\n\n  get lastDismissedVersion() {\n    return localStorage.getItem('dismissedVersion');\n  }\n\n  setDismissedVersion(version: string) {\n    localStorage.setItem('dismissedVersion', version);\n  }\n\n  private resetUpdateState() {\n    this.store.dispatch(setServerUpdatesAvailable({availableUpdates: null}));\n    localStorage.setItem('currentVersion', versionConf.version);\n    localStorage.removeItem('nextCheckForUpdateTime');\n    localStorage.removeItem('dismissedVersion');\n  }\n}\n","import {createAction, props} from '@ngrx/store';\nimport {VIEW_PREFIX} from '../../app.constants';\n\nexport const dismissSurvey = createAction(VIEW_PREFIX + ' [dismiss survey]');\n","import {createSelector} from '@ngrx/store';\nimport {\n  initViewState as commonInitState,\n  viewReducer as commonViewReducer,\n  ViewState as CommonViewState\n} from '@common/core/reducers/view.reducer';\nimport {dismissSurvey} from '../actions/layout.actions';\nimport {setServerUpdatesAvailable} from '@common/core/actions/layout.actions';\n\ninterface ViewState extends CommonViewState {\n  availableUpdates: string;\n  showSurvey: boolean;\n}\nconst initViewState: ViewState = {\n  ...commonInitState,\n  availableUpdates  : null,\n  showSurvey: true\n};\n\nexport const views = state => state.views as ViewState;\nexport const selectAvailableUpdates   = createSelector(views, state => state.availableUpdates);\nexport const selectShowSurvey   = createSelector(views, state => state.showSurvey);\nexport const selectUserSettingsNotificationPath = createSelector(views, () => '');\n\nexport function viewReducer(viewState: ViewState = initViewState, action) {\n\n  switch (action.type) {\n    case setServerUpdatesAvailable.type:\n      return {...viewState, availableUpdates: (action as ReturnType<typeof setServerUpdatesAvailable>).availableUpdates};\n    case dismissSurvey.type:\n      return {...viewState, showSurvey: false};\n    default:\n      return commonViewReducer(viewState, action);\n  }\n}\n","import {Component} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n  selector: 'sm-ui-update-dialog',\n  templateUrl: './ui-update-dialog.component.html',\n  styleUrls: ['./ui-update-dialog.component.scss']\n})\nexport class UiUpdateDialogComponent {\n\n  constructor(private matDialogRef: MatDialogRef<UiUpdateDialogComponent>) {\n  }\n\n\n  cancel() {\n    this.matDialogRef.close();\n  }\n\n  reload() {\n    window.location.reload(true);\n  }\n}\n","<sm-dialog-template subHeader=\"Click the reload button below to reload the web page\" (xClicked)=\"cancel()\" header=\"New version available\">\n  <div class=\"buttons\">\n    <button (click)=\"cancel()\" class=\"btn btn-outline-neon\">\n      CANCEL\n    </button>\n    <button (click)=\"reload()\" class=\"btn btn-neon yes-button\">\n      RELOAD\n    </button>\n  </div>\n</sm-dialog-template>\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport versionConf from '../../../../version.json';\nimport {Store} from '@ngrx/store';\nimport {UiUpdateDialogComponent} from '../../layout/ui-update-dialog/ui-update-dialog.component';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UiUpdatesService {\n  private updateDialog: MatDialogRef<UiUpdateDialogComponent, any>;\n\n  constructor(private httpClient: HttpClient, private store: Store<any>, private matDialog: MatDialog,\n  ) {\n\n  }\n\n  checkForUiUpdate() {\n    window.setInterval(this.checkForUpdate.bind(this), (1000 * 60  * 3));\n  }\n\n  checkForUpdate() {\n    if (this.httpClient) {\n      this.httpClient.get('version.json').subscribe((onlineVersionFile: any) => {\n        if (onlineVersionFile && versionConf.version !== onlineVersionFile.version) {\n          if (this.matDialog.openDialogs.length === 0) {\n            this.updateDialog = this.matDialog.open(UiUpdateDialogComponent);\n          }\n        }\n      });\n    }\n\n  }\n\n}\n","import {createAction, props} from '@ngrx/store';\nimport {UsageStatState} from '../reducers/usage-stats.reducer';\n\nexport const setUsageStats = createAction('user-stats SET_STATS',  props<UsageStatState>());\nexport const updateUsageStats = createAction('user-stats UPDATE_USAGE_STATS', props<{allowed: boolean}>());\n","import {Action, createReducer, on, createSelector} from '@ngrx/store';\nimport {setUsageStats} from '../actions/usage-stats.actions';\n\n\nexport const userStatsFeatureKey = 'userStats';\n\nexport interface UsageStatState {\n  allowed: boolean;\n  currVersion: string;\n  allowedVersion: string;\n}\n\n\nexport const initialState: UsageStatState = {\n  allowed: null,\n  currVersion: '',\n  allowedVersion: ''\n};\n\nconst _statsReducer = createReducer(initialState,\n  on(setUsageStats, (state: UsageStatState, newState) => ({...state, ...newState}))\n);\n\nexport function usageStatsReducer(state = initialState, action: Action): UsageStatState {\n  return _statsReducer(state, action);\n}\n\nexport const selectSendStats = state => state[userStatsFeatureKey];\n\nexport const selectAllowed = createSelector(selectSendStats, (state: UsageStatState) => state.allowed);\nexport const selectCurrentVersion = createSelector(selectSendStats, (state: UsageStatState) => state.currVersion);\nexport const selectAllowedVersion = createSelector(selectSendStats, (state: UsageStatState) => state.allowedVersion);\nexport const selectPromptUser = createSelector(\n  selectCurrentVersion,\n  selectAllowedVersion,\n  selectAllowed,\n  (currentVer: string, allowedVer: string, allowed: boolean) => !allowed && currentVer !== allowedVer\n);\n","import { Injectable } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {filter} from 'rxjs/operators';\nimport {updateUsageStats} from '../actions/usage-stats.actions';\nimport {selectPromptUser} from '../reducers/usage-stats.reducer';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../../webapp-common/shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {ConfigurationService} from '../../webapp-common/shared/services/configuration.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsageStatsService {\n\n  constructor(\n    private store: Store<any>,\n    private dialog: MatDialog,\n  ) {\n\n    if (!ConfigurationService.globalEnvironment.demo) {\n      this.store.select(selectPromptUser)\n        .pipe(filter(prompt => prompt))\n        .subscribe(() => {\n          const dialogRef = this.dialog.open(ConfirmDialogComponent,\n            {\n              data: {\n                title: 'Help us improve ClearML',\n                body: `Please allow the ClearML server to send anonymous usage metrics so we can better understand how ClearML is being used and make it even better.<BR>\n  This setting can be changed through the Profile page.`,\n                yes: 'Approve',\n                no: 'Deny',\n                iconClass: 'i-terms',\n              }\n            });\n\n          dialogRef.afterClosed().subscribe((allowed: boolean) => {\n            this.store.dispatch(updateUsageStats({allowed}));\n          });\n        });\n    }\n  }\n}\n","<sm-dialog-template [header]=\"tips[tipIndex].title\" iconClass=\"al-icon al-ico-tips\"\n                    (xClicked)=\"matDialogRef.close(neverShowAgain)\"\n>\n  <div class=\"tip-container\" smClickStopPropagation>\n    <div *ngIf=\"tips[tipIndex].image\"\n         class=\"tip-image\"\n         [class.full-width]=\"!tips[tipIndex].content\"\n         [style.background-image]=\"'url(' + tips[tipIndex].image + ')'\"></div>\n    <div *ngIf=\"tips[tipIndex].content\"\n         class=\"tip-content\"\n         [class.full-width]=\"!tips[tipIndex].image\"\n         [innerHTML]=\"tips[tipIndex].content | safe:'html'\"></div>\n  </div>\n  <div class=\"footer\">\n    <div class=\"tip-dont-show\" [class.invisible]=\"hideDontShow\"\n         smTooltip=\"Can also be set from the User Preferences section in the Profile page\"\n         matTooltipPosition=\"above\"\n         matTooltipShowDelay=\"300\">\n      <mat-checkbox [(ngModel)]=\"neverShowAgain\">\n        <span class=\"tip-cbx\">Don't show again</span>\n      </mat-checkbox>\n    </div>\n    <div class=\"navigate\">\n      <div class=\"btn-rec al-icon al-ico-previous\" (click)=\"prev()\"></div>\n      <div class=\"btn-rec al-icon al-ico-next\" (click)=\"next()\"></div>\n    </div>\n    <div class=\"tip-page\"> {{tipIndex + 1}} / {{tips.length}}</div>\n  </div>\n</sm-dialog-template>\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {addMessage} from '../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {Tip} from '../../shared/services/tips.service';\n\n@Component({\n  selector: 'sm-tip-of-the-day-modal',\n  templateUrl: './tip-of-the-day-modal.component.html',\n  styleUrls: ['./tip-of-the-day-modal.component.scss']\n})\nexport class TipOfTheDayModalComponent {\n  public tipIndex: number;\n  public tips: Tip[];\n  neverShowAgain: boolean;\n  private visitedIndex: number = 0;\n  public hideDontShow: boolean;\n\n  constructor(public matDialogRef: MatDialogRef<TipOfTheDayModalComponent>, private store: Store<any>,\n              @Inject(MAT_DIALOG_DATA) public data: { tips: Tip[]; visitedIndex: number; hideDontShow: boolean }) {\n    this.tips = data.tips;\n    this.hideDontShow = data.hideDontShow;\n    this.visitedIndex = data.visitedIndex % this.tips.length;\n    this.tipIndex = this.visitedIndex;\n    this.saveIndexInLocalstorage();\n    this.matDialogRef.beforeClosed().subscribe(() => this.matDialogRef.close(this.neverShowAgain));\n  }\n\n  copyToClipboardSuccess() {\n    this.store.dispatch(addMessage(MESSAGES_SEVERITY.SUCCESS, 'URL copied successfully'));\n  }\n\n  prev() {\n    this.tipIndex = (this.tips.length + this.tipIndex - 1) % this.tips.length;\n  }\n\n  next() {\n    this.tipIndex = (this.tipIndex + 1) % this.tips.length;\n    this.saveIndexInLocalstorage();\n  }\n\n  private saveIndexInLocalstorage() {\n    if (this.visitedIndex <= this.tipIndex) {\n      this.visitedIndex = (this.tipIndex + 1);\n      window.localStorage.setItem('tipVisitedIndex', `${this.visitedIndex}`);\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Store} from '@ngrx/store';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {selectRouterConfig} from '../../core/reducers/router-reducer';\nimport {combineLatest, Subscription} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map, withLatestFrom} from 'rxjs/operators';\nimport {TipOfTheDayModalComponent} from '../../layout/tip-of-the-day-modal/tip-of-the-day-modal.component';\nimport {selectFirstLogin, selectNeverShowPopups} from '../../core/reducers/view.reducer';\nimport {selectCurrentUser} from '../../core/reducers/users-reducer';\nimport {neverShowPopupAgain} from '../../core/actions/layout.actions';\nimport {FeaturesEnum} from '~/business-logic/model/users/featuresEnum';\nimport {selectFeatures, selectTermsOfUse} from '~/core/reducers/users.reducer';\n\ninterface Tips {\n  [url: string]: Tip[];\n}\n\nexport interface Tip {\n  title: string;\n  image: string;\n  content: string;\n  context: string;\n  feature: FeaturesEnum;\n}\n\nconst tipsCooldownTime = 1000 * 60 * 60 * 24 * 3;\nexport const popupId = 'tip-of-the-day';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TipsService {\n  private routerConfigSubscription: Subscription;\n  private neverShowAgainSub: Subscription;\n  private tipsConfig: Tips = {global: []};\n  private nextTimeToShowTips: Date;\n  private modalRef: MatDialogRef<TipOfTheDayModalComponent, any>;\n  private neverShowAgain: boolean;\n  private firstTime: boolean = true;\n\n  constructor(private httpClient: HttpClient, private store: Store<any>, private matDialog: MatDialog,\n  ) {\n  }\n\n  initTipsService(showAllTips = true) {\n    this.nextTimeToShowTips = new Date(window.localStorage.getItem('nextTimeToShowTips') || new Date().getTime());\n\n    this.httpClient.get('/onboarding.json').pipe(withLatestFrom(this.store.select(selectFeatures)))\n      .subscribe(([tipsConfig, features]: [{ onboarding: Tip[] }, FeaturesEnum[]]) => {\n        const tipsFiltered = tipsConfig.onboarding.filter(tip => !tip.feature || features.includes(tip.feature) || showAllTips);\n        this.tipsConfig = {\n          global: [], ...tipsFiltered.reduce((acc, curr) => {\n            const context = curr.context || 'global';\n            if (acc[context]) {\n              acc[context].push(curr);\n            } else {\n              acc[context] = [curr];\n            }\n            return acc;\n          }, {} as Tips)\n        };\n      });\n\n    this.neverShowAgainSub = this.store.select(selectNeverShowPopups).pipe(\n      map( (neverShowAgain) => neverShowAgain.includes(popupId)),\n      distinctUntilChanged()\n    ).subscribe(neverShowAgain => {\n      this.neverShowAgain = neverShowAgain;\n      if (!this.firstTime) {\n        if (!neverShowAgain) {\n          this.nextTimeToShowTips = new Date();\n          window.localStorage.removeItem('nextTimeToShowTips');\n        }\n      }\n      this.firstTime = false;\n    });\n\n    this.routerConfigSubscription = combineLatest([\n      this.store.select(selectRouterConfig),\n      this.store.select(selectCurrentUser),\n      this.store.select(selectFirstLogin),\n      this.store.select(selectTermsOfUse)\n    ])\n      .pipe(\n        debounceTime(1000),\n        filter(([, user, firstLogin, tos]) => !firstLogin && !!user && !tos.accept_required && !this.neverShowAgain && this.matDialog.openDialogs.length === 0),\n        distinctUntilChanged(([prev], [curr]) => prev?.[prev.length - 1] === curr[curr.length - 1]))\n      .subscribe(([routerConfig]) => {\n        const urlConfig = routerConfig?.join('/');\n        if (this.tipsConfig?.['global'].length || this.tipsConfig?.[urlConfig]) {\n          const allTips = [...this.tipsConfig['global']];\n          if (this.tipsConfig[urlConfig]) {\n            allTips.concat(this.tipsConfig[urlConfig]);\n          }\n          if (this.isTimeHavePassed()) {\n            this.showTipsModal(allTips);\n          }\n        }\n      });\n\n  }\n\n  public showTipsModal(allTips?: Tip[], hideDontShow?: boolean) {\n    const visitedIndex = parseInt(window.localStorage.getItem('tipVisitedIndex'), 10) || 0;\n    allTips = allTips ? allTips : (Object.values(this.tipsConfig) as any).flat();\n    this.modalRef = this.matDialog.open(TipOfTheDayModalComponent, {\n      data: {\n        tips: allTips,\n        visitedIndex,\n        hideDontShow: this.neverShowAgain || hideDontShow\n      }\n    });\n    this.modalRef.afterClosed().subscribe((neveShowAgain) => {\n      if (neveShowAgain) {\n        this.store.dispatch(neverShowPopupAgain({popupId}));\n      }\n      this.nextTimeToShowTips = new Date(new Date().getTime() + tipsCooldownTime);\n      window.localStorage.setItem('nextTimeToShowTips', this.nextTimeToShowTips.toISOString());\n    });\n  }\n\n  private isTimeHavePassed() {\n    return this.nextTimeToShowTips <= new Date();\n  }\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {selectNotification} from '../../core/reducers/view.reducer';\nimport {filter, take} from 'rxjs/operators';\nimport {setNotificationDialog} from '../../core/actions/layout.actions';\nimport {Subscription} from 'rxjs';\nimport {ConfirmDialogComponent} from '../../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\n\n@Component({\n  selector   : 'sm-server-notification-dialog-container',\n  templateUrl: './server-notification-dialog-container.component.html',\n  styleUrls  : ['./server-notification-dialog-container.component.scss']\n})\nexport class ServerNotificationDialogContainerComponent implements OnInit, OnDestroy {\n  private notificationSubscription: Subscription;\n  private dialogRef: MatDialogRef<ConfirmDialogComponent, any>;\n\n  constructor(private store: Store<any>, private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.notificationSubscription = this.store.pipe(\n      select(selectNotification),\n      filter((notification) => !!notification),\n    )\n      .subscribe((notification) => {\n        this.dialogRef = this.dialog.open(ConfirmDialogComponent, {\n          data: {\n            title    : notification.title,\n            body     : notification.message,\n            yes      : 'Ok',\n            iconClass: 'i-completed',\n          }\n        });\n\n        this.dialogRef.afterClosed().pipe(take(1)).subscribe(() => {\n          this.store.dispatch(setNotificationDialog({notification: null}));\n        });\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.notificationSubscription.unsubscribe();\n  }\n}\n","import {NotifierNotificationComponent} from '../components/notifier-notification.component';\nimport {TemplateRef} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nexport class NotifierNotification {\n  /**\n   * Unique notification ID, can be set manually to control the notification from outside later on\n   */\n  public id: string;\n\n  /**\n   * Notification type, will be used for constructing an appropriate class name\n   */\n  public type: string;\n\n  /**\n   * Notification message\n   */\n  public message: string;\n\n  /**\n   * The template to customize\n   * the appearance of the notification\n   */\n  public template?: TemplateRef<any> = null;\n\n  /**\n   * Component reference of this notification, created and set during creation time\n   */\n  public component: NotifierNotificationComponent;\n  public observer: Subject<any[]>;\n  public actions: any[];\n\n  /**\n   * Constructor\n   *\n   * @param options Notifier options\n   */\n  public constructor(options: NotifierNotificationOptions) {\n    Object.assign(this, options);\n\n    // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n    // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n    // is not possible due to the action queue concept.\n    if (options.id === undefined) {\n      this.id = `ID_${new Date().getTime()}`;\n    }\n  }\n}\n\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n */\nexport interface NotifierNotificationOptions {\n  /**\n   * Notification ID, optional\n   */\n  id?: string;\n\n  /**\n   * Notification type\n   */\n  type: string;\n\n  /**\n   * Notificatin message\n   */\n  message: string;\n\n  /**\n   * The template to customize\n   * the appearance of the notification\n   */\n  template?: TemplateRef<any>;\n\n  actions?: any[];\n}\n","import {Injectable} from '@angular/core';\n\nimport {Subject} from 'rxjs';\n\nimport {NotifierAction} from '../models/notifier-action.model';\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n@Injectable()\nexport class NotifierQueueService {\n\n  /**\n   * Stream of actions, subscribable from outside\n   */\n  public readonly actionStream: Subject<NotifierAction>;\n\n  /**\n   * Queue of actions\n   */\n  private actionQueue: Array<NotifierAction>;\n\n  /**\n   * Flag, true if some action is currently in progress\n   */\n  private isActionInProgress: boolean;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this.actionStream = new Subject<NotifierAction>();\n    this.actionQueue = [];\n    this.isActionInProgress = false;\n  }\n\n  /**\n   * Push a new action to the queue, and try to run it\n   *\n   * @param action Action object\n   */\n  public push(action: NotifierAction): void {\n    this.actionQueue.push(action);\n    this.tryToRunNextAction();\n  }\n\n  /**\n   * Continue with the next action (called when the current action is finished)\n   */\n  public continue(): void {\n    this.isActionInProgress = false;\n    this.tryToRunNextAction();\n  }\n\n  /**\n   * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n   */\n  private tryToRunNextAction(): void {\n    if (this.isActionInProgress || this.actionQueue.length === 0) {\n      return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n    }\n\n    this.isActionInProgress = true;\n    this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n  }\n\n}\n","import {Inject, Injectable, forwardRef, InjectionToken} from '@angular/core';\n\nimport {NotifierConfig} from '../models/notifier-config.model';\nimport {NotifierNotificationOptions} from '../models/notifier-notification.model';\nimport {NotifierQueueService} from './notifier-queue.service';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection Token for notifier configuration\n */\n\nexport const NotifierConfigToken: InjectionToken<NotifierConfig>\n  = new InjectionToken<NotifierConfig>('[anuglar-notifier] Notifier Config');\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n\n  /**\n   * Notifier queue service\n   */\n  private readonly queueService: NotifierQueueService;\n\n  /**\n   * Notifier configuration\n   */\n  private readonly config: NotifierConfig;\n\n  /**\n   * Constructor\n   *\n   * @param notifierQueueService Notifier queue service\n   * @param config               Notifier configuration, optionally injected as a dependency\n   */\n  public constructor(\n    notifierQueueService: NotifierQueueService,\n    @Inject(forwardRef(() => NotifierConfigToken)) config: NotifierConfig // The forwardRef is (sadly) required here\n  ) {\n    this.queueService = notifierQueueService;\n    this.config = config;\n  }\n\n  /**\n   * Get the notifier configuration\n   *\n   * @returns Notifier configuration\n   */\n  public getConfig(): NotifierConfig {\n    return this.config;\n  }\n\n  /**\n   * API: Show a new notification\n   *\n   * @param notificationOptions Notification options\n   */\n  public show(notificationOptions: NotifierNotificationOptions): Subject<any> {\n    const subject = new Subject();\n    this.queueService.push({\n      payload: {...notificationOptions, observer: subject},\n      type: 'SHOW'\n    });\n    return subject;\n  }\n\n  /**\n   * API: Hide a specific notification, given its ID\n   *\n   * @param notificationId ID of the notification to hide\n   */\n  public hide(notificationId: string): void {\n    this.queueService.push({\n      payload: notificationId,\n      type: 'HIDE'\n    });\n  }\n\n  /**\n   * API: Hide the newest notification\n   */\n  public hideNewest(): void {\n    this.queueService.push({\n      type: 'HIDE_NEWEST'\n    });\n  }\n\n  /**\n   * API: Hide the oldest notification\n   */\n  public hideOldest(): void {\n    this.queueService.push({\n      type: 'HIDE_OLDEST'\n    });\n  }\n\n  /**\n   * API: Hide all notifications at once\n   */\n  public hideAll(): void {\n    this.queueService.push({\n      type: 'HIDE_ALL'\n    });\n  }\n\n  /**\n   * API: Shortcut for showing a new notification\n   *\n   * @param type             Type of the notification\n   * @param message          Message of the notification\n   * @param [notificationId] Unique ID for the notification (optional)\n   */\n  public notify(type: string, message: string, notificationId?: string): void {\n    let notificationOptions: NotifierNotificationOptions = {\n      message,\n      type\n    };\n    if (notificationId !== undefined) {\n      notificationOptions.id = notificationId;\n    }\n    this.show(notificationOptions);\n  }\n\n}\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\n\n/**\n * Fade animation preset\n */\nexport const fade: NotifierAnimationPreset = {\n\thide: (): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '1'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '0'\n\t\t\t}\n\t\t};\n\t},\n\tshow: (): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '0'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '1'\n\t\t\t}\n\t\t};\n\t}\n};\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\n\n/**\n * Slide animation preset\n */\nexport const slide: NotifierAnimationPreset = {\n\thide: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tconst shift: number = notification.component.getShift();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t},\n\tshow: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( -50%, 0, 0 )'\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t}\n};\n","import {Injectable} from '@angular/core';\n\nimport {NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes} from '../models/notifier-animation.model';\nimport {NotifierNotification} from '../models/notifier-notification.model';\nimport {fade} from '../animation-presets/fade.animation-preset';\nimport {slide} from '../animation-presets/slide.animation-preset';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n\n  /**\n   * List of animation presets (currently static)\n   */\n  private readonly animationPresets: {\n    [animationPresetName: string]: NotifierAnimationPreset\n  };\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this.animationPresets = {\n      fade,\n      slide\n    };\n  }\n\n  /**\n   * Get animation data\n   *\n   * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n   * direction (either in or out) as well as the notifications (and its attributes) itself.\n   *\n   * @param   direction    Animation direction, either in or out\n   * @param   notification Notification the animation data should be generated for\n   * @returns Animation information\n   */\n  public getAnimationData(direction: 'show' | 'hide', notification: NotifierNotification): NotifierAnimationData {\n\n    // Get all necessary animation data\n    let keyframes: NotifierAnimationPresetKeyframes;\n    let duration: number;\n    let easing: string;\n    if (direction === 'show') {\n      keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n      duration = notification.component.getConfig().animations.show.speed;\n      easing = notification.component.getConfig().animations.show.easing;\n    } else {\n      keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n      duration = notification.component.getConfig().animations.hide.speed;\n      easing = notification.component.getConfig().animations.hide.easing;\n    }\n\n    // Build and return animation data\n    return {\n      keyframes: [\n        keyframes.from,\n        keyframes.to\n      ],\n      options: {\n        duration,\n        easing,\n        fill: 'forwards' // Keep the newly painted state after the animation finished\n      }\n    };\n\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n\n  /**\n   * Timestamp (in ms), created in the moment the timer starts\n   */\n  private now: number;\n\n  /**\n   * Remaining time (in ms)\n   */\n  private remaining: number;\n\n  /**\n   * Timeout ID, used for clearing the timeout later on\n   */\n  private timerId: number;\n\n  /**\n   * Promise resolve function, eventually getting called once the timer finishes\n   */\n  private finishPromiseResolver: (value: PromiseLike<undefined>) => void;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this.now = 0;\n    this.remaining = 0;\n  }\n\n  /**\n   * Start (or resume) the timer\n   *\n   * @param   duration Timer duration, in ms\n   * @returns          Promise, resolved once the timer finishes\n   */\n  public start(duration: number): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      // For the first run ...\n      this.remaining = duration;\n\n      // Setup, then start the timer\n      this.finishPromiseResolver = resolve;\n      this.continue();\n\n    });\n  }\n\n  /**\n   * Pause the timer\n   */\n  public pause(): void {\n    clearTimeout(this.timerId);\n    this.remaining -= new Date().getTime() - this.now;\n  }\n\n  /**\n   * Continue the timer\n   */\n  public continue(): void {\n    this.now = new Date().getTime();\n    this.timerId = window.setTimeout(() => {\n      this.finish();\n    }, this.remaining);\n  }\n\n  /**\n   * Stop the timer\n   */\n  public stop(): void {\n    clearTimeout(this.timerId);\n    this.remaining = 0;\n  }\n\n  /**\n   * Finish up the timeout by resolving the timer promise\n   */\n  private finish(): void {\n    this.finishPromiseResolver(null);\n  }\n\n}\n","<ng-container *ngIf=\"notification.template; else predefinedNotification\" [ngTemplateOutlet]=\"notification.template\" [ngTemplateOutletContext]=\"{ notification: notification }\">\n</ng-container>\n\n<ng-template #predefinedNotification>\n  <div class=\"notifier__notification-message\">\n    <div class=\"message\">{{ notification.message }}</div>\n    <span *ngFor=\"let action of notification.actions;\" class=\"user-action\" [class.disabled]=\"actionsClicked.includes(action)\" (click)=\"onActionClick(action)\">{{action.name}}</span>\n  </div>\n  <button class=\"notifier__notification-button\" type=\"button\" title=\"dismiss\" *ngIf=\"config.behaviour.showDismissButton\" (click)=\"onClickDismiss()\">\n    <svg class=\"notifier__notification-button-icon\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\n      <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n    </svg>\n  </button>\n</ng-template>\n","import {AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2} from '@angular/core';\n\nimport {NotifierAnimationData} from '../models/notifier-animation.model';\nimport {NotifierAnimationService} from '../services/notifier-animation.service';\nimport {NotifierConfig} from '../models/notifier-config.model';\nimport {NotifierNotification} from '../models/notifier-notification.model';\nimport {NotifierService} from '../services/notifier.service';\nimport {NotifierTimerService} from '../services/notifier-timer.service';\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n  host: {\n    '(click)': 'onNotificationClick()',\n    '(mouseout)': 'onNotificationMouseout()',\n    '(mouseover)': 'onNotificationMouseover()',\n    class: 'notifier__notification'\n  },\n  providers: [\n    // We provide the timer to the component's local injector, so that every notification components gets its own\n    // instance of the timer service, thus running their timers independently from each other\n    NotifierTimerService\n  ],\n  selector: 'notifier-notification',\n  templateUrl: './notifier-notification.component.html'\n})\nexport class NotifierNotificationComponent implements AfterViewInit {\n\n  /**\n   * Input: Notification object, contains all details necessary to construct the notification\n   */\n  @Input()\n  public notification: NotifierNotification;\n\n  /**\n   * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n   */\n  @Output()\n  public ready: EventEmitter<NotifierNotificationComponent>;\n\n  /**\n   * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n   */\n  @Output()\n  public dismiss: EventEmitter<string>;\n\n  /**\n   * Notifier configuration\n   */\n  public readonly config: NotifierConfig;\n\n  /**\n   * Notifier timer service\n   */\n  private readonly timerService: NotifierTimerService;\n\n  /**\n   * Notifier animation service\n   */\n  private readonly animationService: NotifierAnimationService;\n\n  /**\n   * Angular renderer, used to preserve the overall DOM abstraction & independence\n   */\n  private readonly renderer: Renderer2;\n\n  /**\n   * Native element reference, used for manipulating DOM properties\n   */\n  private readonly element: HTMLElement;\n\n  /**\n   * Current notification height, calculated and cached here (#perfmatters)\n   */\n  private elementHeight: number;\n\n  /**\n   * Current notification width, calculated and cached here (#perfmatters)\n   */\n  private elementWidth: number;\n\n  /**\n   * Current notification shift, calculated and cached here (#perfmatters)\n   */\n  private elementShift: number;\n  public actionsClicked: any[] = [];\n\n  /**\n   * Constructor\n   *\n   * @param elementRef               Reference to the component's element\n   * @param renderer                 Angular renderer\n   * @param notifierService          Notifier service\n   * @param notifierTimerService     Notifier timer service\n   * @param notifierAnimationService Notifier animation service\n   */\n  public constructor(elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService,\n                     notifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService) {\n    this.config = notifierService.getConfig();\n    this.ready = new EventEmitter<NotifierNotificationComponent>();\n    this.dismiss = new EventEmitter<string>();\n    this.timerService = notifierTimerService;\n    this.animationService = notifierAnimationService;\n    this.renderer = renderer;\n    this.element = elementRef.nativeElement;\n    this.elementShift = 0;\n  }\n\n  /**\n   * Component after view init lifecycle hook, setts up the component and then emits the ready event\n   */\n  public ngAfterViewInit(): void {\n    this.setup();\n    this.elementHeight = this.element.offsetHeight;\n    this.elementWidth = this.element.offsetWidth;\n    this.ready.emit(this);\n  }\n\n  /**\n   * Get the notifier config\n   *\n   * @returns Notifier configuration\n   */\n  public getConfig(): NotifierConfig {\n    return this.config;\n  }\n\n  /**\n   * Get notification element height (in px)\n   *\n   * @returns Notification element height (in px)\n   */\n  public getHeight(): number {\n    return this.elementHeight;\n  }\n\n  /**\n   * Get notification element width (in px)\n   *\n   * @returns Notification element height (in px)\n   */\n  public getWidth(): number {\n    return this.elementWidth;\n  }\n\n  /**\n   * Get notification shift offset (in px)\n   *\n   * @returns Notification element shift offset (in px)\n   */\n  public getShift(): number {\n    return this.elementShift;\n  }\n\n  /**\n   * Show (animate in) this notification\n   *\n   * @returns Promise, resolved when done\n   */\n  public show(): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n\n        // Get animation data\n        const animationData: NotifierAnimationData = this.animationService.getAnimationData('show', this.notification);\n\n        // Set initial styles (styles before animation), prevents quick flicker when animation starts\n        const animatedProperties: Array<string> = Object.keys(animationData.keyframes[0]);\n        for (let i: number = animatedProperties.length - 1; i >= 0; i--) {\n          this.renderer.setStyle(this.element, animatedProperties[i],\n            animationData.keyframes[0][animatedProperties[i]]);\n        }\n\n        // Animate notification in\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          this.startAutoHideTimer();\n          resolve(null); // Done\n        };\n\n      } else {\n\n        // Show notification\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\n        this.startAutoHideTimer();\n        resolve(null); // Done\n\n      }\n\n    });\n\n  }\n\n  /**\n   * Hide (animate out) this notification\n   *\n   * @returns Promise, resolved when done\n   */\n  public hide(): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      this.stopAutoHideTimer();\n\n      this.notification.observer.next(this.actionsClicked);\n      this.notification.observer.complete();\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n        const animationData: NotifierAnimationData = this.animationService.getAnimationData('hide', this.notification);\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          resolve(null); // Done\n        };\n      } else {\n        resolve(null); // Done\n      }\n\n    });\n  }\n\n  /**\n   * Shift (move) this notification\n   *\n   * @param   distance         Distance to shift (in px)\n   * @param   shiftToMakePlace Flag, defining in which direction to shift\n   * @returns Promise, resolved when done\n   */\n  public shift(distance: number, shiftToMakePlace: boolean): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      // Calculate new position (position after the shift)\n      let newElementShift: number;\n      if ((this.config.position.vertical.position === 'top' && shiftToMakePlace)\n        || (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {\n        newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n      } else {\n        newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n      }\n      const horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n        const animationData: NotifierAnimationData = { // TODO: Extract into animation service\n          keyframes: [\n            {\n              transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`\n            },\n            {\n              transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`\n            }\n          ],\n          options: {\n            duration: this.config.animations.shift.speed,\n            easing: this.config.animations.shift.easing,\n            fill: 'forwards'\n          }\n        };\n        this.elementShift = newElementShift;\n        const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          resolve(null); // Done\n        };\n\n      } else {\n        this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n        this.elementShift = newElementShift;\n        resolve(null); // Done\n      }\n\n    });\n\n  }\n\n  public onActionClick(userAction): void {\n    this.actionsClicked.push(...userAction.actions);\n    this.onClickDismiss();\n  }\n\n  /**\n   * Handle click on dismiss button\n   */\n  public onClickDismiss(): void {\n    this.dismiss.emit(this.notification.id);\n  }\n\n  /**\n   * Handle mouseover over notification area\n   */\n  public onNotificationMouseover(): void {\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n      this.pauseAutoHideTimer();\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n      this.stopAutoHideTimer();\n    }\n  }\n\n  /**\n   * Handle mouseout from notification area\n   */\n  public onNotificationMouseout(): void {\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n      this.continueAutoHideTimer();\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n      this.startAutoHideTimer();\n    }\n  }\n\n  /**\n   * Handle click on notification area\n   */\n  public onNotificationClick(): void {\n    if (this.config.behaviour.onClick === 'hide') {\n      this.onClickDismiss();\n    }\n  }\n\n  /**\n   * Get auto hide value, return simple values (e.g. boolean, number),\n   * or extract the value if autoHide is an object, defaulting to the default\n   * key or false.\n   */\n  private getAutoHide(behaviour, type: string) {\n    if (typeof (behaviour.autoHide) === 'object') {\n      return behaviour.autoHide[type] !== undefined ?\n        behaviour.autoHide[type] :\n        behaviour.autoHide.default ?\n          behaviour.autoHide.default :\n          false;\n    }\n    return behaviour.autoHide;\n  }\n\n  private shouldAutoHide(autoHide): boolean {\n    return autoHide !== false && autoHide > 0;\n  }\n\n  /**\n   * Start the auto hide timer (if enabled)\n   */\n  private startAutoHideTimer(): void {\n    const autoHide = this.getAutoHide(this.config.behaviour, this.notification.type);\n    if (this.shouldAutoHide(autoHide)) {\n      this.timerService.start(autoHide).then(() => {\n        this.onClickDismiss();\n      });\n    }\n  }\n\n  /**\n   * Pause the auto hide timer (if enabled)\n   */\n  private pauseAutoHideTimer(): void {\n    const autoHide = this.getAutoHide(this.config.behaviour, this.notification.type);\n    if (this.shouldAutoHide(autoHide)) {\n      this.timerService.pause();\n    }\n  }\n\n  /**\n   * Continue the auto hide timer (if enabled)\n   */\n  private continueAutoHideTimer(): void {\n    const autoHide = this.getAutoHide(this.config.behaviour, this.notification.type);\n    if (this.shouldAutoHide(autoHide)) {\n      this.timerService.continue();\n    }\n  }\n\n  /**\n   * Stop the auto hide timer (if enabled)\n   */\n  private stopAutoHideTimer(): void {\n    const autoHide = this.getAutoHide(this.config.behaviour, this.notification.type);\n    if (this.shouldAutoHide(autoHide)) {\n      this.timerService.stop();\n    }\n  }\n\n  /**\n   * Initial notification setup\n   */\n  private setup(): void {\n\n    // Set start position (initially the exact same for every new notification)\n    if (this.config.position.horizontal.position === 'left') {\n      this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n    } else if (this.config.position.horizontal.position === 'right') {\n      this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n    } else {\n      this.renderer.setStyle(this.element, 'left', '50%');\n      // Let's get the GPU handle some work as well (#perfmatters)\n      this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n    }\n    if (this.config.position.vertical.position === 'top') {\n      this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n    } else {\n      this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n    }\n\n    // Add classes (responsible for visual design)\n    this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n    this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n\n  }\n\n}\n","<ul>\n  <li class=\"notifier__container-list\" *ngFor=\"let notification of notifications; trackBy: identifyNotification;\">\n    <notifier-notification\n      [notification]=\"notification\"\n      (ready)=\"onNotificationReady( $event )\"\n      (dismiss)=\"onNotificationDismiss( $event )\">\n    </notifier-notification>\n  </li>\n</ul>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\n\nimport {Subscription} from 'rxjs';\n\nimport {NotifierAction} from '../models/notifier-action.model';\nimport {NotifierConfig} from '../models/notifier-config.model';\nimport {NotifierNotification} from '../models/notifier-notification.model';\nimport {NotifierQueueService} from '../services/notifier-queue.service';\nimport {NotifierService} from '../services/notifier.service';\nimport {NotifierNotificationComponent} from './notifier-notification.component';\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n  host: {\n    class: 'notifier__container'\n  },\n  selector: 'notifier-container',\n  templateUrl: './notifier-container.component.html'\n})\nexport class NotifierContainerComponent implements OnDestroy, OnInit {\n\n  /**\n   * List of currently somewhat active notifications\n   */\n  public notifications: Array<NotifierNotification>;\n\n  /**\n   * Change detector\n   */\n  private readonly changeDetector: ChangeDetectorRef;\n\n  /**\n   * Notifier queue service\n   */\n  private readonly queueService: NotifierQueueService;\n\n  /**\n   * Notifier configuration\n   */\n  private readonly config: NotifierConfig;\n\n  /**\n   * Queue service observable subscription (saved for cleanup)\n   */\n  private queueServiceSubscription: Subscription;\n\n  /**\n   * Promise resolve function reference, temporarily used while the notification child component gets created\n   */\n  private tempPromiseResolver: (value: PromiseLike<undefined>) => void;\n\n  /**\n   * Constructor\n   *\n   * @param changeDetector       Change detector, used for manually triggering change detection runs\n   * @param notifierQueueService Notifier queue service\n   * @param notifierService      Notifier service\n   */\n  public constructor(changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService) {\n    this.changeDetector = changeDetector;\n    this.queueService = notifierQueueService;\n    this.config = notifierService.getConfig();\n    this.notifications = [];\n  }\n\n  /**\n   * Component initialization lifecycle hook, connects this component to the action queue, and then handles incoming actions\n   */\n  public ngOnInit(): void {\n    this.queueServiceSubscription = this.queueService.actionStream.subscribe((action: NotifierAction) => {\n      this.handleAction(action).then(() => {\n        this.queueService.continue();\n      });\n    });\n  }\n\n  /**\n   * Component destroyment lifecycle hook, cleans up the observable subsciption\n   */\n  public ngOnDestroy(): void {\n    if (this.queueServiceSubscription) {\n      this.queueServiceSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Notification identifier, used as the ngFor trackby function\n   *\n   * @param   index        Index\n   * @param   notification Notifier notification\n   * @returns Notification ID as the unique identnfier\n   */\n  public identifyNotification(index: number, notification: NotifierNotification): string {\n    return notification.id;\n  }\n\n  /**\n   * Event handler, handles clicks on notification dismiss buttons\n   *\n   * @param notificationId ID of the notification to dismiss\n   */\n  public onNotificationDismiss(notificationId: string): void {\n    this.queueService.push({\n      payload: notificationId,\n      type: 'HIDE'\n    });\n  }\n\n  /**\n   * Event handler, handles notification ready events\n   *\n   * @param notificationComponent Notification component reference\n   */\n  public onNotificationReady(notificationComponent: NotifierNotificationComponent): void {\n    const currentNotification: NotifierNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n    currentNotification.component = notificationComponent; // Save the new omponent reference\n    this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n  }\n\n  /**\n   * Handle incoming actions by mapping action types to methods, and then running them\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleAction(action: NotifierAction): Promise<undefined> {\n    switch (action.type) { // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n      case 'SHOW':\n        return this.handleShowAction(action);\n      case 'HIDE':\n        return this.handleHideAction(action);\n      case 'HIDE_OLDEST':\n        return this.handleHideOldestAction(action);\n      case 'HIDE_NEWEST':\n        return this.handleHideNewestAction(action);\n      case 'HIDE_ALL':\n        return this.handleHideAllAction();\n      default:\n        return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n          resolve(null); // Ignore unknown action types\n        });\n    }\n  }\n\n  /**\n   * Show a new notification\n   *\n   * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleShowAction(action: NotifierAction): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n      this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n      this.addNotificationToList(new NotifierNotification(action.payload));\n    });\n  }\n\n  /**\n   * Continue to show a new notification (after the notification components is initialized / created / rendered).\n   *\n   * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n   * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n   * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n   * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n   *\n   * @param notification New notification to show\n   */\n  private continueHandleShowAction(notification: NotifierNotification): void {\n\n    // First (which means only one) notification in the list?\n    const numberOfNotifications: number = this.notifications.length;\n    if (numberOfNotifications === 1) {\n      notification.component.show().then(this.tempPromiseResolver); // Done\n    } else {\n\n      const implicitStackingLimit: number = 2;\n\n      // Stacking enabled? (stacking value below 2 means stacking is disabled)\n      if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n        this.notifications[0].component.hide().then(() => {\n          this.removeNotificationFromList(this.notifications[0]);\n          notification.component.show().then(this.tempPromiseResolver); // Done\n        });\n      } else {\n\n        const stepPromises: Array<Promise<undefined>> = [];\n\n        // Are there now too many notifications?\n        if (numberOfNotifications > this.config.behaviour.stacking) {\n\n          const oldNotifications: Array<NotifierNotification> = this.notifications.slice(1, numberOfNotifications - 1);\n\n          // Are animations enabled?\n          if (this.config.animations.enabled) {\n\n            // Is animation overlap enabled?\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n              stepPromises.push(this.notifications[0].component.hide());\n              setTimeout(() => {\n                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              }, this.config.animations.hide.speed - this.config.animations.overlap);\n              setTimeout(() => {\n                stepPromises.push(notification.component.show());\n              }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n            } else {\n              stepPromises.push(new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n                this.notifications[0].component.hide().then(() => {\n                  this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                    notification.component.show().then(resolve);\n                  });\n                });\n              }));\n            }\n\n          } else {\n            stepPromises.push(this.notifications[0].component.hide());\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n            stepPromises.push(notification.component.show());\n          }\n\n        } else {\n\n          const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, numberOfNotifications - 1);\n\n          // Are animations enabled?\n          if (this.config.animations.enabled) {\n\n            // Is animation overlap enabled?\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              setTimeout(() => {\n                stepPromises.push(notification.component.show());\n              }, this.config.animations.shift.speed - this.config.animations.overlap);\n            } else {\n              stepPromises.push(new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                  notification.component.show().then(resolve);\n                });\n              }));\n            }\n\n          } else {\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n            stepPromises.push(notification.component.show());\n          }\n\n        }\n\n        Promise.all(stepPromises).then(() => {\n          if (numberOfNotifications > this.config.behaviour.stacking) {\n            this.removeNotificationFromList(this.notifications[0]);\n          }\n          this.tempPromiseResolver(null);\n        }); // Done\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Hide an existing notification\n   *\n   * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n   * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n   * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n   *\n   * @param   action Action object, payload contains the notification ID\n   * @returns Promise, resolved when done\n   */\n  private handleHideAction(action: NotifierAction): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      const stepPromises: Array<Promise<undefined>> = [];\n\n      // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n      const notification: NotifierNotification | undefined = this.findNotificationById(action.payload);\n      if (notification === undefined) {\n        resolve(null);\n        return;\n      }\n\n      // Get older notifications\n      const notificationIndex: number | undefined = this.findNotificationIndexById(action.payload);\n      if (notificationIndex === undefined) {\n        resolve(null);\n        return;\n      }\n      const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, notificationIndex);\n\n      // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n      if (oldNotifications.length > 0) {\n\n        // Are animations enabled?\n        if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n\n          // Is animation overlap enabled?\n          if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n            stepPromises.push(notification.component.hide());\n            setTimeout(() => {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n            }, this.config.animations.hide.speed - this.config.animations.overlap);\n          } else {\n            notification.component.hide().then(() => {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n            });\n          }\n        } else {\n          stepPromises.push(notification.component.hide());\n          stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n        }\n\n      } else {\n\n        stepPromises.push(notification.component.hide());\n\n      }\n\n      // Wait until both hiding and shifting is done, then remove the notification from the list\n      Promise.all(stepPromises).then(() => {\n        this.removeNotificationFromList(notification);\n        resolve(null); // Done\n      });\n\n    });\n\n  }\n\n  /**\n   * Hide the oldest notification (bridge to handleHideAction)\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleHideOldestAction(action: NotifierAction): Promise<undefined> {\n\n    // Are there any notifications? (prevent accidential errors)\n    if (this.notifications.length === 0) {\n      return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n        resolve(null);\n      }); // Done\n    } else {\n      action.payload = this.notifications[0].id;\n      return this.handleHideAction(action);\n    }\n\n  }\n\n  /**\n   * Hide the newest notification (bridge to handleHideAction)\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleHideNewestAction(action: NotifierAction): Promise<undefined> {\n\n    // Are there any notifications? (prevent accidential errors)\n    if (this.notifications.length === 0) {\n      return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n        resolve(null);\n      }); // Done\n    } else {\n      action.payload = this.notifications[this.notifications.length - 1].id;\n      return this.handleHideAction(action);\n    }\n\n  }\n\n  /**\n   * Hide all notifications at once\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  private handleHideAllAction(): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      // Are there any notifications? (prevent accidential errors)\n      const numberOfNotifications: number = this.notifications.length;\n      if (numberOfNotifications === 0) {\n        resolve(null); // Done\n        return;\n      }\n\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false &&\n        this.config.animations.hide.offset > 0) {\n\n        for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\n          const animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n          setTimeout(() => {\n            this.notifications[i].component.hide().then(() => {\n\n              // Are we done here, was this the last notification to be hidden?\n              if ((this.config.position.vertical.position === 'top' && i === 0) ||\n                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)) {\n                this.removeAllNotificationsFromList();\n                resolve(null); // Done\n              }\n\n            });\n          }, this.config.animations.hide.offset * animationOffset);\n        }\n\n      } else {\n\n        const stepPromises: Array<Promise<undefined>> = [];\n        for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\n          stepPromises.push(this.notifications[i].component.hide());\n        }\n        Promise.all(stepPromises).then(() => {\n          this.removeAllNotificationsFromList();\n          resolve(null); // Done\n        });\n\n      }\n\n    });\n  }\n\n  /**\n   * Shift multiple notifications at once\n   *\n   * @param   notifications List containing the notifications to be shifted\n   * @param   distance      Distance to shift (in px)\n   * @param   toMakePlace   Flag, defining in which direciton to shift\n   * @returns Promise, resolved when done\n   */\n  private shiftNotifications(notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean): Promise<undefined> {\n    return new Promise<undefined>((resolve: (value: PromiseLike<undefined>) => void) => {\n\n      // Are there any notifications to shift?\n      if (notifications.length === 0) {\n        resolve(null);\n        return;\n      }\n\n      const notificationPromises: Array<Promise<undefined>> = [];\n      for (let i: number = notifications.length - 1; i >= 0; i--) {\n        notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n      }\n      Promise.all(notificationPromises).then(resolve as any); // Done\n    });\n  }\n\n  /**\n   * Add a new notification to the list of notifications (triggers change detection)\n   *\n   * @param notification Notification to add to the list of notifications\n   */\n  private addNotificationToList(notification: NotifierNotification): void {\n    this.notifications.push(notification);\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n\n  /**\n   * Remove an existing notification from the list of notifications (triggers change detection)\n   *\n   * @param notification Notification to be removed from the list of notifications\n   */\n  private removeNotificationFromList(notification: NotifierNotification): void {\n    this.notifications =\n      this.notifications.filter((item: NotifierNotification) => item.component !== notification.component);\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n\n  /**\n   * Remove all notifications from the list (triggers change detection)\n   */\n  private removeAllNotificationsFromList(): void {\n    this.notifications = [];\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n\n  /**\n   * Helper: Find a notification in the notification list by a given notification ID\n   *\n   * @param   notificationId Notification ID, used for finding notification\n   * @returns Notification, undefined if not found\n   */\n  private findNotificationById(notificationId: string): NotifierNotification | undefined {\n    return this.notifications.find((currentNotification: NotifierNotification) => currentNotification.id === notificationId);\n  }\n\n  /**\n   * Helper: Find a notification's index by a given notification ID\n   *\n   * @param   notificationId Notification ID, used for finding a notification's index\n   * @returns Notification index, undefined if not found\n   */\n  private findNotificationIndexById(notificationId: string): number | undefined {\n    const notificationIndex: number =\n      this.notifications.findIndex((currentNotification: NotifierNotification) => currentNotification.id === notificationId);\n    return (notificationIndex !== -1 ? notificationIndex : undefined);\n  }\n}\n","<!-- DON'T FORGET TO ADD LINK TO 404 PAGE TOO -->\n\n<div class=\"side-nav\">\n  <div class=\"item logo\">\n    <div class=\"item-icon\">\n      <!-- <img src=\"../../../assets/c-logo.svg?v=1\" class=\"logo-a\"> -->\n    </div>\n    <div class=\"caption\">\n<!--      <img src=\"../../../assets/logo-white.png\" class=\"logo-full\">-->\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"currentUser\">\n    <a class=\"item d-block\" #rlaHome=\"routerLinkActive\" routerLink=\"/dashboard\" routerLinkActive (click)=\"resetSearch()\"\n      smTooltip=\"DASHBOARD\" showDelay=\"0\" matTooltipPosition=\"right\">\n      <div class=\"item-icon\">\n        <i [class]=\"'al-icon al-ico-home al-color ' + (rlaHome.isActive ? 'neon-yellow': 'blue-300')\" ></i>\n      </div>\n      <div class=\"caption\">dashboard</div>\n    </a>\n\n    <a class=\"item d-block\" smTooltip=\"PROJECTS\" showDelay=\"0\" matTooltipPosition=\"right\" routerLink=\"/projects\"\n      [routerLinkActive] #rlaProjects=\"routerLinkActive\">\n      <div class=\"item-icon\">\n        <i [class]=\"'al-icon al-ico-projects al-color ' + (rlaProjects.isActive ? 'neon-yellow': 'blue-300')\" ></i>\n      </div>\n      <div class=\"caption\">projects</div>\n    </a>\n    <a class=\"item d-block\"\n       *smCheckPermission=\"true\"\n       routerLink=\"/workers-and-queues\"\n       routerLinkActive\n       #rlaQueues=\"routerLinkActive\"\n       smTooltip=\"WORKERS & QUEUES\"\n       showDelay=\"0\"\n       matTooltipPosition=\"right\">\n      <div class=\"item-icon\">\n        <i [class]=\"'al-icon al-ico-queues al-color ' + (rlaQueues.isActive ? 'neon-yellow': 'blue-300')\" ></i>\n      </div>\n      <div class=\"caption\">workers & queues</div>\n    </a>\n\n\n    <!-- <a class=\"item d-block\" smTooltip=\"\" showDelay=\"0\" matTooltipPosition=\"right\" routerLink=\"\">\n      <div class=\"item-icon\">\n        <fa-icon [icon]=\"faThList\" [class]=\"'al-icon al-color '\" ></fa-icon>\n      </div>\n      <div class=\"caption\">version control</div>\n    </a>\n    <a class=\"item d-block\" smTooltip=\"\" showDelay=\"0\" matTooltipPosition=\"right\" routerLink=\"\">\n      <div class=\"item-icon\">\n        <fa-icon [icon]=\"faDatabase\" [class]=\"'al-icon al-color '\"></fa-icon>\n      </div>\n      <div class=\"caption\">cloud</div>\n    </a>\n    <a class=\"item d-block\" smTooltip=\"\" showDelay=\"0\" matTooltipPosition=\"right\" routerLink=\"\">\n      <div class=\"item-icon\">\n        <fa-icon [icon]=\"faCodeBranch\" [class]=\"'al-icon al-color '\" ></fa-icon>\n      </div>\n      <div class=\"caption\">comparison</div>\n    </a>\n    <a class=\"item d-block\" smTooltip=\"\" showDelay=\"0\" matTooltipPosition=\"right\" routerLink=\"\">\n      <div class=\"item-icon\">\n        <fa-icon [icon]=\"faFileExcel\" [class]=\"'al-icon al-color '\" ></fa-icon>\n      </div>\n      <div class=\"caption\">comparison</div>\n    </a> -->\n\n\n   \n    \n    \n\n\n  </ng-container>\n  <div *ngIf=\"currentUser\" class=\"account\">\n    <a *ngIf=\"environment.whiteLabelLink\" class=\"item d-block\" target=\"_blank\"\n       [smTooltip]=\"environment.whiteLabelLink.tooltip\" showDelay=\"0\" matTooltipPosition=\"right\"\n       [href]=\"environment.whiteLabelLink.link\">\n      <div class=\"item-icon\"\n           [style.background-image]=\"'url(' + environment.whiteLabelLink.logo + ')'\"\n           style=\"width: 64px; height: 64px\"\n      >\n      </div>\n      <div class=\"caption\">Ignite</div>\n    </a>\n    <!-- <a class=\"item d-block\" href=\"https://github.com/allegroai/clearml\" target=\"_blank\"\n       smTooltip=\"GitHub Repository\" showDelay=\"0\" matTooltipPosition=\"right\">\n      <div class=\"item-icon\">\n        <i class=\"fab fa-github fa-24 al-color blue-300\"></i>\n      </div>\n      <div class=\"caption\">GitHub</div>\n    </a> -->\n  </div>\n</div>\n","import { selectCurrentUser } from './../../webapp-common/core/reducers/users-reducer';\nimport {Component} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectSelectedProjectId} from '../../webapp-common/core/reducers/projects.reducer';\nimport {Observable} from 'rxjs';\nimport {Router} from '@angular/router';\nimport {ConfigurationService} from '../../webapp-common/shared/services/configuration.service';\nimport {SearchDeactivate} from '../../webapp-common/dashboard-search/dashboard-search.actions';\nimport { faCoffee, faBug,  faHatWizard, faFlushed, faBalanceScaleLeft, faDatabase, faCodeBranch, faFileExcel, faThList} from '@fortawesome/free-solid-svg-icons';\n\n\n@Component({\n  selector   : 'sm-side-nav',\n  templateUrl: './side-nav.component.html',\n  styleUrls  : ['./side-nav.component.scss'],\n})\nexport class SideNavComponent {\n  public selectedProjectId$: Observable<any>;\n  currentUser: any;\n  environment = ConfigurationService.globalEnvironment;\n\n\n  constructor(public store: Store<any>, private router: Router) {\n    this.selectedProjectId$ = this.store.select(selectSelectedProjectId);\n    this.store.select(selectCurrentUser).subscribe((res) => this.currentUser = res);\n  }\n\n\n  public resetSearch() {\n    this.store.dispatch(new SearchDeactivate());\n  }\n\n  get guestUser(): boolean {\n    return this.currentUser && this.currentUser?.role === 'guest';\n  }\n  \n  faCoffee = faCoffee;\n  faBug = faBug;\n  faHatWizard = faHatWizard;\n  faFlushed = faFlushed;\n  faBalanceScaleLeft = faBalanceScaleLeft;\n  faDatabase = faDatabase\n  faCodeBranch = faCodeBranch\n  faFileExcel = faFileExcel\n  faThList = faThList\n}\n","<span *ngIf=\"isCommunity && activeWorkspace && !workspaceNeutral\" class=\"breadcrumbLink\">\n  <span class=\"workspace\">{{activeWorkspace.name}}</span>\n  <i class=\"al-icon  al-ico-slash\"></i>\n</span>\n<span *ngFor=\"let crumb of breadcrumbs; let i=index; let last=last\" class=\"breadcrumbLink\" [class.ellipsis]=\"last\">\n  <div *ngIf=\"crumb.isProject;else crumbDiv;\" class=\"d-flex align-items-center\">\n    <div *ngIf=\"subProjects.length>2; else shortTree\" class=\"d-flex align-items-center\">\n      <div [matMenuTriggerFor]=\"subProjectsMenu\" class=\"d-flex align-items-center menu-trigger\"\n           (menuOpened)=\"subProjectsMenuOpened(true)\" (menuClosed)=\"subProjectsMenuOpened(false)\">\n        <i class=\"menu-trigger-icon al-icon msm\" [class.al-ico-d-menu-down]=\"!subProjectsMenuIsOpen\"\n           [class.al-ico-d-menu-up]=\"subProjectsMenuIsOpen\"></i>\n      </div>\n      <div class=\"d-flex\">\n        <i class=\"al-icon al-ico-slash\"></i>\n      </div>\n     <div class=\"d-flex align-items-center\">\n      <a class=\"sub-project\"\n         [routerLink]=\"subProjects[subProjects.length-1].url!=='projects/*/projects'? subProjects[subProjects.length-1].url: null\">{{subProjects[subProjects.length - 1].name}}</a>\n      </div>\n      <mat-menu #subProjectsMenu=\"matMenu\">\n        <div mat-menu-item\n             class=\"sub-project-menu-item\"\n             *ngFor=\"let subProject of subProjects | filterLast\"\n             [routerLink]=\"subProject.url!=='projects/*/projects'? subProject.url: 'projects/*'\">\n          {{subProject.name}}\n        </div>\n      </mat-menu>\n    </div>\n    <ng-template #shortTree>\n    <div *ngFor=\"let subProject of subProjects; let lastP=last\" class=\"d-flex align-items-center\">\n     <ng-container *ngIf=\"subProject.name\">\n        <a class=\"sub-project\"\n           [routerLink]=\"subProject.url!=='projects/*/projects'? subProject.url: 'projects/*/experiments'\">{{subProject.name}}</a>\n        <div *ngIf=\"!lastP\">\n          <i class=\"al-icon al-ico-slash\"></i>\n        </div>\n       </ng-container>\n    </div>\n      </ng-template>\n  </div>\n\n  <ng-template #crumbDiv>\n    <a\n      [routerLink]=\"crumb.url\">{{(['Experiments', 'Models', 'Dataviews'].includes(crumb.name) && isDeep) ? 'All ' : ''}}{{crumb.name}}</a>\n  </ng-template>\n  <i *ngIf=\"!last\" class=\"al-icon  al-ico-slash\"></i>\n</span>\n<div *ngIf=\"checkIfBreadcrumbsInitiated()\">\n  <div\n    #menuTrigger=\"matMenuTrigger\"\n    [matMenuTriggerFor]=\"shareModal\"\n    (menuOpened)=\"openShareModal()\"\n  >\n    <i *ngIf=\"showShareButton && !isCommunity\" class=\"fa fa-share-alt share pointer\" smTooltip=\"Share\"></i>\n  </div>\n  <mat-menu #shareModal=\"matMenu\">\n    <div class=\"share-menu-container\" smClickStopPropagation>\n      <div class=\"d-flex align-items-center justify-content-between top\">\n        <div class=\"share-title\">SHARE VIEW</div>\n        <i class=\"pointer al-icon al-ico-dialog-x al-color blue-400 sm-md close-dialog\"\n           (click)=\"menuTrigger.closeMenu()\" smClickStopPropagation></i>\n      </div>\n      <div class=\"copy-title\">Copy the following URL to share this view with others</div>\n\n      <div class=\"share-link-container\" [class.hidden]=\"!(currentUrl)\">\n        <div class=\"ellipsis share-link\">\n          {{currentUrl}}</div>\n        <div ngxClipboard\n             smClickStopPropagation\n             [cbContent]=\"currentUrl\"\n             class=\"copy pointer\"\n             (cbOnSuccess)=\"copyToClipboardSuccess(); menuTrigger.closeMenu()\">\n          <i class=\"fas fa-copy \"></i>\n        </div>\n      </div>\n    </div>\n  </mat-menu>\n</div>\n","import {ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectRouterConfig} from '../../core/reducers/router-reducer';\nimport {debounceTime, filter} from 'rxjs/operators';\nimport {selectBreadcrumbsStrings} from '../layout.reducer';\nimport {ActivatedRoute} from '@angular/router';\nimport {combineLatest, Subscription} from 'rxjs';\nimport {prepareNames} from '../../../layout/breadcrumbs/breadcrumbs.utils';\nimport {formatStaticCrumb} from './breadcrumbs-common.utils';\nimport {addMessage} from '../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {ConfigurationService} from '../../shared/services/configuration.service';\nimport {GetCurrentUserResponseUserObjectCompany} from '../../../business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {selectIsDeepMode} from '../../core/reducers/projects.reducer';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {getAllSystemProjects} from '@common/core/actions/projects.actions';\nimport {isEqual} from 'lodash/fp';\n\n\nexport interface IBreadcrumbsLink {\n  name?: string;\n  url?: string;\n  subCrumbs?: { name: string; url: string }[];\n  isProject?: boolean;\n}\n\n@Component({\n  selector: 'sm-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss']\n})\nexport class BreadcrumbsComponent implements OnInit, OnDestroy {\n  public breadcrumbs: Array<IBreadcrumbsLink> = [];\n  private routeConfig: Array<string> = [];\n  private breadcrumbsStrings;\n  private breadcrumbsSubscription: Subscription;\n  public currentUrl: string;\n  public showShareButton: boolean = false;\n  public isCommunity: boolean;\n\n  @Input() activeWorkspace: GetCurrentUserResponseUserObjectCompany;\n  private confSub: Subscription;\n  private isDeepSub: Subscription;\n  public workspaceNeutral: boolean;\n  private isDeep$: Observable<boolean>;\n  public isDeep: boolean;\n  public subProjectsMenuIsOpen: boolean;\n  private previousProjectNames: any;\n\n  constructor(private store: Store<any>, public route: ActivatedRoute, private configService: ConfigurationService, private cd: ChangeDetectorRef) {\n    this.isDeep$ = this.store.select(selectIsDeepMode);\n  }\n\n  ngOnInit() {\n\n    this.confSub = this.configService.globalEnvironmentObservable.subscribe(env => this.isCommunity = env.communityServer);\n\n    this.isDeepSub = this.isDeep$.subscribe(isDeep => {\n      this.isDeep = isDeep;\n      this.cd.detectChanges();\n    });\n\n    this.breadcrumbsSubscription = combineLatest([\n      this.store.select(selectRouterConfig),\n      this.store.select(selectBreadcrumbsStrings)\n    ]).pipe(\n      debounceTime(10),\n      filter(([config, names]) => !!names)\n    ).subscribe(([config, names]) => {\n      this.routeConfig = config;\n      this.breadcrumbsStrings = prepareNames(names);\n      if (!isEqual(this.previousProjectNames, this.breadcrumbsStrings[':projectId'].subCrumbs) &&\n          this.breadcrumbsStrings[':projectId'].subCrumbs?.map(project => project.name).includes(undefined)) {\n        this.previousProjectNames = this.breadcrumbsStrings[':projectId'].subCrumbs;\n        this.store.dispatch(getAllSystemProjects());\n      }\n      this.refreshBreadcrumbs();\n      let route = this.route.snapshot;\n      let hide = false;\n      while (route.firstChild) {\n        route = route.firstChild;\n        if (route.data.workspaceNeutral !== undefined) {\n          hide = route.data.workspaceNeutral;\n        }\n      }\n      this.workspaceNeutral = hide;\n    });\n  }\n\n  ngOnDestroy() {\n    this.breadcrumbsSubscription.unsubscribe();\n    this.confSub?.unsubscribe();\n    this.isDeepSub?.unsubscribe();\n  }\n\n  private refreshBreadcrumbs(): Array<IBreadcrumbsLink> {\n    if (!this.routeConfig) {\n      return;\n    }\n\n    this.breadcrumbs = this.routeConfig\n      .reduce((acc, config) => {\n        const name = this.getRouteName(config);\n        const id = this.getRouteId(config);\n        const previous = acc.slice(-1)[0]; // get the last item in the array\n        const previousUrl = previous ? previous.url : '';\n        const isProject = config === ':projectId';\n        return acc.concat({name: name, url: previousUrl + '/' + id, isProject});\n      }, [{url: '', name: '', isProject: true}])\n      .filter((i) => !!i.name);\n    const rootCrumb = formatStaticCrumb(this.routeConfig[0]);\n    this.breadcrumbs = [rootCrumb, ...this.breadcrumbs];\n    // this.showShareButton = !(this.routeConfig.includes('login') || this.routeConfig.includes('dashboard'));\n  }\n\n  private getRouteName(config: string) {\n    return (Object.keys(this.breadcrumbsStrings).includes(config)) ? this.breadcrumbsStrings[config].name : '';\n  }\n\n  private getRouteId(config: string) {\n    return (Object.keys(this.breadcrumbsStrings).includes(config)) ? this.breadcrumbsStrings[config].url : config;\n  }\n\n  openShareModal() {\n    this.currentUrl = window.location.href;\n  }\n\n  copyToClipboardSuccess() {\n    this.store.dispatch(addMessage(MESSAGES_SEVERITY.SUCCESS, 'URL copied successfully'));\n  }\n\n  checkIfBreadcrumbsInitiated() {\n    return this.breadcrumbs && this.routeConfig && this.breadcrumbs.length <= this.routeConfig.length;\n  }\n\n  get subProjects() {\n    return this.breadcrumbsStrings[':projectId'].subCrumbs;\n  }\n\n  subProjectsMenuOpened(b: boolean) {\n    this.subProjectsMenuIsOpen = b;\n  }\n}\n","<span class=\"search-container\" [ngClass]=\"{'open': isSearching$ | async}\">\n  <sm-search\n    class=\"search-header\"\n    [value]=\"(searchQuery$ | async)?.query\"\n    [placeholder]=\"searchPlaceholder$ | async\"\n    [hideIcons]=\"true\"\n    [minimumChars]=\"minChars\"\n    (valueChanged)=\"onSearchValueChanged($event)\"\n    (focusout)=\"onSearchFocusOut()\"\n  >\n    <i\n      class=\"regexp al-ico-regex pointer\"\n      smClickStopPropagation\n      [smTooltip]=\"'Regex'\" [matTooltipPosition]=\"'below'\"\n      [class.active]=\"regExp\"\n      (click)=\"toggleRegExp()\"></i>\n  </sm-search>\n</span>\n<ng-container *ngIf=\"searchActive\">\n  <i *ngIf=\"(isSearching$ | async); else searchIcon\" class=\"fa fa-times pointer\" (click)=\"clearSearch()\" smClickStopPropagation></i>\n  <ng-template #searchIcon>\n    <i class=\"fa fa-search pointer\" (click)=\"openSearch()\"></i>\n  </ng-template>\n</ng-container>\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router, NavigationEnd} from '@angular/router';\nimport {Store} from '@ngrx/store';\nimport {SetIsSearching, setSearchQuery} from '../../common-search.actions';\nimport {ICommonSearchState, selectIsSearching, selectPlaceholder, selectSearchQuery} from '../../common-search.reducer';\nimport {Observable} from 'rxjs';\nimport {debounceTime, filter, tap} from 'rxjs/operators';\nimport {SearchComponent} from '../../../shared/ui-components/inputs/search/search.component';\n\n@Component({\n  selector   : 'sm-common-search',\n  templateUrl: './common-search.component.html',\n  styleUrls  : ['./common-search.component.scss']\n})\nexport class CommonSearchComponent implements OnInit {\n  public searchQuery$: Observable<ICommonSearchState['searchQuery']>;\n  public isSearching$: Observable<boolean>;\n  public searchPlaceholder$: Observable<string>;\n  public searchActive: boolean;\n\n\n\n  @ViewChild(SearchComponent) searchElem: SearchComponent;\n  public regExp: boolean = false;\n  private closeTimer: number;\n  private queryString: string;\n  minChars = 3;\n\n  constructor(private store: Store<any>, private router: Router, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.searchQuery$       = this.store.select(selectSearchQuery).pipe(tap(searchQuery => this.regExp = searchQuery?.regExp));\n    this.isSearching$       = this.store.select(selectIsSearching);\n    this.searchPlaceholder$ = this.store.select(selectPlaceholder).pipe(debounceTime(0));\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => {\n        this.setSearchActive();\n      });\n    setTimeout(this.setSearchActive.bind(this));\n  }\n\n  onSearchValueChanged(query) {\n    this.queryString = query;\n    this.store.dispatch(setSearchQuery({query, regExp: this.regExp}));\n  }\n\n  openSearch() {\n    window.clearTimeout(this.closeTimer);\n    this.searchElem.searchBarInput.nativeElement.focus();\n    this.store.dispatch(new SetIsSearching(true));\n  }\n\n  onSearchFocusOut() {\n    if (!this.searchElem.searchBarInput.nativeElement.value) {\n      this.closeTimer = window.setTimeout(() => this.store.dispatch(new SetIsSearching(false)), 200);\n    }\n  }\n\n  private setSearchActive() {\n    let route      = this.route.snapshot;\n    let showSearch = false;\n    while (route.firstChild) {\n      route = route.firstChild;\n      if (route.data.search !== undefined) {\n        showSearch = route.data.search;\n      }\n    }\n    this.searchActive = showSearch;\n  }\n\n  clearSearch() {\n    this.searchElem.clear();\n    this.store.dispatch(new SetIsSearching(false));\n    document.body.focus();\n  }\n\n  toggleRegExp() {\n    this.regExp = !this.regExp;\n    window.clearTimeout(this.closeTimer);\n    if (this.queryString?.length >= this.minChars) {\n      this.store.dispatch(setSearchQuery({query: this.queryString, regExp: this.regExp}));\n    }\n  }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'sm-header-user-menu-actions',\n  templateUrl: './header-user-menu-actions.component.html',\n  styleUrls: ['./header-user-menu-actions.component.scss']\n})\nexport class HeaderUserMenuActionsComponent {\n\n  constructor() {}\n}\n","<div class=\"header-container\" [class.login]=\"isLogin\">\n  <div class=\"d-flex align-items-center\">\n    <sm-breadcrumbs\n      class=\"spacer\"\n      [class.share-view]=\"isShareMode\"\n      [activeWorkspace]=\"activeWorkspace\">\n    </sm-breadcrumbs>\n    <div class=\"ml-3 d-flex align-items-center\" *ngIf=\"userFocus\">\n      <sm-show-only-user-work></sm-show-only-user-work>\n    </div>\n  </div>\n\n  <div  class=\"logo-full middle\"\n       [class.make-room-for-slogan]=\"environment.whiteLabelSlogan\">\n    <img [src]=\"environment?.branding?.logo\" width=\"122\" height=\"42\">\n    <div *ngIf=\"environment.whiteLabelSlogan\" class=\"slogan\">{{environment.whiteLabelSlogan}}</div>\n  </div>\n  <div *ngIf=\"isLogin && environment.whiteLabelLogo\" class=\"logo-full\">\n    <img [src]=\"environment?.branding?.logo\" width=\"122\" height=\"42\">\n  </div>\n  <div *ngIf=\"isLogin\" class=\"spacer\"></div>\n\n  <div class=\"right-buttons\">\n    <sm-common-search [class.share-view]=\"isShareMode\"></sm-common-search>\n\n    <a class=\"pointer resources-trigger\"\n       menuTrigger=\"matMenuTrigger\"\n       [matMenuTriggerFor]=\"resourcesMenu\"\n       showDelay=\"0\" matTooltipPosition=\"below\">\n      <i class=\"far al-ico-help-outlined\"></i>\n    </a>\n    <a class=\"pointer menu-trigger position-relative\"\n       menuTrigger=\"matMenuTrigger\"\n       [matMenuTriggerFor]=\"profileMenu\"\n       showDelay=\"0\" matTooltipPosition=\"below\">\n      <img class=\"avatar\" *ngIf=\"(user | async).avatar; else iconAvatar\" [src]=\"(user | async).avatar\">\n      <ng-template #iconAvatar>\n        <div class=\"user-icon\">\n          <i class=\"al-icon al-ico-account sm-md\"></i>\n        </div>\n      </ng-template>\n      <div *ngIf=\"userNotificationPath || (invitesPending$ | async)?.length\" class=\"user-notification\"></div>\n    </a>\n\n    <mat-menu #profileMenu=\"matMenu\" class=\"user-menu\">\n      <button mat-menu-item [routerLink]=\"'settings/' + userNotificationPath\">\n        <span class=\"al-icon icon sm-md\" [class]=\"userNotificationPath ? 'al-ico-settings-alert' : 'al-ico-settings'\">\n          <span class=\"path1\"></span><span class=\"path2\"></span>\n        </span>\n        Settings\n      </button>\n      <sm-header-user-menu-actions></sm-header-user-menu-actions>\n      <button mat-menu-item (click)=\"logout()\">\n        <span class=\"al-ico-logout al-icon icon sm-md\"></span>\n        Logout\n      </button>\n    </mat-menu>\n\n    <mat-menu #resourcesMenu=\"matMenu\" class=\"user-menu\">\n      <button mat-menu-item *ngIf=\"environment.slackLink\">\n        <a class=\"item\" target=\"_blank\"\n           [href]=\"environment.slackLink\">\n          <i class=\"al-icon al-ico-slack sm-md\"></i>Community on Slack\n        </a>\n      </button>\n      <button mat-menu-item>\n        <a class=\"item\" [href]=\"environment.docsLink\" target=\"_blank\">\n          <i class=\"al-icon sm-md al-ico-documentation\"></i>ClearML Documentation\n        </a>\n      </button>\n      <button mat-menu-item>\n        <a class=\"item\" href=\"https://www.youtube.com/c/ClearML/featured\" target=\"_blank\">\n          <i class=\"al-icon al-ico-youtube sm-md\"></i>ClearML on Youtube\n        </a>\n      </button>\n      <button mat-menu-item (click)=\"openTip()\">\n        <i class=\"al-icon sm-md al-ico-tips\"></i>Pro Tips\n      </button>\n      <button mat-menu-item>\n        <a class=\"item\" href=\"\" (click)=\"openWelcome($event)\">\n          <i class=\"al-icon sm-md al-ico-setup\"></i>ClearML Python Package setup\n        </a>\n      </button>\n      <ng-container *smCheckPermission=\"'applications'\">\n        <button mat-menu-item *ngIf=\"$any(environment)?.appsYouTubeIntroLink && $any(environment).appAwarenessMenu !== false\">\n          <a class=\"item\" (click)=\"openAppsAwareness($event, $any(environment)?.appsYouTubeIntroLink)\">\n            <i class=\"al-icon sm-md al-ico-applications\"></i>ClearML Apps Introduction\n          </a>\n        </button>\n      </ng-container>\n\n      <button mat-menu-item>\n        <a class=\"item\" href=\"https://www.clear.ml/contact-us/\" target=\"_blank\">\n          <i class=\"al-icon sm-md al-ico-email\"></i>Contact Us\n        </a>\n      </button>\n    </mat-menu>\n  </div>\n</div>\n<ng-content></ng-content>\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {selectActiveWorkspace, selectCurrentUser} from '../../core/reducers/users-reducer';\nimport {Observable, Subscription} from 'rxjs';\nimport {logout} from '../../core/actions/users.actions';\nimport {addMessage, openAppsAwarenessDialog} from '../../core/actions/layout.actions';\nimport {MESSAGES_SEVERITY} from '~/app.constants';\nimport {MatDialog} from '@angular/material/dialog';\nimport {GetCurrentUserResponseUserObject} from '~/business-logic/model/users/getCurrentUserResponseUserObject';\nimport {ConfigurationService} from '../../shared/services/configuration.service';\nimport {GetCurrentUserResponseUserObjectCompany} from '~/business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {filter} from 'rxjs/operators';\nimport {selectRouterUrl} from '../../core/reducers/router-reducer';\nimport {TipsService} from '../../shared/services/tips.service';\nimport {WelcomeMessageComponent} from '../../dashboard/dumb/welcome-message/welcome-message.component';\nimport {ActivatedRoute, NavigationEnd, Router} from '@angular/router';\nimport {LoginService} from '~/shared/services/login.service';\nimport {selectUserSettingsNotificationPath} from '~/core/reducers/view.reducer';\nimport {selectInvitesPending} from '~/core/reducers/users.reducer';\n\n@Component({\n  selector: 'sm-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  @Input() isShareMode: boolean;\n  @Input() isLogin: boolean;\n  isDashboard: boolean;\n  profile: boolean;\n  userFiltered: boolean;\n  userFocus: boolean;\n  environment = ConfigurationService.globalEnvironment;\n  public user: Observable<GetCurrentUserResponseUserObject>;\n  public activeWorkspace: GetCurrentUserResponseUserObjectCompany;\n  public url: Observable<string>;\n  public userNotificationPath$: Observable<string>;\n  public invitesPending$: Observable<any[]>;\n  private sub = new Subscription();\n  public userNotificationPath: string;\n\n  constructor(\n    private store: Store<any>,\n    private dialog: MatDialog,\n    private tipsService: TipsService,\n    private loginService: LoginService,\n    private router: Router,\n    private activeRoute: ActivatedRoute\n\n  ) {\n    this.url = this.store.select(selectRouterUrl);\n    this.user = this.store.select(selectCurrentUser);\n    this.sub.add(this.store.select(selectUserSettingsNotificationPath).subscribe(path => this.userNotificationPath = path));\n    this.invitesPending$ = this.store.select(selectInvitesPending);\n    this.sub.add(this.store.select(selectActiveWorkspace)\n      .pipe(filter(workspace => !!workspace))\n      .subscribe(workspace => {\n        this.activeWorkspace = workspace;\n      }));\n\n    this.sub.add(this.router.events\n    .pipe(filter((event) => event instanceof NavigationEnd))\n    .subscribe(() => this.getRotueData()));\n\n  }\n\n  ngOnInit(): void {\n    this.getRotueData();\n  }\n\n  getRotueData() {\n    this.userFocus = !!this.activeRoute?.firstChild?.snapshot.data?.userFocus;\n    this.isDashboard = this.activeRoute?.firstChild?.snapshot.url?.[0].path === 'dashboard';\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  logout() {\n    this.loginService.clearLoginCache();\n    this.store.dispatch(logout({}));\n  }\n\n  copyToClipboardSuccess() {\n    this.store.dispatch(addMessage(MESSAGES_SEVERITY.SUCCESS, 'URL copied successfully'));\n  }\n\n  openTip() {\n    this.tipsService.showTipsModal(null, true);\n  }\n\n  openWelcome(event: MouseEvent) {\n    event.preventDefault();\n    this.dialog.open(WelcomeMessageComponent, {data: {step: 2}});\n  }\n\n  openAppsAwareness($event: MouseEvent, appsYouTubeIntroLink: string) {\n    $event.preventDefault();\n    this.store.dispatch(openAppsAwarenessDialog({appsYouTubeIntroLink}));\n  }\n}\n","<sm-update-notifier #update\n                    [availableUpdates]=\"!hideUpdate && (updatesAvailable$ | async)\"\n                    [currentUser]=\"currentUser\"\n                    [dismissedVersion]=\"serverUpdatesService.lastDismissedVersion\"\n                    (versionDismissed)=\"versionDismissed($event)\"\n                    (notifierActive)=\"notifierActive($event)\">\n</sm-update-notifier>\n<sm-color-picker-wrapper id=\"color-picker-outlet\"></sm-color-picker-wrapper>\n<sm-server-notification-dialog-container></sm-server-notification-dialog-container>\n<sm-spinner></sm-spinner>\n<sm-side-nav *ngIf=\"currentUser\"></sm-side-nav>\n<div class=\"app-container\" [class.login-page]=\"!currentUser\"\n     [class.notifier-open]=\"update?.active\">\n  <sm-header *ngIf=\"currentUser\" [isLogin]=\"isLoginContext\"\n             [isShareMode]=\"isSharedAndNotOwner$ | async\"></sm-header>\n  <router-outlet class=\"main-router\"></router-outlet>\n</div>\n<notifier-container></notifier-container>\n","import {ApiUsersService} from './business-logic/api-services/users.service';\nimport {selectCurrentUser} from '@common/core/reducers/users-reducer';\nimport {Component, OnDestroy, OnInit, ViewEncapsulation, HostListener, Renderer2, Injector} from '@angular/core';\nimport {ActivatedRoute, NavigationEnd, Router, Params, RouterEvent} from '@angular/router';\nimport {Title} from '@angular/platform-browser';\nimport {selectLoggedOut} from '@common/core/reducers/view.reducer';\nimport {Store} from '@ngrx/store';\nimport {get} from 'lodash/fp';\nimport {selectRouterParams, selectRouterUrl} from '@common/core/reducers/router-reducer';\nimport {ApiProjectsService} from './business-logic/api-services/projects.service';\nimport {Project} from './business-logic/model/projects/project';\nimport {getAllSystemProjects, setSelectedProjectId, updateProject} from '@common/core/actions/projects.actions';\nimport {selectSelectedProject} from '@common/core/reducers/projects.reducer';\nimport {MatDialog} from '@angular/material/dialog';\nimport {getTutorialBucketCredentials} from '@common/core/actions/common-auth.actions';\nimport {termsOfUseAccepted} from '@common/core/actions/users.actions';\nimport {distinctUntilChanged, filter, map, tap} from 'rxjs/operators';\nimport * as routerActions from './webapp-common/core/actions/router.actions';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\nimport {selectBreadcrumbsStrings} from '@common/layout/layout.reducer';\nimport {prepareNames} from './layout/breadcrumbs/breadcrumbs.utils';\nimport {formatStaticCrumb} from '@common/layout/breadcrumbs/breadcrumbs-common.utils';\nimport {ServerUpdatesService} from '@common/shared/services/server-updates.service';\nimport {selectAvailableUpdates} from './core/reducers/view.reducer';\nimport {UPDATE_SERVER_PATH} from './app.constants';\nimport {firstLogin, plotlyReady, setScaleFactor, visibilityChanged} from '@common/core/actions/layout.actions';\nimport {UiUpdatesService} from '@common/shared/services/ui-updates.service';\nimport {UsageStatsService} from './core/services/usage-stats.service';\nimport {dismissSurvey} from './core/actions/layout.actions';\nimport {getScaleFactor} from '@common/shared/utils/shared-utils';\nimport {User} from './business-logic/model/users/user';\nimport {ConfigurationService} from '@common/shared/services/configuration.service';\nimport {GoogleTagManagerService} from 'angular-google-tag-manager';\nimport {selectIsSharedAndNotOwner} from './features/experiments/reducers';\nimport {TipsService} from '@common/shared/services/tips.service';\nimport {USER_PREFERENCES_KEY} from '@common/user-preferences';\n\n@Component({\n  selector: 'sm-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  public loggedOut$: Observable<any>;\n  public activeFeature: string;\n  private urlSubscription: Subscription;\n  public selectedProject$: Observable<Project>;\n  public projectId: string;\n  public isWorkersContext: boolean;\n  public updatesAvailable$: Observable<any>;\n  private selectedProjectFromUrl$: Observable<string>;\n  private breadcrumbsSubscription: Subscription;\n  private selectedCurrentUserSubscription: Subscription;\n  private breadcrumbsStrings;\n  private selectedCurrentUser$: Observable<any>;\n  public showNotification: boolean = true;\n  public showSurvey$: Observable<boolean>;\n  public demo = ConfigurationService.globalEnvironment.demo;\n  public isLoginContext: boolean;\n  public currentUser: User;\n  private gtmService;\n  public isSharedAndNotOwner$: Observable<boolean>;\n  private activeWorkspace: string;\n  public hideUpdate: boolean;\n  public showSurvey: boolean;\n  private plotlyURL: string;\n\n  @HostListener('document:visibilitychange') onVisibilityChange() {\n    this.store.dispatch(visibilityChanged({visible: !document.hidden}));\n  }\n\n  @HostListener('window:beforeunload', ['$event'])\n  beforeunloadHandler() {\n    window.localStorage.setItem('lastWorkspace', this.activeWorkspace);\n  }\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private titleService: Title,\n    private store: Store<any>,\n    private projectsApi: ApiProjectsService,\n    private userService: ApiUsersService,\n    public serverUpdatesService: ServerUpdatesService,\n    private uiUpdatesService: UiUpdatesService,\n    private tipsService: TipsService,\n    private matDialog: MatDialog,\n    private userStats: UsageStatsService,\n    private renderer: Renderer2,\n    private injector: Injector,\n    private configService: ConfigurationService\n  ) {\n    this.loggedOut$ = store.select(selectLoggedOut);\n    this.isSharedAndNotOwner$ = this.store.select(selectIsSharedAndNotOwner);\n    this.selectedProject$ = this.store.select(selectSelectedProject);\n    this.updatesAvailable$ = this.store.select(selectAvailableUpdates);\n    this.selectedCurrentUser$ = this.store.select(selectCurrentUser);\n    this.selectedProjectFromUrl$ = this.store.select(selectRouterParams)\n      .pipe(\n        filter((params: Params) => !!params),\n        map(params => get('projectId', params) || null)\n      );\n\n    if (ConfigurationService.globalEnvironment.GTM_ID) {\n      this.gtmService = injector.get(GoogleTagManagerService);\n    }\n  }\n\n  ngOnInit(): void {\n    this.configService.globalEnvironmentObservable.subscribe(env => {\n      this.hideUpdate = env.hideUpdateNotice;\n      this.showSurvey = env.showSurvey;\n      this.plotlyURL = env.plotlyURL;\n    });\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(\n        (item: RouterEvent) => {\n          const gtmTag = {\n            event: 'page',\n            pageName: item.url\n          };\n          this.gtmService?.pushTag(gtmTag);\n          this.store.dispatch(new routerActions.NavigationEnd());\n          this.updateTitle();\n        });\n\n    this.selectedCurrentUserSubscription = this.selectedCurrentUser$.pipe(\n      tap(user => this.currentUser = user), // should not be filtered\n      filter(user => !!user?.id),\n      distinctUntilChanged((prev, next) => prev?.id === next?.id)\n    )\n    .subscribe(() => {\n        this.store.dispatch(getAllSystemProjects());\n        this.store.dispatch(getTutorialBucketCredentials());\n        this.store.dispatch(termsOfUseAccepted());\n        this.uiUpdatesService.checkForUiUpdate();\n        this.tipsService.initTipsService(false);\n        this.serverUpdatesService.checkForUpdates(UPDATE_SERVER_PATH);\n        let loginTime = parseInt(localStorage.getItem(USER_PREFERENCES_KEY.firstLogin) || '0', 10);\n        if (!loginTime) {\n          this.store.dispatch(firstLogin({first: true}));\n          loginTime = Date.now();\n          localStorage.setItem(USER_PREFERENCES_KEY.firstLogin, `${loginTime}`);\n        }\n    });\n\n    this.selectedProjectFromUrl$.subscribe((projectId: string) => {\n      this.store.dispatch(setSelectedProjectId({projectId}));\n    });\n\n    this.urlSubscription = combineLatest([this.store.select(selectRouterUrl), this.store.select(selectRouterParams)])\n      .subscribe(([url, params]) => {\n        this.projectId = get('projectId', params);\n        this.isLoginContext = url && url.includes('login');\n        this.isWorkersContext = url && url.includes('workers-and-queues');\n        if (this.projectId) {\n          try { // TODO: refactor to a better solution after all navbar are declared...\n            this.activeFeature = url.split(this.projectId)[1].split('/')[1];\n          } catch (e) {\n\n          }\n        }\n      });\n\n    this.breadcrumbsSubscription = this.store.select(selectBreadcrumbsStrings)\n      .pipe(filter(names => !!names))\n      .subscribe(\n        (names) => {\n          this.breadcrumbsStrings = prepareNames(names);\n          this.updateTitle();\n        }\n      );\n    if (window.localStorage.getItem('disableHidpi') !== 'true') {\n      this.setScale();\n    }\n\n    this.loadPlotly();\n  }\n\n  private setScale() {\n    const dimensionRatio = getScaleFactor();\n    this.store.dispatch(setScaleFactor({scale: dimensionRatio}));\n    const scale = 100 / dimensionRatio;\n    this.renderer.setStyle(document.body, 'transform', `scale(${scale})`);\n    this.renderer.setStyle(document.body, 'transform-origin', '0 0');\n    this.renderer.setStyle(document.body, 'height', `${dimensionRatio}vh`);\n    this.renderer.setStyle(document.body, 'width', `${dimensionRatio}vw`);\n  }\n\n  nameChanged(name) {\n    this.store.dispatch(updateProject({id: this.projectId, changes: {name}}));\n  }\n\n  ngOnDestroy(): void {\n    this.urlSubscription.unsubscribe();\n    this.breadcrumbsSubscription.unsubscribe();\n    this.selectedCurrentUserSubscription.unsubscribe();\n  }\n\n  changeRoute(feature) {\n    return this.router.navigateByUrl('projects/' + this.projectId + '/' + feature);\n  }\n\n  backToProjects() {\n    return this.router.navigateByUrl('projects');\n  }\n\n  updateTitle() {\n    let route = this.route.snapshot.firstChild;\n    let routeConfig = [];\n\n    while (route) {\n      const path = route.routeConfig.path.split('/').filter((item) => !!item);\n      routeConfig = routeConfig.concat(path);\n      route = route.firstChild;\n    }\n    const crumbs = routeConfig\n      .reduce((acc, config) => {\n        const dynamicCrumb = this.breadcrumbsStrings[config];\n        return acc.concat(dynamicCrumb ? dynamicCrumb.name : formatStaticCrumb(config).name);\n      }, [''])\n      .filter(name => !!name);\n    this.titleService.setTitle(`Wide - ${crumbs.join(' / ')}`);\n  }\n\n  versionDismissed(version: string) {\n    this.serverUpdatesService.setDismissedVersion(version);\n  }\n\n  notifierActive(show: boolean) {\n    this.showNotification = show;\n  }\n\n  dismissSurvey() {\n    this.store.dispatch(dismissSurvey());\n\n  }\n\n  get guestUser(): boolean {\n    return !this.currentUser || this.currentUser?.role === 'guest';\n  }\n\n  public loadPlotly(): void {\n    const init = () => {\n      const script: HTMLScriptElement = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = this.plotlyURL;\n      script.onerror = () => console.error(`Error loading plotly.js library from ${this.plotlyURL}`);\n      script.crossOrigin = 'use-credentials';\n\n      const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n      head.appendChild(script);\n\n      let counter = 600;\n\n      const fn = () => {\n        const plotly = (window as any).Plotly;\n        if (plotly) {\n          this.store.dispatch(plotlyReady());\n        } else if (counter > 0) {\n          counter --;\n          setTimeout(fn, 100);\n        } else {\n          throw new Error(`Error loading plotly.js library from ${this.plotlyURL}. Timeout.`);\n        }\n      };\n\n      fn();\n    };\n\n    setTimeout(init);\n  }\n}\n","import {Routes} from '@angular/router';\n/*\nimport {AdminComponent} from '@common/settings/admin/admin.component';\n*/\nimport {ProjectRedirectGuardGuard} from '@common/shared/guards/project-redirect.guard';\n\n\nexport const routes: Routes = [\n  {path: '', redirectTo: 'dashboard', pathMatch: 'full'},\n  {path: 'admin', redirectTo: 'settings', pathMatch: 'full'},\n  {\n    path: 'dashboard',\n    loadChildren: () => import('./features/dashboard/dashboard.module').then(m => m.DashboardModule),\n    data: {search: true},\n  },\n  {\n    path: 'projects',\n    loadChildren: () => import('./features/projects/projects.module').then(m => m.ProjectsModule),\n    data: {search: true},\n  },\n  {path: 'login', loadChildren: () => import('./features/login/login.module').then(m => m.LoginModule)},\n  {\n    path: 'settings',\n    loadChildren: () => import('./features/settings/settings.module').then(m => m.SettingsModule),\n    data: {search: false, workspaceNeutral: false, },\n  },\n\n  {\n    path: 'projects',\n    data: {search: true},\n    children: [\n      {path: '', redirectTo: '*', pathMatch: 'full'},\n      {\n        path: ':projectId',\n        data: {search: true},\n        children: [\n          {path: '', pathMatch: 'full', children: [], canActivate: [ProjectRedirectGuardGuard]},\n          {path: '', redirectTo: '*', pathMatch: 'full'},\n          {path: 'overview', loadChildren: () => import('./webapp-common/project-info/project-info.module').then(m => m.ProjectInfoModule)},\n          {path: 'projects', loadChildren: () => import('./features/projects/projects.module').then(m => m.ProjectsModule)},\n          {path: 'experiments', loadChildren: () => import('./features/experiments/experiments.module').then(m => m.ExperimentsModule)},\n          {path: 'models', loadChildren: () => import('./webapp-common/models/models.module').then(m => m.ModelsModule)},\n          {\n            path: 'compare-experiments',\n            loadChildren: () => import('./webapp-common/experiments-compare/experiments-compare.module').then(m => m.ExperimentsCompareModule),\n            data: {search: false}\n          },\n        ]\n      },\n    ]\n  },\n  {path: 'workers-and-queues', loadChildren: () => import('./features/workers-and-queues/workers-and-queues.module').then(m => m.WorkersAndQueuesModule)},\n  {path: '404', loadChildren: () => import('./features/not-found/not-found.module').then(m => m.NotFoundModule)},\n  {path: '**', loadChildren: () => import('./features/not-found/not-found.module').then(m => m.NotFoundModule)},\n\n];\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {selectSelectedMetricVariantForCurrProject, selectSelectedProject} from '../../core/reducers/projects.reducer';\nimport {Project} from '../../../business-logic/model/projects/project';\nimport {filter, map, withLatestFrom} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectRedirectGuardGuard implements CanActivate {\n  private selectedProject$: Observable<Project>;\n\n  constructor(private store: Store, private router: Router) {\n    this.selectedProject$ = this.store.select(selectSelectedProject);\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.selectedProject$.pipe(\n      filter(project => project?.id === route.params.projectId),\n      withLatestFrom(this.store.select(selectSelectedMetricVariantForCurrProject)),\n      map(([project, metVar]) => this.router.parseUrl(`projects/${project.id}/${(project.description || metVar) ? 'overview' : 'experiments'}`)));\n  }\n\n}\n","<div class=\"w-100\">\n  <div [innerHTML]=\"header\"></div>\n</div>\n<div class=\"container\">\n  <ng-form #S3NGForm=\"ngForm\">\n    <mat-form-field class=\"w-100\" *ngIf=\"!isAzure\">\n      <mat-label>Key</mat-label>\n      <input matInput type=\"text\" name=\"Key\" required placeholder=\"Key\" [(ngModel)]=\"S3Form.Key\" #keyInput=\"ngModel\"\n             autocomplete=\"off\">\n      <mat-error *ngIf=\"keyInput.errors?.required\">*Required</mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"w-100\">\n      <mat-label>Secret</mat-label>\n      <input matInput [(ngModel)]=\"S3Form.Secret\" type=\"text\" name=\"Secret\" required #secretInput=\"ngModel\"\n             autocomplete=\"off\"\n             [placeholder]=\"isAzure ? 'Shared access signature (SAS)' : 'Secret'\">\n      <mat-error *ngIf=\"secretInput.errors?.required\">*Required</mat-error>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"!isAzure\" class=\"w-100\">\n      <mat-label>Region</mat-label>\n      <input matInput [(ngModel)]=\"S3Form.Region\" type=\"text\" name=\"Region\" placeholder=\"AWS Region (e.g. us-east-2)\"\n             autocomplete=\"off\">\n    </mat-form-field>\n    <mat-form-field *ngIf=\"(!isAzure) && endpoint\" class=\"w-100\">\n      <mat-label>Endpoint</mat-label>\n      <input matInput [(ngModel)]=\"S3Form.Endpoint\" type=\"text\" name=\"Endpoint\" autocomplete=\"off\"\n             placeholder=\"Host (Endpoint)\">\n    </mat-form-field>\n    <div class=\"w-100 d-flex justify-content-center\">\n      <button class=\"btn btn-neon\" (click)=\"S3NGForm.form.markAllAsTouched(); saveNewCredentials()\"\n              [disabled]=\"(!saveEnabled) || (formIsSubmitted && S3NGForm.invalid)\">Save Credentials\n      </button>\n\n    </div>\n  </ng-form>\n</div>\n","import {Component, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {FormBuilder, FormControl, FormGroup, NgForm} from '@angular/forms';\nimport {EventEmitter} from '@angular/core';\n\n@Component({\n  selector   : 'sm-s3-access-dialog',\n  templateUrl: './s3-access-dialog.component.html',\n  styleUrls  : ['./s3-access-dialog.component.scss']\n})\nexport class S3AccessDialogComponent implements OnChanges {\n  @ViewChild('S3NGForm', {static: true}) S3NGForm: NgForm;\n\n  public S3Form;\n  @Input() isAzure;\n  @Input() key;\n  @Input() secret                          = '';\n  @Input() region                          = '';\n  @Input() bucket;\n  @Input() endpoint;\n  @Input() editMode                        = false;\n  @Input() header;\n\n  @Output() closeCancel: EventEmitter<any> = new EventEmitter();\n  @Output() closeSave: EventEmitter<any>   = new EventEmitter<any>();\n  @Input() saveEnabled = true;\n  public formIsSubmitted: boolean;\n\n\n  constructor(public adminService: AdminService, private formBuilder: FormBuilder) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes) {\n      this.S3Form= {\n        Key     : changes.isAzure.currentValue ? 'azure' : changes.key.currentValue,\n        Secret  : changes.secret.currentValue,\n        Region  : changes.region.currentValue,\n        Bucket  : changes.bucket.currentValue,\n        Endpoint: (changes.endpoint.currentValue === null || changes.endpoint.currentValue?.startsWith('http')) ?\n          changes.endpoint.currentValue:\n           `http${(changes.endpoint.currentValue as string).endsWith('443') ? 's' : ''}://${changes.endpoint.currentValue}`,\n      };\n    }\n  }\n\n\n  public saveNewCredentials() {\n    this.formIsSubmitted = true;\n    if (this.S3NGForm.invalid) {\n      return false;\n    } else {\n      this.closeSave.emit(this.S3Form);\n    }\n\n  }\n\n  public cancel() {\n    this.closeCancel.emit(this.S3Form);\n  }\n\n}\n","import {Component, Inject} from '@angular/core';\nimport {Credentials} from '../../core/reducers/common-auth-reducer';\nimport {Observable} from 'rxjs';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {ProjectDialogComponent} from '../../shared/project-dialog/project-dialog.component';\n\n@Component({\n  selector   : 'sm-s3-access-resolver',\n  templateUrl: './s3-access-resolver.component.html',\n  styleUrls  : ['./s3-access-resolver.component.scss']\n})\nexport class S3AccessResolverComponent {\n  show: Observable<any>;\n  subscription: any;\n  bucket: string;\n  endpoint: any;\n  key: any;\n  secret: any;\n  region: any;\n  header: any;\n  editMode: any;\n  public useSSL: boolean;\n  public isAzure: boolean;\n\n\n  constructor(\n    private matDialogRef: MatDialogRef<ProjectDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: {credentials: Credentials; isAzure?: boolean; credentialsError}\n  ) {\n    const s3Credentials = data.credentials;\n    this.bucket         = s3Credentials.Bucket;\n    this.endpoint       = s3Credentials.Endpoint;\n    this.key            = s3Credentials.Key;\n    this.secret         = s3Credentials.Secret;\n    this.region         = s3Credentials.Region;\n    this.isAzure        = data.isAzure;\n    if (data.credentialsError) {\n      this.header = this.header = `${data.credentialsError}, please check credentials for bucket <b>${this.bucket}</b>.`;\n    } else {\n      this.header = `Please provide credentials for bucket <b>${this.bucket}</b>.`;\n    }\n  }\n\n  saveS3Credentials(newCredential) {\n    this.matDialogRef.close({\n      success : true,\n      ...newCredential\n    });\n  }\n\n  cancelClicked() {\n    this.matDialogRef.close({\n      success : false,\n      Bucket  : this.bucket,\n      Endpoint: this.endpoint\n    });\n  }\n\n  xClicked() {\n    this.matDialogRef.close({\n      success : false,\n      Bucket  : this.bucket,\n      Endpoint: this.endpoint,\n    });\n  }\n\n}\n","<sm-dialog-template iconClass=\"i-annotation\" header=\"S3 credentials\" (xClicked)=\"xClicked()\" [header]=\"isAzure? 'Azure credentials': 'S3 credentials'\">\n  <sm-s3-access-dialog\n    [header]=\"header\"\n    [bucket]=\"bucket\"\n    [endpoint]=\"endpoint\"\n    [region]=\"region\"\n    [secret]=\"secret\"\n    [key]=\"key\"\n    [editMode]=\"editMode\"\n    [isAzure]=\"isAzure\"\n    (closeSave)=\"saveS3Credentials($event)\"\n    (closeCancel)=\"cancelClicked()\">\n  </sm-s3-access-dialog>\n</sm-dialog-template>\n","<div class=\"credentials\">\n  <sm-labeled-row label=\"Access key\">{{newCredential.access_key || 'Loading...'}}</sm-labeled-row>\n  <sm-labeled-row label=\"Secret key\">{{newCredential.secret_key || 'Loading...'}}</sm-labeled-row>\n</div>\n<div>\n  <h5 class=\"mt-4\">Usage</h5>\n  <div class=\"instructions\">Copy the below info for input to 'clearml-init' configuration request, or modify your existing clearml.conf</div>\n  <div class=\"mt-3 w-100 code\">\n    <div #content class=\"content\"><span class=\"variable\">api</span> {{ '{' }} <ng-content></ng-content>\n    <span class=\"variable\">web_server</span><span class=\"operation\">:</span> <span class=\"string\">{{WEB_SERVER_URL}}</span>\n    <span class=\"variable\">api_server</span><span class=\"operation\">:</span> <span class=\"string\">{{API_BASE_URL}}</span><ng-container *ngIf=\"fileBaseUrl\">\n    <span class=\"variable\">files_server</span><span class=\"operation\">:</span> <span class=\"string\">{{fileBaseUrl}}</span></ng-container>\n    <span class=\"variable\">credentials</span> {{ '{' }}\n        <span class=\"string\">\"access_key\"</span> <span class=\"operation\">=</span> <span class=\"string\">\"{{newCredential.access_key}}\"</span>\n        <span class=\"string\">\"secret_key\"</span> <span class=\"operation\">=</span> <span class=\"string\">\"{{newCredential.secret_key}}\"</span>\n    }\n}</div>\n    <sm-copy-clipboard\n      [hideBackground]=\"true\"\n      [label]=\"''\"\n      [copyIcon]=\"'far fa-lg fa-copy'\"\n      [clipboardText]=\"textContent$ | async\"></sm-copy-clipboard>\n  </div>\n</div>\n","import {ChangeDetectorRef, Component, Input, ViewChild} from '@angular/core';\nimport {guessAPIServerURL, HTTP} from '../../../../app.constants';\nimport {BehaviorSubject} from 'rxjs';\n\n@Component({\n  selector   : 'sm-admin-dialog-template',\n  templateUrl: './admin-dialog-template.component.html',\n  styleUrls  : ['./admin-dialog-template.component.scss']\n})\nexport class AdminDialogTemplateComponent {\n  private _newCredential: any;\n  public host: string;\n  clipboardText: string;\n  public exampleText: { credentials: { access_key: any | string; secret_key: any } } = {\n    credentials: {\n      access_key: '',\n      secret_key: ''\n    }\n  };\n  API_BASE_URL = HTTP.API_BASE_URL_NO_VERSION;\n  fileBaseUrl = HTTP.FILE_BASE_URL;\n  WEB_SERVER_URL = window.location.origin;\n\n  @ViewChild('content') set contentElement(contetElement) {\n    setTimeout(() => {\n      this.textContent$.next(contetElement.nativeElement.textContent);\n    });\n  }\n  @Input() workspace: {id: string, name: string};\n\n  @Input() set newCredential(newCredential) {\n    this._newCredential = newCredential;\n    this.exampleText = {\n      credentials: {\n        access_key: newCredential.access_key,\n        secret_key: newCredential.secret_key\n      }\n    };\n  }\n  textContent$ = new BehaviorSubject(null);\n  get newCredential() {\n    return this._newCredential;\n  }\n  constructor(private cdr: ChangeDetectorRef) {\n    this.host = `${window.location.protocol}//${window.location.hostname}`;\n    if (this.API_BASE_URL === '/api') {\n      this.API_BASE_URL = guessAPIServerURL();\n    }\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'sm-create-credential-dialog',\n  templateUrl: './create-credential-dialog.component.html',\n  styleUrls: ['./create-credential-dialog.component.scss']\n})\n  export class CreateCredentialDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {credentials: any; workspace?: string}) {}\n\n  ngOnInit() {\n  }\n\n}\n","<sm-dialog-template>\n  <sm-admin-dialog-template [newCredential]=\"data.credentials\"></sm-admin-dialog-template>\n</sm-dialog-template>\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ApiAuthService} from '~/business-logic/api-services/auth.service';\nimport * as authActions from '../actions/common-auth.actions';\nimport {requestFailed} from '../actions/http.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../actions/layout.actions';\nimport {catchError, filter, finalize, map, mergeMap, switchMap, take, tap, throttleTime, withLatestFrom} from 'rxjs/operators';\nimport {AuthGetCredentialsResponse} from '~/business-logic/model/auth/authGetCredentialsResponse';\nimport {select, Store} from '@ngrx/store';\nimport {selectCurrentUser} from '../reducers/users-reducer';\nimport {GetCurrentUserResponseUserObject} from '~/business-logic/model/users/getCurrentUserResponseUserObject';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {selectDontShowAgainForBucketEndpoint, selectS3BucketCredentialsBucketCredentials, selectSignedUrl} from '@common/core/reducers/common-auth-reducer';\nimport {EMPTY, of} from 'rxjs';\nimport {SignResponse} from '@common/settings/admin/base-admin.service';\nimport {S3AccessResolverComponent} from '@common/layout/s3-access-resolver/s3-access-resolver.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {CreateCredentialDialogComponent} from '~/features/settings/containers/admin/create-credential-dialog/create-credential-dialog.component';\nimport {resetCredential} from '../actions/common-auth.actions';\n\n@Injectable()\nexport class CommonAuthEffects {\n  private signAfterPopup: (ReturnType<typeof authActions.getSignedUrl>)[] = [];\n  private openPopup: { [bucketName: string]: boolean } = {};\n\n  constructor(\n    private actions: Actions,\n    private credentialsApi: ApiAuthService,\n    private store: Store<any>,\n    private adminService: AdminService,\n    private matDialog: MatDialog\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions.pipe(\n    ofType(authActions.getAllCredentials, authActions.createCredential),\n    map(action => activeLoader(action.type))\n  ));\n\n  getAllCredentialsEffect = createEffect(() => this.actions.pipe(\n    ofType(authActions.getAllCredentials),\n    switchMap(action => this.credentialsApi.authGetCredentials({}).pipe(\n      withLatestFrom(this.store.select(selectCurrentUser)),\n      mergeMap(([res, user]: [AuthGetCredentialsResponse, GetCurrentUserResponseUserObject]) => [\n        authActions.updateAllCredentials({credentials: res.credentials, extra: res?.['additional_credentials'], workspace: user.company.id}),\n        deactivateLoader(action.type)\n      ]),\n      catchError(error => [requestFailed(error), deactivateLoader(action.type)])\n    ))\n  ));\n\n  revokeCredential = createEffect(() => this.actions.pipe(\n    ofType(authActions.credentialRevoked),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    mergeMap(action => this.credentialsApi.authRevokeCredentials({access_key: action.accessKey}).pipe(\n      mergeMap(() => [authActions.removeCredential(action), deactivateLoader(action.type)]),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader(action.type),\n        setServerError(error, null, `Can't delete this credentials.`)\n      ])\n    ))\n  ));\n\n  createCredential = createEffect(() => this.actions.pipe(\n    ofType(authActions.createCredential),\n    mergeMap(action => this.credentialsApi.authCreateCredentials({}).pipe(\n      tap( ({credentials}) => action.openCredentialsPopup && this.openCredentialsPopup(credentials, action)),\n      mergeMap(({credentials}) => [\n        authActions.addCredential({newCredential: credentials, workspaceId: action.workspace?.id}),\n        deactivateLoader(action.type)\n      ]),\n      catchError(error => [\n        requestFailed(error),\n        setServerError(error, null, 'Unable to create credentials'),\n        authActions.addCredential({newCredential: {}, workspaceId: action.workspace?.id}),\n        deactivateLoader(action.type)])\n    ))\n  ));\n\n  signUrl = createEffect(() => this.actions.pipe(\n    ofType(authActions.getSignedUrl),\n    filter(action => !!action.url),\n    mergeMap(action =>\n      of(action).pipe(\n        withLatestFrom(\n          this.store.select(state => selectSignedUrl(action.url)(state))\n        ),\n        switchMap(([, signedUrl]) =>\n          (!signedUrl?.expires || signedUrl.expires < (new Date()).getTime()) ?\n            this.adminService.signUrlIfNeeded(action.url, action.config) : of({type: 'none'})\n        ),\n        filter(res => !!res),\n        switchMap((res: SignResponse) => {\n            switch (res.type) {\n              case 'popup':\n                this.signAfterPopup.push(action);\n                return [authActions.showS3PopUp({credentials: res.bucket, isAzure: res.azure, credentialsError: null})];\n              case 'sign':\n                return [authActions.setSignedUrl({url: action.url, signed: res.signed, expires: res.expires})];\n              default:\n                return EMPTY;\n            }\n          }\n        ),\n      ),\n    )\n  ));\n\n  s3popup = createEffect(() => this.actions.pipe(\n    ofType(authActions.showS3PopUp),\n    withLatestFrom(\n      this.store.select(selectDontShowAgainForBucketEndpoint)\n    ),\n    throttleTime(500),\n    filter(([action, dontShowAgain]) =>\n      action?.credentials?.Bucket + action?.credentials?.Endpoint !== dontShowAgain &&\n      !this.openPopup[action?.credentials?.Bucket]\n    ),\n    switchMap(([action]) => {\n      if (action?.credentials?.Bucket) {\n        this.openPopup[action.credentials.Bucket] = true;\n      }\n      return this.matDialog.open(S3AccessResolverComponent, {data: action}).afterClosed().pipe(\n        withLatestFrom(\n          this.store.pipe(select(selectS3BucketCredentialsBucketCredentials)),\n        ),\n        switchMap(([data, bucketCredentials]) => {\n          window.setTimeout(() => this.signAfterPopup = []);\n          if (data) {\n            if (!data.success) {\n              const emptyCredentials = bucketCredentials.find((cred => cred?.Bucket === data.bucket)) === undefined;\n              const dontAskAgainForBucketName = emptyCredentials ? '' : data.bucket + data.endpoint;\n              return [authActions.cancelS3Credentials({dontAskAgainForBucketName})];\n            }\n            return [authActions.saveS3Credentials({newCredential: data}), ...this.signAfterPopup];\n          }\n          return [...this.signAfterPopup];\n        }),\n        finalize(() => action?.credentials?.Bucket && delete this.openPopup[action.credentials.Bucket])\n      );\n    })\n  ));\n\n  openCredentialsPopup(credentials, action): void {\n    this.matDialog.open(CreateCredentialDialogComponent,\n      {data: {credentials, ...(action.workspace && {workspace: action.workspace.name})}}\n    ).afterClosed().pipe(take(1)).subscribe(() => this.store.dispatch(resetCredential()));\n  }\n\n}\n","/**\n * Notifier options\n */\nexport interface NotifierOptions {\n  animations?: {\n    enabled?: boolean;\n    hide?: {\n      easing?: string;\n      offset?: number | false;\n      preset?: string;\n      speed?: number;\n    };\n    overlap?: number | false;\n    shift?: {\n      easing?: string;\n      speed?: number;\n    };\n    show?: {\n      easing?: string;\n      preset?: string;\n      speed?: number;\n    };\n  };\n  behaviour?: {\n    autoHide?: number | false | { [key: string]: number | false };\n    onClick?: 'hide' | false;\n    onMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\n    showDismissButton?: boolean;\n    stacking?: number | false;\n  };\n  position?: {\n    horizontal?: {\n      distance?: number;\n      position?: 'left' | 'middle' | 'right';\n    };\n    vertical?: {\n      distance?: number;\n      gap?: number;\n      position?: 'top' | 'bottom';\n    };\n  };\n  theme?: string;\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nexport class NotifierConfig implements NotifierOptions {\n\n  /**\n   * Customize animations\n   */\n  public animations: {\n    enabled: boolean;\n    hide: {\n      easing: string;\n      offset: number | false;\n      preset: string;\n      speed: number;\n    };\n    overlap: number | false;\n    shift: {\n      easing: string;\n      speed: number;\n    };\n    show: {\n      easing: string;\n      preset: string;\n      speed: number;\n    };\n  };\n\n  /**\n   * Customize behaviour\n   */\n  public behaviour: {\n    autoHide: number | false | { [key: string]: number | false };\n    onClick: 'hide' | false;\n    onMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\n    showDismissButton: boolean;\n    stacking: number | false;\n  };\n\n  /**\n   * Customize positioning\n   */\n  public position: {\n    horizontal: {\n      distance: number;\n      position: 'left' | 'middle' | 'right';\n    };\n    vertical: {\n      distance: number;\n      gap: number;\n      position: 'top' | 'bottom';\n    };\n  };\n\n  /**\n   * Customize theming\n   */\n  public theme: string;\n\n  /**\n   * Constructor\n   *\n   * @param [customOptions={}] Custom notifier options, optional\n   */\n  public constructor(customOptions: NotifierOptions = {}) {\n\n    // Set default values\n    this.animations = {\n      enabled: true,\n      hide: {\n        easing: 'ease',\n        offset: 50,\n        preset: 'fade',\n        speed: 300\n      },\n      overlap: 150,\n      shift: {\n        easing: 'ease',\n        speed: 300\n      },\n      show: {\n        easing: 'ease',\n        preset: 'slide',\n        speed: 300\n      }\n    };\n    this.behaviour = {\n      autoHide: 7000,\n      onClick: false,\n      onMouseover: 'pauseAutoHide',\n      showDismissButton: true,\n      stacking: 4\n    };\n    this.position = {\n      horizontal: {\n        distance: 12,\n        position: 'left'\n      },\n      vertical: {\n        distance: 12,\n        gap: 10,\n        position: 'bottom'\n      }\n    };\n    this.theme = 'material';\n\n    // The following merges the custom options into the notifier config, respecting the already set default values\n    // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n    // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n    if (customOptions.theme !== undefined) {\n      this.theme = customOptions.theme;\n    }\n    if (customOptions.animations !== undefined) {\n      if (customOptions.animations.enabled !== undefined) {\n        this.animations.enabled = customOptions.animations.enabled;\n      }\n      if (customOptions.animations.overlap !== undefined) {\n        this.animations.overlap = customOptions.animations.overlap;\n      }\n      if (customOptions.animations.hide !== undefined) {\n        Object.assign(this.animations.hide, customOptions.animations.hide);\n      }\n      if (customOptions.animations.shift !== undefined) {\n        Object.assign(this.animations.shift, customOptions.animations.shift);\n      }\n      if (customOptions.animations.show !== undefined) {\n        Object.assign(this.animations.show, customOptions.animations.show);\n      }\n    }\n    if (customOptions.behaviour !== undefined) {\n      Object.assign(this.behaviour, customOptions.behaviour);\n    }\n    if (customOptions.position !== undefined) {\n      if (customOptions.position.horizontal !== undefined) {\n        Object.assign(this.position.horizontal, customOptions.position.horizontal);\n      }\n      if (customOptions.position.vertical !== undefined) {\n        Object.assign(this.position.vertical, customOptions.position.vertical);\n      }\n    }\n\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NotifierContainerComponent} from './components/notifier-container.component';\nimport {NotifierNotificationComponent} from './components/notifier-notification.component';\nimport {NotifierConfig, NotifierOptions} from './models/notifier-config.model';\nimport {NotifierAnimationService} from './services/notifier-animation.service';\nimport {NotifierQueueService} from './services/notifier-queue.service';\nimport {NotifierConfigToken, NotifierService} from './services/notifier.service';\n\n\n/**\n * Injection Token for notifier options\n */\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions>\n  = new InjectionToken<NotifierOptions>('[angular-notifier] Notifier Options');\n\n\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory(options: NotifierOptions): NotifierConfig {\n  return new NotifierConfig(options);\n}\n\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory(): NotifierConfig {\n  return new NotifierConfig({});\n}\n\n/**\n * Notifier module\n */\n@NgModule({\n  declarations: [\n    NotifierContainerComponent,\n    NotifierNotificationComponent\n  ],\n  exports: [\n    NotifierContainerComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    NotifierAnimationService,\n    NotifierService,\n    NotifierQueueService,\n\n    // Provide the default notifier configuration if just the module is imported\n    {\n      provide: NotifierConfigToken,\n      useFactory: notifierDefaultConfigFactory\n    }\n\n  ]\n})\nexport class NotifierModule {\n\n  /**\n   * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n   *\n   * @param   [options={}] - Custom notifier options\n   * @returns - Notifier module with custom providers\n   */\n  public static withConfig(options: NotifierOptions = {}): ModuleWithProviders<NotifierModule> {\n    return {\n      ngModule: NotifierModule,\n      providers: [\n\n        // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n        {\n          provide: NotifierOptionsToken,\n          useValue: options\n        },\n\n        // Provide a custom notifier configuration, based on the given notifier options\n        {\n          deps: [\n            NotifierOptionsToken\n          ],\n          provide: NotifierConfigToken,\n          useFactory: notifierCustomConfigFactory\n        }\n\n      ]\n    };\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, Effect, ofType} from '@ngrx/effects';\nimport {EmptyAction, MESSAGES_SEVERITY} from '../../../app.constants';\nimport * as layoutActions from '../actions/layout.actions';\nimport {filter, map, switchMap, take, mergeMap, bufferTime} from 'rxjs/operators';\nimport {get} from 'lodash/fp';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {ApiModelsService} from '../../../business-logic/api-services/models.service';\nimport {MatDialogRef, MatDialog} from '@angular/material/dialog';\nimport {AlertDialogComponent} from '../../shared/ui-components/overlay/alert-dialog/alert-dialog.component';\nimport {NotifierService} from '../../angular-notifier';\nimport {requestFailed} from '@common/core/actions/http.actions';\nimport {addMessage} from '../actions/layout.actions';\n\nconst ERROR_AGGREGATION = 600000;\n\n@Injectable()\nexport class LayoutEffects {\n\n  private alertDialogRef: MatDialogRef<AlertDialogComponent, any>;\n  private errors = {};\n\n  constructor(\n    private actions: Actions,\n    private taskService: ApiTasksService,\n    private modelService: ApiModelsService,\n    private notifierService: NotifierService,\n    private dialog: MatDialog\n  ) {\n  }\n\n  @Effect({dispatch: false})\n  serverErrorMoreInfo = this.actions.pipe(ofType(layoutActions.setServerError),\n    filter(action => !!action.serverError),\n    map(action => this.parseError(get('error.meta.result_msg', action.serverError))),\n    filter(([ids]) => !!ids),\n    switchMap(([ids, entity]) => this.getAllEntity(ids, entity).pipe(\n      filter(res => !!res),\n      map(res => {\n        const moreInfo = {[entity]: res[entity]};\n        if (this.alertDialogRef) {\n          this.alertDialogRef.componentInstance.moreInfo = moreInfo;\n        }\n      })\n    ))\n  );\n\n  popupError = createEffect(() => this.actions.pipe(\n    ofType(layoutActions.setServerError),\n    filter(action => action.serverError?.status !== 401 && action.serverError?.status !== 403 ),\n    map((action) => {\n      if (action.serverError?.status === 502) {\n        console.log('Gateway Error', action.serverError);\n        return;\n      }\n      const customMessage: string = action.customMessage;\n      if (action.aggregateSimilar) {\n        const lastTS = this.errors[customMessage];\n        const now = (new Date()).getTime();\n        if (lastTS && lastTS + ERROR_AGGREGATION > now) {\n          return;\n        }\n        this.errors[customMessage] = now;\n      }\n      let resultMessage: string;\n      const subcode = get('error.meta.result_subcode', action.serverError);\n      if (subcode) {\n        resultMessage = `Error ${subcode} : ${get('error.meta.result_msg', action.serverError)}`;\n      }\n      this.alertDialogRef = this.dialog.open(AlertDialogComponent, {\n        data: {alertMessage: 'Error', alertSubMessage: customMessage, resultMessage}\n      });\n\n      this.alertDialogRef.beforeClosed().pipe(take(1)).subscribe(() => this.dialog.closeAll());\n      this.alertDialogRef.afterClosed().pipe(take(1)).subscribe(() => this.alertDialogRef = null);\n    })\n  ), {dispatch: false});\n\n  @Effect()\n  addMessage: Observable<any> = this.actions.pipe(\n    ofType(layoutActions.addMessage),\n    bufferTime(500),\n    filter(messages => messages.length > 0),\n    mergeMap((messages) => {\n      const message403 = messages.find(message => message.suppressNextMessages);\n      return message403 ? [message403] : messages;\n    }),\n    mergeMap(payload => payload ? this.notifierService.show({type: payload.severity, message: payload.msg, actions: payload.userActions}) : EMPTY),\n    mergeMap(actions => actions.length > 0 ? actions : [new EmptyAction()])\n  );\n\n  requestFailed: Observable<any> = createEffect( () => this.actions.pipe(\n    ofType(requestFailed),\n    filter(action => action.err?.status === 403),\n    map(action => {\n      const errorData = action.err?.error?.meta?.error_data?.access ===  'read_write' ? 'modifying' : 'accessing';\n      return addMessage(MESSAGES_SEVERITY.ERROR,\n        `Insufficient privileges for ${errorData} this ${action.err?.error?.meta?.error_data?.type?.replace('datasetversion', 'dataset version') || 'resource'}.\n    Contact your service admin for information.`, [], true);\n    })\n  ));\n\n  private parseError(errorMessage) {\n    const regexMatch = errorMessage && errorMessage.match(/(\\w*)=\\((.*)\\)/);\n    if (regexMatch) {\n      const entity = regexMatch[1];\n      const ids = regexMatch[2] && regexMatch[2].split(', ');\n      return [ids, entity];\n    } else {\n      return [false, false];\n    }\n  }\n\n  private getAllEntity(ids: string[], entity: string): Observable<any> {\n    switch (entity) {\n      case 'tasks':\n        return this.taskService.tasksGetAllEx({\n          id: ids,\n          only_fields: ['name', 'project', 'system_tags']\n        });\n      case 'models':\n        return this.modelService.modelsGetAllEx({\n          id: ids,\n          only_fields: ['name', 'project']\n        });\n      default:\n        return of(null);\n    }\n  }\n}\n\n\n","<sm-dialog-template iconClass=\"fas fa-tags rotate-right fa-6x\" header=\"TAG COLORS\">\n  <form class=\"filter-form\">\n    <mat-form-field appearance=\"fill\"\n                    hideRequiredMarker=\"true\"\n                    floatLabel=\"never\">\n      <input #nameInput smClickStopPropagation  matInput placeholder=\"Search\" name=\"filter\" [(ngModel)]=\"filterText\" autocomplete=\"off\">\n      <i matSuffix [class]=\"'fa mr2 ' + (filterText? 'fa-times pointer':'fa-search')\" (click)=\"filterText && clearSearch()\"></i>\n    </mat-form-field>\n  </form>\n\n  <mat-menu #colorMenu=\"matMenu\">\n    <ng-template matMenuContent let-tag=\"tag\" let-colors=\"colors\">\n      <button mat-menu-item (click)=\"openColorPicker(tag, colors.background)\">Background</button>\n      <button mat-menu-item [matMenuTriggerFor]=\"subMenu\" [matMenuTriggerData]=\"{tag: tag, color: colors.foreground}\">Foreground</button>\n    </ng-template>\n  </mat-menu>\n\n  <mat-menu #subMenu=\"matMenu\">\n    <ng-template matMenuContent let-tag=\"tag\" let-color=\"color\">\n      <button mat-menu-item (click)=\"setForeground(tag, 'black')\">Black<i *ngIf=\"color==='black'\" class=\"fas fa-check fa-pull-right\"></i></button>\n      <button mat-menu-item (click)=\"setForeground(tag, 'white')\">White<i *ngIf=\"color==='white'\" class=\"fas fa-check fa-pull-right\"></i></button>\n    </ng-template>\n  </mat-menu>\n\n  <div class=\"color-picker-wrapper light-theme\">\n    <div\n      cpPosition=\"right\"\n      [(colorPicker)]=\"defaultColor\"\n      [(cpToggle)]=\"toggle\"\n      [cpOKButton]=\"true\"\n      [cpCancelButton]=\"true\"\n      [cpSaveClickOutside]=\"false\"\n      cpWidth=\"340\"\n      [cpOKButtonClass]=\"'btn btn-neon'\"\n      [cpCancelButtonClass]=\"'btn btn-outline-neon'\"\n      [cpAlphaChannel]=\"'disabled'\"\n      [cpDisableInput]=\"true\"\n      [cpPresetColors]=\"presetColors\"\n      (colorPickerSelect)=\"setBackground(currTag, $event)\">\n    </div>\n  </div>\n\n  <cdk-virtual-scroll-viewport itemSize=\"32\" class=\"tags-list\">\n    <div *cdkVirtualFor=\"let tag of (tags$ | async) | filter:filterText:'caption'\" class=\"tag-line\">\n      <div class=\"caption\">{{tag.caption}}</div>\n      <div\n        *ngIf=\"(tag.colorObservable | async) as colors\"\n        class=\"tag pointer\"\n        [style.backgroundColor]=\"$any(colors)?.background\"\n        [style.color]=\"$any(colors)?.foreground\"\n        mat-icon-button\n        [matMenuTriggerFor]=\"colorMenu\"\n        [matMenuTriggerData]=\"{tag: tag.caption, colors: colors}\"\n      >a</div>\n    </div>\n  </cdk-virtual-scroll-viewport>\n\n\n  <div class=\"btn-row\">\n    <button class=\"btn btn-neon center\" (click)=\"close()\">CLOSE</button>\n  </div>\n</sm-dialog-template>\n","import {Component, ElementRef, OnDestroy, ViewChild} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {selectProjectTags} from '../../../../core/reducers/projects.reducer';\nimport {map} from 'rxjs/operators';\nimport {TagColorService} from '../../../services/tag-color.service';\nimport {Tag} from '../tag-list/tag-list.component';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {DeactivateEdit} from '../../../../experiments/actions/common-experiments-info.actions';\nimport {CancelModelEdit} from '../../../../models/actions/models-info.actions';\n\n@Component({\n  selector: 'sm-tag-color-menu',\n  templateUrl: './tag-color-menu.component.html',\n  styleUrls: ['./tag-color-menu.component.scss']\n})\nexport class TagColorMenuComponent implements OnDestroy {\n  filterText: string;\n  public tags$: Observable<Tag[]>;\n  defaultColor: string;\n  toggle: boolean;\n  presetColors = TagColorService.predefined.map(color => color.background) as string[];\n  currTag: string;\n\n  @ViewChild('nameInput') nameInput: ElementRef<HTMLInputElement>;\n\n  constructor(\n    private store: Store, private colorService: TagColorService,\n    private matDialogRef: MatDialogRef<TagColorMenuComponent>\n  ) {\n    this.tags$ = this.store.select(selectProjectTags)\n      .pipe(\n        map((tags: string[]) => tags.map(tag => ({caption: tag, colorObservable: this.colorService.getColor(tag)} as Tag))));\n  }\n\n  close() {\n    this.matDialogRef.close();\n  }\n\n  setForeground(tag: string, color: string) {\n    this.colorService.setColor(tag, {foreground: color});\n  }\n\n  setBackground(tag: string, color: string) {\n    this.colorService.setColor(tag, {background: color});\n  }\n\n  openColorPicker(tag: string, color: string) {\n    this.currTag = tag;\n    this.defaultColor = color;\n    this.toggle = true;\n  }\n\n  clearSearch() {\n    this.filterText = '';\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new DeactivateEdit());\n    this.store.dispatch(new CancelModelEdit());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Action, Store} from '@ngrx/store';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ApiProjectsService} from '~/business-logic/api-services/projects.service';\nimport * as actions from '../actions/projects.actions';\nimport {\n  fetchGraphData, getAllSystemProjects,\n  getCompanyTags,\n  getTags,\n  openMoreInfoPopup,\n  openTagColorsMenu,\n  resetProjects, resetProjectSelection,\n  setCompanyTags,\n  setGraphData, setLastUpdate,\n  setTags\n} from '../actions/projects.actions';\n\nimport {catchError, filter, map, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {requestFailed} from '../actions/http.actions';\nimport {activeLoader, deactivateLoader, setServerError} from '../actions/layout.actions';\nimport {setSelectedModels} from '../../models/actions/models-view.actions';\nimport {TagColorMenuComponent} from '../../shared/ui-components/tags/tag-color-menu/tag-color-menu.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ApiOrganizationService} from '~/business-logic/api-services/organization.service';\nimport {OrganizationGetTagsResponse} from '~/business-logic/model/organization/organizationGetTagsResponse';\nimport {selectRouterParams} from '../reducers/router-reducer';\nimport {forkJoin} from 'rxjs';\nimport {ProjectsGetTaskTagsResponse} from '~/business-logic/model/projects/projectsGetTaskTagsResponse';\nimport {ProjectsGetModelTagsResponse} from '~/business-logic/model/projects/projectsGetModelTagsResponse';\nimport {selectLastUpdate, selectSelectedMetricVariantForCurrProject, selectSelectedProjectId} from '../reducers/projects.reducer';\nimport {OperationErrorDialogComponent} from '@common/shared/ui-components/overlay/operation-error-dialog/operation-error-dialog.component';\nimport {ApiTasksService} from '~/business-logic/api-services/tasks.service';\nimport {createMetricColumn} from '@common/shared/utils/tableParamEncode';\nimport {get} from 'lodash/fp';\nimport {ITask} from '~/business-logic/model/al-task';\nimport {TasksGetAllExRequest} from '~/business-logic/model/tasks/tasksGetAllExRequest';\nimport {setSelectedExperiments} from '../../experiments/actions/common-experiments-view.actions';\nimport {selectShowHidden} from '~/features/projects/projects.reducer';\nimport {setActiveWorkspace} from '@common/core/actions/users.actions';\nimport {ProjectsGetAllExResponse} from '~/business-logic/model/projects/projectsGetAllExResponse';\nimport {Project} from '~/business-logic/model/projects/project';\n\nexport const ALL_PROJECTS_OBJECT = {id: '*', name: 'All Experiments'};\n\n@Injectable()\nexport class ProjectsEffects {\n  private pageSize: number = 500;\n  private lastUpdateSoFar: string;\n  private scrollId: string = null;\n\n  constructor(\n    private actions$: Actions, private projectsApi: ApiProjectsService, private orgApi: ApiOrganizationService,\n    private store: Store<any>, private dialog: MatDialog, private tasksApi: ApiTasksService\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType(actions.setSelectedProjectId),\n    filter((action) => !!action.projectId),\n    map(action => activeLoader(action.type))\n  ));\n\n  getProjects$ = createEffect(() => this.actions$.pipe(\n    ofType(actions.getAllSystemProjects),\n    withLatestFrom(this.store.select(selectShowHidden), this.store.select(selectLastUpdate)),\n    switchMap(([, showHidden, lastUpdate]) => this.projectsApi.projectsGetAllEx({\n        /* eslint-disable @typescript-eslint/naming-convention */\n        size: this.pageSize,\n        scroll_id: this.scrollId,\n        order_by: ['last_update'],\n        last_update: lastUpdate ? [lastUpdate, null] : undefined,\n        only_fields: ['name', 'company', 'parent', 'last_update'], search_hidden: showHidden\n        /* eslint-enable @typescript-eslint/naming-convention */\n      } as any)\n        .pipe(mergeMap((res: ProjectsGetAllExResponse) => {\n            const resultsActions: Action[] = [actions.setAllProjects({projects: res.projects as unknown as Project[], updating: !!lastUpdate})];\n            if (res.projects.length >= this.pageSize) {\n              this.scrollId = res.scroll_id;\n              this.lastUpdateSoFar = res.projects[res.projects.length - 1].last_update;\n              resultsActions.push(getAllSystemProjects());\n            } else {\n              resultsActions.push(setLastUpdate({lastUpdate: res.projects[res.projects.length - 1]?.last_update || this.lastUpdateSoFar || lastUpdate}));\n              this.scrollId = null;\n              this.lastUpdateSoFar = null;\n            }\n            return resultsActions;\n          })\n        )\n    )\n  ));\n\n  resetProjects$ = createEffect(() => this.actions$.pipe(\n    ofType(actions.resetSelectedProject),\n    mergeMap(() => [resetProjectSelection()])\n  ));\n\n  resetProjectSelections$ = createEffect(() => this.actions$.pipe(\n    ofType(resetProjectSelection),\n    mergeMap(() => [setSelectedExperiments({experiments: []}), setSelectedModels({models: []})])\n  ));\n\n  updateProject$ = createEffect(() => this.actions$.pipe(\n    ofType(actions.updateProject),\n    switchMap((action) =>\n      this.projectsApi.projectsUpdate({project: action.id, ...action.changes})\n        .pipe(\n          mergeMap(() => [\n            actions.updateProjectCompleted()\n          ]),\n          catchError(err => [\n            requestFailed(err),\n            setServerError(err, null, 'Update project failed'),\n            actions.setSelectedProjectId({projectId: action.id})\n          ])\n        )\n    )\n  ));\n\n  openTagColor = createEffect(() => this.actions$.pipe(\n    ofType(openTagColorsMenu),\n    map(() => {\n      this.dialog.open(TagColorMenuComponent);\n    })\n  ), {dispatch: false});\n\n  getAllTags = createEffect(() => this.actions$.pipe(\n    ofType(getCompanyTags),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    switchMap(() => this.orgApi.organizationGetTags({include_system: true})\n      .pipe(\n        map((res: OrganizationGetTagsResponse) => setCompanyTags({tags: res.tags, systemTags: res.system_tags})),\n        catchError(error => [requestFailed(error)])\n      )\n    )\n  ));\n\n  getTagsEffect = createEffect(() => this.actions$.pipe(\n    ofType(getTags),\n    withLatestFrom(this.store.select(selectRouterParams).pipe(\n      map(params => (params === null || params?.projectId === '*') ? [] : [params.projectId]))),\n    switchMap(([action, projects]) => forkJoin([\n      this.projectsApi.projectsGetTaskTags({projects}),\n      this.projectsApi.projectsGetModelTags({projects})]\n    ).pipe(\n      map((res: [ProjectsGetTaskTagsResponse, ProjectsGetModelTagsResponse]) =>\n        Array.from(new Set(res[0].tags.concat(res[1].tags))).sort()),\n      mergeMap((tags: string[]) => [\n        setTags({tags}),\n        deactivateLoader(action.type)\n      ]),\n      catchError(error => [\n        requestFailed(error),\n        deactivateLoader(action.type),\n        setServerError(error, null, 'Fetch tags failed')]\n      )\n    ))\n  ));\n\n  openMoreInfoPopupEffect = createEffect(() => this.actions$.pipe(\n    ofType(openMoreInfoPopup),\n    switchMap(action => this.dialog.open(OperationErrorDialogComponent, {\n        data: {\n          title: `${action.operationName} ${action.entityType}`,\n          action,\n          iconClass: `d-block al-ico-${action.operationName} al-icon w-auto`,\n        }\n      }).afterClosed()\n    )\n  ), {dispatch: false});\n\n  fetchProjectStats = createEffect(() => this.actions$.pipe(\n    ofType(fetchGraphData),\n    withLatestFrom(\n      this.store.select(selectSelectedProjectId),\n      this.store.select(selectSelectedMetricVariantForCurrProject)\n    ),\n    filter(([, , variant]) => !!variant),\n    switchMap(([, projectId, variant]) => {\n      const col = createMetricColumn(variant, projectId);\n      return this.tasksApi.tasksGetAllEx({\n        /* eslint-disable @typescript-eslint/naming-convention */\n        project: [projectId],\n        only_fields: ['started', 'last_iteration', 'user.name', 'type', 'name', 'status', 'active_duration', col.id],\n        [col.id]: [0, null],\n        started: ['2000-01-01T00:00:00', null],\n        status: ['completed', 'published', 'failed', 'stopped', 'closed'],\n        order_by: ['-started'],\n        type: ['__$not', 'annotation_manual', '__$not', 'annotation', '__$not', 'dataset_import'],\n        system_tags: ['-archived'],\n        scroll_id: null,\n        size: 1000\n        /* eslint-enable @typescript-eslint/naming-convention */\n      } as unknown as TasksGetAllExRequest).pipe(\n        map((res) =>\n          setGraphData({\n            stats: res.tasks.map((task: ITask) => {\n              const started = new Date(task.started).getTime();\n              const end = started + (task.active_duration ?? 0) * 1000;\n              return {\n                id: task.id,\n                y: get(col.id, task),\n                x: end,\n                name: task.name,\n                status: task.status,\n                type: task.type,\n                user: task.user.name,\n              };\n            })\n          }))\n      );\n    })\n  ));\n\n  resetRootProjects = createEffect(() => this.actions$.pipe(\n    ofType(setActiveWorkspace),\n    mergeMap(() => [\n      resetProjects(),\n      getAllSystemProjects()\n    ])\n  ));\n}\n\n\n","import {Injectable} from '@angular/core';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {uniq} from 'lodash/fp';\nimport {map, tap} from 'rxjs/operators';\nimport {NAVIGATION_ACTIONS} from '~/app.constants';\nimport {encodeFilters, encodeOrder} from '../../shared/utils/tableParamEncode';\nimport {NavigateTo, NavigationEnd, SetRouterSegments, setURLParams} from '../actions/router.actions';\n\n\n@Injectable()\nexport class RouterEffects {\n\n  constructor(\n    private actions$: Actions, private router: Router,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  // TODO: (itay) remove after delete old pages.\n  activeLoader = createEffect(() => this.actions$.pipe(\n    ofType<NavigateTo>(NAVIGATION_ACTIONS.NAVIGATE_TO),\n    tap(action => {\n      (!action.payload.params || !action.payload.url) ?\n        this.router.navigateByUrl(action.payload.url, /* Removed unsupported properties by Angular migration: queryParams. */ {}) :\n        this.router.navigate([action.payload.url, action.payload.params], {queryParams: {unGuard: action.payload.unGuard}});\n    })\n  ), {dispatch: false});\n\n  routerNavigationEnd = createEffect(() => this.actions$.pipe(\n    ofType<NavigationEnd>(NAVIGATION_ACTIONS.NAVIGATION_END),\n    map(() => new SetRouterSegments({url: this.getRouterUrl(), params: this.getRouterParams(), config: this.getRouterConfig(), queryParams: this.route.snapshot.queryParams}))\n  ));\n\n  setTableParams = createEffect(() => this.actions$.pipe(\n    ofType(setURLParams),\n    map((action) => {\n      const firstUpdate = !this.route.snapshot.queryParams.order;\n      this.router.navigate(\n        [],\n        {\n          relativeTo: this.route,\n          replaceUrl: firstUpdate,\n          queryParamsHandling: action.update ? 'merge' : '',\n          queryParams: {\n            ...(action.columns && {columns: uniq(action.columns)}),\n            ...(action.orders && {order: encodeOrder(action.orders)}),\n            ...(action.filters && {filter: encodeFilters(action.filters)}),\n            ...(action.isArchived && {archive:  true}),\n            ...(action.isDeep && {deep:  true})\n          }\n        });\n    })\n  ), {dispatch: false});\n\n  getRouterParams(): Params {\n    let route = this.route.snapshot.firstChild;\n    let params: Params = {};\n\n    while (route) {\n      params = {...params, ...route.params};\n      route = route.firstChild;\n    }\n    return params;\n  }\n\n  getRouterConfig(): string[] {\n    let route = this.route.snapshot.firstChild;\n    let config = [];\n\n    while (route) {\n      const path = route.routeConfig.path.split('/').filter((item) => !!item);\n      config = config.concat(path);\n      route = route.firstChild;\n    }\n    return config;\n  }\n\n  getRouterUrl(): string {\n    return this.router.url;\n  }\n}\n\n","import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Store} from '@ngrx/store';\nimport {MESSAGES_SEVERITY} from '~/app.constants';\nimport {ApiUsersService} from '~/business-logic/api-services/users.service';\nimport {\n  fetchCurrentUser,\n  getApiVersion,\n  logout,\n  logoutSuccess,\n  setApiVersion, setCurrentUserName,\n  setUserWorkspacesFromUser, updateCurrentUser\n} from '../actions/users.actions';\nimport {catchError, map, mergeMap, switchMap} from 'rxjs/operators';\nimport {requestFailed} from '../actions/http.actions';\nimport {addMessage} from '../actions/layout.actions';\nimport {ApiLoginService} from '~/business-logic/api-services/login.service';\nimport {LoginLogoutResponse} from '~/business-logic/model/login/loginLogoutResponse';\nimport {ErrorService} from '../../shared/services/error.service';\nimport {ApiServerService} from '~/business-logic/api-services/server.service';\nimport {ServerInfoResponse} from '~/business-logic/model/server/serverInfoResponse';\nimport {setCurrentUser} from '~/core/actions/users.action';\nimport {UsersUpdateResponse} from '~/business-logic/model/users/usersUpdateResponse';\n\n\n@Injectable()\nexport class CommonUserEffects {\n\n  constructor(\n    private actions: Actions, private userService: ApiUsersService,\n    private router: Router, private loginApi: ApiLoginService,\n    private serverService: ApiServerService,\n    private store: Store<any>, private errorService: ErrorService\n  ) {\n  }\n\n  fetchUser$ = createEffect(() => this.actions.pipe(\n    ofType(fetchCurrentUser),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    mergeMap(() => this.userService.usersGetCurrentUser({get_supported_features: true})\n      .pipe(\n        switchMap((res) => [setCurrentUser(res)]),\n        catchError(error => [requestFailed(error)])\n      )\n    )\n  ));\n\n  logoutFlow = createEffect(() => this.actions.pipe(\n    ofType(logout),\n    mergeMap(action => this.loginApi.loginLogout({\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      redirect_url: window.location.origin + '/login',\n      ...(action.provider && {provider: action.provider})\n    }).pipe(\n      map((res: LoginLogoutResponse) => {\n        if (res.redirect_url) {\n          window.location.href = res.redirect_url;\n        } else {\n          this.router.navigateByUrl('login');\n        }\n        return logoutSuccess();\n      }),\n      catchError(err => [addMessage(MESSAGES_SEVERITY.ERROR, `Logout Failed\n${this.errorService.getErrorMsg(err?.error)}`)])\n    )),\n  ));\n\n  getApiVersion = createEffect(() => this.actions.pipe(\n    ofType(getApiVersion),\n    mergeMap(() => this.serverService.serverInfo({})),\n    map((res: ServerInfoResponse) =>\n      setApiVersion({serverVersions: {server: `${res.version}-${res.build}`, api: res.api_version}})\n    ),\n    catchError(() => [setUserWorkspacesFromUser()])\n  ));\n\n  updateCurrentUser = createEffect(() => this.actions.pipe(\n    ofType(updateCurrentUser),\n    mergeMap(({user}) => this.userService.usersUpdate({...user}).pipe(\n      mergeMap((res: UsersUpdateResponse) => {\n        if (res.updated) {\n          return [setCurrentUserName({name: user.name})];\n        }\n      })\n    )),\n    catchError(err => [addMessage(MESSAGES_SEVERITY.ERROR, `Update User Failed ${this.errorService.getErrorMsg(err?.error)}`)])\n  ));\n}\n\n","import {ActionReducer, Action} from '@ngrx/store';\nimport {merge, pick} from 'lodash/fp';\nimport {setPreferences} from '../actions/users.actions';\nimport {UserPreferences} from '@common/user-preferences';\n\nconst firstRun = {};\n\nexport function createUserPrefReducer(\n  key: string,\n  syncedKeys: string[],\n  actionsPrefix: string[],\n  userPreferences: UserPreferences,\n  reducer: ActionReducer<any>\n): ActionReducer<any, Action> {\n\n  if (firstRun[key] === undefined) {\n    firstRun[key] = true;\n  }\n  let timeout: number;\n\n  return function (state, action): any {\n    let nextState = reducer(state, action);\n\n    if (firstRun[key] && userPreferences.isReady() && nextState[key]) {\n      firstRun[key]         = false;\n      const savedState = userPreferences.getPreferences(key);\n      return merge(nextState, {[key]: {...savedState, preferencesReady: true}});\n    }\n    if (action.type === setPreferences.type) {\n      const savedState = (action as ReturnType<typeof setPreferences>).payload[key];\n      nextState        = merge(nextState, savedState);\n    }\n\n    // filter unchanged state.\n    if (state === nextState) {\n      return nextState;\n    }\n\n    if (actionsPrefix &&\n      !actionsPrefix.some(ap => action.type.startsWith(ap))) {\n      return nextState;\n    }\n\n    const val = pick(syncedKeys, nextState[key]);\n    clearTimeout(timeout);\n    timeout = window.setTimeout(() => userPreferences.setPreferences(key, val), 2000);\n    return nextState;\n  };\n}\n","import * as actions from '../actions/layout.actions';\n\nconst initialState = {\n  visible: false,\n  severity: null,\n  message: null\n};\n\n\nexport function messagesReducer(state = initialState, action) {\n\n  switch (action.type) {\n    case actions.addMessage:\n      return {\n        visible: true,\n        severity: action.payload.severity,\n        message : action.payload.msg\n      };\n    case actions.removeMessage:\n      return {\n        visible: false\n      };\n    default:\n      return state;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport * as actions from '../../webapp-common/core/actions/projects.actions';\nimport {Store} from '@ngrx/store';\nimport {selectSelectedProjectId} from '../../webapp-common/core/reducers/projects.reducer';\nimport {catchError, finalize, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {deactivateLoader} from '../../webapp-common/core/actions/layout.actions';\nimport {ALL_PROJECTS_OBJECT} from '../../webapp-common/core/effects/projects.effects';\nimport {requestFailed} from '../../webapp-common/core/actions/http.actions';\nimport {ApiProjectsService} from '../../business-logic/api-services/projects.service';\n\n\n\n@Injectable()\nexport class ProjectsEffects {\n  private fetchingExampleExperiment: string = null;\n\n  constructor(private actions$: Actions, private store: Store, private projectsApi: ApiProjectsService) {}\n\n  getSelectedProject = createEffect(() => this.actions$.pipe(\n    ofType(actions.setSelectedProjectId),\n    withLatestFrom(this.store.select(selectSelectedProjectId)),\n    switchMap(([action, selectedProjectId]) => {\n      if (!action.projectId) {\n        return [actions.setSelectedProject({project: null})];\n      }\n      if (action.projectId === selectedProjectId) {\n        return [deactivateLoader(action.type)];\n      }\n      if (action.projectId === '*') {\n        return [\n          actions.setSelectedProject({project: ALL_PROJECTS_OBJECT}),\n          deactivateLoader(action.type)\n        ];\n      } else {\n        this.fetchingExampleExperiment = action.example && action.projectId;\n        return this.projectsApi.projectsGetAllEx({\n          /* eslint-disable @typescript-eslint/naming-convention */\n          id: [action.projectId],\n          include_stats: true,\n          ...((action.example !== false || this.fetchingExampleExperiment === action.projectId) && {check_own_contents: true})\n          /* eslint-enable @typescript-eslint/naming-convention */\n        })\n          .pipe(\n            finalize(() => this.fetchingExampleExperiment = null),\n            mergeMap(({projects}) => [\n                actions.setSelectedProject({project: projects[0]}),\n                deactivateLoader(action.type),\n              ]\n            ),\n            catchError(error => [\n              requestFailed(error),\n              deactivateLoader(action.type)\n            ])\n          );\n      }\n    })\n  ));\n}\n","import {createAction, props} from '@ngrx/store';\n\nexport const setLoginError = createAction(\n  '[login] set login error',\n  props<{ error: string; }>()\n);\n","import {createReducer, on} from '@ngrx/store';\nimport {initLogin, loginReducers, LoginState as CommonLoginState} from '../../webapp-common/login/login-reducer';\nimport {setLoginError} from '~/features/login/login.actions';\n\n\nexport const login = state => state.login as CommonLoginState;\n\nexport const loginReducer = createReducer(\n  initLogin,\n  on(setLoginError, (state, action) => ({...state,error: action.error})),\n  ...loginReducers\n);\n","import {commonAuthReducer, initAuth} from '@common/core/reducers/common-auth-reducer';\nimport {createReducer} from '@ngrx/store';\n\nexport const authReducer = createReducer(\n  initAuth,\n  ...commonAuthReducer\n);\n","import { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookiesService {\n\n  private readonly documentIsAccessible: boolean;\n\n  constructor(\n\n    @Inject(DOCUMENT) private document: any,\n    @Inject(PLATFORM_ID) private platformId: InjectionToken<Object>,\n  ) {\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n\n  check(name: string): boolean {\n    if (!this.documentIsAccessible) {\n      return false;\n    }\n\n    name = encodeURIComponent(name);\n\n    const regExp: RegExp = this.getCookieRegExp(name);\n    const exists: boolean = regExp.test(this.document.cookie);\n\n    return exists;\n  }\n\n  get(name: string): string {\n    if (this.documentIsAccessible && this.check(name)) {\n      name = encodeURIComponent(name);\n\n      const regExp: RegExp = this.getCookieRegExp(name);\n      const result: RegExpExecArray = regExp.exec(this.document.cookie);\n\n      return decodeURIComponent(result[1]);\n    } else {\n      return '';\n    }\n  }\n\n  getAll(): {} {\n    if (!this.documentIsAccessible) {\n      return {};\n    }\n\n    const cookies: {} = {};\n    const document: any = this.document;\n\n    if (document.cookie && document.cookie !== '') {\n      const split: Array<string> = document.cookie.split(';');\n\n      for (let i = 0; i < split.length; i += 1) {\n        const currentCookie: Array<string> = split[i].split('=');\n\n        currentCookie[0] = currentCookie[0].replace(/^ /, '');\n        cookies[decodeURIComponent(currentCookie[0])] = decodeURIComponent(currentCookie[1]);\n      }\n    }\n\n    return cookies;\n  }\n\n  set(\n    name: string,\n    value: string,\n    expires?: number | Date,\n    path?: string,\n    domain?: string,\n    secure?: boolean,\n    sameSite?: 'Lax' | 'Strict'\n  ): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    let cookieString: string = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n    if (expires) {\n      if (typeof expires === 'number') {\n        const dateExpires: Date = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n\n        cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n      } else {\n        cookieString += 'expires=' + expires.toUTCString() + ';';\n      }\n    }\n\n    if (path) {\n      cookieString += 'path=' + path + ';';\n    }\n\n    if (domain) {\n      cookieString += 'domain=' + domain + ';';\n    }\n\n    if (secure) {\n      cookieString += 'secure;';\n    }\n\n    if (sameSite) {\n      cookieString += 'sameSite=' + sameSite + ';';\n    }\n\n    this.document.cookie = cookieString;\n  }\n\n  delete(name: string, path?: string, domain?: string): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain);\n  }\n\n  deleteAll(path?: string, domain?: string): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    const cookies: any = this.getAll();\n\n    for (const cookieName in cookies) {\n      if (cookies.hasOwnProperty(cookieName)) {\n        this.delete(cookieName, path, domain);\n      }\n    }\n  }\n  private getCookieRegExp(name: string): RegExp {\n    const escapedName: string = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1');\n\n    return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType, createEffect} from '@ngrx/effects';\nimport {filter, take, mergeMap, switchMap} from 'rxjs/operators';\nimport {CookiesService} from '../../shared/cookies.service';\nimport {ApiAuthService} from '../../business-logic/api-services/auth.service';\nimport {ApiServerService} from '../../business-logic/api-services/server.service';\nimport {ServerReportStatsOptionResponse} from '../../business-logic/model/server/serverReportStatsOptionResponse';\nimport {setUsageStats, updateUsageStats} from '../actions/usage-stats.actions';\nimport {fetchCurrentUser} from '@common/core/actions/users.actions';\n\n\n@Injectable()\nexport class UserEffects {\n\n  constructor(private actions: Actions, private cookiesService: CookiesService,\n    private authService: ApiAuthService, private serverService: ApiServerService) { }\n\n  setUser$ = createEffect(() => this.actions.pipe(\n    ofType(fetchCurrentUser),\n    filter(user => !!user),\n    take(1),\n    mergeMap(() => this.serverService.serverReportStatsOption({})\n      .pipe(\n        switchMap((options: ServerReportStatsOptionResponse) => [setUsageStats({\n          allowed: options.enabled,\n          currVersion: options.current_version,\n          allowedVersion: options.enabled_version\n        })])\n      )\n    )\n  ));\n\n  setStatsPref$ = createEffect(\n    () => this.actions.pipe(\n      ofType(updateUsageStats),\n      mergeMap(\n        (action) => this.serverService.serverReportStatsOption({enabled: action.allowed})\n          .pipe(\n            switchMap((options: ServerReportStatsOptionResponse) => [setUsageStats({\n              allowed: options.enabled,\n              currVersion: options.current_version,\n              allowedVersion: options.enabled_version\n            })])\n          )\n      )\n    )\n  );\n}\n","import {RECENT_TASKS_ACTIONS} from '../../app.constants';\nimport {SetRecentTasks} from '../../webapp-common/core/actions/recent-tasks.actions';\nimport {Task} from '../../business-logic/model/tasks/task';\n\nconst initTasks = {\n  data : <Array<Partial<Task>>>[],\n};\n\n\nexport function recentTasksReducer(state = initTasks, action: SetRecentTasks) {\n  switch (action.type) {\n    case RECENT_TASKS_ACTIONS.SET_RECENT_TASKS:\n      return {...state, data: action.payload.tasks};\n    default:\n      return state;\n  }\n}\n","import {HttpClientModule} from '@angular/common/http';\nimport {DEFAULT_CURRENCY_CODE, NgModule} from '@angular/core';\nimport {AUTH_PREFIX} from '@common/core/actions/common-auth.actions';\nimport {PROJECTS_PREFIX as ROOT_PROJECTS_PREFIX} from '@common/core/actions/projects.actions';\nimport {CommonAuthEffects} from '@common/core/effects/common-auth.effects';\nimport {LayoutEffects} from '@common/core/effects/layout.effects';\nimport {ProjectsEffects as CommonProjectsEffect} from '@common/core/effects/projects.effects';\nimport {RouterEffects} from '@common/core/effects/router.effects';\nimport {CommonUserEffects} from '@common/core/effects/users.effects';\nimport {createUserPrefReducer} from '@common/core/meta-reducers/user-pref-reducer';\nimport {messagesReducer} from '@common/core/reducers/messages-reducer';\nimport {projectsReducer} from '@common/core/reducers/projects.reducer';\nimport {routerReducer} from '@common/core/reducers/router-reducer';\nimport {SmSyncStateSelectorService} from '@common/core/services/sync-state-selector.service';\nimport {EXPERIMENTS_COMPARE_METRICS_CHARTS_} from '@common/experiments-compare/actions/experiments-compare-charts.actions';\nimport {compareSyncedKeys} from '@common/experiments-compare/experiments-compare.module';\nimport {EXPERIMENTS_OUTPUT_PREFIX} from '@common/experiments/actions/common-experiment-output.actions';\nimport {EXPERIMENTS_INFO_PREFIX} from '@common/experiments/actions/common-experiments-info.actions';\nimport {EXPERIMENTS_PREFIX} from '@common/experiments/actions/common-experiments-view.actions';\nimport {EXPERIMENTS_STORE_KEY} from '@common/experiments/shared/common-experiments.const';\nimport {MODELS_PREFIX_INFO, MODELS_PREFIX_MENU, MODELS_PREFIX_VIEW, MODELS_STORE_KEY} from '@common/models/models.consts';\nimport {modelSyncedKeys} from '@common/models/models.module';\nimport {PROJECTS_PREFIX} from '@common/projects/common-projects.consts';\nimport {CHOOSE_COLOR_PREFIX} from '@common/shared/ui-components/directives/choose-color/choose-color.actions';\nimport {colorSyncedKeys} from '@common/shared/ui-components/directives/choose-color/choose-color.module';\nimport {UserPreferences} from '@common/user-preferences';\nimport {EffectsModule} from '@ngrx/effects';\nimport {ActionReducer, MetaReducer, StoreModule, USER_PROVIDED_META_REDUCERS} from '@ngrx/store';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {merge, pick} from 'lodash/fp';\nimport {USERS_PREFIX, VIEW_PREFIX} from '~/app.constants';\nimport {ProjectsEffects} from '~/core/effects/projects.effects';\nimport {experimentSyncedKeys} from '~/features/experiments/experiments.module';\nimport {loginReducer} from '~/features/login/login.reducer';\nimport {projectSyncedKeys} from '~/features/projects/projects.module';\nimport {authReducer} from '~/features/settings/containers/admin/auth.reducers';\nimport {AdminService} from '~/shared/services/admin.service';\nimport {UserEffects} from './effects/users.effects';\nimport {recentTasksReducer} from './reducers/recent-tasks-reducer';\nimport {sourcesReducer} from './reducers/sources-reducer';\nimport {usageStatsReducer} from './reducers/usage-stats.reducer';\nimport {usersReducer} from './reducers/users.reducer';\nimport {viewReducer} from './reducers/view.reducer';\nimport {UsageStatsService} from './services/usage-stats.service';\n\nexport const reducers = {\n  auth: authReducer,\n  router: routerReducer,\n  messages: messagesReducer,\n  recentTasks: recentTasksReducer,\n  views: viewReducer,\n  sources: sourcesReducer,\n  users: usersReducer,\n  login: loginReducer,\n  rootProjects: projectsReducer,\n  userStats: usageStatsReducer\n};\n\nconst syncedKeys = [\n  'auth.S3BucketCredentials',\n  'datasets.selectedVersion',\n  'datasets.selected',\n  'projects.selectedProjectId',\n  'projects.selectedProject',\n  'views.availableUpdates',\n  'views.showSurvey',\n  'views.neverShowPopupAgain'\n];\nconst key = '_saved_state_';\n\nconst actionsPrefix = [AUTH_PREFIX, USERS_PREFIX, VIEW_PREFIX, ROOT_PROJECTS_PREFIX];\n\nif (!localStorage.getItem(key)) {\n  localStorage.setItem(key, '{}');\n}\n\nexport const localStorageReducer = (reducer: ActionReducer<any>): ActionReducer<any> =>\n  (state, action) => {\n    let nextState = reducer(state, action);\n    // TODO: lil hack to fix ngrx bug in preload strategy that dispatch store/init multiple times.\n    if (action.type === '@ngrx/store/init') {\n      const savedState = JSON.parse(localStorage.getItem(key));\n      nextState = merge(nextState, savedState);\n   }\n\n    if (state === nextState) {\n      return nextState;\n   }\n\n    if (actionsPrefix && !actionsPrefix.some(ap => action.type.startsWith(ap))) {\n      return nextState;\n   }\n\n    localStorage.setItem(key, JSON.stringify(pick(syncedKeys, nextState)));\n\n    return nextState;\n };\n\nconst userPrefMetaFactory = (userPreferences: UserPreferences): MetaReducer<any>[] => [\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer('users', ['activeWorkspace'], [USERS_PREFIX], userPreferences, reducer),\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer('rootProjects', ['tagsColors', 'graphVariant'], [ROOT_PROJECTS_PREFIX], userPreferences, reducer),\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer('views', ['autoRefresh', 'neverShowPopupAgain'], [VIEW_PREFIX], userPreferences, reducer),\n  localStorageReducer,\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer('projects', projectSyncedKeys, [PROJECTS_PREFIX], userPreferences, reducer),\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer(EXPERIMENTS_STORE_KEY, experimentSyncedKeys, [EXPERIMENTS_PREFIX, EXPERIMENTS_INFO_PREFIX, EXPERIMENTS_OUTPUT_PREFIX], userPreferences, reducer),\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer(MODELS_STORE_KEY, modelSyncedKeys, [MODELS_PREFIX_INFO, MODELS_PREFIX_MENU, MODELS_PREFIX_VIEW], userPreferences, reducer),\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer('compare-experiments', compareSyncedKeys, [EXPERIMENTS_COMPARE_METRICS_CHARTS_], userPreferences, reducer),\n  (reducer: ActionReducer<any>) =>\n    createUserPrefReducer('colorsPreference', colorSyncedKeys, [CHOOSE_COLOR_PREFIX], userPreferences, reducer)\n];\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers, {\n      runtimeChecks: {\n        strictStateImmutability: true,\n        strictActionImmutability: true,\n        strictStateSerializability: true,\n        strictActionSerializability: true\n      }\n    }),\n    EffectsModule.forRoot([\n      CommonAuthEffects,\n      LayoutEffects,\n      CommonUserEffects,\n      UserEffects,\n      RouterEffects,\n      CommonProjectsEffect,\n      ProjectsEffects\n    ]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25 //  Retains last 25 states\n    }),\n    HttpClientModule,\n  ],\n  providers: [\n    SmSyncStateSelectorService,\n    UsageStatsService,\n    AdminService,\n    {\n      provide: USER_PROVIDED_META_REDUCERS,\n      deps: [UserPreferences],\n      useFactory: userPrefMetaFactory\n    },\n    {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'},\n  ],\n  declarations: [],\n  exports: []\n})\nexport class SMCoreModule {\n}\n","export function sourcesReducer(sources = {}, action) {\n\n  switch (action.type) {\n    default:\n      return sources;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport {catchError} from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport {selectCurrentUser} from '../reducers/users-reducer';\nimport {Store} from '@ngrx/store';\nimport {GetCurrentUserResponseUserObject} from '~/business-logic/model/users/getCurrentUserResponseUserObject';\nimport {setCurrentUser} from '~/core/actions/users.action';\n\n@Injectable()\nexport class WebappInterceptor implements HttpInterceptor {\n  protected user: GetCurrentUserResponseUserObject;\n\n  constructor(protected router: Router, protected store: Store<any>) {\n    this.store.select(selectCurrentUser).subscribe(user => this.user = user);\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    request = request.clone({\n      setHeaders: {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        'X-Allegro-Client': 'Webapp-' + environment.version,\n      }\n    });\n\n    return next.handle(request).pipe(\n      catchError((err: HttpErrorResponse) => this.errorHandler(request, err))\n    );\n  }\n\n  protected errorHandler(request: HttpRequest<any>, err: HttpErrorResponse) {\n    const redirectUrl: string = window.location.pathname + window.location.search;\n    if (request.url.endsWith('system.company_info')) {\n      return throwError(err);\n    }\n    // For automatic login don't go to login page (login in APP_INITIALIZER)\n    if (err.status === 401 && (\n      ['/dashboard'].includes(redirectUrl) ||\n      !environment.autoLogin ||\n      (environment.autoLogin && this.user)\n    )) {\n      if (redirectUrl.indexOf('/signup') > -1) {\n      } else if (redirectUrl.indexOf('/login') === -1) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this.store.dispatch(setCurrentUser({user: null, terms_of_use: null}));\n        this.router.navigate(['login'], {queryParams: {redirect: redirectUrl}, replaceUrl: true});\n      }\n      return throwError(err);\n    } else {\n      return throwError(err);\n    }\n  }\n}\n","import {ActivatedRouteSnapshot, RouteReuseStrategy, DetachedRouteHandle} from '@angular/router';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class CustomReuseStrategy implements RouteReuseStrategy {\n\n  handlers: { [key: string]: DetachedRouteHandle } = {};\n\n  /**\n   * Object which will store RouteStorageObjects indexed by keys\n   * The keys will all be a path (as in this.calcKey(route))\n   * This allows us to see if we've got a route stored for the requested path\n   */\n\n  calcKey(route: ActivatedRouteSnapshot) {\n    const url = route.pathFromRoot.map(x => x.url.map(u => u.path).join('/')).join(';');\n    // console.debug('calcKey url: ' + url);\n    if (!url.length) return undefined;\n    return url;\n  }\n\n  /**\n   * Decides when the route should be stored\n   * If the route should be stored, I believe the boolean is indicating to a controller whether or not to fire this.store\n   * _When_ it is called though does not particularly matter, just know that this determines whether or not we store the route\n   * An idea of what to do here: check the this.calcKey(route) to see if it is a path you would like to store\n   * @param route This is, at least as I understand it, the route that the user is currently on, and we would like to know if we want to store it\n   * @returns boolean indicating that we want to (true) or do not want to (false) store that route\n   */\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    // console.debug('CustomReuseStrategy:shouldDetach', route);\n    if (!route.routeConfig) return false;\n    if (route.routeConfig.loadChildren) return false;\n    if (route.routeConfig.data && route.routeConfig.data.reuse) {\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   * Constructs object of type `RouteStorageObject` to store, and then stores it for later attachment\n   * @param route This is stored for later comparison to requested routes, see `this.shouldAttach`\n   * @param handle Later to be retrieved by this.retrieve, and offered up to whatever controller is using this class\n   */\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\n    // console.debug('CustomReuseStrategy:store', route, handle);\n    if (!route.routeConfig) return;\n    if (route.routeConfig.loadChildren) return;\n    if (route.routeConfig.data && route.routeConfig.data.reuse) {\n      const key = this.calcKey(route);\n      if (key) this.handlers[key] = handle;\n    }\n  }\n\n  /**\n   * Determines whether or not there is a stored route and, if there is, whether or not it should be rendered in place of requested route\n   * @param route The route the user requested\n   * @returns boolean indicating whether or not to render the stored route\n   */\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    // console.debug('CustomReuseStrategy:shouldAttach', route);\n    if (!route.routeConfig) return false;\n    if (route.routeConfig.loadChildren) return false;\n    if (route.routeConfig.data && route.routeConfig.data.reuse) {\n      const key = this.calcKey(route);\n      if (key) return !!this.handlers[key];\n    }\n    return false;\n  }\n\n  /**\n   * Finds the locally stored instance of the requested route, if it exists, and returns it\n   * @param route New route the user has requested\n   * @returns DetachedRouteHandle object which can be used to render the component\n   */\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\n    // console.debug('CustomReuseStrategy:retrieve', route);\n    if (!route.routeConfig) return null;\n    if (route.routeConfig.loadChildren) return null;\n    if (route.routeConfig.data && route.routeConfig.data.reuse) {\n      const key = this.calcKey(route);\n      if (key) return this.handlers[key] || null;\n    }\n    return null;\n  }\n\n  /**\n   * Determines whether or not the current route should be reused\n   * @param future The route the user is going to, as triggered by the router\n   * @param curr The route the user is currently on\n   * @returns boolean basically indicating true if the user intends to leave the current route\n   */\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    // console.debug('CustomReuseStrategy:shouldReuseRoute', future, curr);\n    return future.routeConfig === curr.routeConfig;\n  }\n\n  /**\n   * This nasty bugger finds out whether the objects are _traditionally_ equal to each other, like you might assume someone else would have put this function in vanilla JS already\n   * One thing to note is that it uses coercive comparison (==) on properties which both objects have, not strict comparison (===)\n   * Another important note is that the method only tells you if `compare` has all equal parameters to `base`, not the other way around\n   * @param base The base object which you would like to compare another object to\n   * @param compare The object to compare to base\n   * @returns boolean indicating whether or not the objects have all the same properties and those properties are ==\n   */\n  private compareObjects(base: any, compare: any): boolean {\n\n    // loop through all properties in base object\n    for (const baseProperty in base) {\n\n      // determine if comparrison object has that property, if not: return false\n      if (compare.hasOwnProperty(baseProperty)) {\n        switch (typeof base[baseProperty]) {\n          // if one is object and other is not: return false\n          // if they are both objects, recursively call this comparison function\n          case 'object':\n            if (typeof compare[baseProperty] !== 'object' || !this.compareObjects(base[baseProperty], compare[baseProperty])) {\n              return false;\n            }\n            break;\n          // if one is function and other is not: return false\n          // if both are functions, compare function.toString() results\n          case 'function':\n            if (typeof compare[baseProperty] !== 'function' || base[baseProperty].toString() !== compare[baseProperty].toString()) {\n              return false;\n            }\n            break;\n          // otherwise, see if they are equal using coercive comparison\n          default:\n            if (base[baseProperty] != compare[baseProperty]) {\n              return false;\n            }\n        }\n      } else {\n        return false;\n      }\n    }\n\n    // returns true only after false HAS NOT BEEN returned through all loops\n    return true;\n  }\n}\n","import {APP_INITIALIZER, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {PreloadAllModules, RouteReuseStrategy, RouterModule} from '@angular/router';\nimport {BusinessLogicModule} from './business-logic/business-logic.module';\nimport {AppComponent} from './app.component';\nimport {routes} from './app.routes';\nimport {SMCoreModule} from './core/core.module';\nimport {SMSharedModule} from '@common/shared/shared.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonLayoutModule} from '@common/layout/layout.module';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {WebappInterceptor} from '@common/core/interceptors/webapp-interceptor';\nimport {CustomReuseStrategy} from '@common/core/router-reuse-strategy';\nimport {loadUserAndPreferences, UserPreferences} from '@common/user-preferences';\nimport {AngularSplitModule} from 'angular-split';\nimport {NotifierModule} from '@common/angular-notifier';\nimport {LayoutModule} from './layout/layout.module';\nimport {ColorHashService} from '@common/shared/services/color-hash/color-hash.service';\nimport {SharedModule} from './shared/shared.module';\nimport {ConfigurationService} from '@common/shared/services/configuration.service';\nimport {ProjectsSharedModule} from './features/projects/shared/projects-shared.module';\nimport {MAT_FORM_FIELD_DEFAULT_OPTIONS} from '@angular/material/form-field';\nimport {LoginService} from '~/shared/services/login.service';\nimport {SettingsModule} from '~/features/settings/settings.module';\n\n@NgModule({\n  declarations   : [AppComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    ProjectsSharedModule,\n    BrowserModule,\n    SMCoreModule,\n    BusinessLogicModule,\n    SMSharedModule,\n    AngularSplitModule,\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n      scrollPositionRestoration: 'top',\n      onSameUrlNavigation: 'reload',\n      relativeLinkResolution: 'legacy'\n}),\n    SettingsModule,\n    NotifierModule.withConfig({\n      theme: 'material',\n      behaviour: {\n        autoHide: {default: 5000, error: false}\n      },\n      position: {\n        vertical: {position: 'top', distance: 12, gap: 10},\n        horizontal: {position: 'right', distance: 12}\n      }\n    }),\n    CommonLayoutModule,\n    LayoutModule,\n    SharedModule,\n  ],\n  providers      : [\n    UserPreferences,\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {floatLabel: 'always'}},\n    {\n      provide   : APP_INITIALIZER,\n      deps: [LoginService, ConfigurationService],\n      useFactory: loadUserAndPreferences,\n      multi     : true,\n    },\n    ColorHashService,\n    {provide: HTTP_INTERCEPTORS, useClass: WebappInterceptor, multi: true},\n    {provide: RouteReuseStrategy, useClass: CustomReuseStrategy},\n    {\n      provide: 'googleTagManagerId',\n      deps: [ConfigurationService],\n      useFactory: (confService: ConfigurationService) =>\n        confService.getStaticEnvironment().GTM_ID\n    }\n  ],\n  bootstrap      : [AppComponent],\n  exports        : []\n})\nexport class AppModule {}\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {ConfigurationService} from './app/webapp-common/shared/services/configuration.service';\nconst environment = ConfigurationService.globalEnvironment;\n\nif (environment.production) {\n  enableProdMode();\n}\n\nif (window.navigator && navigator.serviceWorker) {\n  navigator.serviceWorker.getRegistrations().then(function (registrations) {\n    for (const registration of registrations) {\n      registration.unregister();\n    }\n  });\n}\n\n// Removing currentUser from local storage (login think user logged-in if it exists )\nconst savedData = localStorage.getItem('_saved_state_');\nif (savedData) {\n  try {\n    const savedJson = JSON.parse(savedData);\n    if (savedJson.users) {\n      delete savedJson.users;\n      localStorage.setItem('_saved_state_', JSON.stringify(savedJson));\n    }\n  } catch {\n    localStorage.removeItem('_saved_state_');\n  }\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"]}