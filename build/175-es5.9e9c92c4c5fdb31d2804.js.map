{"version":3,"mappings":"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","names":["getQueues","createAction","queuesPrefix","setQueues","props","queuesTableSortChanged","queuesTableSetSort","setSelectedQueue","refreshSelectedQueue","setSelectedQueueFromServer","syncSpecificQueueInTable","deleteQueue","moveExperimentToBottomOfQueue","moveExperimentToTopOfQueue","moveExperimentInQueue","removeExperimentFromQueue","moveExperimentToOtherQueue","addExperimentToQueue","getStats","setStats","setStatsParams","CREATE_QUEUE_DIALOG_PREFIX","CREATE_QUEUE_ACTIONS","GET_QUEUES","SET_QUEUES","RESET_STATE","CREATE_NEW_QUEUE","UPDATE_QUEUE","SET_CREATION_STATUS","Nt","constructor","this","Wt","queues","payload","Ft","Rt","Dt","ae","creationStatus","createQueueInitState","selectCreateQueueDialog","createFeatureSelector","selectQueues","createSelector","state","selectCreationStatus","action","type","i0","n","CreateNewQueueFormComponent","name","id","EventEmitter","queuesNames","map","queue","send","queueForm","valid","queueCreated","emit","onSubmit","ɵfac","selectors","ctx","QueueCreateDialogComponent","store","matDialogRef","data","editMode","queues$","select","createQueueSelectors","ngOnInit","dispatch","createNewQueueActions","creationStatusSubscription","subscribe","status","close","ngOnDestroy","unsubscribe","createQueue","MAT_DIALOG_DATA","WorkersAndQueuesComponent","dialog","route","queuesManager","snapshot","addQueue","createQueueDialog","open","afterClosed","pipe","filter","take","workersPrefix","getWorkers","setWorkers","getSelectedWorker","setSelectedWorker","workersTableSortChanged","workersTableSetSort","QUEUES_TABLE_COL_FIELDS","ID","NAME","USER","QUEUED","TASK","IN_QUEUE","LAST_UPDATED","WORKERS_TABLE_COL_FIELDS","TASK_RUNNING_TIME","TASK_ITERATIONS","MiB","WORKER_STATS_PARAM_INFO","cpu_usage","title","multiply","gpu_usage","memory_used","gpu_memory_used","network_rx","network_tx","TIME_INTERVALS","HOUR","DAY","WEEK","MONTH","YEAR","initQueues","selectedQueue","tasks","stats","wait","length","selectedStatsTimeFrame","toString","tableSortFields","field","order","TABLE_SORT_ORDER","initWorkersStore","selectedWorker","selectedStatsParam","workersReducer","createReducer","on","Object","workers","worker","orders","statsRequest","timeFrame","param","showStatsErrorNotice","hideNoStatsNotice","_statsReducer","showNoStatsNotice","reducers","s","_a","workersAndQueues","selectSelectedQueue","selectQueuesTasks","selectQueueStats","selectQueuesStatsTimeFrame","selectQueuesTableSortFields","selectWorkers","selectStats","selectSelectedWorker","selectWorkersTableSortFields","selectStatsParams","selectStatsTimeFrame","selectStatsErrorNotice","WorkersStatsComponent","label","value","get","activeWorker","yAxisLabel","yAxisLabels","currentParam","chartChanged","chartParamSubscription","combineLatest","_ref2","currentTimeFrame","chartDataSubscription","refreshChart","chartData","dataByTopic","clearInterval","intervaleHandle","range","parseInt","width","chartRef","element","nativeElement","clientWidth","Math","min","granularity","max","floor","maxPoints","window","setInterval","chartParamChange","event","timeFrameChange","ViewContainerRef","WorkersTableComponent","super","cols","headerType","ColHeaderTypeEnum","header","style","sortable","focusSelected","_workers","set","table","getBodyData","rowData","col","onRowClicked","workerSelected","scrollTableToTop","tableContainer","scroll","top","onSortChanged","isShift","colId","sortedChanged","afterTableInit","emitSelection","selection","BaseTableView","WorkerInfoComponent","class","deselectWorkerClicked","deselectWorker","WorkersComponent","router","workers$","selectedWorker$","tableSortFields$","url","URL","location","href","searchParams","withLatestFrom","_ref6","routerWorkerId","find","selectWorker","navigate","relativeTo","queryParams","queryParamsHandling","sort","QueueStatsComponent","index","option","updateChart","waitChartData","lenChartData","waitChartRef","tickFormatter","seconds","th","padStart","timeFrameChanged","$event","ctx_r1","ctx_r3","QueuesMenuComponent","ICONS","QueuesMenuExtendedComponent","contextMenu","t","QueuesTableComponent","changeDetector","_queues","clickHandler","button","menuOpen","getQNames","getQName","queueIns","queueSelected","openContextMenu","e","preventDefault","setTimeout","menuPosition","x","clientX","y","clientY","detectChanges","QueueInfoComponent","blTaskService","_selectedQueue","cloneDeep","activeTab","routerTab","findQueueById","deselectQueueClicked","deselectQueue","experimentDropped","task","entries","previousIndex","count","currentIndex","moveItemInArray","menuSelectedExperiment","moveToTop","moveToBottom","moveToQueue","enqueuePopup","removeFromQueue","SelectQueueComponent","res","confirmed","setPreviouslyUsedQueue","QueuesComponent","queuesTasks$","selectedQueue$","_ref10","routerQueueId","selectQueue","renameQueue","q","WorkersAndQueuesResolver","resolve","of","factory","routes","path","component","children","redirectTo","WorkersAndQueuesRoutingModule","RouterModule","defaultMaxValHandler","target","hasOwnProperty","values","current","requestedKeys","entityParamName","paramInfo","topicIDs","Proxy","forEach","topicObj","topicID","topic","slice","allDates","Set","flattenDeep","d","metrics","dates","shouldAddEntity","entityData","entity","reqKey","paramData","metric","key","aggData","aggregation","topicName","push","tplList","date","strDate","Date","toISOString","findIndex","dateObj","idx","indexOf","reqParam","topics","splice","fromDate","toDate","WorkersEffects","actions","workersApi","createEffect","ofType","workersActions","switchMap","_ref15","sortFields","workersGetAll","mergeMap","transformAndSortWorkers","actionsToFire","deactivateLoader","catchError","err","requestFailed","_ref17","currentStats","selectedRange","params","now","getTime","keys","split","val","Array","isArray","some","removeFullRangeMarkers","lastDate","topicLastDate","getOr","last","req","entitie","from_date","to_date","worker_ids","items","castArray","interval","workersGetStats","addStats","addFullRangeMarkers","addMessage","MESSAGES_SEVERITY","workersGetActivityReport","result","activity","total","counts","active","oldOrders","addMultipleSortColumns","srtByFields","f","srtByOrders","orderBy","QueuesEffect","queuesApi","tasksApi","activeLoader","_ref23","orderFields","queuesGetAllEx","only_fields","order_by","encodeOrder","sortQueues","tap","_ref25","queuesDelete","_ref27","queuesMoveTaskToFront","_ref29","queuesMoveTaskToBack","_ref31","queuesMoveTaskBackward","tasksDequeue","_ref33","queuesRemoveTask","queuesAddTask","queuesGetQueueMetrics","queue_ids","newStats","newQueue","lenData","avg_waiting_times","queue_lengths","queueAvgWait","queueLen","N","queuesApiService","queuesCreate","error","queuesUpdate","QueueCreateDialogEffects","__decorate","Effect","J","QueueCreateDialogModule","UiComponentsModule","CommonModule","FormsModule","ReactiveFormsModule","SMMaterialModule","StoreModule","queueCreateDialogReducer","EffectsModule","WorkersAndQueuesModule","ExperimentSharedModule","SharedPipesModule","SharedModule","SMSharedModule","SelectQueueModule","AngularSplitModule"],"sources":["webpack:///src/app/webapp-common/workers-and-queues/actions/queues.actions.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.actions.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.reducer.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/create-new-queue-form/create-new-queue-form.component.html","webpack:///src/app/webapp-common/shared/queue-create-dialog/create-new-queue-form/create-new-queue-form.component.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.component.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.component.html","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues.component.html","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues.component.ts","webpack:///src/app/webapp-common/workers-and-queues/actions/workers.actions.ts","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues.consts.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/queues.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/workers.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/actions/stats.actions.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/stats.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/index.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/workers-stats/workers-stats.component.html","webpack:///src/app/webapp-common/workers-and-queues/containers/workers-stats/workers-stats.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/workers-table/workers-table.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/workers-table/workers-table.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/worker-info/worker-info.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/worker-info/worker-info.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/workers/workers.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/workers/workers.component.html","webpack:///src/app/webapp-common/workers-and-queues/containers/queue-stats/queue-stats.component.html","webpack:///src/app/webapp-common/workers-and-queues/containers/queue-stats/queue-stats.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.ts","webpack:///src/app/features/workers-and-queues/queues-menu-extended/queues-menu-extended.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-table/queues-table.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-table/queues-table.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/queue-info/queue-info.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/queue-info/queue-info.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/queues/queues.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/queues/queues.component.html","webpack:///src/app/shared/resolvers/workers-and-queues.resolver.ts","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues-routing.module.ts","webpack:///src/app/webapp-common/shared/utils/statistics.ts","webpack:///src/app/webapp-common/workers-and-queues/effects/workers.effects.ts","webpack:///src/app/webapp-common/workers-and-queues/effects/queues.effects.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.effects.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.module.ts","webpack:///src/app/features/workers-and-queues/workers-and-queues.module.ts"],"sourcesContent":["import {createAction, props} from '@ngrx/store';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {Topic} from '../../shared/utils/statistics';\nimport {SortMeta} from 'primeng/api';\n\nconst queuesPrefix = 'QUEUES_';\nexport const GET_QUEUES = queuesPrefix + 'GET_QUEUES';\nexport const SET_QUEUES = queuesPrefix + 'SET_QUEUES';\n// export const GET_QUEUES_TASKS = queuesPrefix + 'SET_QUEUES_TASKS';\n// export const SET_QUEUES_TASKS = queuesPrefix + 'SET_QUEUES_TASKS';\n// export const ADD_QUEUES_TASKS = queuesPrefix + 'ADD_QUEUES_TASKS';\nexport const MOVE_EXPERIMENT_TO_BOTTOM_OF_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_TO_BOTTOM_OF_QUEUE';\nexport const MOVE_EXPERIMENT_TO_TOP_OF_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_TO_TOP_OF_QUEUE';\nexport const MOVE_EXPERIMENT_IN_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_IN_QUEUE';\nexport const REMOVE_EXPERIMENT_FROM_QUEUE = queuesPrefix + 'REMOVE_EXPERIMENT_FROM_QUEUE';\nexport const MOVE_EXPERIMENT_TO_OTHER_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_TO_OTHER_QUEUE';\nexport const ADD_EXPERIMENT_TO_QUEUE = queuesPrefix + 'ADD_EXPERIMENT_TO_QUEUE';\nexport const SET_SELECTED_QUEUE = queuesPrefix + 'SET_SELECTED_QUEUE';\nexport const QUEUES_TABLE_SORT_CHANGED = queuesPrefix + 'QUEUES_TABLE_SORT_CHANGED';\nexport const QUEUES_TABLE_SET_SORT = queuesPrefix + 'QUEUES_TABLE_SET_SORT';\nexport const REFRESH_SELECTED_QUEUE = queuesPrefix + 'REFRESH_SELECTED_QUEUE';\nexport const SET_SELECTED_QUEUE_FROM_SERVER = queuesPrefix + 'SET_SELECTED_QUEUE_FROM_SERVER';\nexport const SYNC_SPECIFIC_QUEUE_IN_TABLE = queuesPrefix + 'SYNC_SPECIFIC_QUEUE_IN_TABLE';\nexport const DELETE_QUEUE = queuesPrefix + 'DELETE_QUEUE';\nexport const GET_STATS = queuesPrefix + 'GET_STATS';\nexport const SET_STATS = queuesPrefix + 'SET_STATS';\nexport const SET_STATS_PARAMS = queuesPrefix + 'SET_STATS_PARAMS';\n\nexport const getQueues = createAction(GET_QUEUES);\n\nexport const setQueues = createAction(\n  SET_QUEUES,\n  props<{ queues: Array<Queue> }>()\n);\n\nexport const queuesTableSortChanged = createAction(\n  QUEUES_TABLE_SORT_CHANGED,\n  props<{ colId: string; isShift: boolean }>()\n);\n\n\nexport const queuesTableSetSort = createAction(\n  QUEUES_TABLE_SET_SORT,\n  props<{ orders: SortMeta[] }>()\n);\n\nexport const setSelectedQueue = createAction(\n  SET_SELECTED_QUEUE,\n  props<{ queue?: Queue }>()\n);\n\nexport const refreshSelectedQueue = createAction(\n  REFRESH_SELECTED_QUEUE\n);\n\nexport const setSelectedQueueFromServer = createAction(\n  SET_SELECTED_QUEUE_FROM_SERVER,\n  props<{ queue?: Queue }>()\n);\n\nexport const syncSpecificQueueInTable = createAction(\n  SYNC_SPECIFIC_QUEUE_IN_TABLE,\n  props<{ queue?: Queue }>()\n);\n\nexport const deleteQueue = createAction(\n  DELETE_QUEUE,\n  props<{ queue: Queue }>()\n);\n\n// export class GetQueuesTasks implements ISmAction {\n//   type = GET_QUEUES_TASKS;\n//   public payload: { queues: Queue };\n//\n//   constructor(queues: Queue) {\n//     this.payload = {queues};\n//   }\n// }\n\n// export class AddQueuesTasks implements ISmAction {\n//   type = ADD_QUEUES_TASKS;\n//\n//   constructor(public payload: { tasks: Task; queueId: string }) {\n//   }\n// }\n\nexport const moveExperimentToBottomOfQueue = createAction(\n  MOVE_EXPERIMENT_TO_BOTTOM_OF_QUEUE,\n  props<{ task: string }>()\n);\n\nexport const moveExperimentToTopOfQueue = createAction(\n  MOVE_EXPERIMENT_TO_TOP_OF_QUEUE,\n  props<{ task: string }>()\n);\n\nexport const moveExperimentInQueue = createAction(\n  MOVE_EXPERIMENT_IN_QUEUE,\n  props<{ task: string; count: number }>()\n);\n\nexport const removeExperimentFromQueue = createAction(\n  REMOVE_EXPERIMENT_FROM_QUEUE,\n  props<{ task: string }>()\n);\n\nexport const moveExperimentToOtherQueue = createAction(\n  MOVE_EXPERIMENT_TO_OTHER_QUEUE,\n  props<{ task: string; queue: string }>()\n);\n\nexport const addExperimentToQueue = createAction(\n  ADD_EXPERIMENT_TO_QUEUE,\n  props<{ task: string; queue: string }>()\n);\n\nexport const getStats = createAction(\n  GET_STATS,\n  props<{ maxPoints?: number }>()\n);\n\nexport const setStats = createAction(\n  SET_STATS,\n  props<{ data: { wait?: Topic[]; length?: Topic[] } }>()\n);\n\nexport const setStatsParams = createAction(\n  SET_STATS_PARAMS,\n  props<{ timeFrame: string }>()\n);\n","import {CreationStatusEnum} from './queue-create-dialog.reducer';\nimport {ISmAction} from '../../core/models/actions';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {QueuesUpdateRequest} from '../../../business-logic/model/queues/queuesUpdateRequest';\nimport {QueuesCreateRequest} from '../../../business-logic/model/queues/queuesCreateRequest';\n\nconst CREATE_QUEUE_DIALOG_PREFIX = 'CREATE_QUEUE_DIALOG_';\n\nexport const CREATE_QUEUE_ACTIONS = {\n  GET_QUEUES         : CREATE_QUEUE_DIALOG_PREFIX + 'GET_QUEUES',\n  SET_QUEUES         : CREATE_QUEUE_DIALOG_PREFIX + 'SET_QUEUES',\n  RESET_STATE        : CREATE_QUEUE_DIALOG_PREFIX + 'RESET_STATE',\n  CREATE_NEW_QUEUE   : CREATE_QUEUE_DIALOG_PREFIX + 'CREATE_NEW_QUEUE',\n  UPDATE_QUEUE       : CREATE_QUEUE_DIALOG_PREFIX + 'UPDATE_QUEUE',\n  SET_CREATION_STATUS: CREATE_QUEUE_DIALOG_PREFIX + 'SET_CREATION_STATUS',\n};\n\n\nexport class GetQueues implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.GET_QUEUES;\n\n  constructor() {\n  }\n}\n\nexport class SetQueues implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.SET_QUEUES;\n  public payload: { queues: Array<Queue> };\n\n  constructor(queues: Array<Queue>) {\n    this.payload = {queues};\n  }\n}\n\nexport class ResetState implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.RESET_STATE;\n\n  constructor() {\n  }\n}\n\nexport class CreateNewQueue implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.CREATE_NEW_QUEUE;\n\n  constructor(public payload: QueuesCreateRequest) {\n  }\n}\n\nexport class UpdateQueue implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.UPDATE_QUEUE;\n\n  constructor(public payload: QueuesUpdateRequest) {\n  }\n}\n\nexport class SetNewQueueCreationStatus implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.SET_CREATION_STATUS;\n  public payload: { creationStatus: CreationStatusEnum };\n\n  constructor(creationStatus: CreationStatusEnum) {\n    this.payload = {creationStatus};\n  }\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {CREATE_QUEUE_ACTIONS} from './queue-create-dialog.actions';\nimport {Queue} from '../../../business-logic/model/queues/queue';\n\nexport type CreationStatusEnum = 'success' | 'failed' | 'inProgress';\nexport const CREATION_STATUS = {\n  SUCCESS    : 'success' as CreationStatusEnum,\n  FAILED     : 'failed' as CreationStatusEnum,\n  IN_PROGRESS: 'inProgress' as CreationStatusEnum,\n};\n\nexport interface ICreateQueueDialog {\n  queues: Array<Queue>;\n  creationStatus: CreationStatusEnum;\n}\n\nconst createQueueInitState: ICreateQueueDialog = {\n  queues        : [],\n  creationStatus: null\n};\n\nexport const selectCreateQueueDialog = createFeatureSelector<ICreateQueueDialog>('queueCreateDialog');\nexport const selectQueues            = createSelector(selectCreateQueueDialog, (state): Array<Queue> => state.queues);\nexport const selectCreationStatus    = createSelector(selectCreateQueueDialog, (state): CreationStatusEnum => state.creationStatus);\n\nexport function queueCreateDialogReducer<ActionReducer>(state: ICreateQueueDialog = createQueueInitState, action): ICreateQueueDialog {\n  switch (action.type) {\n    case CREATE_QUEUE_ACTIONS.SET_CREATION_STATUS:\n      return {...state, creationStatus: action.payload.creationStatus};\n    case CREATE_QUEUE_ACTIONS.SET_QUEUES:\n      return {...state, queues: action.payload.queues};\n    case CREATE_QUEUE_ACTIONS.RESET_STATE:\n      return {...createQueueInitState};\n    default:\n      return state;\n  }\n}\n","<ng-form class=\"create-queue-form\" #queueForm='ngForm'>\n  <div class=\"row position-relative\">\n    <mat-form-field appearance=\"outline\" class=\"w-100 pt-3\">\n      <mat-error *ngIf=\"name?.errors?.required\">Required</mat-error>\n      <mat-error *ngIf=\"name?.errors?.minlength\">Name should contain at least 3 characters</mat-error>\n      <mat-error *ngIf=\"name?.errors?.uniqueName\">Name should be unique</mat-error>\n      <mat-label>Queue name</mat-label>\n      <input matInput type=\"text\"\n             name=\"queueName\"\n             #name=\"ngModel\"\n             [(ngModel)]=\"queue.name\"\n             required\n             minlength=\"3\"\n             smUniqueNameValidator\n             [existingNames]=\"queuesNames\">\n    </mat-form-field>\n  </div>\n  <br/>\n  <div class=\"row\">\n    <div class=\"col-24 create-queue-button\">\n      <button class=\"btn btn-dark-fill center\" [disabled]=\"queueForm.invalid\"\n              (click)=\"send()\">{{isEdit ? 'RENAME' : 'CREATE'}}\n      </button>\n    </div>\n  </div>\n</ng-form>\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n\n@Component({\n  selector   : 'sm-create-new-queue-form',\n  templateUrl: './create-new-queue-form.component.html',\n  styleUrls  : ['./create-new-queue-form.component.scss']\n})\nexport class CreateNewQueueFormComponent {\n  public queuesNames: Array<string>;\n\n  @Input() set queues(queues) {\n    this.queuesNames = queues.map(queue => queue.name);\n  }\n\n  @Input() queue = {\n    name: null,\n    id  : null\n  };\n\n  @Output() queueCreated = new EventEmitter();\n  @ViewChild('queueForm', {static: true}) queueForm: NgForm;\n\n\n  get isEdit(): boolean {\n    return !!this.queue.id;\n  }\n\n  send() {\n    if (this.queueForm.valid) {\n      this.queueCreated.emit(this.queue);\n    } else {\n      this.queueForm.onSubmit(null);\n    }\n  }\n}\n","import * as createNewQueueActions from './queue-create-dialog.actions';\nimport * as createQueueSelectors from './queue-create-dialog.reducer';\n\nimport {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {CREATION_STATUS} from './queue-create-dialog.reducer';\nimport {Observable, Subscription} from 'rxjs';\n\n@Component({\n  selector   : 'sm-queue-create-dialog',\n  templateUrl: './queue-create-dialog.component.html',\n  styleUrls  : ['./queue-create-dialog.component.scss']\n})\nexport class QueueCreateDialogComponent implements OnInit, OnDestroy {\n  public queues$: Observable<any>;\n  private creationStatusSubscription: Subscription;\n  private editMode = false;\n  public queue     = {name: null, id: null};\n\n  constructor(private store: Store<any>, private matDialogRef: MatDialogRef<QueueCreateDialogComponent>, @Inject(MAT_DIALOG_DATA) public data) {\n    if (data) {\n      this.queue    = data;\n      this.editMode = true;\n    }\n    this.queues$ = this.store.select(createQueueSelectors.selectQueues);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new createNewQueueActions.GetQueues());\n    this.creationStatusSubscription = this.store.select(createQueueSelectors.selectCreationStatus).subscribe(status => {\n      if (status === CREATION_STATUS.SUCCESS) {\n        return this.matDialogRef.close(true);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new createNewQueueActions.ResetState());\n    this.creationStatusSubscription.unsubscribe();\n  }\n\n  public createQueue(queue) {\n    if (queue.id) {\n      this.store.dispatch(new createNewQueueActions.UpdateQueue({queue: queue.id, name: queue.name}));\n    } else {\n      this.store.dispatch(new createNewQueueActions.CreateNewQueue(queue));\n    }\n  }\n\n}\n","<sm-dialog-template iconClass=\"al-icon al-ico-queues\" [header]=\"queue.id?'RENAME QUEUE' :'NEW QUEUE'\">\n  <sm-create-new-queue-form [queues]=\"queues$| async\" (queueCreated)=\"createQueue($event)\" [queue]=\"queue\">\n  </sm-create-new-queue-form>\n</sm-dialog-template>\n","<div class=\"navbar-header-container\">\n  <div class=\"d-flex justify-content-between header-container align-items-center\">\n    <div></div>\n    <div class=\"nav-bar-items-container\">\n      <span [routerLink]=\"['workers']\" routerLinkActive #rlaWorkers=\"routerLinkActive\">\n        <sm-navbar-item direction=\"top\" header=\"workers\" [active]=\"rlaWorkers.isActive\"></sm-navbar-item>\n      </span>\n      <span [routerLink]=\"['queues']\" routerLinkActive #rlaQueues=\"routerLinkActive\">\n        <sm-navbar-item direction=\"top\" header=\"queues\" [active]=\"rlaQueues.isActive\"></sm-navbar-item>\n      </span>\n    </div>\n    <div *ngIf=\"rlaQueues.isActive\">\n      <button *ngIf=\"queuesManager\" class=\"btn btn-primary d-flex align-items-center\" (click)=\"addQueue()\">\n        <i class=\"al-icon al-ico-add sm\"></i>\n        <span> &nbsp; NEW QUEUE</span>\n      </button>\n    </div>\n  </div>\n</div>\n<router-outlet></router-outlet>\n","import {Component} from '@angular/core';\nimport {filter, take} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {getQueues} from './actions/queues.actions';\nimport {Store} from '@ngrx/store';\nimport {QueueCreateDialogComponent} from '../shared/queue-create-dialog/queue-create-dialog.component';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'sm-workers-and-queues',\n  templateUrl: './workers-and-queues.component.html',\n  styleUrls: ['./workers-and-queues.component.scss']\n})\nexport class WorkersAndQueuesComponent {\n  private createQueueDialog: MatDialogRef<any, any>;\n  public queuesManager: boolean;\n\n  constructor(private dialog: MatDialog, private store: Store<any>, private route: ActivatedRoute) {\n    this.queuesManager = route.snapshot.data.queuesManager;\n  }\n\n  addQueue() {\n\n    this.createQueueDialog = this.dialog.open(QueueCreateDialogComponent);\n    this.createQueueDialog.afterClosed()\n      .pipe(\n        filter(queue => !!queue),\n        take(1)\n      )\n      .subscribe((queue) => {\n        this.store.dispatch(getQueues());\n      });\n  }\n\n}\n","import {createAction, props} from '@ngrx/store';\nimport {Worker} from '../../../business-logic/model/workers/worker';\nimport {Topic} from '../../shared/utils/statistics';\nimport {SortMeta} from 'primeng/api';\n\nconst workersPrefix = 'WORKERS_';\n\nexport interface WorkerExt extends Worker {\n  name: string;\n}\n\nexport const getWorkers = createAction(\n  workersPrefix + '[get workers and stats]',\n  props<{maxPoints: number}>()\n);\n\nexport const setWorkers = createAction(\n  workersPrefix + '[set workers]',\n  props<{workers: WorkerExt[]}>()\n);\n\nexport const getSelectedWorker = createAction(\n  workersPrefix + '[get selected worker]',\n  props<{worker: WorkerExt}>()\n);\n\nexport const setSelectedWorker = createAction(\n  workersPrefix + '[set selected worker]',\n  props<{worker: WorkerExt}>()\n);\n\nexport const workersTableSortChanged = createAction(\n  workersPrefix + '[table sort changed]',\n  props<{  colId: string; isShift: boolean }>()\n);\n\n\nexport const workersTableSetSort = createAction(\n  workersPrefix + '[set table sort]',\n  props<{ orders: SortMeta[] }>()\n);\n\nexport const setStats = createAction(\n  workersPrefix + '[set stats]',\n  props<{data: Topic[]}>()\n);\n\nexport const setStatsParams = createAction(\n  workersPrefix + '[set stats parameters]',\n  props<{ timeFrame: string; param: string }>()\n);\n","export const QUEUES_TABLE_COL_FIELDS = {\n  ID          : 'id',\n  NAME        : 'name',\n  USER        : 'user.name',\n  QUEUED      : 'status_changed',\n  TASK        : 'entries[0].task.name',\n  IN_QUEUE    : 'entries.length',\n  LAST_UPDATED: 'last_update'\n};\n\nexport const WORKERS_TABLE_COL_FIELDS = {\n  ID               : 'id',\n  TASK             : 'task.name',\n  TASK_RUNNING_TIME: 'task.running_time',\n  TASK_ITERATIONS  : 'task.last_iteration'\n};\n\nconst MiB                            = 1024 * 1024;\nexport const WORKER_STATS_PARAM_INFO = {\n  cpu_usage      : {title: 'CPU Usage', multiply: 1},\n  gpu_usage      : {title: 'GPU Usage', multiply: 1},\n  memory_used    : {title: 'Memory Used', multiply: MiB},\n  gpu_memory_used: {title: 'GPU Memory', multiply: MiB},\n  network_rx     : {title: 'Network Receive', multiply: MiB},\n  network_tx     : {title: 'Network Transmit', multiply: MiB}\n};\n\nconst HOUR  = 60 * 60;\nconst DAY   = HOUR * 24;\nconst WEEK  = 7 * DAY;\nconst MONTH = 30 * DAY;\nconst YEAR  = 365 * DAY;\n\nexport const TIME_INTERVALS = {\n  HOUR,\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR\n};\n","import {\n  queuesTableSetSort, setQueues, setSelectedQueue, setSelectedQueueFromServer, syncSpecificQueueInTable, setStats, setStatsParams\n} from '../actions/queues.actions';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {QUEUES_TABLE_COL_FIELDS, TIME_INTERVALS} from '../workers-and-queues.consts';\nimport {TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport {SortMeta} from 'primeng/api';\nimport {ITask} from '../../../business-logic/model/al-task';\n\ninterface QueueStoreType {\n  data: Queue[];\n  selectedQueue: Queue;\n  tasks: ITask[];\n  stats: {wait: any; length: number};\n  selectedStatsTimeFrame: string;\n  tableSortFields: SortMeta[];\n}\n\nconst initQueues: QueueStoreType = {\n  data                  : null as Queue[],\n  selectedQueue         : null as Queue,\n  tasks                 : null as any[],\n  stats                 : {wait: null, length: null},\n  selectedStatsTimeFrame: (3 * TIME_INTERVALS.HOUR).toString(),\n  tableSortFields       : [{field: QUEUES_TABLE_COL_FIELDS.NAME, order: TABLE_SORT_ORDER.ASC}],\n};\n\n\nexport function queuesReducer(state = initQueues, action) {\n  switch (action.type) {\n    case setQueues.type:\n      return {...state, data: action.queues};\n    // case SET_QUEUES_TASKS:\n    //   return {...state, data: action.payload.queues};\n    case setSelectedQueue.type:\n    case setSelectedQueueFromServer.type:\n      return {...state, selectedQueue: action.queue};\n    case syncSpecificQueueInTable.type:\n      return {\n        ...state, data:\n          state.data.map(queue => queue.id === action.queue?.id ? action.queue : queue)\n      };\n    // case ADD_QUEUES_TASKS:\n    //   return {...state, tasks: {...state.tasks, [action.queueId]: action.tasks}};\n    case setStats.type:\n      return {...state, stats: (action as ReturnType<typeof setStats>).data};\n    case queuesTableSetSort.type:\n      return {...state, tableSortFields: action.orders};\n    case setStatsParams.type:\n      return {\n        ...state,\n        selectedStatsTimeFrame: action.timeFrame,\n      };\n    default:\n      return state;\n  }\n}\n","import {createReducer, on} from '@ngrx/store';\nimport {\n  WorkerExt,\n  getWorkers,\n  setWorkers,\n  workersTableSetSort, getSelectedWorker, setSelectedWorker, setStats, setStatsParams\n} from '../actions/workers.actions';\nimport {TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport {TIME_INTERVALS} from '../workers-and-queues.consts';\nimport {Topic} from '../../shared/utils/statistics';\nimport {SortMeta} from 'primeng/api';\n\ninterface WorkerStoreType {\n  data: WorkerExt[];\n  selectedWorker: WorkerExt;\n  stats: Topic[];\n  selectedStatsTimeFrame: string;\n  selectedStatsParam: string;\n  tableSortFields: SortMeta[];\n}\n\nconst initWorkersStore: WorkerStoreType = {\n  data: null,\n  selectedWorker: null,\n  stats: null,\n  selectedStatsTimeFrame: (3 * TIME_INTERVALS.HOUR).toString(),\n  selectedStatsParam: 'cpu_usage;gpu_usage',\n  tableSortFields: [{field: 'id', order: TABLE_SORT_ORDER.ASC}],\n};\n\nexport const workersReducer = createReducer(\n  initWorkersStore,\n  on(setWorkers, (state, action) => ({...state, data: action.workers})),\n  on(setSelectedWorker, getSelectedWorker, (state, action) => ({...state, selectedWorker: action.worker})),\n  on(workersTableSetSort, (state, action) => ({...state, tableSortFields: action.orders})),\n  on(getWorkers, (state, action) => ({...state, statsRequest: action})),\n  on(setStats, (state, action) => ({...state, stats: action.data})),\n  on(setStatsParams, (state, action) => ({\n    ...state,\n    selectedStatsTimeFrame: action.timeFrame,\n    selectedStatsParam: action.param\n  })),\n);\n","import {createAction} from '@ngrx/store';\n\nexport const showStatsErrorNotice = createAction('stats SHOW_STATS_ERROR');\nexport const hideNoStatsNotice = createAction('stats HIDE_STATS_ERROR');\n\n","import { createReducer, on } from '@ngrx/store';\nimport {showStatsErrorNotice, hideNoStatsNotice} from '../actions/stats.actions';\n\nexport interface StatsState {\n  showNoStatsNotice: boolean;\n}\nexport const initialState: StatsState = {\n  showNoStatsNotice: false\n};\n\nconst _statsReducer = createReducer(initialState,\n  on(showStatsErrorNotice, (state: StatsState) => ({...state, showNoStatsNotice: true})),\n  on(hideNoStatsNotice, (state: StatsState) => ({...state, showNoStatsNotice: false}))\n);\n\nexport function statsReducer(state, action) {\n  return _statsReducer(state, action);\n}\n","import {ActionReducerMap, createFeatureSelector, createSelector} from '@ngrx/store';\nimport {Worker} from '../../../business-logic/model/workers/worker';\nimport {queuesReducer} from './queues.reducer';\nimport {workersReducer} from './workers.reducer';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {Task} from '../../../business-logic/model/tasks/task';\nimport {statsReducer, StatsState} from './stats.reducer';\nimport {SortMeta} from 'primeng/api';\n\nexport const reducers: ActionReducerMap<any, any> = {\n  workers: workersReducer,\n  queues : queuesReducer,\n  stats: statsReducer\n};\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const workersAndQueues = createFeatureSelector<any>('workersAndQueues');\n\nexport const queues                      = createSelector(workersAndQueues, state => state.queues);\nexport const selectQueues                = createSelector(queues, (state): Array<Queue> => state.data);\nexport const selectSelectedQueue         = createSelector(queues, (state): Queue => state.selectedQueue);\nexport const selectQueuesTasks           = createSelector(queues, (state): Map<string, Array<Task>> => state.tasks);\nexport const selectQueueStats            = createSelector(queues, state => state.stats);\nexport const selectQueuesStatsTimeFrame  = createSelector(queues, state => state.selectedStatsTimeFrame);\nexport const selectQueuesTableSortFields = createSelector(queues, (state): SortMeta[] => state.tableSortFields);\n\nexport const workers                     = createSelector(workersAndQueues, state => state.workers);\nexport const selectWorkers               = createSelector(workers, (state): Array<Worker> => state.data);\nexport const selectStats                 = createSelector(workers, state => state.stats);\nexport const selectStatsRequest          = createSelector(workers, state => state.statsRequest);\nexport const selectSelectedWorker        = createSelector(workers, state => state.selectedWorker);\nexport const selectWorkersTableSortFields = createSelector(workers, (state): SortMeta[] => state.tableSortFields);\n\nexport const selectStatsParams    = createSelector(workers, state => state.selectedStatsParam);\nexport const selectStatsTimeFrame = createSelector(workers, state => state.selectedStatsTimeFrame);\n\nexport const stats = createSelector(workersAndQueues, state => state.stats);\nexport const selectStatsErrorNotice = createSelector(stats, (state: StatsState) => state.showNoStatsNotice);\n","<div class=\"header d-flex justify-content-between\">\n  <div class=\"d-flex align-items-center\">\n    <div *ngIf=\"!activeWorker\" class=\"title\">Workers Utilization</div>\n    <div *ngIf=\"activeWorker\" class=\"param-selector\">\n      <mat-form-field appearance=\"outline\" class=\"dark-outline thin time-selector\">\n        <mat-select\n          [ngModel]=\"currentParam\"\n          (ngModelChange)=\"chartParamChange($event)\"\n          name=\"chart-param\"\n          panelClass=\"dark-outline\"\n        >\n          <mat-option *ngFor=\"let chartParam of chartParamOptions\" [value]=\"chartParam.value\">\n            {{chartParam.label}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <i *ngIf=\"statsError$ | async\"\n       class=\"warnning fas fa-exclamation-triangle\"\n       smTooltip=\"Data temporarily not available\">\n    </i>\n  </div>\n  <div class=\"time-selector\">\n    <mat-form-field appearance=\"outline\" class=\"dark-outline thin time-selector\">\n      <mat-select [ngModel]=\"currentTimeFrame\" (ngModelChange)=\"timeFrameChange($event)\" name=\"time-frame\" panelClass=\"dark-outline\">\n        <mat-option *ngFor=\"let timeFrame of timeFrameOptions\" [value]=\"timeFrame.value\">\n          {{timeFrame.label}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</div>\n<div #chart class=\"line-chart-container\">\n  <sm-line-chart\n    class=\"h-100\"\n    [showLoadingOverlay]=\"refreshChart\"\n    [data]=\"chartData\"\n    [yLabel]=\"yAxisLabel\"\n    [tooltipVerticalOffset]=\"-75\"></sm-line-chart>\n</div>\n","import {Component, OnInit, Input, OnDestroy, ViewChild, ViewContainerRef} from '@angular/core';\nimport {Worker} from '../../../../business-logic/model/workers/worker';\nimport {Subscription, combineLatest} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {getWorkers, setStats, setStatsParams} from '../../actions/workers.actions';\nimport {selectStatsTimeFrame, selectStatsParams, selectStats, selectStatsErrorNotice} from '../../reducers/index.reducer';\nimport {filter} from 'rxjs/operators';\nimport {get} from 'lodash/fp';\nimport {TIME_INTERVALS} from '../../workers-and-queues.consts';\nimport {Topic} from '../../../shared/utils/statistics';\nimport {IOption} from '../../../shared/ui-components/inputs/select-autocomplete-with-chips/select-autocomplete-with-chips.component';\n\n@Component({\n  selector: 'sm-workers-graph',\n  templateUrl: './workers-stats.component.html',\n  styleUrls: ['./workers-stats.component.scss']\n})\nexport class WorkersStatsComponent implements OnInit, OnDestroy {\n  private chartDataSubscription: Subscription;\n  private chartParamSubscription: Subscription;\n  public statsError$ = this.store.select(selectStatsErrorNotice);\n  private intervaleHandle: number;\n  public currentParam: string;\n  public currentTimeFrame: string;\n  public refreshChart = true;\n  public activeWorker: Worker;\n  public yAxisLabel: string;\n\n  @ViewChild('chart', {read: ViewContainerRef, static: true}) chartRef: ViewContainerRef;\n\n  @Input() set worker(worker: Worker) {\n    if (get('id', this.activeWorker) !== get('id', worker)) {\n      this.activeWorker = worker;\n      if (worker) {\n        this.yAxisLabel = this.yAxisLabels[this.currentParam];\n      }\n      this.chartChanged();\n    }\n  }\n\n  public timeFrameOptions: IOption[] = [\n    {label: '3 Hours', value: (3 * TIME_INTERVALS.HOUR).toString()},\n    {label: '6 Hours', value: (6 * TIME_INTERVALS.HOUR).toString()},\n    {label: '12 Hours', value: (12 * TIME_INTERVALS.HOUR).toString()},\n    {label: '1 Day', value: (TIME_INTERVALS.DAY).toString()},\n    {label: '1 Week', value: (TIME_INTERVALS.WEEK).toString()},\n    {label: '1 Month', value: (TIME_INTERVALS.MONTH).toString()}];\n\n  public chartParamOptions: IOption[] = [\n    {label: 'CPU and GPU Usage', value: 'cpu_usage;gpu_usage'},\n    {label: 'Memory Usage', value: 'memory_used'},\n    {label: 'Video Memory', value: 'gpu_memory_used'},\n    {label: 'Network Usage', value: 'network_rx;network_tx'},\n    //    {label: 'Frames Processed', value: 'frames'},\n  ];\n\n  public yAxisLabels = {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    'cpu_usage;gpu_usage': 'Usage %',\n    memory_used: 'Bytes',\n    gpu_memory_used: 'Bytes',\n    'network_rx;network_tx': 'Bytes/sec'\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n\n  public chartData: { dataByTopic: Topic[] };\n\n  constructor(public store: Store<any>) {\n  }\n\n  ngOnInit() {\n\n\n    this.chartParamSubscription = combineLatest([this.store.select(selectStatsTimeFrame), this.store.select(selectStatsParams)])\n      .pipe(filter(([timeFrame, param]) => !!timeFrame && !!param))\n      .subscribe(([timeFrame, param]) => {\n        this.currentParam = param;\n        this.currentTimeFrame = timeFrame;\n        this.yAxisLabel = this.activeWorker ? this.yAxisLabels[param] : 'Count';\n        this.chartChanged();\n      });\n\n    this.chartDataSubscription = this.store.select(selectStats).subscribe(\n      (data) => {\n        if (data) {\n          this.refreshChart = false;\n          this.chartData = {dataByTopic: data};\n        }\n      }\n    );\n\n    this.chartChanged();\n  }\n\n  ngOnDestroy() {\n    this.chartDataSubscription.unsubscribe();\n    this.chartParamSubscription.unsubscribe();\n    clearInterval(this.intervaleHandle);\n  }\n\n  chartChanged() {\n    const range = parseInt(this.currentTimeFrame, 10);\n    clearInterval(this.intervaleHandle);\n    this.refreshChart = true;\n    let width = this.chartRef.element.nativeElement.clientWidth || 1000;\n    width = Math.min(0.8 * width, 1000);\n    const granularity = Math.max(Math.floor(range / width), this.activeWorker ? 10 : 40);\n\n    this.store.dispatch(setStats({data: null}));\n    this.store.dispatch(getWorkers({maxPoints: width}));\n\n    this.intervaleHandle = window.setInterval(() => {\n      this.store.dispatch(getWorkers({maxPoints: width}));\n    }, granularity * 1000);\n  }\n\n  chartParamChange(event) {\n    this.currentParam = event;\n    this.store.dispatch(setStatsParams({timeFrame: this.currentTimeFrame, param: this.currentParam}));\n  }\n\n  timeFrameChange(event) {\n    this.currentTimeFrame = event;\n    this.store.dispatch(setStatsParams({timeFrame: this.currentTimeFrame, param: this.currentParam}));\n  }\n}\n","<div #tableContainer class=\"worker-container\">\n  <sm-table #table\n            [tableData]=\"workers\"\n            [selection]=\"selectedWorker\"\n            [reorderableColumns]=\"false\"\n            [resizableColumns]=\"false\"\n            [scrollable]=\"true\"\n            [columns]=\"cols\"\n            [rowsNumber]=\"100\"\n            [rowHeight]=\"40\"\n            (rowSelectionChanged)=\"onRowClicked($event)\"\n  >\n    <ng-template let-col let-worker=\"rowData\" pTemplate=\"body\">\n      <ng-container [ngSwitch]=\"col.id\">\n        <ng-container *ngSwitchCase=\"WORKERS_TABLE_COL_FIELDS.TASK_RUNNING_TIME\">\n          <span>{{worker?.task?.running_time | msToSec}}</span>\n          <span *ngIf=\"!worker?.task?.running_time\">&mdash;</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"WORKERS_TABLE_COL_FIELDS.ID\">\n          <span class=\"first-content\" matTooltipPosition=\"above\" [smTooltip]=\"worker.name\">\n            {{worker.name}}\n          </span>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          {{getBodyData(worker, col)}}\n          <span *ngIf=\"(getBodyData(worker, col)!==0) && !getBodyData(worker, col)\">&mdash;</span>\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template let-col pTemplate=\"sort-filter\">\n      <sm-table-filter-sort-template\n        [class.first]=\"col.id === WORKERS_TABLE_COL_FIELDS.ID\"\n        [column]=\"col\"\n        [sortOrder]=\"tableSortFieldsObject[col.id]\"\n        (sortOrderChanged)=\"onSortChanged($event, col.id)\">\n      </sm-table-filter-sort-template>\n    </ng-template>\n  </sm-table>\n</div>\n\n\n\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {ColHeaderTypeEnum, ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {get} from 'lodash/fp';\nimport {WORKERS_TABLE_COL_FIELDS} from '../../workers-and-queues.consts';\nimport {Worker} from '../../../../business-logic/model/workers/worker';\nimport {TableComponent} from '../../../shared/ui-components/data/table/table.component';\nimport {BaseTableView} from '../../../shared/ui-components/data/table/base-table-view';\n\n@Component({\n  selector: 'sm-workers-table',\n  templateUrl: './workers-table.component.html',\n  styleUrls: ['./workers-table.component.scss']\n})\nexport class WorkersTableComponent extends BaseTableView {\n\n  public cols: Array<ISmCol>;\n  public readonly WORKERS_TABLE_COL_FIELDS = WORKERS_TABLE_COL_FIELDS;\n  private _workers: Worker[];\n\n  @Input() set workers(workers: Worker[]) {\n    this._workers = workers;\n    this.table && this.table.focusSelected();\n  }\n\n  get workers() {\n    return this._workers;\n  }\n\n  @Input() selectedWorker: Worker;\n  @Output() workerSelected = new EventEmitter();\n  @Output() sortedChanged = new EventEmitter<{ isShift: boolean; colId: ISmCol['id'] }>();\n\n  @ViewChild('tableContainer', {static: true}) tableContainer;\n  @ViewChild('table', {static: false}) table: TableComponent;\n\n  constructor() {\n    super();\n    this.cols = [\n      {\n        id: WORKERS_TABLE_COL_FIELDS.ID,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'AVAILABLE WORKERS',\n        style: {width: '30%'},\n        sortable: true,\n      },\n      {\n        id: WORKERS_TABLE_COL_FIELDS.TASK,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'CURRENTLY RUNNING EXPERIMENT',\n        style: {width: '30%'},\n        sortable: true,\n      },\n      {\n        id: WORKERS_TABLE_COL_FIELDS.TASK_RUNNING_TIME,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'EXPERIMENT RUNNING TIME',\n        style: {width: '100px'},\n        sortable: true,\n      },\n      {\n        id: WORKERS_TABLE_COL_FIELDS.TASK_ITERATIONS,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'ITERATION',\n        style: {width: '100px'},\n        sortable: true,\n      },\n    ];\n  }\n\n  getBodyData(rowData: any, col: ISmCol): any {\n    return get(col.id, rowData);\n  }\n\n  onRowClicked(event) {\n    this.workerSelected.emit(event.data);\n  }\n\n  scrollTableToTop() {\n    this.tableContainer.nativeElement.scroll({top: 0});\n  }\n\n  onSortChanged(isShift: boolean, colId: ISmCol['id']) {\n    this.sortedChanged.emit({isShift, colId});\n    this.scrollTableToTop();\n  }\n\n  afterTableInit(): void {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  emitSelection(selection: any[]) {\n  }\n}\n","<div class=\"d-flex justify-content-center tabs-container\">\n  <sm-navbar-item header=\"info\" [active]=\"activeTab==='info'\" (click)=\"activeTab = 'info'\"></sm-navbar-item>\n  <sm-navbar-item header=\"queues\" [active]=\"activeTab==='queues'\" (click)=\"activeTab = 'queues'\"></sm-navbar-item>\n  <div class=\"pull-right pointer\" (click)=\"deselectWorkerClicked()\">\n    <i class=\"al-icon al-ico-dialog-x sm-md\"></i>\n  </div>\n</div>\n<div *ngIf=\"activeTab === 'queues' &&  selectedWorker?.queues.length===0\"\n     class=\"d-flex align-items-center justify-content-center p-4\">No queues currently assigned to this worker\n</div>\n<div class=\"queues-table-container\" *ngIf=\"activeTab==='queues' && selectedWorker?.queues.length>0\">\n  <sm-simple-table-2 [cols]=\"cols\" [rowsData]=\"selectedWorker?.queues\" class=\"dark-theme\">\n    <ng-template\n      let-col\n      let-i=\"rowIndex\"\n      let-row=\"row\">\n      <!--QUEUE-->\n      <div class=\"col-8 id-cell d-flex\">\n        <a class=\"value link\" [routerLink]=\"['../queues']\" [queryParams]=\"{id: row.id}\">{{row?.name}}</a>\n        <sm-copy-clipboard\n          class=\"copy-btn\"\n          [hideBackground]=\"true\"\n          [label]=\"''\"\n          [tooltipText]=\"'Copy Queue ID'\"\n          [clipboardText]=\"row?.id\">\n        </sm-copy-clipboard>\n      </div>\n\n      <!--NEXT EXPERIMENT-->\n      <div class=\"col-12\">\n        {{row?.next_task?.name}}\n      </div>\n\n      <!--IN QUEUE-->\n      <div class=\"col-4\">\n        {{row?.num_tasks}}\n      </div>\n    </ng-template>\n  </sm-simple-table-2>\n</div>\n\n<div *ngIf=\"activeTab==='info'\" class=\"worker-info-container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <sm-vertical-labeled-row label=\"Worker Name\">{{selectedWorker?.name ?? '—' }}</sm-vertical-labeled-row>\n      <sm-vertical-labeled-row label=\"Update Time\">{{selectedWorker?.last_report_time | timeAgo}}</sm-vertical-labeled-row>\n      <sm-vertical-labeled-row label=\"Current Experiment\">\n        <a *ngIf=\"selectedWorker?.task?.name ; else notRelevant\" [href]=\"'/projects/'+ ((selectedWorker?.task?.project?.id) ? selectedWorker?.task?.project?.id : '*') + '/experiments/' + selectedWorker?.task?.id\"\n        target=\"_blank\">{{selectedWorker?.task?.name}}</a>\n        <ng-template #notRelevant>—</ng-template>\n      </sm-vertical-labeled-row>\n    </div>\n    <div class=\"col-12\">\n      <sm-vertical-labeled-row label=\"Experiment Run Time\">{{selectedWorker?.task?.running_time ? (selectedWorker?.task?.running_time | msToSec) : '—'}}</sm-vertical-labeled-row>\n      <sm-vertical-labeled-row label=\"Experiment Iteration\">{{selectedWorker?.task?.last_iteration ? selectedWorker?.task?.last_iteration : '—'}}</sm-vertical-labeled-row>\n    </div>\n  </div>\n</div>\n\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-worker-info',\n  templateUrl: './worker-info.component.html',\n  styleUrls  : ['./worker-info.component.scss']\n})\nexport class WorkerInfoComponent {\n\n  @Input() selectedWorker;\n  @Output() deselectWorker = new EventEmitter();\n  activeTab: string        = 'info';\n  public readonly cols     = [\n    {header: 'QUEUE', class: 'col-8'},\n    {header: 'NEXT EXPERIMENT', class: 'col-12'},\n    {header: 'IN QUEUE', class: 'col-4'},\n  ];\n\n  constructor() {\n  }\n\n  deselectWorkerClicked() {\n    this.deselectWorker.emit();\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Worker} from '../../../../business-logic/model/workers/worker';\nimport {getSelectedWorker, workersTableSortChanged} from '../../actions/workers.actions';\nimport {selectSelectedWorker, selectWorkers, selectWorkersTableSortFields} from '../../reducers/index.reducer';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {filter, take, withLatestFrom} from 'rxjs/operators';\nimport {SortMeta} from 'primeng/api';\n\n@Component({\n  selector: 'sm-workers',\n  templateUrl: './workers.component.html',\n  styleUrls: ['./workers.component.scss']\n})\nexport class WorkersComponent implements OnInit {\n\n  public workers$: Observable<Worker[]>;\n  public selectedWorker$: Observable<Worker>;\n  public tableSortFields$: Observable<SortMeta[]>;\n\n  get routerWorkerId() {\n    const url = new URL(window.location.href);\n    return url.searchParams.get('id');\n  }\n\n  constructor(private store: Store<any>, private router: Router, private route: ActivatedRoute) {\n    this.workers$ = this.store.select(selectWorkers);\n    this.selectedWorker$ = this.store.select(selectSelectedWorker);\n    this.tableSortFields$ = this.store.select(selectWorkersTableSortFields);\n  }\n\n  ngOnInit(): void {\n    this.workers$.pipe(\n      withLatestFrom(this.selectedWorker$),\n      filter(([workers, selectedWorker]) => workers && selectedWorker?.id !== this.routerWorkerId),\n      take(1))\n      .subscribe(([workers]) => {\n        const selectedWorker = workers.find(worker => worker.id === this.routerWorkerId);\n        this.selectWorker(selectedWorker);\n      });\n  }\n\n\n  public selectWorker(worker) {\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.route,\n        queryParams: {id: worker?.id},\n        queryParamsHandling: 'merge'\n      });\n    this.store.dispatch(getSelectedWorker({worker}));\n  }\n\n  sortedChanged(sort: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.store.dispatch(workersTableSortChanged({colId: sort.colId, isShift: sort.isShift}));\n  }\n\n}\n","<sm-workers-graph [worker]=\"selectedWorker$ | async\" class=\"overflow-hidden\"></sm-workers-graph>\n<as-split class=\"flex-grow-1\">\n  <as-split-area [size]=\"50\">\n    <sm-workers-table class=\"mt-2\"\n                      [workers]=\"workers$ | async\"\n                      [selectedWorker]=\"selectedWorker$ | async\"\n                      (sortedChanged)=\"sortedChanged($event)\"\n                      [tableSortFields]=\"tableSortFields$ | async\"\n                      (workerSelected)=\"selectWorker($event)\">\n    </sm-workers-table>\n  </as-split-area>\n  <as-split-area [size]=\"50\" [visible]=\"!!(selectedWorker$| async)\">\n    <sm-worker-info [selectedWorker]=\"selectedWorker$ | async\"\n      (deselectWorker)=\"selectWorker(null)\">\n    </sm-worker-info>\n  </as-split-area>\n</as-split>\n","<div class=\"d-flex\">\n  <div class=\"chart-container overflow-hidden\">\n    <div class=\"header\">\n      <div class=\"title\">\n        <div class=\"ellipsis\">{{selectedQueue ? selectedQueue.name : 'Overall'}} Experiment Wait Time</div>\n        <i *ngIf=\"statsError$ | async\"\n          class=\"warnning fas fa-exclamation-triangle\"\n          smTooltip=\"Data temporarily not available\">\n        </i>\n      </div>\n    </div>\n    <div #waitchart class=\"line-chart-container\">\n      <sm-line-chart [data]=\"waitChartData\" [showLoadingOverlay]=\"refreshChart\" [tooltipVerticalOffset]=\"-60\"></sm-line-chart>\n    </div>\n  </div>\n  <div class=\"chart-container right overflow-hidden\">\n    <div class=\"header\">\n      <div class=\"title\">\n        <div class=\"ellipsis\">{{selectedQueue ? selectedQueue.name : 'Overall'}} Queued Experiments</div>\n        <i *ngIf=\"statsError$ | async\"\n          class=\"warnning fas fa-exclamation-triangle\"\n          smTooltip=\"Data temporarily not available\">\n        </i>\n      </div>\n      <div class=\"time-selector\">\n        <mat-form-field appearance=\"outline\" class=\"dark-outline thin time-selector\">\n          <mat-select [ngModel]=\"currentTimeFrame\" (ngModelChange)=\"timeFrameChanged($event)\" name=\"time-frame\" panelClass=\"dark-outline\">\n            <mat-option *ngFor=\"let timeFrame of timeFrameOptions; trackBy: trackByFn\" [value]=\"timeFrame.value\">\n              {{timeFrame.label}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n    <div #lenchart class=\"line-chart-container\" >\n      <sm-line-chart [data]=\"lenChartData\" [showLoadingOverlay]=\"refreshChart\" [tooltipVerticalOffset]=\"-60\"></sm-line-chart>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnDestroy, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Subscription} from 'rxjs';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {getStats, setStats, setStatsParams} from '../../actions/queues.actions';\nimport {selectQueuesStatsTimeFrame, selectQueueStats, selectStatsErrorNotice} from '../../reducers/index.reducer';\nimport {filter} from 'rxjs/operators';\nimport {Topic} from '../../../shared/utils/statistics';\nimport {TIME_INTERVALS} from '../../workers-and-queues.consts';\nimport {IOption} from '../../../shared/ui-components/inputs/select-autocomplete-with-chips/select-autocomplete-with-chips.component';\n\n@Component({\n  selector: 'sm-queue-stats',\n  templateUrl: './queue-stats.component.html',\n  styleUrls: ['./queue-stats.component.scss']\n})\nexport class QueueStatsComponent implements OnInit, OnDestroy {\n  private chartDataSubscription: Subscription;\n  private chartParamSubscription: Subscription;\n  public statsError$ = this.store.select(selectStatsErrorNotice);\n  public selectedQueue: Queue;\n  public refreshChart = true;\n  public waitChartData: { dataByTopic: Topic[] };\n  public lenChartData: { dataByTopic: Topic[] };\n\n  public timeFrameOptions: IOption[] = [\n    {label: '3 Hours', value: (3 * TIME_INTERVALS.HOUR).toString()},\n    {label: '6 Hours', value: (6 * TIME_INTERVALS.HOUR).toString()},\n    {label: '12 Hours', value: (12 * TIME_INTERVALS.HOUR).toString()},\n    {label: '1 Day', value: (TIME_INTERVALS.DAY).toString()},\n    {label: '1 Week', value: (TIME_INTERVALS.WEEK).toString()},\n    {label: '1 Month', value: (TIME_INTERVALS.MONTH).toString()}];\n\n  @ViewChild('waitchart', {read: ViewContainerRef, static: true}) waitChartRef: ViewContainerRef;\n  @ViewChild('lenchart', {read: ViewContainerRef, static: true}) lenChartRef: ViewContainerRef;\n  private intervaleHandle: number;\n  public currentTimeFrame: string;\n  public trackByFn = (index: number, option: IOption) => option.value;\n\n  @Input() set queue(queue: Queue) {\n    if (this.selectedQueue !== queue) {\n      this.selectedQueue = queue;\n      this.updateChart();\n    }\n  }\n\n  constructor(public store: Store<any>) {\n  }\n\n  ngOnInit() {\n    this.chartParamSubscription = this.store.select(selectQueuesStatsTimeFrame)\n      .pipe(filter((timeFrame: string) => !!timeFrame))\n      .subscribe((timeFrame) => {\n        this.currentTimeFrame = timeFrame;\n        this.updateChart();\n      });\n    this.chartDataSubscription = this.store.select(selectQueueStats).subscribe(\n      (data) => {\n        if (data && (data.wait || data.length)) {\n          this.refreshChart = false;\n          this.waitChartData = {dataByTopic: data.wait};\n          this.lenChartData = {dataByTopic: data.length};\n        }\n      }\n    );\n\n    this.updateChart();\n  }\n\n  ngOnDestroy() {\n    this.chartDataSubscription.unsubscribe();\n    this.chartParamSubscription.unsubscribe();\n    clearInterval(this.intervaleHandle);\n  }\n\n  updateChart() {\n    clearInterval(this.intervaleHandle);\n    this.refreshChart = true;\n    this.store.dispatch(setStats({data: {wait: null, length: null}}));\n    const range = parseInt(this.currentTimeFrame, 10);\n    let width = this.waitChartRef.element.nativeElement.clientWidth | 1000;\n    width = Math.min(0.8 * width, 1000);\n    const granularity = Math.max(Math.floor(range / width), 5);\n\n    this.store.dispatch(getStats({maxPoints: width}));\n    this.intervaleHandle = window.setInterval(() => {\n      this.store.dispatch(getStats({maxPoints: width}));\n    }, granularity * 1000);\n  }\n\n  tickFormatter(seconds: number) {\n    seconds = Math.floor(seconds);\n    const th = Math.floor(seconds / 3600); // 3,600 seconds in 1 hour\n    seconds = seconds % 3600; // seconds remaining after extracting hours\n    // 3- Extract minutes:\n    const tm = `${Math.floor(seconds / 60) % 100}`.padStart(2, '0'); // 60 seconds in 1 minute\n    // 4- Keep only seconds not extracted to minutes:\n    const ts = `${seconds % 60}`.padStart(2, '0');\n    return `${th}:${tm}:${ts}`;\n  }\n\n  timeFrameChanged($event: any) {\n    this.store.dispatch(setStatsParams({timeFrame: $event}));\n  }\n}\n","<sm-menu\n    *ngIf=\"menuOpen && queuesManager\"\n    [position]=\"menuPosition\"\n    [header]=\"\"\n    buttonClass=\"al-icon sm-md al-ico-bars-menu al-color light-grey-blue\"\n    [showCart]=\"false\"\n    [showOverlay]=\"false\"\n    [showButton]=\"false\"\n    [openOnInit]=\"true\"\n  >\n    <sm-menu-item itemLabel=\"Delete\"\n                  [disabled]=\"selectedQueue?.entries?.length>0\"\n                  (itemClicked)=\"deleteQueue.emit(selectedQueue)\"></sm-menu-item>\n    <sm-menu-item itemLabel=\"Rename\"\n                  (itemClicked)=\"renameQueue.emit(selectedQueue)\"></sm-menu-item>\n  <ng-content select=\"[extendedQueuesMenu]\"></ng-content>\n  </sm-menu>\n\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {ICONS} from '../../../constants';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'sm-queues-menu',\n  templateUrl: './queues-menu.component.html',\n  styleUrls: ['./queues-menu.component.scss']\n})\nexport class QueuesMenuComponent  {\n  public queuesManager: boolean;\n  readonly ICONS = ICONS;\n\n  @Input() menuOpen: boolean;\n  @Input() selectedQueue: Queue;\n  @Input() menuPosition;\n  @Output() deleteQueue = new EventEmitter();\n  @Output() renameQueue = new EventEmitter();\n  constructor(private route: ActivatedRoute) {\n    this.queuesManager = route.snapshot.data.queuesManager;\n\n  }\n}\n","import {Component} from '@angular/core';\nimport {QueuesMenuComponent} from '../../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component';\n\n@Component({\n  selector: 'sm-queues-menu-extended',\n  templateUrl: '../../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.html',\n  styleUrls: ['../../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.scss']\n})\nexport class QueuesMenuExtendedComponent extends QueuesMenuComponent{\n  set contextMenu(data) {}\n  get contextMenu() {\n    return this;\n  }\n}\n","<div #tableContainer class=\"queues-container\">\n  <sm-queues-menu-extended\n    [menuOpen]=\"menuOpen\"\n    [menuPosition]=\"menuPosition\"\n    [selectedQueue]=\"selectedQueue\"\n    (deleteQueue)=\"deleteQueue.emit($event)\"\n    (renameQueue)=\"renameQueue.emit(selectedQueue)\"\n  ></sm-queues-menu-extended>\n  <sm-table #table\n            [tableData]=\"queues\"\n            [columns]=\"cols\"\n            [rowsNumber]=\"100\"\n            [rowHeight]=\"40\"\n            [reorderableColumns]=\"false\"\n            [resizableColumns]=\"false\"\n            [scrollable]=\"true\"\n            [selection]=\"selectedQueue\"\n            (rowSelectionChanged)=\"onRowClicked($event)\"\n            (onRowRightClick)=\"openContextMenu($event)\"\n  >\n    <ng-template let-col pTemplate=\"sort-filter\">\n      <sm-table-filter-sort-template\n        [class.first]=\"col.id === QUEUES_TABLE_COL_FIELDS.NAME\"\n        (sortOrderChanged)=\"onSortChanged($event, col.id)\"\n        [column]=\"col\"\n        [sortOrder]=\"tableSortFieldsObject[col.id]\">\n      </sm-table-filter-sort-template>\n    </ng-template>\n    <ng-template let-col let-queue=\"rowData\" pTemplate=\"body\">\n      <ng-container [ngSwitch]=\"col.id\" class=\"table-cell\">\n        <div class=\"w-100 d-flex align-items-center pr-3 first id-cell\" *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.NAME\">\n          <div class=\"queue-name\" matTooltipPosition=\"above\" [smTooltip]=\"queue?.name\">{{queue?.name}}</div>\n          <sm-copy-clipboard [clipboardText]=\"queue?.id\"\n                             [hideBackground]=\"true\"\n                             [label]=\"''\"\n                             [tooltipText]=\"'Copy Queue ID'\" class=\"copy-btn\"></sm-copy-clipboard>\n        </div>\n        <ng-container *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.TASK\">\n          <span>{{queue?.entries[0]?.task?.name}}</span>\n          <span *ngIf=\"!queue?.entries[0]?.task?.name\">&mdash;</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.LAST_UPDATED\">\n          <span>{{queue?.last_update | timeAgo}}</span>\n          <span *ngIf=\"!queue?.last_update\">&mdash;</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.IN_QUEUE\">\n          <span>\n            {{queue?.entries?.length === 0 ? '' : queue?.entries?.length}}\n            <span *ngIf=\"queue?.entries?.length === 0\">&mdash;</span>\n          </span>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          {{getBodyData(queue, col)}}\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </sm-table>\n</div>\n","import {ChangeDetectorRef, Component, EventEmitter, HostListener, Input, Output, ViewChild} from '@angular/core';\nimport {ColHeaderTypeEnum, ISmCol, TableSortOrderEnum} from '../../../shared/ui-components/data/table/table.consts';\nimport {find, get} from 'lodash/fp';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {QUEUES_TABLE_COL_FIELDS} from '../../workers-and-queues.consts';\nimport {TableComponent} from '../../../shared/ui-components/data/table/table.component';\nimport {BaseTableView} from '../../../shared/ui-components/data/table/base-table-view';\nimport {ActivatedRoute} from '@angular/router';\nimport {ICONS} from '../../../constants';\n\n@Component({\n  selector: 'sm-queues-table',\n  templateUrl: './queues-table.component.html',\n  styleUrls: ['./queues-table.component.scss']\n})\nexport class QueuesTableComponent extends BaseTableView {\n  public cols: Array<ISmCol>;\n  public readonly QUEUES_TABLE_COL_FIELDS = QUEUES_TABLE_COL_FIELDS;\n  public menuOpen: boolean;\n  private _queues: Array<Queue>;\n  public queuesManager: boolean;\n  readonly ICONS = ICONS;\n\n  @Input() set queues(queues: Array<Queue>) {\n    this._queues = queues;\n    this.table && this.table.focusSelected();\n  }\n\n  get queues() {\n    return this._queues;\n  }\n\n  @Input() selectedQueue: Queue;\n  @Output() queueSelected = new EventEmitter();\n  @Output() deleteQueue = new EventEmitter();\n  @Output() renameQueue = new EventEmitter();\n  @Output() sortedChanged = new EventEmitter<{ isShift: boolean; colId: ISmCol['id'] }>();\n\n  @Input() tableSortOrder: TableSortOrderEnum;\n  @ViewChild('tableContainer', {static: false}) tableContainer;\n  @ViewChild('table', {static: false}) table: TableComponent;\n\n  public menuPosition: { x: number; y: number };\n\n  @HostListener('document:click', ['$event'])\n  clickHandler(event) {\n    if (event.button != 2) { // Bug in firefox: right click triggers `click` event\n      this.menuOpen = false;\n    }\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {\n    super();\n    this.queuesManager = route.snapshot.data.queuesManager;\n    this.cols = [\n      {\n        id: QUEUES_TABLE_COL_FIELDS.NAME,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'QUEUE',\n        style: {width: '35%'},\n        sortable: true,\n      },\n      {\n        id: QUEUES_TABLE_COL_FIELDS.TASK,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'NEXT EXPERIMENT',\n        style: {width: '30%'},\n        sortable: true,\n      },\n      {\n        id: QUEUES_TABLE_COL_FIELDS.LAST_UPDATED,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'LAST UPDATED',\n        style: {width: '150px'},\n        sortable: true,\n      },\n      {\n        id: QUEUES_TABLE_COL_FIELDS.IN_QUEUE,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'IN QUEUE',\n        style: {width: '100px'},\n        sortable: true,\n      }\n    ];\n  }\n\n  getBodyData(rowData: any, col: ISmCol) {\n    return get(col.id, rowData);\n  }\n\n  getQNames(queues) {\n    return queues.map(queue => this.getQName(queue));\n  }\n\n  getQName(queue) {\n    const queueIns: any = find({'id': queue}, this.queues);\n    return queueIns ? queueIns.name : queue;\n  }\n\n  onRowClicked(event) {\n    this.queueSelected.emit(event.data);\n  }\n\n  openContextMenu(data) {\n    data.e.preventDefault();\n    this.queueSelected.emit(data.rowData);\n    this.menuOpen = false;\n    setTimeout(() => {\n      this.menuPosition = {x: data.e.clientX, y: data.e.clientY};\n      this.menuOpen = true;\n      this.changeDetector.detectChanges();\n    }, 0);\n\n  }\n\n  scrollTableToTop() {\n    this.tableContainer.nativeElement.scroll({top: 0});\n  }\n\n  onSortChanged(isShift: boolean, colId: ISmCol['id']) {\n    this.sortedChanged.emit({isShift, colId});\n    this.scrollTableToTop();\n  }\n\n  afterTableInit(): void {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  emitSelection(selection: any[]) {\n  }\n}\n","<div class=\"d-flex justify-content-center tabs-container\">\n  <sm-navbar-item header=\"Experiments\" [active]=\"activeTab==='experiments'\"\n                  (click)=\"activeTab = 'experiments'\"></sm-navbar-item>\n  <sm-navbar-item header=\"Workers\" [active]=\"activeTab==='workers'\" (click)=\"activeTab = 'workers'\">\n  </sm-navbar-item>\n  <div class=\"pull-right pointer tabs-x\" (click)=\"deselectQueueClicked()\">\n    <i class=\"al-icon al-ico-dialog-x sm-md\"></i>\n  </div>\n</div>\n\n<div *ngIf=\"activeTab === 'experiments' && selectedQueue?.entries?.length===0\"\n     class=\"d-flex align-items-center justify-content-center p-4\">No experiments currently enqueued\n</div>\n<div *ngIf=\"activeTab === 'workers' && selectedQueue?.workers?.length===0\"\n     class=\"d-flex align-items-center justify-content-center p-4\">No workers currently assigned to this queue\n</div>\n<sm-simple-table-2\n  *ngIf=\"activeTab==='workers' && selectedQueue?.workers?.length>0\"\n  [cols]=\"workersCols\"\n  [rowsData]=\"selectedQueue?.workers\"\n  noDataMessage=\" \"\n>\n  <ng-template\n    let-col\n    let-i=\"rowIndex\"\n    let-row=\"row\"\n  >\n    <a class=\"ml-2 flex-column link\" [routerLink]=\"['../workers']\" [queryParams]=\"{id: row.name}\">{{row?.name}}</a>\n    <div class=\"flex-column\">\n      {{row.ip}}\n    </div>\n    <div class=\"flex-column\">\n      <a\n        [href]=\"'/projects/'+ ((row?.task?.project?.id) ? row?.task?.project?.id : '*') + '/experiments/' +row?.task?.id\"> {{row?.task?.name}}</a>\n    </div>\n  </ng-template>\n\n</sm-simple-table-2>\n\n<sm-menu\n  *ngIf=\"menuOpen\"\n  buttonClass=\"al-icon sm-md al-ico-bars-menu al-color light-grey-blue\"\n  smMenuClass=\"experiments-in-queue-list\"\n  panelClasses=\"dark\"\n  [position]=\"menuPosition\"\n  [header]=\"\"\n  [showCart]=\"false\"\n  [showOverlay]=\"false\"\n  [showButton]=\"false\"\n  [openOnInit]=\"true\"\n  (onMenuClosed)=\"menuClosed()\"\n>\n  <sm-menu-item itemLabel=\"Move to top\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"moveToTop()\"\n                iconClass=\"al-icon al-ico-arrow-to-top al-color light-periwinkle-two sm mr-2\">\n  </sm-menu-item>\n  <sm-menu-item itemLabel=\"Move to bottom\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"moveToBottom()\"\n                iconClass=\"sm mr-2 al-icon al-ico-arrow-to-bottom al-color light-periwinkle-two\">\n  </sm-menu-item>\n  <sm-menu-item itemLabel=\"Move to queue...\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"moveToQueue()\"\n                iconClass=\"sm mr-2 al-icon al-ico-arrow-from-left al-color light-periwinkle-two\">\n  </sm-menu-item>\n  <sm-menu-item itemLabel=\"Remove from queue\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"removeFromQueue()\"\n                [iconFontSize]=\"12\"\n                iconClass=\"fas fa-trash\">\n  </sm-menu-item>\n\n</sm-menu>\n\n<sm-simple-table-2\n  *ngIf=\"activeTab==='experiments'\"\n  [cols]=\"experimentsCols\"\n  [rowsData]=\"selectedQueue?.entries\"\n  [enableDragAndDrop]=\"true\"\n  noDataMessage=\" \"\n  (entryDropped)=\"experimentDropped($event)\"\n>\n  <ng-template\n    let-col\n    let-i=\"rowIndex\"\n    let-row=\"row\">\n    <div class=\"column ml-3\">\n      <i class=\"fas fa-th drag-grid\"></i>\n    </div>\n    <div class=\"column\">\n      {{i + 1}}\n    </div>\n    <div class=\"flex-column\">\n      <a\n        [href]=\"'/projects/'+ ((row?.task?.project?.id) ? row?.task?.project?.id : '*') + '/experiments/' +row?.task?.id\">{{row?.task?.name}}\n      </a>\n    </div>\n    <div class=\"column\">\n      <i class=\"al-icon al-ico-dots-v-menu sm-md pointer p-2\" (click)=\"openContextMenu($event, row?.task)\"></i>\n    </div>\n  </ng-template>\n</sm-simple-table-2>\n","import {ChangeDetectorRef, Component, EventEmitter, HostListener, Input, OnInit, Output} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {BlTasksService} from '../../../../business-logic/services/tasks.service';\nimport {SelectQueueComponent} from '../../../experiments/shared/components/select-queue/select-queue.component';\nimport {cloneDeep} from 'lodash/fp';\n\n@Component({\n  selector   : 'sm-queue-info',\n  templateUrl: './queue-info.component.html',\n  styleUrls  : ['./queue-info.component.scss']\n})\nexport class QueueInfoComponent implements OnInit {\n  private _selectedQueue: Queue;\n\n  @Input() set selectedQueue(selectedQueue: Queue) {\n    this._selectedQueue = cloneDeep(selectedQueue);\n  }\n\n  get selectedQueue() {\n    return this._selectedQueue;\n  }\n\n  @Input() queues: Queue[];\n  @Output() deselectQueue                 = new EventEmitter();\n  @Output() moveExperimentToTopOfQueue    = new EventEmitter();\n  @Output() moveExperimentToBottomOfQueue = new EventEmitter();\n  @Output() moveExperimentToOtherQueue    = new EventEmitter();\n  @Output() removeExperimentFromQueue     = new EventEmitter();\n  @Output() moveExperimentInQueue         = new EventEmitter<{task: string; count: number}>();\n\n  public activeTab: string;\n  public menuSelectedExperiment: any;\n  public menuOpen: boolean;\n  public menuPosition: { x: number; y: number };\n  public readonly experimentsCols = [\n    {header: '', class: 'col-4'},\n    {header: '', class: 'col-20'},\n  ];\n  public readonly workersCols     = [\n    {header: 'Name', class: 'col-9'},\n    {header: 'IP', class: 'col-6'},\n    {header: 'Currently Executing', class: 'col-9'},\n  ];\n  public menuClosed: any;\n\n  @HostListener('document:click', ['$event'])\n  clickHandler(event) {\n    if (event.button != 2) { // Bug in firefox: right click triggers `click` event\n      this.menuOpen = false;\n    }\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef,\n              private blTaskService: BlTasksService,\n              private dialog: MatDialog) {\n  }\n\n\n  get routerTab() {\n    const url = new URL(window.location.href);\n    return url.searchParams.get('tab');\n  }\n\n  ngOnInit() {\n    this.activeTab = this.routerTab === 'workers' ? 'workers' : 'experiments';\n  }\n\n\n  findQueueById(id) {\n    return this.queues.find(queue => queue.id === id);\n  }\n\n  deselectQueueClicked() {\n    this.deselectQueue.emit();\n  }\n\n\n  experimentDropped($event: CdkDragDrop<any>) {\n    this.moveExperimentInQueue.emit({task: (this.selectedQueue.entries[$event.previousIndex].task as any).id, count: ($event.currentIndex - $event.previousIndex)});\n    moveItemInArray(this.selectedQueue.entries, $event.previousIndex, $event.currentIndex);\n  }\n\n\n  openContextMenu(e, task) {\n    this.menuSelectedExperiment = task;\n    e.preventDefault();\n    this.menuOpen = false;\n    setTimeout(() => {\n      this.menuPosition = {x: e.clientX, y: e.clientY};\n      this.menuOpen     = true;\n      this.changeDetector.detectChanges();\n    }, 0);\n\n  }\n\n  moveToTop() {\n    this.moveExperimentToTopOfQueue.emit(this.menuSelectedExperiment);\n  }\n\n  moveToBottom() {\n    this.moveExperimentToBottomOfQueue.emit(this.menuSelectedExperiment);\n\n  }\n\n  moveToQueue() {\n    this.enqueuePopup();\n  }\n\n  removeFromQueue() {\n    this.removeExperimentFromQueue.emit(this.menuSelectedExperiment);\n  }\n\n  enqueuePopup() {\n    const selectQueueDialog: MatDialogRef<SelectQueueComponent, { confirmed: boolean; queue: Queue }> =\n            this.dialog.open(SelectQueueComponent, {data: {}});\n\n    selectQueueDialog.afterClosed().subscribe((res) => {\n      if (res && res.confirmed) {\n        this.moveExperimentToOtherQueue.emit({queue: res.queue, task: this.menuSelectedExperiment});\n        this.blTaskService.setPreviouslyUsedQueue(res.queue);\n      }\n    });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {Store} from '@ngrx/store';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {\n  deleteQueue,\n  getQueues,\n  moveExperimentInQueue,\n  moveExperimentToBottomOfQueue,\n  moveExperimentToOtherQueue,\n  moveExperimentToTopOfQueue,\n  queuesTableSortChanged,\n  removeExperimentFromQueue,\n  setSelectedQueue\n} from '../../actions/queues.actions';\nimport {\n  selectQueues,\n  selectQueuesTableSortFields,\n  selectQueuesTasks,\n  selectSelectedQueue\n} from '../../reducers/index.reducer';\nimport {filter, take, withLatestFrom} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {QueueCreateDialogComponent} from '../../../shared/queue-create-dialog/queue-create-dialog.component';\nimport {SortMeta} from 'primeng/api';\n\n@Component({\n  selector: 'sm-queues',\n  templateUrl: './queues.component.html',\n  styleUrls: ['./queues.component.scss']\n})\nexport class QueuesComponent implements OnInit {\n\n  public queues$: Observable<Queue[]>;\n  public queuesTasks$: Observable<Map<string, Task[]>>;\n  public selectedQueue$: Observable<Queue>;\n  private createQueueDialog: MatDialogRef<QueueCreateDialogComponent, any>;\n  public tableSortOrder$: Observable<1 | -1>;\n  public tableSortFields$: Observable<SortMeta[]>;\n\n  get routerQueueId() {\n    const url = new URL(window.location.href);\n    return url.searchParams.get('id');\n  }\n\n  constructor(private store: Store<any>, private router: Router, private route: ActivatedRoute, private dialog: MatDialog) {\n    this.queues$ = this.store.select(selectQueues);\n    this.queuesTasks$ = this.store.select(selectQueuesTasks);\n    this.selectedQueue$ = this.store.select(selectSelectedQueue);\n    this.tableSortFields$ = this.store.select(selectQueuesTableSortFields);\n\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(getQueues());\n\n    this.queues$.pipe(\n      withLatestFrom(this.selectedQueue$),\n      filter(([queues, selectedQueue]) => queues && selectedQueue?.id !== this.routerQueueId),\n      take(1))\n      .subscribe(([queues]) => {\n        const selectedQueue = queues.find(queue => queue.id === this.routerQueueId);\n        this.selectQueue(selectedQueue);\n      });\n  }\n\n  sortedChanged(sort: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.store.dispatch(queuesTableSortChanged({colId: sort.colId, isShift: sort.isShift}));\n  }\n\n\n  public selectQueue(queue) {\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.route,\n        queryParams: {id: queue?.id},\n        queryParamsHandling: 'merge'\n      });\n    this.store.dispatch(setSelectedQueue({queue}));\n  }\n\n  deleteQueue(queue) {\n    this.store.dispatch(deleteQueue({queue}));\n  }\n\n  renameQueue(queue) {\n    this.createQueueDialog = this.dialog.open(QueueCreateDialogComponent, {data: queue});\n    this.createQueueDialog.afterClosed()\n      .pipe(\n        filter(q => !!q),\n        take(1)\n      )\n      .subscribe(() => {\n        this.store.dispatch(getQueues());\n      });\n  }\n\n  moveExperimentToBottomOfQueue(task: Task) {\n    this.store.dispatch(moveExperimentToBottomOfQueue({task: task.id}));\n  }\n\n  moveExperimentToTopOfQueue(task: Task) {\n    this.store.dispatch(moveExperimentToTopOfQueue({task: task.id}));\n  }\n\n  removeExperimentFromQueue(task: Task) {\n    this.store.dispatch(removeExperimentFromQueue({task: task.id}));\n  }\n\n  moveExperimentToOtherQueue($event) {\n    this.store.dispatch(moveExperimentToOtherQueue({task: $event.task.id, queue: $event.queue.id}));\n  }\n\n  moveExperimentInQueue({task, count}) {\n    this.store.dispatch(moveExperimentInQueue({task, count}));\n  }\n\n}\n","<sm-queue-stats [queue]=\"selectedQueue$ | async\"></sm-queue-stats>\n<as-split class=\"flex-grow-1\">\n  <as-split-area [size]=\"50\">\n    <sm-queues-table class=\"mt-2\"\n                     [queues]=\"queues$ | async\"\n                     [selectedQueue]=\"selectedQueue$ | async\"\n                     (sortedChanged)=\"sortedChanged($event)\"\n                     [tableSortFields]=\"tableSortFields$ | async\"\n                     [tableSortOrder]=\"tableSortOrder$ | async\"\n                     (deleteQueue)=\"deleteQueue($event)\"\n                     (renameQueue)=\"renameQueue($event)\"\n                     (queueSelected)=\"selectQueue($event)\">\n    </sm-queues-table>\n  </as-split-area>\n  <as-split-area [size]=\"50\" [visible]=\"!!(selectedQueue$| async)\">\n    <sm-queue-info [selectedQueue]=\"selectedQueue$ | async\"\n                   [queues]=\"queues$ | async\"\n                   (moveExperimentToTopOfQueue)=\"moveExperimentToTopOfQueue($event)\"\n                   (moveExperimentToBottomOfQueue)=\"moveExperimentToBottomOfQueue($event)\"\n                   (removeExperimentFromQueue)=\"removeExperimentFromQueue($event)\"\n                   (moveExperimentToOtherQueue)=\"moveExperimentToOtherQueue($event)\"\n                   (moveExperimentInQueue)=\"moveExperimentInQueue($event)\"\n                   (deselectQueue)=\"selectQueue(null)\">\n    </sm-queue-info>\n  </as-split-area>\n</as-split>\n","import {Injectable} from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport {Observable, of} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersAndQueuesResolver implements Resolve<Observable<boolean>> {\n\n  resolve(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {WorkersAndQueuesComponent} from './workers-and-queues.component';\nimport {WorkersComponent} from './containers/workers/workers.component';\nimport {QueuesComponent} from './containers/queues/queues.component';\nimport {WorkersAndQueuesResolver} from '../../shared/resolvers/workers-and-queues.resolver';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: WorkersAndQueuesComponent,\n    resolve: {\n      queuesManager: WorkersAndQueuesResolver\n    },\n    children: [\n      {path: '', redirectTo: 'workers'},\n      {path: 'workers', component: WorkersComponent},\n      {path: 'queues',\n        component: QueuesComponent,\n        resolve: {\n          queuesManager: WorkersAndQueuesResolver\n        },},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class WorkersAndQueuesRoutingModule {\n}\n\n","import {last, getOr, flattenDeep} from 'lodash/fp';\n\nexport interface DataPoint {\n  date: string;\n  value: number;\n}\n\nexport interface Topic {\n  topicName: string;\n  topicID?: string;\n  topic: number;\n  dates: DataPoint[];\n}\n\nexport interface RequestParam {\n  key: string;\n  aggregation?: string;\n}\n\nconst defaultMaxValHandler = {\n  get: function (target: object, name: string) {\n    if (!target.hasOwnProperty(name)) {\n      target[name] = Math.max(...(Object.values(target) as number[]), 0) + 1;\n    }\n    return target[name];\n  }\n};\n\nexport function addStats(current: Topic[], data, maxPoints: number,\n  requestedKeys: RequestParam[],\n  entityParamName: string,\n  paramInfo: {\n    [key: string]: {\n      title: string;\n      multiply: number;\n    };\n  }) {\n  const topicIDs = new Proxy({}, defaultMaxValHandler);\n  let dataByTopic: Topic[];\n  if (current) {\n    current.forEach(topicObj => topicIDs[topicObj.topicID] = topicObj.topic);\n    dataByTopic = current.slice();\n  } else {\n    dataByTopic = [];\n  }\n\n  const allDates = [...new Set(flattenDeep(data.map(d => d.metrics ? d.metrics.map((topic: Topic) => topic.dates) : [])))] as number[];\n  const shouldAddEntity = data.length > 1;\n  data.forEach(entityData => {\n    const entity = entityData[entityParamName];\n    requestedKeys.forEach(reqKey => {\n      const paramData = entityData.metrics.find(metric => metric.metric === reqKey.key);\n      if (!paramData) {\n        return;\n      }\n      const dates: number[] = paramData.dates;\n      const param = paramData.metric;\n      paramData.stats.forEach(aggData => {\n        const aggregation = aggData.aggregation;\n        const topicID     = `${entity} ${param} ${aggregation}`;\n        const topicName   = `${paramInfo[param].title} (${aggregation})${shouldAddEntity && entity ? ' for ' + entity : ''}`;\n        let topic: Topic = dataByTopic.find(topic => topic.topicID === topicID);\n        if (!topic) {\n          topic = {topicName, topicID, topic: topicIDs[topicID], dates: [] as DataPoint[]};\n          dataByTopic.push(topic);\n        }\n        const tplList = allDates\n          .filter(date => {\n            if (topic.dates.length === 0) {\n              return true;\n            }\n            const strDate: string = new Date(date as number).toISOString();\n            return topic.dates.findIndex(dateObj => dateObj.date === strDate) < 0;\n          })\n          .map(date => {\n            const idx = dates.indexOf(date);\n            return {\n              date : new Date(date as number).toISOString(),\n              value: idx > -1 ? aggData.values[idx] * paramInfo[param].multiply : null\n            };\n          });\n        topic.dates.push(...tplList);\n        topic.dates = topic.dates.slice(Math.max(topic.dates.length - maxPoints, 0));\n      });\n    });\n    // add missing keys\n    requestedKeys.forEach(reqParam => {\n      const item = dataByTopic.find((topic: Topic) => topic.topicID.indexOf(reqParam.key) > -1);\n      if (!item) {\n        const topicID   = `${entity} ${reqParam.key} avg`;\n        const topicName = `${paramInfo[reqParam.key].title} (avg) ${shouldAddEntity && entity ? 'for ' + entity : ''}`;\n        const topic     = {topicName: topicName, topicID: topicID, topic: topicIDs[topicID], dates: [] as DataPoint[]};\n        dataByTopic.push(topic);\n      }\n    });\n  });\n  return dataByTopic;\n}\n\nexport function getLastTimestamp(data: Topic[]): number {\n  let lastDate = 0;\n  data.forEach(topic => {\n    const dates = topic.dates;\n    if (dates) {\n      const topicLastDate = getOr(0, 'date', last(dates));\n      const date          = Math.floor((new Date(topicLastDate)).getTime() / 1000);\n      lastDate            = Math.max(lastDate, date);\n    }\n  });\n  return lastDate;\n}\n\nexport function removeFullRangeMarkers(topics: Topic[]) {\n  const dates = topics[0].dates;\n  if (dates.slice(-1)[0].value === null) {\n    dates.splice(-1, 1);\n  }\n  if (dates[0].value === null) {\n    dates.splice(0, 1);\n  }\n}\n\nexport function addFullRangeMarkers(topics: Topic[], fromDate: number, toDate: number) {\n  topics[0].dates.splice(0, 0, {date: (new Date(fromDate * 1000)).toISOString(), value: null});\n  topics[0].dates.push({date: (new Date(toDate * 1000)).toISOString(), value: null});\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {castArray, cloneDeep} from 'lodash/fp';\nimport {catchError, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {ApiWorkersService} from '../../../business-logic/api-services/workers.service';\nimport {Worker} from '../../../business-logic/model/workers/worker';\nimport {WORKER_STATS_PARAM_INFO} from '../workers-and-queues.consts';\nimport {WorkersGetActivityReportRequest} from '../../../business-logic/model/workers/workersGetActivityReportRequest';\nimport {WorkersGetActivityReportResponse} from '../../../business-logic/model/workers/workersGetActivityReportResponse';\nimport {WorkersGetStatsRequest} from '../../../business-logic/model/workers/workersGetStatsRequest';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport * as workersActions from '../actions/workers.actions';\nimport {selectSelectedWorker, selectStats, selectStatsParams, selectStatsTimeFrame, selectWorkers, selectWorkersTableSortFields} from '../reducers/index.reducer';\nimport {orderBy} from 'lodash/fp';\nimport {addFullRangeMarkers, addStats, getLastTimestamp, removeFullRangeMarkers} from '../../shared/utils/statistics';\nimport {showStatsErrorNotice, hideNoStatsNotice} from '../actions/stats.actions';\nimport {addMultipleSortColumns} from '../../shared/utils/shared-utils';\nimport {WorkerExt} from '../actions/workers.actions';\n\nconst prepareStatsQuery = (entitie: string, keys: { key: string }[], range: number, granularity: number): WorkersGetStatsRequest => {\n  const now = Math.floor((new Date()).getTime() / 1000);\n  return {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    from_date: now - range,\n    to_date: now,\n    worker_ids: entitie ? [entitie] : null,\n    items: castArray(keys),\n    interval: granularity\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n};\n\n@Injectable()\nexport class WorkersEffects {\n\n  constructor(\n    private actions: Actions,\n    private workersApi: ApiWorkersService, private store: Store<any>) {\n  }\n\n  getWorkers$ = createEffect(() => this.actions.pipe(\n    ofType(workersActions.getWorkers),\n    withLatestFrom(\n      this.store.select(selectSelectedWorker),\n      this.store.select(selectWorkersTableSortFields),\n    ),\n    switchMap(([action, selectedWorker, sortFields]) => this.workersApi.workersGetAll({}).pipe(\n      mergeMap(res => {\n        const workers = this.transformAndSortWorkers(sortFields, res.workers);\n        const actionsToFire = [\n          workersActions.setWorkers({workers}),\n          deactivateLoader(action.type)] as Action[];\n        if (selectedWorker) {\n          actionsToFire.push(\n            workersActions.setSelectedWorker({\n              worker: workers.find(worker => worker.id === selectedWorker.id)\n            }));\n        }\n        return actionsToFire;\n      }),\n      catchError(err => [requestFailed(err), deactivateLoader(action.type)])\n      )\n    )\n  ));\n\n  sortWorkers$ = createEffect(() => this.actions.pipe(\n    ofType(workersActions.workersTableSetSort),\n    withLatestFrom(\n      this.store.select(selectWorkersTableSortFields),\n      this.store.select(selectWorkers)\n    ),\n    mergeMap(([, sortFields, workers]) => [workersActions.setWorkers({workers: this.transformAndSortWorkers(sortFields, workers)})]),\n  ));\n\n  getStats$ = createEffect(() => this.actions.pipe(\n    ofType(workersActions.getWorkers),\n    withLatestFrom(\n      this.store.select(selectStats),\n      this.store.select(selectStatsTimeFrame),\n      this.store.select(selectStatsParams),\n      this.store.select(selectSelectedWorker)\n    ),\n    switchMap(([action, currentStats, selectedRange, params, worker]) => {\n      const now = Math.floor((new Date()).getTime() / 1000);\n      const keys = params.split(';').map(val => ({key: val}));\n      const range = parseInt(selectedRange, 10);\n      const granularity = Math.max(Math.floor(range / action.maxPoints), worker ? 10 : 40);\n      let timeFrame: number;\n\n      currentStats = cloneDeep(currentStats);\n      if (Array.isArray(currentStats) && currentStats.some(topic => topic.dates.length > 1)) {\n        removeFullRangeMarkers(currentStats);\n        timeFrame = now - getLastTimestamp(currentStats) + granularity;\n      } else {\n        timeFrame = range;\n      }\n      if (worker) {\n        const req = prepareStatsQuery(worker.name, keys, timeFrame, granularity);\n        return this.workersApi.workersGetStats(req).pipe(\n          mergeMap(res => {\n            if (res) {\n              res = addStats(currentStats, res.workers, action.maxPoints, keys, 'worker', WORKER_STATS_PARAM_INFO);\n              if (Array.isArray(res) && res.some(topic => topic.dates.length > 0)) {\n                addFullRangeMarkers(res, now - range, now);\n              }\n            }\n            return [workersActions.setStats({data: res})];\n          }),\n          catchError(err => [requestFailed(err),\n            workersActions.setStats({data: []}),\n            addMessage(MESSAGES_SEVERITY.WARN, 'Failed to fetching activity worker statistics')])\n        );\n      } else {\n        const req: WorkersGetActivityReportRequest = {\n          /* eslint-disable @typescript-eslint/naming-convention */\n          from_date: now - timeFrame,\n          to_date: now,\n          interval: granularity\n          /* eslint-enable @typescript-eslint/naming-convention */\n        };\n\n        return this.workersApi.workersGetActivityReport(req).pipe(\n          mergeMap((res: WorkersGetActivityReportResponse) => {\n            let result = null;\n            if (res) {\n              const statsData = [{\n                activity: '',\n                metrics: [{\n                  metric: 'total',\n                  dates: res.total.dates,\n                  stats: [{\n                    aggregation: 'count',\n                    values: res.total.counts\n                  }]\n                }, {\n                  metric: 'active',\n                  dates: res.active.dates,\n                  stats: [{\n                    aggregation: 'count',\n                    values: res.active.counts\n                  }]\n                }]\n              }];\n              result = addStats(currentStats, statsData, action.maxPoints,\n                [{key: 'active'}, {key: 'total'}], 'activity',\n                {\n                  total: {title: 'Total Workers', multiply: 1},\n                  active: {title: 'Active Workers', multiply: 1}\n                });\n            }\n            if (Array.isArray(result) && result.some(topic => topic.dates.length > 0)) {\n              addFullRangeMarkers(result, now - range, now);\n            }\n            return [workersActions.setStats({data: result}), hideNoStatsNotice()];\n          }),\n          catchError(err => [requestFailed(err),\n            workersActions.setStats({data: []}),\n            showStatsErrorNotice()])\n        );\n      }\n    })\n  ));\n\n  tableSortChange = createEffect(() => this.actions.pipe(\n    ofType(workersActions.workersTableSortChanged),\n    withLatestFrom(this.store.select(selectWorkersTableSortFields)),\n    switchMap(([action, oldOrders]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [workersActions.workersTableSetSort({orders})];\n    })\n  ));\n\n  private transformAndSortWorkers(sortFields, workers: Worker[]): WorkerExt[] {\n    workers = workers.map(worker => ({...worker, id: worker.key || worker.id, name: worker.id}));\n    const srtByFields = sortFields.map(f => f.field);\n    const srtByOrders = sortFields.map(f => f.order > 0 ? 'asc' : 'desc');\n    return orderBy<Worker>(srtByFields, srtByOrders, workers) as any;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {catchError, filter, map, mergeMap, switchMap, tap, withLatestFrom} from 'rxjs/operators';\nimport {Store} from '@ngrx/store';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ApiQueuesService} from '../../../business-logic/api-services/queues.service';\nimport {QueuesGetQueueMetricsRequest} from '../../../business-logic/model/queues/queuesGetQueueMetricsRequest';\nimport {QueuesGetQueueMetricsResponse} from '../../../business-logic/model/queues/queuesGetQueueMetricsResponse';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {\n  selectQueuesStatsTimeFrame,\n  selectQueuesTableSortFields,\n  selectQueueStats, selectSelectedQueue\n} from '../reducers/index.reducer';\nimport {activeLoader, addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {\n  getQueues,\n  queuesTableSortChanged, queuesTableSetSort, setQueues, setSelectedQueue, setSelectedQueueFromServer, refreshSelectedQueue, syncSpecificQueueInTable, deleteQueue, moveExperimentToBottomOfQueue,\n  moveExperimentToTopOfQueue, moveExperimentInQueue, removeExperimentFromQueue, moveExperimentToOtherQueue, addExperimentToQueue, getStats, setStats\n} from '../actions/queues.actions';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {QueueMetrics} from '../../../business-logic/model/queues/queueMetrics';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {cloneDeep, orderBy} from 'lodash/fp';\nimport {addFullRangeMarkers, addStats, removeFullRangeMarkers} from '../../shared/utils/statistics';\nimport {hideNoStatsNotice, showStatsErrorNotice} from '../actions/stats.actions';\nimport {encodeOrder} from '../../shared/utils/tableParamEncode';\nimport {addMultipleSortColumns} from '../../shared/utils/shared-utils';\n\n@Injectable()\nexport class QueuesEffect {\n  constructor(\n    private actions: Actions, private queuesApi: ApiQueuesService, private tasksApi: ApiTasksService,\n    private store: Store<any>\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions.pipe(\n    ofType(getQueues, refreshSelectedQueue),\n    map(action => activeLoader(action.type))\n  ));\n\n  getQueues = createEffect(() => this.actions.pipe(\n    ofType(getQueues, queuesTableSetSort),\n    withLatestFrom(\n      this.store.select(selectQueuesTableSortFields)),\n    switchMap(([action, orderFields]) => this.queuesApi.queuesGetAllEx({\n      /* eslint-disable @typescript-eslint/naming-convention */\n      only_fields: ['*', 'entries.task.name'],\n      order_by: encodeOrder(orderFields)\n      /* eslint-enable @typescript-eslint/naming-convention */\n    }).pipe(\n      mergeMap(res => [setQueues({queues: this.sortQueues(orderFields, res.queues)}), deactivateLoader(action.type)]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err)])\n    ))\n  ));\n\n  getSelectedQueue = createEffect(() => this.actions.pipe(\n    ofType(setSelectedQueue),\n    filter(action => !!action.queue),\n    tap(action => this.store.dispatch(activeLoader(action.type))),\n    switchMap(action => this.queuesApi.queuesGetAllEx({\n        id: [action.queue.id],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n        only_fields: ['*', 'entries.task.name']\n      }).pipe(\n        mergeMap(res => [\n          setSelectedQueueFromServer({queue: res.queues[0]}),\n          syncSpecificQueueInTable({queue: res.queues[0]}),\n          deactivateLoader(action.type)]),\n        catchError(err => [deactivateLoader(action.type), requestFailed(err)])\n      )\n    )\n  ));\n\n  refreshSelectedQueue = createEffect(() => this.actions.pipe(\n    ofType(refreshSelectedQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesGetAllEx({\n      id: [queue.id],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      only_fields: ['*', 'entries.task.name']\n    }).pipe(\n      mergeMap(res => [\n        setSelectedQueueFromServer({queue: res.queues[0]}),\n        syncSpecificQueueInTable({queue: res.queues[0]}),\n        deactivateLoader(action.type)]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err)])\n    ))\n  ));\n\n  deleteQueues = createEffect(() => this.actions.pipe(\n    ofType(deleteQueue),\n    switchMap(action => this.queuesApi.queuesDelete({queue: action.queue.id}).pipe(\n      mergeMap(() => [getQueues(),\n        setSelectedQueue({}),\n      ]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Delete Queue failed')])\n    ))\n  ));\n\n  moveExperimentToTopOfQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentToTopOfQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesMoveTaskToFront({\n      queue: queue.id,\n      task: action.task\n    }).pipe(\n      mergeMap(() => [refreshSelectedQueue()]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Move Experiment failed')])\n    ))\n  ));\n\n  moveExperimentToBottomOfQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentToBottomOfQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesMoveTaskToBack({\n      queue: queue.id,\n      task: action.task\n    }).pipe(\n      mergeMap(() => [refreshSelectedQueue()]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Move Experiment failed')])\n    ))\n  ));\n\n  moveExperimentInQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentInQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) =>\n      this.queuesApi.queuesMoveTaskBackward({\n        queue: queue.id,\n        task: action.task,\n        count: (action.count)\n      }).pipe(\n        mergeMap(() => [refreshSelectedQueue()]),\n        catchError(err => [refreshSelectedQueue(), deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Move Queue failed')])\n      )\n    ),\n  ));\n\n  removeExperimentFromQueue = createEffect(() => this.actions.pipe(\n    ofType(removeExperimentFromQueue),\n    switchMap((action) => this.tasksApi.tasksDequeue({task: action.task}).pipe(\n      mergeMap(() => [refreshSelectedQueue()]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err),\n        addMessage(MESSAGES_SEVERITY.ERROR, 'Remove Queue failed')])\n    ))\n  ));\n\n  moveExperimentToOtherQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentToOtherQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesRemoveTask({queue: queue.id, task: action.task}).pipe(\n        mergeMap(() => [addExperimentToQueue({task: action.task, queue: action.queue})]),\n        catchError(err => [deactivateLoader(action.type), requestFailed(err),\n          addMessage(MESSAGES_SEVERITY.ERROR, 'Move Queue to other queue failed')])\n      )\n    )\n  ));\n\n  addExperimentToQueue = createEffect(() => this.actions.pipe(\n    ofType(addExperimentToQueue),\n    switchMap((action) => this.queuesApi.queuesAddTask({queue: action.queue, task: action.task}).pipe(\n        mergeMap(() => [refreshSelectedQueue(), getQueues()]),\n        catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Add experiment to queue failed')])\n      )\n    )\n  ));\n\n  getStats$ = createEffect(() => this.actions.pipe(\n    ofType(getStats),\n    withLatestFrom(this.store.select(selectQueueStats),\n      this.store.select(selectSelectedQueue),\n      this.store.select(selectQueuesStatsTimeFrame)\n    ),\n    switchMap(([action, currentStats, queue, selectedRange]: [ReturnType<typeof getStats>, any, Queue, string]) => {\n      const now = Math.floor((new Date()).getTime() / 1000);\n      const range = parseInt(selectedRange, 10);\n      const granularity = Math.max(Math.floor(range / action.maxPoints), queue ? 10 : 40);\n\n      const req: QueuesGetQueueMetricsRequest = {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        from_date: now - range,\n        to_date: now,\n        queue_ids: queue ? [queue.id] : undefined,\n        interval: granularity\n      };\n      /* eslint-enable @typescript-eslint/naming-convention */\n      return this.queuesApi.queuesGetQueueMetrics(req).pipe(\n        mergeMap((res: QueuesGetQueueMetricsResponse) => {\n          let newStats = {wait: null, length: null};\n          currentStats = cloneDeep(currentStats);\n          if (res && res.queues) {\n            if (Array.isArray(currentStats.wait) && currentStats.wait.some(topic => topic.dates.length > 1)) {\n              removeFullRangeMarkers(currentStats.wait);\n            }\n            if (Array.isArray(currentStats.length) && currentStats.length.some(topic => topic.dates.length > 1)) {\n              removeFullRangeMarkers(currentStats.length);\n            }\n            let newQueue: QueueMetrics;\n            if (res.queues.length) {\n              newQueue = res.queues[0];\n            } else {\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              newQueue = {dates: [], avg_waiting_times: [], queue_lengths: []};\n            }\n            const waitData = [{\n              wait: '',\n              metrics: [{\n                metric: 'queueAvgWait',\n                dates: newQueue.dates,\n                stats: [{\n                  aggregation: 'seconds',\n                  values: newQueue.avg_waiting_times\n                }]\n              }]\n            }];\n            const lenData = [{\n              length: '',\n              metrics: [{\n                metric: 'queueLen',\n                dates: newQueue.dates,\n                stats: [{\n                  aggregation: 'count',\n                  values: newQueue.queue_lengths\n                }]\n              }]\n            }];\n            newStats = {\n              wait: addStats(currentStats.wait, waitData, action.maxPoints,\n                [{key: 'queueAvgWait'}], 'wait', {queueAvgWait: {title: 'Queue Average Wait Time', multiply: 1}}),\n              length: addStats(currentStats.length, lenData, action.maxPoints,\n                [{key: 'queueLen'}], 'length', {queueLen: {title: 'Queues Average Length', multiply: 1}})\n            };\n            if (Array.isArray(newStats.wait) && newStats.wait.some(topic => topic.dates.length > 0)) {\n              addFullRangeMarkers(newStats.wait, now - range, now);\n            }\n            if (Array.isArray(newStats.length) && newStats.length.some(topic => topic.dates.length > 0)) {\n              addFullRangeMarkers(newStats.length, now - range, now);\n            }\n          }\n          return [deactivateLoader(action.type), setStats({data: newStats}), hideNoStatsNotice()];\n        }),\n        catchError(err => [deactivateLoader(action.type),\n          setStats({data: {wait: [], length: []}}),\n          requestFailed(err),\n          showStatsErrorNotice()\n        ])\n      );\n\n    })\n  ));\n\n  tableSortChange = createEffect(() => this.actions.pipe(\n    ofType(queuesTableSortChanged),\n    withLatestFrom(this.store.select(selectQueuesTableSortFields)),\n    switchMap(([action, oldOrders]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [queuesTableSetSort({orders})];\n    })\n  ));\n\n  private sortQueues(sortFields, queues): Queue[] {\n    const srtByFields = sortFields.map(f => f.field);\n    const srtByOrders = sortFields.map(f => f.order > 0 ? 'asc' : 'desc');\n    return orderBy<Queue>(srtByFields, srtByOrders, queues) as any;\n  }\n}\n","import * as createNewQueueActions from './queue-create-dialog.actions';\nimport {CREATE_QUEUE_ACTIONS} from './queue-create-dialog.actions';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Injectable} from '@angular/core';\nimport {CREATION_STATUS} from './queue-create-dialog.reducer';\nimport {catchError, mergeMap, map, switchMap} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {activeLoader, addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {ApiQueuesService} from '../../../business-logic/api-services/queues.service';\n\n@Injectable()\nexport class QueueCreateDialogEffects {\n  constructor(private actions: Actions, private queuesApiService: ApiQueuesService, private router: Router) {\n  }\n\n  @Effect()\n  activeLoader = this.actions.pipe(\n    ofType(CREATE_QUEUE_ACTIONS.CREATE_NEW_QUEUE),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  createQueue = this.actions.pipe(\n    ofType<createNewQueueActions.CreateNewQueue>(CREATE_QUEUE_ACTIONS.CREATE_NEW_QUEUE),\n    mergeMap((action) => this.queuesApiService.queuesCreate(action.payload)\n      .pipe(\n        mergeMap(res => [\n          deactivateLoader(action.type),\n          new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.SUCCESS),\n          addMessage(MESSAGES_SEVERITY.SUCCESS, 'Queue Created Successfully'),\n        ]),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error), addMessage(MESSAGES_SEVERITY.ERROR, 'Queue Created Failed'), new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.FAILED)])\n      )\n    )\n  );\n\n  @Effect()\n  updateQueue = this.actions.pipe(\n    ofType<createNewQueueActions.UpdateQueue>(CREATE_QUEUE_ACTIONS.UPDATE_QUEUE),\n    mergeMap((action) => this.queuesApiService.queuesUpdate(action.payload)\n      .pipe(\n        mergeMap(res => [\n          deactivateLoader(action.type),\n          new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.SUCCESS),\n          addMessage(MESSAGES_SEVERITY.SUCCESS, 'Queue Updated Successfully'),\n        ]),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error), addMessage(MESSAGES_SEVERITY.ERROR, 'Queue Created Failed'), new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.FAILED)])\n      )\n    )\n  );\n\n  @Effect()\n  getAllQueues = this.actions.pipe(\n    ofType<createNewQueueActions.GetQueues>(CREATE_QUEUE_ACTIONS.GET_QUEUES),\n    switchMap(action => this.queuesApiService.queuesGetAllEx({})\n      .pipe(\n        mergeMap(res => [new createNewQueueActions.SetQueues(res.queues)]),\n        catchError(error => [requestFailed(error)])\n      )\n    )\n  );\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {queueCreateDialogReducer} from './queue-create-dialog.reducer';\nimport {QueueCreateDialogEffects} from './queue-create-dialog.effects';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {QueueCreateDialogComponent} from './queue-create-dialog.component';\nimport {CreateNewQueueFormComponent} from './create-new-queue-form/create-new-queue-form.component';\nimport {UiComponentsModule} from '../ui-components/ui-components.module';\nimport {SMMaterialModule} from '../material/material.module';\n\n@NgModule({\n  imports        : [\n    UiComponentsModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SMMaterialModule,\n    StoreModule.forFeature('queueCreateDialog', queueCreateDialogReducer),\n    EffectsModule.forFeature([QueueCreateDialogEffects])\n  ],\n  declarations   : [QueueCreateDialogComponent, CreateNewQueueFormComponent]\n})\nexport class QueueCreateDialogModule {\n}\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {WorkersAndQueuesRoutingModule} from '../../webapp-common/workers-and-queues/workers-and-queues-routing.module';\nimport {WorkersAndQueuesComponent} from '../../webapp-common/workers-and-queues/workers-and-queues.component';\nimport {WorkersComponent} from '../../webapp-common/workers-and-queues/containers/workers/workers.component';\nimport {QueuesComponent} from '../../webapp-common/workers-and-queues/containers/queues/queues.component';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {WorkersTableComponent} from '../../webapp-common/workers-and-queues/dumb/workers-table/workers-table.component';\nimport {QueueTaskTableComponent} from '../../webapp-common/workers-and-queues/dumb/queue-task-table/queue-task-table.component';\nimport {reducers} from '../../webapp-common/workers-and-queues/reducers/index.reducer';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {WorkersEffects} from '../../webapp-common/workers-and-queues/effects/workers.effects';\nimport {WorkersStatsComponent} from '../../webapp-common/workers-and-queues/containers/workers-stats/workers-stats.component';\nimport {WorkerInfoComponent} from '../../webapp-common/workers-and-queues/dumb/worker-info/worker-info.component';\nimport {AngularSplitModule} from 'angular-split';\nimport {QueuesTableComponent} from '../../webapp-common/workers-and-queues/dumb/queues-table/queues-table.component';\nimport {QueueInfoComponent} from '../../webapp-common/workers-and-queues/dumb/queue-info/queue-info.component';\nimport {QueuesEffect} from '../../webapp-common/workers-and-queues/effects/queues.effects';\nimport {SharedPipesModule} from '../../webapp-common/shared/pipes/shared-pipes.module';\nimport {QueueStatsComponent} from '../../webapp-common/workers-and-queues/containers/queue-stats/queue-stats.component';\nimport {SharedModule} from '../../shared/shared.module';\nimport {ExperimentSharedModule} from '../experiments/shared/experiment-shared.module';\nimport {QueueCreateDialogModule} from '../../webapp-common/shared/queue-create-dialog/queue-create-dialog.module';\nimport {SelectQueueModule} from '../../webapp-common/experiments/shared/components/select-queue/select-queue.module';\nimport {QueuesMenuComponent} from '../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component';\nimport {QueuesMenuExtendedComponent} from './queues-menu-extended/queues-menu-extended.component';\n\n@NgModule({\n  imports: [\n    ExperimentSharedModule,\n    SharedPipesModule,\n    CommonModule,\n    WorkersAndQueuesRoutingModule,\n    SharedModule,\n    SMSharedModule,\n    QueueCreateDialogModule,\n    SelectQueueModule,\n    StoreModule.forFeature('workersAndQueues', reducers),\n    EffectsModule.forFeature([WorkersEffects, QueuesEffect]),\n    AngularSplitModule,\n    FormsModule,\n  ],\n  declarations: [\n    WorkersAndQueuesComponent,\n    WorkersComponent,\n    WorkersTableComponent,\n    WorkersStatsComponent,\n    WorkerInfoComponent,\n    QueuesTableComponent,\n    QueueTaskTableComponent,\n    QueuesComponent,\n    QueueInfoComponent,\n    QueueStatsComponent,\n    QueuesMenuComponent,\n    QueuesMenuExtendedComponent\n  ],\n\n})\nexport class WorkersAndQueuesModule {\n}\n"]}