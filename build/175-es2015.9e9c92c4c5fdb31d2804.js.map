{"version":3,"mappings":"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","names":["getQueues","createAction","queuesPrefix","setQueues","props","queuesTableSortChanged","queuesTableSetSort","setSelectedQueue","refreshSelectedQueue","setSelectedQueueFromServer","syncSpecificQueueInTable","deleteQueue","moveExperimentToBottomOfQueue","moveExperimentToTopOfQueue","moveExperimentInQueue","removeExperimentFromQueue","moveExperimentToOtherQueue","addExperimentToQueue","getStats","setStats","setStatsParams","CREATE_QUEUE_DIALOG_PREFIX","CREATE_QUEUE_ACTIONS","GET_QUEUES","SET_QUEUES","RESET_STATE","CREATE_NEW_QUEUE","UPDATE_QUEUE","SET_CREATION_STATUS","constructor","this","queues","payload","creationStatus","createQueueInitState","selectCreateQueueDialog","createFeatureSelector","selectQueues","createSelector","state","selectCreationStatus","action","type","i0","CreateNewQueueFormComponent","name","id","EventEmitter","queuesNames","map","queue","send","queueForm","valid","queueCreated","emit","onSubmit","selectors","ctx","QueueCreateDialogComponent","store","matDialogRef","data","editMode","queues$","select","createQueueSelectors","ngOnInit","dispatch","createNewQueueActions","creationStatusSubscription","subscribe","status","close","ngOnDestroy","unsubscribe","createQueue","MAT_DIALOG_DATA","WorkersAndQueuesComponent","dialog","route","queuesManager","snapshot","addQueue","createQueueDialog","open","afterClosed","pipe","filter","take","workersPrefix","getWorkers","setWorkers","getSelectedWorker","setSelectedWorker","workersTableSortChanged","workersTableSetSort","QUEUES_TABLE_COL_FIELDS","ID","NAME","USER","QUEUED","TASK","IN_QUEUE","LAST_UPDATED","WORKERS_TABLE_COL_FIELDS","TASK_RUNNING_TIME","TASK_ITERATIONS","MiB","WORKER_STATS_PARAM_INFO","cpu_usage","title","multiply","gpu_usage","memory_used","gpu_memory_used","network_rx","network_tx","TIME_INTERVALS","HOUR","DAY","WEEK","MONTH","YEAR","initQueues","selectedQueue","tasks","stats","wait","length","selectedStatsTimeFrame","toString","tableSortFields","field","order","TABLE_SORT_ORDER","initWorkersStore","selectedWorker","selectedStatsParam","workersReducer","createReducer","on","Object","workers","worker","orders","statsRequest","timeFrame","param","showStatsErrorNotice","hideNoStatsNotice","_statsReducer","showNoStatsNotice","reducers","s","_a","workersAndQueues","selectSelectedQueue","selectQueuesTasks","selectQueueStats","selectQueuesStatsTimeFrame","selectQueuesTableSortFields","selectWorkers","selectStats","selectSelectedWorker","selectWorkersTableSortFields","selectStatsParams","selectStatsTimeFrame","selectStatsErrorNotice","WorkersStatsComponent","label","value","get","activeWorker","yAxisLabel","yAxisLabels","currentParam","chartChanged","chartParamSubscription","combineLatest","currentTimeFrame","chartDataSubscription","refreshChart","chartData","dataByTopic","clearInterval","intervaleHandle","range","parseInt","width","chartRef","element","nativeElement","clientWidth","Math","min","granularity","max","floor","maxPoints","window","setInterval","chartParamChange","event","timeFrameChange","ViewContainerRef","WorkersTableComponent","BaseTableView","super","cols","headerType","ColHeaderTypeEnum","header","style","sortable","_workers","table","focusSelected","getBodyData","rowData","col","onRowClicked","workerSelected","scrollTableToTop","tableContainer","scroll","top","onSortChanged","isShift","colId","sortedChanged","afterTableInit","emitSelection","selection","WorkerInfoComponent","class","deselectWorkerClicked","deselectWorker","WorkersComponent","router","workers$","selectedWorker$","tableSortFields$","url","URL","location","href","searchParams","withLatestFrom","routerWorkerId","find","selectWorker","navigate","relativeTo","queryParams","t","queryParamsHandling","sort","QueueStatsComponent","index","option","updateChart","waitChartData","lenChartData","waitChartRef","tickFormatter","seconds","th","padStart","timeFrameChanged","$event","ctx_r1","ctx_r3","QueuesMenuComponent","ICONS","QueuesMenuExtendedComponent","contextMenu","QueuesTableComponent","changeDetector","_queues","clickHandler","button","menuOpen","getQNames","getQName","queueIns","queueSelected","openContextMenu","e","preventDefault","setTimeout","menuPosition","x","clientX","y","clientY","detectChanges","QueueInfoComponent","blTaskService","_selectedQueue","cloneDeep","activeTab","routerTab","findQueueById","deselectQueueClicked","deselectQueue","experimentDropped","task","entries","previousIndex","count","currentIndex","moveItemInArray","menuSelectedExperiment","moveToTop","moveToBottom","moveToQueue","enqueuePopup","removeFromQueue","SelectQueueComponent","res","confirmed","setPreviouslyUsedQueue","QueuesComponent","queuesTasks$","selectedQueue$","routerQueueId","selectQueue","renameQueue","q","WorkersAndQueuesResolver","resolve","of","factory","routes","path","component","children","redirectTo","WorkersAndQueuesRoutingModule","RouterModule","defaultMaxValHandler","target","hasOwnProperty","values","current","requestedKeys","entityParamName","paramInfo","topicIDs","Proxy","forEach","topicObj","topicID","topic","slice","allDates","Set","flattenDeep","d","metrics","dates","shouldAddEntity","entityData","entity","reqKey","paramData","metric","key","aggData","aggregation","topicName","push","tplList","date","strDate","Date","toISOString","findIndex","dateObj","idx","indexOf","reqParam","topics","splice","fromDate","toDate","WorkersEffects","actions","workersApi","createEffect","ofType","workersActions","switchMap","sortFields","workersGetAll","mergeMap","transformAndSortWorkers","actionsToFire","deactivateLoader","catchError","err","requestFailed","currentStats","selectedRange","params","now","getTime","keys","split","val","Array","isArray","some","removeFullRangeMarkers","lastDate","topicLastDate","getOr","last","req","entitie","from_date","to_date","worker_ids","items","castArray","interval","workersGetStats","addStats","addFullRangeMarkers","addMessage","MESSAGES_SEVERITY","workersGetActivityReport","result","activity","total","counts","active","oldOrders","addMultipleSortColumns","srtByFields","f","srtByOrders","orderBy","QueuesEffect","queuesApi","tasksApi","activeLoader","orderFields","queuesGetAllEx","only_fields","order_by","encodeOrder","sortQueues","tap","queuesDelete","queuesMoveTaskToFront","queuesMoveTaskToBack","queuesMoveTaskBackward","tasksDequeue","queuesRemoveTask","queuesAddTask","queuesGetQueueMetrics","queue_ids","undefined","newStats","newQueue","avg_waiting_times","queue_lengths","lenData","queueAvgWait","queueLen","queuesApiService","queuesCreate","error","queuesUpdate","QueueCreateDialogEffects","__decorate","Effect","J","QueueCreateDialogModule","UiComponentsModule","CommonModule","FormsModule","ReactiveFormsModule","SMMaterialModule","StoreModule","queueCreateDialogReducer","EffectsModule","WorkersAndQueuesModule","ExperimentSharedModule","SharedPipesModule","SharedModule","SMSharedModule","SelectQueueModule","AngularSplitModule"],"sources":["webpack:///src/app/webapp-common/workers-and-queues/actions/queues.actions.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.actions.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.reducer.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/create-new-queue-form/create-new-queue-form.component.html","webpack:///src/app/webapp-common/shared/queue-create-dialog/create-new-queue-form/create-new-queue-form.component.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.component.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.component.html","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues.component.html","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues.component.ts","webpack:///src/app/webapp-common/workers-and-queues/actions/workers.actions.ts","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues.consts.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/queues.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/workers.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/actions/stats.actions.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/stats.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/reducers/index.reducer.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/workers-stats/workers-stats.component.html","webpack:///src/app/webapp-common/workers-and-queues/containers/workers-stats/workers-stats.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/workers-table/workers-table.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/workers-table/workers-table.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/worker-info/worker-info.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/worker-info/worker-info.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/workers/workers.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/workers/workers.component.html","webpack:///src/app/webapp-common/workers-and-queues/containers/queue-stats/queue-stats.component.html","webpack:///src/app/webapp-common/workers-and-queues/containers/queue-stats/queue-stats.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.ts","webpack:///src/app/features/workers-and-queues/queues-menu-extended/queues-menu-extended.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-table/queues-table.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/queues-table/queues-table.component.ts","webpack:///src/app/webapp-common/workers-and-queues/dumb/queue-info/queue-info.component.html","webpack:///src/app/webapp-common/workers-and-queues/dumb/queue-info/queue-info.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/queues/queues.component.ts","webpack:///src/app/webapp-common/workers-and-queues/containers/queues/queues.component.html","webpack:///src/app/shared/resolvers/workers-and-queues.resolver.ts","webpack:///src/app/webapp-common/workers-and-queues/workers-and-queues-routing.module.ts","webpack:///src/app/webapp-common/shared/utils/statistics.ts","webpack:///src/app/webapp-common/workers-and-queues/effects/workers.effects.ts","webpack:///src/app/webapp-common/workers-and-queues/effects/queues.effects.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.effects.ts","webpack:///src/app/webapp-common/shared/queue-create-dialog/queue-create-dialog.module.ts","webpack:///src/app/features/workers-and-queues/workers-and-queues.module.ts"],"sourcesContent":["import {createAction, props} from '@ngrx/store';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {Topic} from '../../shared/utils/statistics';\nimport {SortMeta} from 'primeng/api';\n\nconst queuesPrefix = 'QUEUES_';\nexport const GET_QUEUES = queuesPrefix + 'GET_QUEUES';\nexport const SET_QUEUES = queuesPrefix + 'SET_QUEUES';\n// export const GET_QUEUES_TASKS = queuesPrefix + 'SET_QUEUES_TASKS';\n// export const SET_QUEUES_TASKS = queuesPrefix + 'SET_QUEUES_TASKS';\n// export const ADD_QUEUES_TASKS = queuesPrefix + 'ADD_QUEUES_TASKS';\nexport const MOVE_EXPERIMENT_TO_BOTTOM_OF_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_TO_BOTTOM_OF_QUEUE';\nexport const MOVE_EXPERIMENT_TO_TOP_OF_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_TO_TOP_OF_QUEUE';\nexport const MOVE_EXPERIMENT_IN_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_IN_QUEUE';\nexport const REMOVE_EXPERIMENT_FROM_QUEUE = queuesPrefix + 'REMOVE_EXPERIMENT_FROM_QUEUE';\nexport const MOVE_EXPERIMENT_TO_OTHER_QUEUE = queuesPrefix + 'MOVE_EXPERIMENT_TO_OTHER_QUEUE';\nexport const ADD_EXPERIMENT_TO_QUEUE = queuesPrefix + 'ADD_EXPERIMENT_TO_QUEUE';\nexport const SET_SELECTED_QUEUE = queuesPrefix + 'SET_SELECTED_QUEUE';\nexport const QUEUES_TABLE_SORT_CHANGED = queuesPrefix + 'QUEUES_TABLE_SORT_CHANGED';\nexport const QUEUES_TABLE_SET_SORT = queuesPrefix + 'QUEUES_TABLE_SET_SORT';\nexport const REFRESH_SELECTED_QUEUE = queuesPrefix + 'REFRESH_SELECTED_QUEUE';\nexport const SET_SELECTED_QUEUE_FROM_SERVER = queuesPrefix + 'SET_SELECTED_QUEUE_FROM_SERVER';\nexport const SYNC_SPECIFIC_QUEUE_IN_TABLE = queuesPrefix + 'SYNC_SPECIFIC_QUEUE_IN_TABLE';\nexport const DELETE_QUEUE = queuesPrefix + 'DELETE_QUEUE';\nexport const GET_STATS = queuesPrefix + 'GET_STATS';\nexport const SET_STATS = queuesPrefix + 'SET_STATS';\nexport const SET_STATS_PARAMS = queuesPrefix + 'SET_STATS_PARAMS';\n\nexport const getQueues = createAction(GET_QUEUES);\n\nexport const setQueues = createAction(\n  SET_QUEUES,\n  props<{ queues: Array<Queue> }>()\n);\n\nexport const queuesTableSortChanged = createAction(\n  QUEUES_TABLE_SORT_CHANGED,\n  props<{ colId: string; isShift: boolean }>()\n);\n\n\nexport const queuesTableSetSort = createAction(\n  QUEUES_TABLE_SET_SORT,\n  props<{ orders: SortMeta[] }>()\n);\n\nexport const setSelectedQueue = createAction(\n  SET_SELECTED_QUEUE,\n  props<{ queue?: Queue }>()\n);\n\nexport const refreshSelectedQueue = createAction(\n  REFRESH_SELECTED_QUEUE\n);\n\nexport const setSelectedQueueFromServer = createAction(\n  SET_SELECTED_QUEUE_FROM_SERVER,\n  props<{ queue?: Queue }>()\n);\n\nexport const syncSpecificQueueInTable = createAction(\n  SYNC_SPECIFIC_QUEUE_IN_TABLE,\n  props<{ queue?: Queue }>()\n);\n\nexport const deleteQueue = createAction(\n  DELETE_QUEUE,\n  props<{ queue: Queue }>()\n);\n\n// export class GetQueuesTasks implements ISmAction {\n//   type = GET_QUEUES_TASKS;\n//   public payload: { queues: Queue };\n//\n//   constructor(queues: Queue) {\n//     this.payload = {queues};\n//   }\n// }\n\n// export class AddQueuesTasks implements ISmAction {\n//   type = ADD_QUEUES_TASKS;\n//\n//   constructor(public payload: { tasks: Task; queueId: string }) {\n//   }\n// }\n\nexport const moveExperimentToBottomOfQueue = createAction(\n  MOVE_EXPERIMENT_TO_BOTTOM_OF_QUEUE,\n  props<{ task: string }>()\n);\n\nexport const moveExperimentToTopOfQueue = createAction(\n  MOVE_EXPERIMENT_TO_TOP_OF_QUEUE,\n  props<{ task: string }>()\n);\n\nexport const moveExperimentInQueue = createAction(\n  MOVE_EXPERIMENT_IN_QUEUE,\n  props<{ task: string; count: number }>()\n);\n\nexport const removeExperimentFromQueue = createAction(\n  REMOVE_EXPERIMENT_FROM_QUEUE,\n  props<{ task: string }>()\n);\n\nexport const moveExperimentToOtherQueue = createAction(\n  MOVE_EXPERIMENT_TO_OTHER_QUEUE,\n  props<{ task: string; queue: string }>()\n);\n\nexport const addExperimentToQueue = createAction(\n  ADD_EXPERIMENT_TO_QUEUE,\n  props<{ task: string; queue: string }>()\n);\n\nexport const getStats = createAction(\n  GET_STATS,\n  props<{ maxPoints?: number }>()\n);\n\nexport const setStats = createAction(\n  SET_STATS,\n  props<{ data: { wait?: Topic[]; length?: Topic[] } }>()\n);\n\nexport const setStatsParams = createAction(\n  SET_STATS_PARAMS,\n  props<{ timeFrame: string }>()\n);\n","import {CreationStatusEnum} from './queue-create-dialog.reducer';\nimport {ISmAction} from '../../core/models/actions';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {QueuesUpdateRequest} from '../../../business-logic/model/queues/queuesUpdateRequest';\nimport {QueuesCreateRequest} from '../../../business-logic/model/queues/queuesCreateRequest';\n\nconst CREATE_QUEUE_DIALOG_PREFIX = 'CREATE_QUEUE_DIALOG_';\n\nexport const CREATE_QUEUE_ACTIONS = {\n  GET_QUEUES         : CREATE_QUEUE_DIALOG_PREFIX + 'GET_QUEUES',\n  SET_QUEUES         : CREATE_QUEUE_DIALOG_PREFIX + 'SET_QUEUES',\n  RESET_STATE        : CREATE_QUEUE_DIALOG_PREFIX + 'RESET_STATE',\n  CREATE_NEW_QUEUE   : CREATE_QUEUE_DIALOG_PREFIX + 'CREATE_NEW_QUEUE',\n  UPDATE_QUEUE       : CREATE_QUEUE_DIALOG_PREFIX + 'UPDATE_QUEUE',\n  SET_CREATION_STATUS: CREATE_QUEUE_DIALOG_PREFIX + 'SET_CREATION_STATUS',\n};\n\n\nexport class GetQueues implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.GET_QUEUES;\n\n  constructor() {\n  }\n}\n\nexport class SetQueues implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.SET_QUEUES;\n  public payload: { queues: Array<Queue> };\n\n  constructor(queues: Array<Queue>) {\n    this.payload = {queues};\n  }\n}\n\nexport class ResetState implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.RESET_STATE;\n\n  constructor() {\n  }\n}\n\nexport class CreateNewQueue implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.CREATE_NEW_QUEUE;\n\n  constructor(public payload: QueuesCreateRequest) {\n  }\n}\n\nexport class UpdateQueue implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.UPDATE_QUEUE;\n\n  constructor(public payload: QueuesUpdateRequest) {\n  }\n}\n\nexport class SetNewQueueCreationStatus implements ISmAction {\n  readonly type = CREATE_QUEUE_ACTIONS.SET_CREATION_STATUS;\n  public payload: { creationStatus: CreationStatusEnum };\n\n  constructor(creationStatus: CreationStatusEnum) {\n    this.payload = {creationStatus};\n  }\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {CREATE_QUEUE_ACTIONS} from './queue-create-dialog.actions';\nimport {Queue} from '../../../business-logic/model/queues/queue';\n\nexport type CreationStatusEnum = 'success' | 'failed' | 'inProgress';\nexport const CREATION_STATUS = {\n  SUCCESS    : 'success' as CreationStatusEnum,\n  FAILED     : 'failed' as CreationStatusEnum,\n  IN_PROGRESS: 'inProgress' as CreationStatusEnum,\n};\n\nexport interface ICreateQueueDialog {\n  queues: Array<Queue>;\n  creationStatus: CreationStatusEnum;\n}\n\nconst createQueueInitState: ICreateQueueDialog = {\n  queues        : [],\n  creationStatus: null\n};\n\nexport const selectCreateQueueDialog = createFeatureSelector<ICreateQueueDialog>('queueCreateDialog');\nexport const selectQueues            = createSelector(selectCreateQueueDialog, (state): Array<Queue> => state.queues);\nexport const selectCreationStatus    = createSelector(selectCreateQueueDialog, (state): CreationStatusEnum => state.creationStatus);\n\nexport function queueCreateDialogReducer<ActionReducer>(state: ICreateQueueDialog = createQueueInitState, action): ICreateQueueDialog {\n  switch (action.type) {\n    case CREATE_QUEUE_ACTIONS.SET_CREATION_STATUS:\n      return {...state, creationStatus: action.payload.creationStatus};\n    case CREATE_QUEUE_ACTIONS.SET_QUEUES:\n      return {...state, queues: action.payload.queues};\n    case CREATE_QUEUE_ACTIONS.RESET_STATE:\n      return {...createQueueInitState};\n    default:\n      return state;\n  }\n}\n","<ng-form class=\"create-queue-form\" #queueForm='ngForm'>\n  <div class=\"row position-relative\">\n    <mat-form-field appearance=\"outline\" class=\"w-100 pt-3\">\n      <mat-error *ngIf=\"name?.errors?.required\">Required</mat-error>\n      <mat-error *ngIf=\"name?.errors?.minlength\">Name should contain at least 3 characters</mat-error>\n      <mat-error *ngIf=\"name?.errors?.uniqueName\">Name should be unique</mat-error>\n      <mat-label>Queue name</mat-label>\n      <input matInput type=\"text\"\n             name=\"queueName\"\n             #name=\"ngModel\"\n             [(ngModel)]=\"queue.name\"\n             required\n             minlength=\"3\"\n             smUniqueNameValidator\n             [existingNames]=\"queuesNames\">\n    </mat-form-field>\n  </div>\n  <br/>\n  <div class=\"row\">\n    <div class=\"col-24 create-queue-button\">\n      <button class=\"btn btn-dark-fill center\" [disabled]=\"queueForm.invalid\"\n              (click)=\"send()\">{{isEdit ? 'RENAME' : 'CREATE'}}\n      </button>\n    </div>\n  </div>\n</ng-form>\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n\n@Component({\n  selector   : 'sm-create-new-queue-form',\n  templateUrl: './create-new-queue-form.component.html',\n  styleUrls  : ['./create-new-queue-form.component.scss']\n})\nexport class CreateNewQueueFormComponent {\n  public queuesNames: Array<string>;\n\n  @Input() set queues(queues) {\n    this.queuesNames = queues.map(queue => queue.name);\n  }\n\n  @Input() queue = {\n    name: null,\n    id  : null\n  };\n\n  @Output() queueCreated = new EventEmitter();\n  @ViewChild('queueForm', {static: true}) queueForm: NgForm;\n\n\n  get isEdit(): boolean {\n    return !!this.queue.id;\n  }\n\n  send() {\n    if (this.queueForm.valid) {\n      this.queueCreated.emit(this.queue);\n    } else {\n      this.queueForm.onSubmit(null);\n    }\n  }\n}\n","import * as createNewQueueActions from './queue-create-dialog.actions';\nimport * as createQueueSelectors from './queue-create-dialog.reducer';\n\nimport {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {CREATION_STATUS} from './queue-create-dialog.reducer';\nimport {Observable, Subscription} from 'rxjs';\n\n@Component({\n  selector   : 'sm-queue-create-dialog',\n  templateUrl: './queue-create-dialog.component.html',\n  styleUrls  : ['./queue-create-dialog.component.scss']\n})\nexport class QueueCreateDialogComponent implements OnInit, OnDestroy {\n  public queues$: Observable<any>;\n  private creationStatusSubscription: Subscription;\n  private editMode = false;\n  public queue     = {name: null, id: null};\n\n  constructor(private store: Store<any>, private matDialogRef: MatDialogRef<QueueCreateDialogComponent>, @Inject(MAT_DIALOG_DATA) public data) {\n    if (data) {\n      this.queue    = data;\n      this.editMode = true;\n    }\n    this.queues$ = this.store.select(createQueueSelectors.selectQueues);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new createNewQueueActions.GetQueues());\n    this.creationStatusSubscription = this.store.select(createQueueSelectors.selectCreationStatus).subscribe(status => {\n      if (status === CREATION_STATUS.SUCCESS) {\n        return this.matDialogRef.close(true);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new createNewQueueActions.ResetState());\n    this.creationStatusSubscription.unsubscribe();\n  }\n\n  public createQueue(queue) {\n    if (queue.id) {\n      this.store.dispatch(new createNewQueueActions.UpdateQueue({queue: queue.id, name: queue.name}));\n    } else {\n      this.store.dispatch(new createNewQueueActions.CreateNewQueue(queue));\n    }\n  }\n\n}\n","<sm-dialog-template iconClass=\"al-icon al-ico-queues\" [header]=\"queue.id?'RENAME QUEUE' :'NEW QUEUE'\">\n  <sm-create-new-queue-form [queues]=\"queues$| async\" (queueCreated)=\"createQueue($event)\" [queue]=\"queue\">\n  </sm-create-new-queue-form>\n</sm-dialog-template>\n","<div class=\"navbar-header-container\">\n  <div class=\"d-flex justify-content-between header-container align-items-center\">\n    <div></div>\n    <div class=\"nav-bar-items-container\">\n      <span [routerLink]=\"['workers']\" routerLinkActive #rlaWorkers=\"routerLinkActive\">\n        <sm-navbar-item direction=\"top\" header=\"workers\" [active]=\"rlaWorkers.isActive\"></sm-navbar-item>\n      </span>\n      <span [routerLink]=\"['queues']\" routerLinkActive #rlaQueues=\"routerLinkActive\">\n        <sm-navbar-item direction=\"top\" header=\"queues\" [active]=\"rlaQueues.isActive\"></sm-navbar-item>\n      </span>\n    </div>\n    <div *ngIf=\"rlaQueues.isActive\">\n      <button *ngIf=\"queuesManager\" class=\"btn btn-primary d-flex align-items-center\" (click)=\"addQueue()\">\n        <i class=\"al-icon al-ico-add sm\"></i>\n        <span> &nbsp; NEW QUEUE</span>\n      </button>\n    </div>\n  </div>\n</div>\n<router-outlet></router-outlet>\n","import {Component} from '@angular/core';\nimport {filter, take} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {getQueues} from './actions/queues.actions';\nimport {Store} from '@ngrx/store';\nimport {QueueCreateDialogComponent} from '../shared/queue-create-dialog/queue-create-dialog.component';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'sm-workers-and-queues',\n  templateUrl: './workers-and-queues.component.html',\n  styleUrls: ['./workers-and-queues.component.scss']\n})\nexport class WorkersAndQueuesComponent {\n  private createQueueDialog: MatDialogRef<any, any>;\n  public queuesManager: boolean;\n\n  constructor(private dialog: MatDialog, private store: Store<any>, private route: ActivatedRoute) {\n    this.queuesManager = route.snapshot.data.queuesManager;\n  }\n\n  addQueue() {\n\n    this.createQueueDialog = this.dialog.open(QueueCreateDialogComponent);\n    this.createQueueDialog.afterClosed()\n      .pipe(\n        filter(queue => !!queue),\n        take(1)\n      )\n      .subscribe((queue) => {\n        this.store.dispatch(getQueues());\n      });\n  }\n\n}\n","import {createAction, props} from '@ngrx/store';\nimport {Worker} from '../../../business-logic/model/workers/worker';\nimport {Topic} from '../../shared/utils/statistics';\nimport {SortMeta} from 'primeng/api';\n\nconst workersPrefix = 'WORKERS_';\n\nexport interface WorkerExt extends Worker {\n  name: string;\n}\n\nexport const getWorkers = createAction(\n  workersPrefix + '[get workers and stats]',\n  props<{maxPoints: number}>()\n);\n\nexport const setWorkers = createAction(\n  workersPrefix + '[set workers]',\n  props<{workers: WorkerExt[]}>()\n);\n\nexport const getSelectedWorker = createAction(\n  workersPrefix + '[get selected worker]',\n  props<{worker: WorkerExt}>()\n);\n\nexport const setSelectedWorker = createAction(\n  workersPrefix + '[set selected worker]',\n  props<{worker: WorkerExt}>()\n);\n\nexport const workersTableSortChanged = createAction(\n  workersPrefix + '[table sort changed]',\n  props<{  colId: string; isShift: boolean }>()\n);\n\n\nexport const workersTableSetSort = createAction(\n  workersPrefix + '[set table sort]',\n  props<{ orders: SortMeta[] }>()\n);\n\nexport const setStats = createAction(\n  workersPrefix + '[set stats]',\n  props<{data: Topic[]}>()\n);\n\nexport const setStatsParams = createAction(\n  workersPrefix + '[set stats parameters]',\n  props<{ timeFrame: string; param: string }>()\n);\n","export const QUEUES_TABLE_COL_FIELDS = {\n  ID          : 'id',\n  NAME        : 'name',\n  USER        : 'user.name',\n  QUEUED      : 'status_changed',\n  TASK        : 'entries[0].task.name',\n  IN_QUEUE    : 'entries.length',\n  LAST_UPDATED: 'last_update'\n};\n\nexport const WORKERS_TABLE_COL_FIELDS = {\n  ID               : 'id',\n  TASK             : 'task.name',\n  TASK_RUNNING_TIME: 'task.running_time',\n  TASK_ITERATIONS  : 'task.last_iteration'\n};\n\nconst MiB                            = 1024 * 1024;\nexport const WORKER_STATS_PARAM_INFO = {\n  cpu_usage      : {title: 'CPU Usage', multiply: 1},\n  gpu_usage      : {title: 'GPU Usage', multiply: 1},\n  memory_used    : {title: 'Memory Used', multiply: MiB},\n  gpu_memory_used: {title: 'GPU Memory', multiply: MiB},\n  network_rx     : {title: 'Network Receive', multiply: MiB},\n  network_tx     : {title: 'Network Transmit', multiply: MiB}\n};\n\nconst HOUR  = 60 * 60;\nconst DAY   = HOUR * 24;\nconst WEEK  = 7 * DAY;\nconst MONTH = 30 * DAY;\nconst YEAR  = 365 * DAY;\n\nexport const TIME_INTERVALS = {\n  HOUR,\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR\n};\n","import {\n  queuesTableSetSort, setQueues, setSelectedQueue, setSelectedQueueFromServer, syncSpecificQueueInTable, setStats, setStatsParams\n} from '../actions/queues.actions';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {QUEUES_TABLE_COL_FIELDS, TIME_INTERVALS} from '../workers-and-queues.consts';\nimport {TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport {SortMeta} from 'primeng/api';\nimport {ITask} from '../../../business-logic/model/al-task';\n\ninterface QueueStoreType {\n  data: Queue[];\n  selectedQueue: Queue;\n  tasks: ITask[];\n  stats: {wait: any; length: number};\n  selectedStatsTimeFrame: string;\n  tableSortFields: SortMeta[];\n}\n\nconst initQueues: QueueStoreType = {\n  data                  : null as Queue[],\n  selectedQueue         : null as Queue,\n  tasks                 : null as any[],\n  stats                 : {wait: null, length: null},\n  selectedStatsTimeFrame: (3 * TIME_INTERVALS.HOUR).toString(),\n  tableSortFields       : [{field: QUEUES_TABLE_COL_FIELDS.NAME, order: TABLE_SORT_ORDER.ASC}],\n};\n\n\nexport function queuesReducer(state = initQueues, action) {\n  switch (action.type) {\n    case setQueues.type:\n      return {...state, data: action.queues};\n    // case SET_QUEUES_TASKS:\n    //   return {...state, data: action.payload.queues};\n    case setSelectedQueue.type:\n    case setSelectedQueueFromServer.type:\n      return {...state, selectedQueue: action.queue};\n    case syncSpecificQueueInTable.type:\n      return {\n        ...state, data:\n          state.data.map(queue => queue.id === action.queue?.id ? action.queue : queue)\n      };\n    // case ADD_QUEUES_TASKS:\n    //   return {...state, tasks: {...state.tasks, [action.queueId]: action.tasks}};\n    case setStats.type:\n      return {...state, stats: (action as ReturnType<typeof setStats>).data};\n    case queuesTableSetSort.type:\n      return {...state, tableSortFields: action.orders};\n    case setStatsParams.type:\n      return {\n        ...state,\n        selectedStatsTimeFrame: action.timeFrame,\n      };\n    default:\n      return state;\n  }\n}\n","import {createReducer, on} from '@ngrx/store';\nimport {\n  WorkerExt,\n  getWorkers,\n  setWorkers,\n  workersTableSetSort, getSelectedWorker, setSelectedWorker, setStats, setStatsParams\n} from '../actions/workers.actions';\nimport {TABLE_SORT_ORDER} from '../../shared/ui-components/data/table/table.consts';\nimport {TIME_INTERVALS} from '../workers-and-queues.consts';\nimport {Topic} from '../../shared/utils/statistics';\nimport {SortMeta} from 'primeng/api';\n\ninterface WorkerStoreType {\n  data: WorkerExt[];\n  selectedWorker: WorkerExt;\n  stats: Topic[];\n  selectedStatsTimeFrame: string;\n  selectedStatsParam: string;\n  tableSortFields: SortMeta[];\n}\n\nconst initWorkersStore: WorkerStoreType = {\n  data: null,\n  selectedWorker: null,\n  stats: null,\n  selectedStatsTimeFrame: (3 * TIME_INTERVALS.HOUR).toString(),\n  selectedStatsParam: 'cpu_usage;gpu_usage',\n  tableSortFields: [{field: 'id', order: TABLE_SORT_ORDER.ASC}],\n};\n\nexport const workersReducer = createReducer(\n  initWorkersStore,\n  on(setWorkers, (state, action) => ({...state, data: action.workers})),\n  on(setSelectedWorker, getSelectedWorker, (state, action) => ({...state, selectedWorker: action.worker})),\n  on(workersTableSetSort, (state, action) => ({...state, tableSortFields: action.orders})),\n  on(getWorkers, (state, action) => ({...state, statsRequest: action})),\n  on(setStats, (state, action) => ({...state, stats: action.data})),\n  on(setStatsParams, (state, action) => ({\n    ...state,\n    selectedStatsTimeFrame: action.timeFrame,\n    selectedStatsParam: action.param\n  })),\n);\n","import {createAction} from '@ngrx/store';\n\nexport const showStatsErrorNotice = createAction('stats SHOW_STATS_ERROR');\nexport const hideNoStatsNotice = createAction('stats HIDE_STATS_ERROR');\n\n","import { createReducer, on } from '@ngrx/store';\nimport {showStatsErrorNotice, hideNoStatsNotice} from '../actions/stats.actions';\n\nexport interface StatsState {\n  showNoStatsNotice: boolean;\n}\nexport const initialState: StatsState = {\n  showNoStatsNotice: false\n};\n\nconst _statsReducer = createReducer(initialState,\n  on(showStatsErrorNotice, (state: StatsState) => ({...state, showNoStatsNotice: true})),\n  on(hideNoStatsNotice, (state: StatsState) => ({...state, showNoStatsNotice: false}))\n);\n\nexport function statsReducer(state, action) {\n  return _statsReducer(state, action);\n}\n","import {ActionReducerMap, createFeatureSelector, createSelector} from '@ngrx/store';\nimport {Worker} from '../../../business-logic/model/workers/worker';\nimport {queuesReducer} from './queues.reducer';\nimport {workersReducer} from './workers.reducer';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {Task} from '../../../business-logic/model/tasks/task';\nimport {statsReducer, StatsState} from './stats.reducer';\nimport {SortMeta} from 'primeng/api';\n\nexport const reducers: ActionReducerMap<any, any> = {\n  workers: workersReducer,\n  queues : queuesReducer,\n  stats: statsReducer\n};\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const workersAndQueues = createFeatureSelector<any>('workersAndQueues');\n\nexport const queues                      = createSelector(workersAndQueues, state => state.queues);\nexport const selectQueues                = createSelector(queues, (state): Array<Queue> => state.data);\nexport const selectSelectedQueue         = createSelector(queues, (state): Queue => state.selectedQueue);\nexport const selectQueuesTasks           = createSelector(queues, (state): Map<string, Array<Task>> => state.tasks);\nexport const selectQueueStats            = createSelector(queues, state => state.stats);\nexport const selectQueuesStatsTimeFrame  = createSelector(queues, state => state.selectedStatsTimeFrame);\nexport const selectQueuesTableSortFields = createSelector(queues, (state): SortMeta[] => state.tableSortFields);\n\nexport const workers                     = createSelector(workersAndQueues, state => state.workers);\nexport const selectWorkers               = createSelector(workers, (state): Array<Worker> => state.data);\nexport const selectStats                 = createSelector(workers, state => state.stats);\nexport const selectStatsRequest          = createSelector(workers, state => state.statsRequest);\nexport const selectSelectedWorker        = createSelector(workers, state => state.selectedWorker);\nexport const selectWorkersTableSortFields = createSelector(workers, (state): SortMeta[] => state.tableSortFields);\n\nexport const selectStatsParams    = createSelector(workers, state => state.selectedStatsParam);\nexport const selectStatsTimeFrame = createSelector(workers, state => state.selectedStatsTimeFrame);\n\nexport const stats = createSelector(workersAndQueues, state => state.stats);\nexport const selectStatsErrorNotice = createSelector(stats, (state: StatsState) => state.showNoStatsNotice);\n","<div class=\"header d-flex justify-content-between\">\n  <div class=\"d-flex align-items-center\">\n    <div *ngIf=\"!activeWorker\" class=\"title\">Workers Utilization</div>\n    <div *ngIf=\"activeWorker\" class=\"param-selector\">\n      <mat-form-field appearance=\"outline\" class=\"dark-outline thin time-selector\">\n        <mat-select\n          [ngModel]=\"currentParam\"\n          (ngModelChange)=\"chartParamChange($event)\"\n          name=\"chart-param\"\n          panelClass=\"dark-outline\"\n        >\n          <mat-option *ngFor=\"let chartParam of chartParamOptions\" [value]=\"chartParam.value\">\n            {{chartParam.label}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <i *ngIf=\"statsError$ | async\"\n       class=\"warnning fas fa-exclamation-triangle\"\n       smTooltip=\"Data temporarily not available\">\n    </i>\n  </div>\n  <div class=\"time-selector\">\n    <mat-form-field appearance=\"outline\" class=\"dark-outline thin time-selector\">\n      <mat-select [ngModel]=\"currentTimeFrame\" (ngModelChange)=\"timeFrameChange($event)\" name=\"time-frame\" panelClass=\"dark-outline\">\n        <mat-option *ngFor=\"let timeFrame of timeFrameOptions\" [value]=\"timeFrame.value\">\n          {{timeFrame.label}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</div>\n<div #chart class=\"line-chart-container\">\n  <sm-line-chart\n    class=\"h-100\"\n    [showLoadingOverlay]=\"refreshChart\"\n    [data]=\"chartData\"\n    [yLabel]=\"yAxisLabel\"\n    [tooltipVerticalOffset]=\"-75\"></sm-line-chart>\n</div>\n","import {Component, OnInit, Input, OnDestroy, ViewChild, ViewContainerRef} from '@angular/core';\nimport {Worker} from '../../../../business-logic/model/workers/worker';\nimport {Subscription, combineLatest} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {getWorkers, setStats, setStatsParams} from '../../actions/workers.actions';\nimport {selectStatsTimeFrame, selectStatsParams, selectStats, selectStatsErrorNotice} from '../../reducers/index.reducer';\nimport {filter} from 'rxjs/operators';\nimport {get} from 'lodash/fp';\nimport {TIME_INTERVALS} from '../../workers-and-queues.consts';\nimport {Topic} from '../../../shared/utils/statistics';\nimport {IOption} from '../../../shared/ui-components/inputs/select-autocomplete-with-chips/select-autocomplete-with-chips.component';\n\n@Component({\n  selector: 'sm-workers-graph',\n  templateUrl: './workers-stats.component.html',\n  styleUrls: ['./workers-stats.component.scss']\n})\nexport class WorkersStatsComponent implements OnInit, OnDestroy {\n  private chartDataSubscription: Subscription;\n  private chartParamSubscription: Subscription;\n  public statsError$ = this.store.select(selectStatsErrorNotice);\n  private intervaleHandle: number;\n  public currentParam: string;\n  public currentTimeFrame: string;\n  public refreshChart = true;\n  public activeWorker: Worker;\n  public yAxisLabel: string;\n\n  @ViewChild('chart', {read: ViewContainerRef, static: true}) chartRef: ViewContainerRef;\n\n  @Input() set worker(worker: Worker) {\n    if (get('id', this.activeWorker) !== get('id', worker)) {\n      this.activeWorker = worker;\n      if (worker) {\n        this.yAxisLabel = this.yAxisLabels[this.currentParam];\n      }\n      this.chartChanged();\n    }\n  }\n\n  public timeFrameOptions: IOption[] = [\n    {label: '3 Hours', value: (3 * TIME_INTERVALS.HOUR).toString()},\n    {label: '6 Hours', value: (6 * TIME_INTERVALS.HOUR).toString()},\n    {label: '12 Hours', value: (12 * TIME_INTERVALS.HOUR).toString()},\n    {label: '1 Day', value: (TIME_INTERVALS.DAY).toString()},\n    {label: '1 Week', value: (TIME_INTERVALS.WEEK).toString()},\n    {label: '1 Month', value: (TIME_INTERVALS.MONTH).toString()}];\n\n  public chartParamOptions: IOption[] = [\n    {label: 'CPU and GPU Usage', value: 'cpu_usage;gpu_usage'},\n    {label: 'Memory Usage', value: 'memory_used'},\n    {label: 'Video Memory', value: 'gpu_memory_used'},\n    {label: 'Network Usage', value: 'network_rx;network_tx'},\n    //    {label: 'Frames Processed', value: 'frames'},\n  ];\n\n  public yAxisLabels = {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    'cpu_usage;gpu_usage': 'Usage %',\n    memory_used: 'Bytes',\n    gpu_memory_used: 'Bytes',\n    'network_rx;network_tx': 'Bytes/sec'\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n\n  public chartData: { dataByTopic: Topic[] };\n\n  constructor(public store: Store<any>) {\n  }\n\n  ngOnInit() {\n\n\n    this.chartParamSubscription = combineLatest([this.store.select(selectStatsTimeFrame), this.store.select(selectStatsParams)])\n      .pipe(filter(([timeFrame, param]) => !!timeFrame && !!param))\n      .subscribe(([timeFrame, param]) => {\n        this.currentParam = param;\n        this.currentTimeFrame = timeFrame;\n        this.yAxisLabel = this.activeWorker ? this.yAxisLabels[param] : 'Count';\n        this.chartChanged();\n      });\n\n    this.chartDataSubscription = this.store.select(selectStats).subscribe(\n      (data) => {\n        if (data) {\n          this.refreshChart = false;\n          this.chartData = {dataByTopic: data};\n        }\n      }\n    );\n\n    this.chartChanged();\n  }\n\n  ngOnDestroy() {\n    this.chartDataSubscription.unsubscribe();\n    this.chartParamSubscription.unsubscribe();\n    clearInterval(this.intervaleHandle);\n  }\n\n  chartChanged() {\n    const range = parseInt(this.currentTimeFrame, 10);\n    clearInterval(this.intervaleHandle);\n    this.refreshChart = true;\n    let width = this.chartRef.element.nativeElement.clientWidth || 1000;\n    width = Math.min(0.8 * width, 1000);\n    const granularity = Math.max(Math.floor(range / width), this.activeWorker ? 10 : 40);\n\n    this.store.dispatch(setStats({data: null}));\n    this.store.dispatch(getWorkers({maxPoints: width}));\n\n    this.intervaleHandle = window.setInterval(() => {\n      this.store.dispatch(getWorkers({maxPoints: width}));\n    }, granularity * 1000);\n  }\n\n  chartParamChange(event) {\n    this.currentParam = event;\n    this.store.dispatch(setStatsParams({timeFrame: this.currentTimeFrame, param: this.currentParam}));\n  }\n\n  timeFrameChange(event) {\n    this.currentTimeFrame = event;\n    this.store.dispatch(setStatsParams({timeFrame: this.currentTimeFrame, param: this.currentParam}));\n  }\n}\n","<div #tableContainer class=\"worker-container\">\n  <sm-table #table\n            [tableData]=\"workers\"\n            [selection]=\"selectedWorker\"\n            [reorderableColumns]=\"false\"\n            [resizableColumns]=\"false\"\n            [scrollable]=\"true\"\n            [columns]=\"cols\"\n            [rowsNumber]=\"100\"\n            [rowHeight]=\"40\"\n            (rowSelectionChanged)=\"onRowClicked($event)\"\n  >\n    <ng-template let-col let-worker=\"rowData\" pTemplate=\"body\">\n      <ng-container [ngSwitch]=\"col.id\">\n        <ng-container *ngSwitchCase=\"WORKERS_TABLE_COL_FIELDS.TASK_RUNNING_TIME\">\n          <span>{{worker?.task?.running_time | msToSec}}</span>\n          <span *ngIf=\"!worker?.task?.running_time\">&mdash;</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"WORKERS_TABLE_COL_FIELDS.ID\">\n          <span class=\"first-content\" matTooltipPosition=\"above\" [smTooltip]=\"worker.name\">\n            {{worker.name}}\n          </span>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          {{getBodyData(worker, col)}}\n          <span *ngIf=\"(getBodyData(worker, col)!==0) && !getBodyData(worker, col)\">&mdash;</span>\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n    <ng-template let-col pTemplate=\"sort-filter\">\n      <sm-table-filter-sort-template\n        [class.first]=\"col.id === WORKERS_TABLE_COL_FIELDS.ID\"\n        [column]=\"col\"\n        [sortOrder]=\"tableSortFieldsObject[col.id]\"\n        (sortOrderChanged)=\"onSortChanged($event, col.id)\">\n      </sm-table-filter-sort-template>\n    </ng-template>\n  </sm-table>\n</div>\n\n\n\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {ColHeaderTypeEnum, ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {get} from 'lodash/fp';\nimport {WORKERS_TABLE_COL_FIELDS} from '../../workers-and-queues.consts';\nimport {Worker} from '../../../../business-logic/model/workers/worker';\nimport {TableComponent} from '../../../shared/ui-components/data/table/table.component';\nimport {BaseTableView} from '../../../shared/ui-components/data/table/base-table-view';\n\n@Component({\n  selector: 'sm-workers-table',\n  templateUrl: './workers-table.component.html',\n  styleUrls: ['./workers-table.component.scss']\n})\nexport class WorkersTableComponent extends BaseTableView {\n\n  public cols: Array<ISmCol>;\n  public readonly WORKERS_TABLE_COL_FIELDS = WORKERS_TABLE_COL_FIELDS;\n  private _workers: Worker[];\n\n  @Input() set workers(workers: Worker[]) {\n    this._workers = workers;\n    this.table && this.table.focusSelected();\n  }\n\n  get workers() {\n    return this._workers;\n  }\n\n  @Input() selectedWorker: Worker;\n  @Output() workerSelected = new EventEmitter();\n  @Output() sortedChanged = new EventEmitter<{ isShift: boolean; colId: ISmCol['id'] }>();\n\n  @ViewChild('tableContainer', {static: true}) tableContainer;\n  @ViewChild('table', {static: false}) table: TableComponent;\n\n  constructor() {\n    super();\n    this.cols = [\n      {\n        id: WORKERS_TABLE_COL_FIELDS.ID,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'AVAILABLE WORKERS',\n        style: {width: '30%'},\n        sortable: true,\n      },\n      {\n        id: WORKERS_TABLE_COL_FIELDS.TASK,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'CURRENTLY RUNNING EXPERIMENT',\n        style: {width: '30%'},\n        sortable: true,\n      },\n      {\n        id: WORKERS_TABLE_COL_FIELDS.TASK_RUNNING_TIME,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'EXPERIMENT RUNNING TIME',\n        style: {width: '100px'},\n        sortable: true,\n      },\n      {\n        id: WORKERS_TABLE_COL_FIELDS.TASK_ITERATIONS,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'ITERATION',\n        style: {width: '100px'},\n        sortable: true,\n      },\n    ];\n  }\n\n  getBodyData(rowData: any, col: ISmCol): any {\n    return get(col.id, rowData);\n  }\n\n  onRowClicked(event) {\n    this.workerSelected.emit(event.data);\n  }\n\n  scrollTableToTop() {\n    this.tableContainer.nativeElement.scroll({top: 0});\n  }\n\n  onSortChanged(isShift: boolean, colId: ISmCol['id']) {\n    this.sortedChanged.emit({isShift, colId});\n    this.scrollTableToTop();\n  }\n\n  afterTableInit(): void {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  emitSelection(selection: any[]) {\n  }\n}\n","<div class=\"d-flex justify-content-center tabs-container\">\n  <sm-navbar-item header=\"info\" [active]=\"activeTab==='info'\" (click)=\"activeTab = 'info'\"></sm-navbar-item>\n  <sm-navbar-item header=\"queues\" [active]=\"activeTab==='queues'\" (click)=\"activeTab = 'queues'\"></sm-navbar-item>\n  <div class=\"pull-right pointer\" (click)=\"deselectWorkerClicked()\">\n    <i class=\"al-icon al-ico-dialog-x sm-md\"></i>\n  </div>\n</div>\n<div *ngIf=\"activeTab === 'queues' &&  selectedWorker?.queues.length===0\"\n     class=\"d-flex align-items-center justify-content-center p-4\">No queues currently assigned to this worker\n</div>\n<div class=\"queues-table-container\" *ngIf=\"activeTab==='queues' && selectedWorker?.queues.length>0\">\n  <sm-simple-table-2 [cols]=\"cols\" [rowsData]=\"selectedWorker?.queues\" class=\"dark-theme\">\n    <ng-template\n      let-col\n      let-i=\"rowIndex\"\n      let-row=\"row\">\n      <!--QUEUE-->\n      <div class=\"col-8 id-cell d-flex\">\n        <a class=\"value link\" [routerLink]=\"['../queues']\" [queryParams]=\"{id: row.id}\">{{row?.name}}</a>\n        <sm-copy-clipboard\n          class=\"copy-btn\"\n          [hideBackground]=\"true\"\n          [label]=\"''\"\n          [tooltipText]=\"'Copy Queue ID'\"\n          [clipboardText]=\"row?.id\">\n        </sm-copy-clipboard>\n      </div>\n\n      <!--NEXT EXPERIMENT-->\n      <div class=\"col-12\">\n        {{row?.next_task?.name}}\n      </div>\n\n      <!--IN QUEUE-->\n      <div class=\"col-4\">\n        {{row?.num_tasks}}\n      </div>\n    </ng-template>\n  </sm-simple-table-2>\n</div>\n\n<div *ngIf=\"activeTab==='info'\" class=\"worker-info-container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <sm-vertical-labeled-row label=\"Worker Name\">{{selectedWorker?.name ?? '—' }}</sm-vertical-labeled-row>\n      <sm-vertical-labeled-row label=\"Update Time\">{{selectedWorker?.last_report_time | timeAgo}}</sm-vertical-labeled-row>\n      <sm-vertical-labeled-row label=\"Current Experiment\">\n        <a *ngIf=\"selectedWorker?.task?.name ; else notRelevant\" [href]=\"'/projects/'+ ((selectedWorker?.task?.project?.id) ? selectedWorker?.task?.project?.id : '*') + '/experiments/' + selectedWorker?.task?.id\"\n        target=\"_blank\">{{selectedWorker?.task?.name}}</a>\n        <ng-template #notRelevant>—</ng-template>\n      </sm-vertical-labeled-row>\n    </div>\n    <div class=\"col-12\">\n      <sm-vertical-labeled-row label=\"Experiment Run Time\">{{selectedWorker?.task?.running_time ? (selectedWorker?.task?.running_time | msToSec) : '—'}}</sm-vertical-labeled-row>\n      <sm-vertical-labeled-row label=\"Experiment Iteration\">{{selectedWorker?.task?.last_iteration ? selectedWorker?.task?.last_iteration : '—'}}</sm-vertical-labeled-row>\n    </div>\n  </div>\n</div>\n\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector   : 'sm-worker-info',\n  templateUrl: './worker-info.component.html',\n  styleUrls  : ['./worker-info.component.scss']\n})\nexport class WorkerInfoComponent {\n\n  @Input() selectedWorker;\n  @Output() deselectWorker = new EventEmitter();\n  activeTab: string        = 'info';\n  public readonly cols     = [\n    {header: 'QUEUE', class: 'col-8'},\n    {header: 'NEXT EXPERIMENT', class: 'col-12'},\n    {header: 'IN QUEUE', class: 'col-4'},\n  ];\n\n  constructor() {\n  }\n\n  deselectWorkerClicked() {\n    this.deselectWorker.emit();\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Worker} from '../../../../business-logic/model/workers/worker';\nimport {getSelectedWorker, workersTableSortChanged} from '../../actions/workers.actions';\nimport {selectSelectedWorker, selectWorkers, selectWorkersTableSortFields} from '../../reducers/index.reducer';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {filter, take, withLatestFrom} from 'rxjs/operators';\nimport {SortMeta} from 'primeng/api';\n\n@Component({\n  selector: 'sm-workers',\n  templateUrl: './workers.component.html',\n  styleUrls: ['./workers.component.scss']\n})\nexport class WorkersComponent implements OnInit {\n\n  public workers$: Observable<Worker[]>;\n  public selectedWorker$: Observable<Worker>;\n  public tableSortFields$: Observable<SortMeta[]>;\n\n  get routerWorkerId() {\n    const url = new URL(window.location.href);\n    return url.searchParams.get('id');\n  }\n\n  constructor(private store: Store<any>, private router: Router, private route: ActivatedRoute) {\n    this.workers$ = this.store.select(selectWorkers);\n    this.selectedWorker$ = this.store.select(selectSelectedWorker);\n    this.tableSortFields$ = this.store.select(selectWorkersTableSortFields);\n  }\n\n  ngOnInit(): void {\n    this.workers$.pipe(\n      withLatestFrom(this.selectedWorker$),\n      filter(([workers, selectedWorker]) => workers && selectedWorker?.id !== this.routerWorkerId),\n      take(1))\n      .subscribe(([workers]) => {\n        const selectedWorker = workers.find(worker => worker.id === this.routerWorkerId);\n        this.selectWorker(selectedWorker);\n      });\n  }\n\n\n  public selectWorker(worker) {\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.route,\n        queryParams: {id: worker?.id},\n        queryParamsHandling: 'merge'\n      });\n    this.store.dispatch(getSelectedWorker({worker}));\n  }\n\n  sortedChanged(sort: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.store.dispatch(workersTableSortChanged({colId: sort.colId, isShift: sort.isShift}));\n  }\n\n}\n","<sm-workers-graph [worker]=\"selectedWorker$ | async\" class=\"overflow-hidden\"></sm-workers-graph>\n<as-split class=\"flex-grow-1\">\n  <as-split-area [size]=\"50\">\n    <sm-workers-table class=\"mt-2\"\n                      [workers]=\"workers$ | async\"\n                      [selectedWorker]=\"selectedWorker$ | async\"\n                      (sortedChanged)=\"sortedChanged($event)\"\n                      [tableSortFields]=\"tableSortFields$ | async\"\n                      (workerSelected)=\"selectWorker($event)\">\n    </sm-workers-table>\n  </as-split-area>\n  <as-split-area [size]=\"50\" [visible]=\"!!(selectedWorker$| async)\">\n    <sm-worker-info [selectedWorker]=\"selectedWorker$ | async\"\n      (deselectWorker)=\"selectWorker(null)\">\n    </sm-worker-info>\n  </as-split-area>\n</as-split>\n","<div class=\"d-flex\">\n  <div class=\"chart-container overflow-hidden\">\n    <div class=\"header\">\n      <div class=\"title\">\n        <div class=\"ellipsis\">{{selectedQueue ? selectedQueue.name : 'Overall'}} Experiment Wait Time</div>\n        <i *ngIf=\"statsError$ | async\"\n          class=\"warnning fas fa-exclamation-triangle\"\n          smTooltip=\"Data temporarily not available\">\n        </i>\n      </div>\n    </div>\n    <div #waitchart class=\"line-chart-container\">\n      <sm-line-chart [data]=\"waitChartData\" [showLoadingOverlay]=\"refreshChart\" [tooltipVerticalOffset]=\"-60\"></sm-line-chart>\n    </div>\n  </div>\n  <div class=\"chart-container right overflow-hidden\">\n    <div class=\"header\">\n      <div class=\"title\">\n        <div class=\"ellipsis\">{{selectedQueue ? selectedQueue.name : 'Overall'}} Queued Experiments</div>\n        <i *ngIf=\"statsError$ | async\"\n          class=\"warnning fas fa-exclamation-triangle\"\n          smTooltip=\"Data temporarily not available\">\n        </i>\n      </div>\n      <div class=\"time-selector\">\n        <mat-form-field appearance=\"outline\" class=\"dark-outline thin time-selector\">\n          <mat-select [ngModel]=\"currentTimeFrame\" (ngModelChange)=\"timeFrameChanged($event)\" name=\"time-frame\" panelClass=\"dark-outline\">\n            <mat-option *ngFor=\"let timeFrame of timeFrameOptions; trackBy: trackByFn\" [value]=\"timeFrame.value\">\n              {{timeFrame.label}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n    <div #lenchart class=\"line-chart-container\" >\n      <sm-line-chart [data]=\"lenChartData\" [showLoadingOverlay]=\"refreshChart\" [tooltipVerticalOffset]=\"-60\"></sm-line-chart>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnDestroy, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Subscription} from 'rxjs';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {getStats, setStats, setStatsParams} from '../../actions/queues.actions';\nimport {selectQueuesStatsTimeFrame, selectQueueStats, selectStatsErrorNotice} from '../../reducers/index.reducer';\nimport {filter} from 'rxjs/operators';\nimport {Topic} from '../../../shared/utils/statistics';\nimport {TIME_INTERVALS} from '../../workers-and-queues.consts';\nimport {IOption} from '../../../shared/ui-components/inputs/select-autocomplete-with-chips/select-autocomplete-with-chips.component';\n\n@Component({\n  selector: 'sm-queue-stats',\n  templateUrl: './queue-stats.component.html',\n  styleUrls: ['./queue-stats.component.scss']\n})\nexport class QueueStatsComponent implements OnInit, OnDestroy {\n  private chartDataSubscription: Subscription;\n  private chartParamSubscription: Subscription;\n  public statsError$ = this.store.select(selectStatsErrorNotice);\n  public selectedQueue: Queue;\n  public refreshChart = true;\n  public waitChartData: { dataByTopic: Topic[] };\n  public lenChartData: { dataByTopic: Topic[] };\n\n  public timeFrameOptions: IOption[] = [\n    {label: '3 Hours', value: (3 * TIME_INTERVALS.HOUR).toString()},\n    {label: '6 Hours', value: (6 * TIME_INTERVALS.HOUR).toString()},\n    {label: '12 Hours', value: (12 * TIME_INTERVALS.HOUR).toString()},\n    {label: '1 Day', value: (TIME_INTERVALS.DAY).toString()},\n    {label: '1 Week', value: (TIME_INTERVALS.WEEK).toString()},\n    {label: '1 Month', value: (TIME_INTERVALS.MONTH).toString()}];\n\n  @ViewChild('waitchart', {read: ViewContainerRef, static: true}) waitChartRef: ViewContainerRef;\n  @ViewChild('lenchart', {read: ViewContainerRef, static: true}) lenChartRef: ViewContainerRef;\n  private intervaleHandle: number;\n  public currentTimeFrame: string;\n  public trackByFn = (index: number, option: IOption) => option.value;\n\n  @Input() set queue(queue: Queue) {\n    if (this.selectedQueue !== queue) {\n      this.selectedQueue = queue;\n      this.updateChart();\n    }\n  }\n\n  constructor(public store: Store<any>) {\n  }\n\n  ngOnInit() {\n    this.chartParamSubscription = this.store.select(selectQueuesStatsTimeFrame)\n      .pipe(filter((timeFrame: string) => !!timeFrame))\n      .subscribe((timeFrame) => {\n        this.currentTimeFrame = timeFrame;\n        this.updateChart();\n      });\n    this.chartDataSubscription = this.store.select(selectQueueStats).subscribe(\n      (data) => {\n        if (data && (data.wait || data.length)) {\n          this.refreshChart = false;\n          this.waitChartData = {dataByTopic: data.wait};\n          this.lenChartData = {dataByTopic: data.length};\n        }\n      }\n    );\n\n    this.updateChart();\n  }\n\n  ngOnDestroy() {\n    this.chartDataSubscription.unsubscribe();\n    this.chartParamSubscription.unsubscribe();\n    clearInterval(this.intervaleHandle);\n  }\n\n  updateChart() {\n    clearInterval(this.intervaleHandle);\n    this.refreshChart = true;\n    this.store.dispatch(setStats({data: {wait: null, length: null}}));\n    const range = parseInt(this.currentTimeFrame, 10);\n    let width = this.waitChartRef.element.nativeElement.clientWidth | 1000;\n    width = Math.min(0.8 * width, 1000);\n    const granularity = Math.max(Math.floor(range / width), 5);\n\n    this.store.dispatch(getStats({maxPoints: width}));\n    this.intervaleHandle = window.setInterval(() => {\n      this.store.dispatch(getStats({maxPoints: width}));\n    }, granularity * 1000);\n  }\n\n  tickFormatter(seconds: number) {\n    seconds = Math.floor(seconds);\n    const th = Math.floor(seconds / 3600); // 3,600 seconds in 1 hour\n    seconds = seconds % 3600; // seconds remaining after extracting hours\n    // 3- Extract minutes:\n    const tm = `${Math.floor(seconds / 60) % 100}`.padStart(2, '0'); // 60 seconds in 1 minute\n    // 4- Keep only seconds not extracted to minutes:\n    const ts = `${seconds % 60}`.padStart(2, '0');\n    return `${th}:${tm}:${ts}`;\n  }\n\n  timeFrameChanged($event: any) {\n    this.store.dispatch(setStatsParams({timeFrame: $event}));\n  }\n}\n","<sm-menu\n    *ngIf=\"menuOpen && queuesManager\"\n    [position]=\"menuPosition\"\n    [header]=\"\"\n    buttonClass=\"al-icon sm-md al-ico-bars-menu al-color light-grey-blue\"\n    [showCart]=\"false\"\n    [showOverlay]=\"false\"\n    [showButton]=\"false\"\n    [openOnInit]=\"true\"\n  >\n    <sm-menu-item itemLabel=\"Delete\"\n                  [disabled]=\"selectedQueue?.entries?.length>0\"\n                  (itemClicked)=\"deleteQueue.emit(selectedQueue)\"></sm-menu-item>\n    <sm-menu-item itemLabel=\"Rename\"\n                  (itemClicked)=\"renameQueue.emit(selectedQueue)\"></sm-menu-item>\n  <ng-content select=\"[extendedQueuesMenu]\"></ng-content>\n  </sm-menu>\n\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {ICONS} from '../../../constants';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'sm-queues-menu',\n  templateUrl: './queues-menu.component.html',\n  styleUrls: ['./queues-menu.component.scss']\n})\nexport class QueuesMenuComponent  {\n  public queuesManager: boolean;\n  readonly ICONS = ICONS;\n\n  @Input() menuOpen: boolean;\n  @Input() selectedQueue: Queue;\n  @Input() menuPosition;\n  @Output() deleteQueue = new EventEmitter();\n  @Output() renameQueue = new EventEmitter();\n  constructor(private route: ActivatedRoute) {\n    this.queuesManager = route.snapshot.data.queuesManager;\n\n  }\n}\n","import {Component} from '@angular/core';\nimport {QueuesMenuComponent} from '../../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component';\n\n@Component({\n  selector: 'sm-queues-menu-extended',\n  templateUrl: '../../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.html',\n  styleUrls: ['../../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component.scss']\n})\nexport class QueuesMenuExtendedComponent extends QueuesMenuComponent{\n  set contextMenu(data) {}\n  get contextMenu() {\n    return this;\n  }\n}\n","<div #tableContainer class=\"queues-container\">\n  <sm-queues-menu-extended\n    [menuOpen]=\"menuOpen\"\n    [menuPosition]=\"menuPosition\"\n    [selectedQueue]=\"selectedQueue\"\n    (deleteQueue)=\"deleteQueue.emit($event)\"\n    (renameQueue)=\"renameQueue.emit(selectedQueue)\"\n  ></sm-queues-menu-extended>\n  <sm-table #table\n            [tableData]=\"queues\"\n            [columns]=\"cols\"\n            [rowsNumber]=\"100\"\n            [rowHeight]=\"40\"\n            [reorderableColumns]=\"false\"\n            [resizableColumns]=\"false\"\n            [scrollable]=\"true\"\n            [selection]=\"selectedQueue\"\n            (rowSelectionChanged)=\"onRowClicked($event)\"\n            (onRowRightClick)=\"openContextMenu($event)\"\n  >\n    <ng-template let-col pTemplate=\"sort-filter\">\n      <sm-table-filter-sort-template\n        [class.first]=\"col.id === QUEUES_TABLE_COL_FIELDS.NAME\"\n        (sortOrderChanged)=\"onSortChanged($event, col.id)\"\n        [column]=\"col\"\n        [sortOrder]=\"tableSortFieldsObject[col.id]\">\n      </sm-table-filter-sort-template>\n    </ng-template>\n    <ng-template let-col let-queue=\"rowData\" pTemplate=\"body\">\n      <ng-container [ngSwitch]=\"col.id\" class=\"table-cell\">\n        <div class=\"w-100 d-flex align-items-center pr-3 first id-cell\" *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.NAME\">\n          <div class=\"queue-name\" matTooltipPosition=\"above\" [smTooltip]=\"queue?.name\">{{queue?.name}}</div>\n          <sm-copy-clipboard [clipboardText]=\"queue?.id\"\n                             [hideBackground]=\"true\"\n                             [label]=\"''\"\n                             [tooltipText]=\"'Copy Queue ID'\" class=\"copy-btn\"></sm-copy-clipboard>\n        </div>\n        <ng-container *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.TASK\">\n          <span>{{queue?.entries[0]?.task?.name}}</span>\n          <span *ngIf=\"!queue?.entries[0]?.task?.name\">&mdash;</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.LAST_UPDATED\">\n          <span>{{queue?.last_update | timeAgo}}</span>\n          <span *ngIf=\"!queue?.last_update\">&mdash;</span>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"QUEUES_TABLE_COL_FIELDS.IN_QUEUE\">\n          <span>\n            {{queue?.entries?.length === 0 ? '' : queue?.entries?.length}}\n            <span *ngIf=\"queue?.entries?.length === 0\">&mdash;</span>\n          </span>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          {{getBodyData(queue, col)}}\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </sm-table>\n</div>\n","import {ChangeDetectorRef, Component, EventEmitter, HostListener, Input, Output, ViewChild} from '@angular/core';\nimport {ColHeaderTypeEnum, ISmCol, TableSortOrderEnum} from '../../../shared/ui-components/data/table/table.consts';\nimport {find, get} from 'lodash/fp';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {QUEUES_TABLE_COL_FIELDS} from '../../workers-and-queues.consts';\nimport {TableComponent} from '../../../shared/ui-components/data/table/table.component';\nimport {BaseTableView} from '../../../shared/ui-components/data/table/base-table-view';\nimport {ActivatedRoute} from '@angular/router';\nimport {ICONS} from '../../../constants';\n\n@Component({\n  selector: 'sm-queues-table',\n  templateUrl: './queues-table.component.html',\n  styleUrls: ['./queues-table.component.scss']\n})\nexport class QueuesTableComponent extends BaseTableView {\n  public cols: Array<ISmCol>;\n  public readonly QUEUES_TABLE_COL_FIELDS = QUEUES_TABLE_COL_FIELDS;\n  public menuOpen: boolean;\n  private _queues: Array<Queue>;\n  public queuesManager: boolean;\n  readonly ICONS = ICONS;\n\n  @Input() set queues(queues: Array<Queue>) {\n    this._queues = queues;\n    this.table && this.table.focusSelected();\n  }\n\n  get queues() {\n    return this._queues;\n  }\n\n  @Input() selectedQueue: Queue;\n  @Output() queueSelected = new EventEmitter();\n  @Output() deleteQueue = new EventEmitter();\n  @Output() renameQueue = new EventEmitter();\n  @Output() sortedChanged = new EventEmitter<{ isShift: boolean; colId: ISmCol['id'] }>();\n\n  @Input() tableSortOrder: TableSortOrderEnum;\n  @ViewChild('tableContainer', {static: false}) tableContainer;\n  @ViewChild('table', {static: false}) table: TableComponent;\n\n  public menuPosition: { x: number; y: number };\n\n  @HostListener('document:click', ['$event'])\n  clickHandler(event) {\n    if (event.button != 2) { // Bug in firefox: right click triggers `click` event\n      this.menuOpen = false;\n    }\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef, private route: ActivatedRoute) {\n    super();\n    this.queuesManager = route.snapshot.data.queuesManager;\n    this.cols = [\n      {\n        id: QUEUES_TABLE_COL_FIELDS.NAME,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'QUEUE',\n        style: {width: '35%'},\n        sortable: true,\n      },\n      {\n        id: QUEUES_TABLE_COL_FIELDS.TASK,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'NEXT EXPERIMENT',\n        style: {width: '30%'},\n        sortable: true,\n      },\n      {\n        id: QUEUES_TABLE_COL_FIELDS.LAST_UPDATED,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'LAST UPDATED',\n        style: {width: '150px'},\n        sortable: true,\n      },\n      {\n        id: QUEUES_TABLE_COL_FIELDS.IN_QUEUE,\n        headerType: ColHeaderTypeEnum.sortFilter,\n        header: 'IN QUEUE',\n        style: {width: '100px'},\n        sortable: true,\n      }\n    ];\n  }\n\n  getBodyData(rowData: any, col: ISmCol) {\n    return get(col.id, rowData);\n  }\n\n  getQNames(queues) {\n    return queues.map(queue => this.getQName(queue));\n  }\n\n  getQName(queue) {\n    const queueIns: any = find({'id': queue}, this.queues);\n    return queueIns ? queueIns.name : queue;\n  }\n\n  onRowClicked(event) {\n    this.queueSelected.emit(event.data);\n  }\n\n  openContextMenu(data) {\n    data.e.preventDefault();\n    this.queueSelected.emit(data.rowData);\n    this.menuOpen = false;\n    setTimeout(() => {\n      this.menuPosition = {x: data.e.clientX, y: data.e.clientY};\n      this.menuOpen = true;\n      this.changeDetector.detectChanges();\n    }, 0);\n\n  }\n\n  scrollTableToTop() {\n    this.tableContainer.nativeElement.scroll({top: 0});\n  }\n\n  onSortChanged(isShift: boolean, colId: ISmCol['id']) {\n    this.sortedChanged.emit({isShift, colId});\n    this.scrollTableToTop();\n  }\n\n  afterTableInit(): void {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  emitSelection(selection: any[]) {\n  }\n}\n","<div class=\"d-flex justify-content-center tabs-container\">\n  <sm-navbar-item header=\"Experiments\" [active]=\"activeTab==='experiments'\"\n                  (click)=\"activeTab = 'experiments'\"></sm-navbar-item>\n  <sm-navbar-item header=\"Workers\" [active]=\"activeTab==='workers'\" (click)=\"activeTab = 'workers'\">\n  </sm-navbar-item>\n  <div class=\"pull-right pointer tabs-x\" (click)=\"deselectQueueClicked()\">\n    <i class=\"al-icon al-ico-dialog-x sm-md\"></i>\n  </div>\n</div>\n\n<div *ngIf=\"activeTab === 'experiments' && selectedQueue?.entries?.length===0\"\n     class=\"d-flex align-items-center justify-content-center p-4\">No experiments currently enqueued\n</div>\n<div *ngIf=\"activeTab === 'workers' && selectedQueue?.workers?.length===0\"\n     class=\"d-flex align-items-center justify-content-center p-4\">No workers currently assigned to this queue\n</div>\n<sm-simple-table-2\n  *ngIf=\"activeTab==='workers' && selectedQueue?.workers?.length>0\"\n  [cols]=\"workersCols\"\n  [rowsData]=\"selectedQueue?.workers\"\n  noDataMessage=\" \"\n>\n  <ng-template\n    let-col\n    let-i=\"rowIndex\"\n    let-row=\"row\"\n  >\n    <a class=\"ml-2 flex-column link\" [routerLink]=\"['../workers']\" [queryParams]=\"{id: row.name}\">{{row?.name}}</a>\n    <div class=\"flex-column\">\n      {{row.ip}}\n    </div>\n    <div class=\"flex-column\">\n      <a\n        [href]=\"'/projects/'+ ((row?.task?.project?.id) ? row?.task?.project?.id : '*') + '/experiments/' +row?.task?.id\"> {{row?.task?.name}}</a>\n    </div>\n  </ng-template>\n\n</sm-simple-table-2>\n\n<sm-menu\n  *ngIf=\"menuOpen\"\n  buttonClass=\"al-icon sm-md al-ico-bars-menu al-color light-grey-blue\"\n  smMenuClass=\"experiments-in-queue-list\"\n  panelClasses=\"dark\"\n  [position]=\"menuPosition\"\n  [header]=\"\"\n  [showCart]=\"false\"\n  [showOverlay]=\"false\"\n  [showButton]=\"false\"\n  [openOnInit]=\"true\"\n  (onMenuClosed)=\"menuClosed()\"\n>\n  <sm-menu-item itemLabel=\"Move to top\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"moveToTop()\"\n                iconClass=\"al-icon al-ico-arrow-to-top al-color light-periwinkle-two sm mr-2\">\n  </sm-menu-item>\n  <sm-menu-item itemLabel=\"Move to bottom\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"moveToBottom()\"\n                iconClass=\"sm mr-2 al-icon al-ico-arrow-to-bottom al-color light-periwinkle-two\">\n  </sm-menu-item>\n  <sm-menu-item itemLabel=\"Move to queue...\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"moveToQueue()\"\n                iconClass=\"sm mr-2 al-icon al-ico-arrow-from-left al-color light-periwinkle-two\">\n  </sm-menu-item>\n  <sm-menu-item itemLabel=\"Remove from queue\"\n                [disabled]=\"selectedQueue.entries.length <= 0\"\n                (itemClicked)=\"removeFromQueue()\"\n                [iconFontSize]=\"12\"\n                iconClass=\"fas fa-trash\">\n  </sm-menu-item>\n\n</sm-menu>\n\n<sm-simple-table-2\n  *ngIf=\"activeTab==='experiments'\"\n  [cols]=\"experimentsCols\"\n  [rowsData]=\"selectedQueue?.entries\"\n  [enableDragAndDrop]=\"true\"\n  noDataMessage=\" \"\n  (entryDropped)=\"experimentDropped($event)\"\n>\n  <ng-template\n    let-col\n    let-i=\"rowIndex\"\n    let-row=\"row\">\n    <div class=\"column ml-3\">\n      <i class=\"fas fa-th drag-grid\"></i>\n    </div>\n    <div class=\"column\">\n      {{i + 1}}\n    </div>\n    <div class=\"flex-column\">\n      <a\n        [href]=\"'/projects/'+ ((row?.task?.project?.id) ? row?.task?.project?.id : '*') + '/experiments/' +row?.task?.id\">{{row?.task?.name}}\n      </a>\n    </div>\n    <div class=\"column\">\n      <i class=\"al-icon al-ico-dots-v-menu sm-md pointer p-2\" (click)=\"openContextMenu($event, row?.task)\"></i>\n    </div>\n  </ng-template>\n</sm-simple-table-2>\n","import {ChangeDetectorRef, Component, EventEmitter, HostListener, Input, OnInit, Output} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {BlTasksService} from '../../../../business-logic/services/tasks.service';\nimport {SelectQueueComponent} from '../../../experiments/shared/components/select-queue/select-queue.component';\nimport {cloneDeep} from 'lodash/fp';\n\n@Component({\n  selector   : 'sm-queue-info',\n  templateUrl: './queue-info.component.html',\n  styleUrls  : ['./queue-info.component.scss']\n})\nexport class QueueInfoComponent implements OnInit {\n  private _selectedQueue: Queue;\n\n  @Input() set selectedQueue(selectedQueue: Queue) {\n    this._selectedQueue = cloneDeep(selectedQueue);\n  }\n\n  get selectedQueue() {\n    return this._selectedQueue;\n  }\n\n  @Input() queues: Queue[];\n  @Output() deselectQueue                 = new EventEmitter();\n  @Output() moveExperimentToTopOfQueue    = new EventEmitter();\n  @Output() moveExperimentToBottomOfQueue = new EventEmitter();\n  @Output() moveExperimentToOtherQueue    = new EventEmitter();\n  @Output() removeExperimentFromQueue     = new EventEmitter();\n  @Output() moveExperimentInQueue         = new EventEmitter<{task: string; count: number}>();\n\n  public activeTab: string;\n  public menuSelectedExperiment: any;\n  public menuOpen: boolean;\n  public menuPosition: { x: number; y: number };\n  public readonly experimentsCols = [\n    {header: '', class: 'col-4'},\n    {header: '', class: 'col-20'},\n  ];\n  public readonly workersCols     = [\n    {header: 'Name', class: 'col-9'},\n    {header: 'IP', class: 'col-6'},\n    {header: 'Currently Executing', class: 'col-9'},\n  ];\n  public menuClosed: any;\n\n  @HostListener('document:click', ['$event'])\n  clickHandler(event) {\n    if (event.button != 2) { // Bug in firefox: right click triggers `click` event\n      this.menuOpen = false;\n    }\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef,\n              private blTaskService: BlTasksService,\n              private dialog: MatDialog) {\n  }\n\n\n  get routerTab() {\n    const url = new URL(window.location.href);\n    return url.searchParams.get('tab');\n  }\n\n  ngOnInit() {\n    this.activeTab = this.routerTab === 'workers' ? 'workers' : 'experiments';\n  }\n\n\n  findQueueById(id) {\n    return this.queues.find(queue => queue.id === id);\n  }\n\n  deselectQueueClicked() {\n    this.deselectQueue.emit();\n  }\n\n\n  experimentDropped($event: CdkDragDrop<any>) {\n    this.moveExperimentInQueue.emit({task: (this.selectedQueue.entries[$event.previousIndex].task as any).id, count: ($event.currentIndex - $event.previousIndex)});\n    moveItemInArray(this.selectedQueue.entries, $event.previousIndex, $event.currentIndex);\n  }\n\n\n  openContextMenu(e, task) {\n    this.menuSelectedExperiment = task;\n    e.preventDefault();\n    this.menuOpen = false;\n    setTimeout(() => {\n      this.menuPosition = {x: e.clientX, y: e.clientY};\n      this.menuOpen     = true;\n      this.changeDetector.detectChanges();\n    }, 0);\n\n  }\n\n  moveToTop() {\n    this.moveExperimentToTopOfQueue.emit(this.menuSelectedExperiment);\n  }\n\n  moveToBottom() {\n    this.moveExperimentToBottomOfQueue.emit(this.menuSelectedExperiment);\n\n  }\n\n  moveToQueue() {\n    this.enqueuePopup();\n  }\n\n  removeFromQueue() {\n    this.removeExperimentFromQueue.emit(this.menuSelectedExperiment);\n  }\n\n  enqueuePopup() {\n    const selectQueueDialog: MatDialogRef<SelectQueueComponent, { confirmed: boolean; queue: Queue }> =\n            this.dialog.open(SelectQueueComponent, {data: {}});\n\n    selectQueueDialog.afterClosed().subscribe((res) => {\n      if (res && res.confirmed) {\n        this.moveExperimentToOtherQueue.emit({queue: res.queue, task: this.menuSelectedExperiment});\n        this.blTaskService.setPreviouslyUsedQueue(res.queue);\n      }\n    });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Queue} from '../../../../business-logic/model/queues/queue';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {Store} from '@ngrx/store';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {\n  deleteQueue,\n  getQueues,\n  moveExperimentInQueue,\n  moveExperimentToBottomOfQueue,\n  moveExperimentToOtherQueue,\n  moveExperimentToTopOfQueue,\n  queuesTableSortChanged,\n  removeExperimentFromQueue,\n  setSelectedQueue\n} from '../../actions/queues.actions';\nimport {\n  selectQueues,\n  selectQueuesTableSortFields,\n  selectQueuesTasks,\n  selectSelectedQueue\n} from '../../reducers/index.reducer';\nimport {filter, take, withLatestFrom} from 'rxjs/operators';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {QueueCreateDialogComponent} from '../../../shared/queue-create-dialog/queue-create-dialog.component';\nimport {SortMeta} from 'primeng/api';\n\n@Component({\n  selector: 'sm-queues',\n  templateUrl: './queues.component.html',\n  styleUrls: ['./queues.component.scss']\n})\nexport class QueuesComponent implements OnInit {\n\n  public queues$: Observable<Queue[]>;\n  public queuesTasks$: Observable<Map<string, Task[]>>;\n  public selectedQueue$: Observable<Queue>;\n  private createQueueDialog: MatDialogRef<QueueCreateDialogComponent, any>;\n  public tableSortOrder$: Observable<1 | -1>;\n  public tableSortFields$: Observable<SortMeta[]>;\n\n  get routerQueueId() {\n    const url = new URL(window.location.href);\n    return url.searchParams.get('id');\n  }\n\n  constructor(private store: Store<any>, private router: Router, private route: ActivatedRoute, private dialog: MatDialog) {\n    this.queues$ = this.store.select(selectQueues);\n    this.queuesTasks$ = this.store.select(selectQueuesTasks);\n    this.selectedQueue$ = this.store.select(selectSelectedQueue);\n    this.tableSortFields$ = this.store.select(selectQueuesTableSortFields);\n\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(getQueues());\n\n    this.queues$.pipe(\n      withLatestFrom(this.selectedQueue$),\n      filter(([queues, selectedQueue]) => queues && selectedQueue?.id !== this.routerQueueId),\n      take(1))\n      .subscribe(([queues]) => {\n        const selectedQueue = queues.find(queue => queue.id === this.routerQueueId);\n        this.selectQueue(selectedQueue);\n      });\n  }\n\n  sortedChanged(sort: { isShift: boolean; colId: ISmCol['id'] }) {\n    this.store.dispatch(queuesTableSortChanged({colId: sort.colId, isShift: sort.isShift}));\n  }\n\n\n  public selectQueue(queue) {\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.route,\n        queryParams: {id: queue?.id},\n        queryParamsHandling: 'merge'\n      });\n    this.store.dispatch(setSelectedQueue({queue}));\n  }\n\n  deleteQueue(queue) {\n    this.store.dispatch(deleteQueue({queue}));\n  }\n\n  renameQueue(queue) {\n    this.createQueueDialog = this.dialog.open(QueueCreateDialogComponent, {data: queue});\n    this.createQueueDialog.afterClosed()\n      .pipe(\n        filter(q => !!q),\n        take(1)\n      )\n      .subscribe(() => {\n        this.store.dispatch(getQueues());\n      });\n  }\n\n  moveExperimentToBottomOfQueue(task: Task) {\n    this.store.dispatch(moveExperimentToBottomOfQueue({task: task.id}));\n  }\n\n  moveExperimentToTopOfQueue(task: Task) {\n    this.store.dispatch(moveExperimentToTopOfQueue({task: task.id}));\n  }\n\n  removeExperimentFromQueue(task: Task) {\n    this.store.dispatch(removeExperimentFromQueue({task: task.id}));\n  }\n\n  moveExperimentToOtherQueue($event) {\n    this.store.dispatch(moveExperimentToOtherQueue({task: $event.task.id, queue: $event.queue.id}));\n  }\n\n  moveExperimentInQueue({task, count}) {\n    this.store.dispatch(moveExperimentInQueue({task, count}));\n  }\n\n}\n","<sm-queue-stats [queue]=\"selectedQueue$ | async\"></sm-queue-stats>\n<as-split class=\"flex-grow-1\">\n  <as-split-area [size]=\"50\">\n    <sm-queues-table class=\"mt-2\"\n                     [queues]=\"queues$ | async\"\n                     [selectedQueue]=\"selectedQueue$ | async\"\n                     (sortedChanged)=\"sortedChanged($event)\"\n                     [tableSortFields]=\"tableSortFields$ | async\"\n                     [tableSortOrder]=\"tableSortOrder$ | async\"\n                     (deleteQueue)=\"deleteQueue($event)\"\n                     (renameQueue)=\"renameQueue($event)\"\n                     (queueSelected)=\"selectQueue($event)\">\n    </sm-queues-table>\n  </as-split-area>\n  <as-split-area [size]=\"50\" [visible]=\"!!(selectedQueue$| async)\">\n    <sm-queue-info [selectedQueue]=\"selectedQueue$ | async\"\n                   [queues]=\"queues$ | async\"\n                   (moveExperimentToTopOfQueue)=\"moveExperimentToTopOfQueue($event)\"\n                   (moveExperimentToBottomOfQueue)=\"moveExperimentToBottomOfQueue($event)\"\n                   (removeExperimentFromQueue)=\"removeExperimentFromQueue($event)\"\n                   (moveExperimentToOtherQueue)=\"moveExperimentToOtherQueue($event)\"\n                   (moveExperimentInQueue)=\"moveExperimentInQueue($event)\"\n                   (deselectQueue)=\"selectQueue(null)\">\n    </sm-queue-info>\n  </as-split-area>\n</as-split>\n","import {Injectable} from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport {Observable, of} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersAndQueuesResolver implements Resolve<Observable<boolean>> {\n\n  resolve(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {WorkersAndQueuesComponent} from './workers-and-queues.component';\nimport {WorkersComponent} from './containers/workers/workers.component';\nimport {QueuesComponent} from './containers/queues/queues.component';\nimport {WorkersAndQueuesResolver} from '../../shared/resolvers/workers-and-queues.resolver';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: WorkersAndQueuesComponent,\n    resolve: {\n      queuesManager: WorkersAndQueuesResolver\n    },\n    children: [\n      {path: '', redirectTo: 'workers'},\n      {path: 'workers', component: WorkersComponent},\n      {path: 'queues',\n        component: QueuesComponent,\n        resolve: {\n          queuesManager: WorkersAndQueuesResolver\n        },},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class WorkersAndQueuesRoutingModule {\n}\n\n","import {last, getOr, flattenDeep} from 'lodash/fp';\n\nexport interface DataPoint {\n  date: string;\n  value: number;\n}\n\nexport interface Topic {\n  topicName: string;\n  topicID?: string;\n  topic: number;\n  dates: DataPoint[];\n}\n\nexport interface RequestParam {\n  key: string;\n  aggregation?: string;\n}\n\nconst defaultMaxValHandler = {\n  get: function (target: object, name: string) {\n    if (!target.hasOwnProperty(name)) {\n      target[name] = Math.max(...(Object.values(target) as number[]), 0) + 1;\n    }\n    return target[name];\n  }\n};\n\nexport function addStats(current: Topic[], data, maxPoints: number,\n  requestedKeys: RequestParam[],\n  entityParamName: string,\n  paramInfo: {\n    [key: string]: {\n      title: string;\n      multiply: number;\n    };\n  }) {\n  const topicIDs = new Proxy({}, defaultMaxValHandler);\n  let dataByTopic: Topic[];\n  if (current) {\n    current.forEach(topicObj => topicIDs[topicObj.topicID] = topicObj.topic);\n    dataByTopic = current.slice();\n  } else {\n    dataByTopic = [];\n  }\n\n  const allDates = [...new Set(flattenDeep(data.map(d => d.metrics ? d.metrics.map((topic: Topic) => topic.dates) : [])))] as number[];\n  const shouldAddEntity = data.length > 1;\n  data.forEach(entityData => {\n    const entity = entityData[entityParamName];\n    requestedKeys.forEach(reqKey => {\n      const paramData = entityData.metrics.find(metric => metric.metric === reqKey.key);\n      if (!paramData) {\n        return;\n      }\n      const dates: number[] = paramData.dates;\n      const param = paramData.metric;\n      paramData.stats.forEach(aggData => {\n        const aggregation = aggData.aggregation;\n        const topicID     = `${entity} ${param} ${aggregation}`;\n        const topicName   = `${paramInfo[param].title} (${aggregation})${shouldAddEntity && entity ? ' for ' + entity : ''}`;\n        let topic: Topic = dataByTopic.find(topic => topic.topicID === topicID);\n        if (!topic) {\n          topic = {topicName, topicID, topic: topicIDs[topicID], dates: [] as DataPoint[]};\n          dataByTopic.push(topic);\n        }\n        const tplList = allDates\n          .filter(date => {\n            if (topic.dates.length === 0) {\n              return true;\n            }\n            const strDate: string = new Date(date as number).toISOString();\n            return topic.dates.findIndex(dateObj => dateObj.date === strDate) < 0;\n          })\n          .map(date => {\n            const idx = dates.indexOf(date);\n            return {\n              date : new Date(date as number).toISOString(),\n              value: idx > -1 ? aggData.values[idx] * paramInfo[param].multiply : null\n            };\n          });\n        topic.dates.push(...tplList);\n        topic.dates = topic.dates.slice(Math.max(topic.dates.length - maxPoints, 0));\n      });\n    });\n    // add missing keys\n    requestedKeys.forEach(reqParam => {\n      const item = dataByTopic.find((topic: Topic) => topic.topicID.indexOf(reqParam.key) > -1);\n      if (!item) {\n        const topicID   = `${entity} ${reqParam.key} avg`;\n        const topicName = `${paramInfo[reqParam.key].title} (avg) ${shouldAddEntity && entity ? 'for ' + entity : ''}`;\n        const topic     = {topicName: topicName, topicID: topicID, topic: topicIDs[topicID], dates: [] as DataPoint[]};\n        dataByTopic.push(topic);\n      }\n    });\n  });\n  return dataByTopic;\n}\n\nexport function getLastTimestamp(data: Topic[]): number {\n  let lastDate = 0;\n  data.forEach(topic => {\n    const dates = topic.dates;\n    if (dates) {\n      const topicLastDate = getOr(0, 'date', last(dates));\n      const date          = Math.floor((new Date(topicLastDate)).getTime() / 1000);\n      lastDate            = Math.max(lastDate, date);\n    }\n  });\n  return lastDate;\n}\n\nexport function removeFullRangeMarkers(topics: Topic[]) {\n  const dates = topics[0].dates;\n  if (dates.slice(-1)[0].value === null) {\n    dates.splice(-1, 1);\n  }\n  if (dates[0].value === null) {\n    dates.splice(0, 1);\n  }\n}\n\nexport function addFullRangeMarkers(topics: Topic[], fromDate: number, toDate: number) {\n  topics[0].dates.splice(0, 0, {date: (new Date(fromDate * 1000)).toISOString(), value: null});\n  topics[0].dates.push({date: (new Date(toDate * 1000)).toISOString(), value: null});\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {Action, Store} from '@ngrx/store';\nimport {castArray, cloneDeep} from 'lodash/fp';\nimport {catchError, mergeMap, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {ApiWorkersService} from '../../../business-logic/api-services/workers.service';\nimport {Worker} from '../../../business-logic/model/workers/worker';\nimport {WORKER_STATS_PARAM_INFO} from '../workers-and-queues.consts';\nimport {WorkersGetActivityReportRequest} from '../../../business-logic/model/workers/workersGetActivityReportRequest';\nimport {WorkersGetActivityReportResponse} from '../../../business-logic/model/workers/workersGetActivityReportResponse';\nimport {WorkersGetStatsRequest} from '../../../business-logic/model/workers/workersGetStatsRequest';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport * as workersActions from '../actions/workers.actions';\nimport {selectSelectedWorker, selectStats, selectStatsParams, selectStatsTimeFrame, selectWorkers, selectWorkersTableSortFields} from '../reducers/index.reducer';\nimport {orderBy} from 'lodash/fp';\nimport {addFullRangeMarkers, addStats, getLastTimestamp, removeFullRangeMarkers} from '../../shared/utils/statistics';\nimport {showStatsErrorNotice, hideNoStatsNotice} from '../actions/stats.actions';\nimport {addMultipleSortColumns} from '../../shared/utils/shared-utils';\nimport {WorkerExt} from '../actions/workers.actions';\n\nconst prepareStatsQuery = (entitie: string, keys: { key: string }[], range: number, granularity: number): WorkersGetStatsRequest => {\n  const now = Math.floor((new Date()).getTime() / 1000);\n  return {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    from_date: now - range,\n    to_date: now,\n    worker_ids: entitie ? [entitie] : null,\n    items: castArray(keys),\n    interval: granularity\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n};\n\n@Injectable()\nexport class WorkersEffects {\n\n  constructor(\n    private actions: Actions,\n    private workersApi: ApiWorkersService, private store: Store<any>) {\n  }\n\n  getWorkers$ = createEffect(() => this.actions.pipe(\n    ofType(workersActions.getWorkers),\n    withLatestFrom(\n      this.store.select(selectSelectedWorker),\n      this.store.select(selectWorkersTableSortFields),\n    ),\n    switchMap(([action, selectedWorker, sortFields]) => this.workersApi.workersGetAll({}).pipe(\n      mergeMap(res => {\n        const workers = this.transformAndSortWorkers(sortFields, res.workers);\n        const actionsToFire = [\n          workersActions.setWorkers({workers}),\n          deactivateLoader(action.type)] as Action[];\n        if (selectedWorker) {\n          actionsToFire.push(\n            workersActions.setSelectedWorker({\n              worker: workers.find(worker => worker.id === selectedWorker.id)\n            }));\n        }\n        return actionsToFire;\n      }),\n      catchError(err => [requestFailed(err), deactivateLoader(action.type)])\n      )\n    )\n  ));\n\n  sortWorkers$ = createEffect(() => this.actions.pipe(\n    ofType(workersActions.workersTableSetSort),\n    withLatestFrom(\n      this.store.select(selectWorkersTableSortFields),\n      this.store.select(selectWorkers)\n    ),\n    mergeMap(([, sortFields, workers]) => [workersActions.setWorkers({workers: this.transformAndSortWorkers(sortFields, workers)})]),\n  ));\n\n  getStats$ = createEffect(() => this.actions.pipe(\n    ofType(workersActions.getWorkers),\n    withLatestFrom(\n      this.store.select(selectStats),\n      this.store.select(selectStatsTimeFrame),\n      this.store.select(selectStatsParams),\n      this.store.select(selectSelectedWorker)\n    ),\n    switchMap(([action, currentStats, selectedRange, params, worker]) => {\n      const now = Math.floor((new Date()).getTime() / 1000);\n      const keys = params.split(';').map(val => ({key: val}));\n      const range = parseInt(selectedRange, 10);\n      const granularity = Math.max(Math.floor(range / action.maxPoints), worker ? 10 : 40);\n      let timeFrame: number;\n\n      currentStats = cloneDeep(currentStats);\n      if (Array.isArray(currentStats) && currentStats.some(topic => topic.dates.length > 1)) {\n        removeFullRangeMarkers(currentStats);\n        timeFrame = now - getLastTimestamp(currentStats) + granularity;\n      } else {\n        timeFrame = range;\n      }\n      if (worker) {\n        const req = prepareStatsQuery(worker.name, keys, timeFrame, granularity);\n        return this.workersApi.workersGetStats(req).pipe(\n          mergeMap(res => {\n            if (res) {\n              res = addStats(currentStats, res.workers, action.maxPoints, keys, 'worker', WORKER_STATS_PARAM_INFO);\n              if (Array.isArray(res) && res.some(topic => topic.dates.length > 0)) {\n                addFullRangeMarkers(res, now - range, now);\n              }\n            }\n            return [workersActions.setStats({data: res})];\n          }),\n          catchError(err => [requestFailed(err),\n            workersActions.setStats({data: []}),\n            addMessage(MESSAGES_SEVERITY.WARN, 'Failed to fetching activity worker statistics')])\n        );\n      } else {\n        const req: WorkersGetActivityReportRequest = {\n          /* eslint-disable @typescript-eslint/naming-convention */\n          from_date: now - timeFrame,\n          to_date: now,\n          interval: granularity\n          /* eslint-enable @typescript-eslint/naming-convention */\n        };\n\n        return this.workersApi.workersGetActivityReport(req).pipe(\n          mergeMap((res: WorkersGetActivityReportResponse) => {\n            let result = null;\n            if (res) {\n              const statsData = [{\n                activity: '',\n                metrics: [{\n                  metric: 'total',\n                  dates: res.total.dates,\n                  stats: [{\n                    aggregation: 'count',\n                    values: res.total.counts\n                  }]\n                }, {\n                  metric: 'active',\n                  dates: res.active.dates,\n                  stats: [{\n                    aggregation: 'count',\n                    values: res.active.counts\n                  }]\n                }]\n              }];\n              result = addStats(currentStats, statsData, action.maxPoints,\n                [{key: 'active'}, {key: 'total'}], 'activity',\n                {\n                  total: {title: 'Total Workers', multiply: 1},\n                  active: {title: 'Active Workers', multiply: 1}\n                });\n            }\n            if (Array.isArray(result) && result.some(topic => topic.dates.length > 0)) {\n              addFullRangeMarkers(result, now - range, now);\n            }\n            return [workersActions.setStats({data: result}), hideNoStatsNotice()];\n          }),\n          catchError(err => [requestFailed(err),\n            workersActions.setStats({data: []}),\n            showStatsErrorNotice()])\n        );\n      }\n    })\n  ));\n\n  tableSortChange = createEffect(() => this.actions.pipe(\n    ofType(workersActions.workersTableSortChanged),\n    withLatestFrom(this.store.select(selectWorkersTableSortFields)),\n    switchMap(([action, oldOrders]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [workersActions.workersTableSetSort({orders})];\n    })\n  ));\n\n  private transformAndSortWorkers(sortFields, workers: Worker[]): WorkerExt[] {\n    workers = workers.map(worker => ({...worker, id: worker.key || worker.id, name: worker.id}));\n    const srtByFields = sortFields.map(f => f.field);\n    const srtByOrders = sortFields.map(f => f.order > 0 ? 'asc' : 'desc');\n    return orderBy<Worker>(srtByFields, srtByOrders, workers) as any;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {catchError, filter, map, mergeMap, switchMap, tap, withLatestFrom} from 'rxjs/operators';\nimport {Store} from '@ngrx/store';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ApiQueuesService} from '../../../business-logic/api-services/queues.service';\nimport {QueuesGetQueueMetricsRequest} from '../../../business-logic/model/queues/queuesGetQueueMetricsRequest';\nimport {QueuesGetQueueMetricsResponse} from '../../../business-logic/model/queues/queuesGetQueueMetricsResponse';\nimport {Queue} from '../../../business-logic/model/queues/queue';\nimport {\n  selectQueuesStatsTimeFrame,\n  selectQueuesTableSortFields,\n  selectQueueStats, selectSelectedQueue\n} from '../reducers/index.reducer';\nimport {activeLoader, addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {\n  getQueues,\n  queuesTableSortChanged, queuesTableSetSort, setQueues, setSelectedQueue, setSelectedQueueFromServer, refreshSelectedQueue, syncSpecificQueueInTable, deleteQueue, moveExperimentToBottomOfQueue,\n  moveExperimentToTopOfQueue, moveExperimentInQueue, removeExperimentFromQueue, moveExperimentToOtherQueue, addExperimentToQueue, getStats, setStats\n} from '../actions/queues.actions';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {QueueMetrics} from '../../../business-logic/model/queues/queueMetrics';\nimport {ApiTasksService} from '../../../business-logic/api-services/tasks.service';\nimport {cloneDeep, orderBy} from 'lodash/fp';\nimport {addFullRangeMarkers, addStats, removeFullRangeMarkers} from '../../shared/utils/statistics';\nimport {hideNoStatsNotice, showStatsErrorNotice} from '../actions/stats.actions';\nimport {encodeOrder} from '../../shared/utils/tableParamEncode';\nimport {addMultipleSortColumns} from '../../shared/utils/shared-utils';\n\n@Injectable()\nexport class QueuesEffect {\n  constructor(\n    private actions: Actions, private queuesApi: ApiQueuesService, private tasksApi: ApiTasksService,\n    private store: Store<any>\n  ) {\n  }\n\n  activeLoader = createEffect(() => this.actions.pipe(\n    ofType(getQueues, refreshSelectedQueue),\n    map(action => activeLoader(action.type))\n  ));\n\n  getQueues = createEffect(() => this.actions.pipe(\n    ofType(getQueues, queuesTableSetSort),\n    withLatestFrom(\n      this.store.select(selectQueuesTableSortFields)),\n    switchMap(([action, orderFields]) => this.queuesApi.queuesGetAllEx({\n      /* eslint-disable @typescript-eslint/naming-convention */\n      only_fields: ['*', 'entries.task.name'],\n      order_by: encodeOrder(orderFields)\n      /* eslint-enable @typescript-eslint/naming-convention */\n    }).pipe(\n      mergeMap(res => [setQueues({queues: this.sortQueues(orderFields, res.queues)}), deactivateLoader(action.type)]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err)])\n    ))\n  ));\n\n  getSelectedQueue = createEffect(() => this.actions.pipe(\n    ofType(setSelectedQueue),\n    filter(action => !!action.queue),\n    tap(action => this.store.dispatch(activeLoader(action.type))),\n    switchMap(action => this.queuesApi.queuesGetAllEx({\n        id: [action.queue.id],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n        only_fields: ['*', 'entries.task.name']\n      }).pipe(\n        mergeMap(res => [\n          setSelectedQueueFromServer({queue: res.queues[0]}),\n          syncSpecificQueueInTable({queue: res.queues[0]}),\n          deactivateLoader(action.type)]),\n        catchError(err => [deactivateLoader(action.type), requestFailed(err)])\n      )\n    )\n  ));\n\n  refreshSelectedQueue = createEffect(() => this.actions.pipe(\n    ofType(refreshSelectedQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesGetAllEx({\n      id: [queue.id],\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      only_fields: ['*', 'entries.task.name']\n    }).pipe(\n      mergeMap(res => [\n        setSelectedQueueFromServer({queue: res.queues[0]}),\n        syncSpecificQueueInTable({queue: res.queues[0]}),\n        deactivateLoader(action.type)]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err)])\n    ))\n  ));\n\n  deleteQueues = createEffect(() => this.actions.pipe(\n    ofType(deleteQueue),\n    switchMap(action => this.queuesApi.queuesDelete({queue: action.queue.id}).pipe(\n      mergeMap(() => [getQueues(),\n        setSelectedQueue({}),\n      ]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Delete Queue failed')])\n    ))\n  ));\n\n  moveExperimentToTopOfQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentToTopOfQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesMoveTaskToFront({\n      queue: queue.id,\n      task: action.task\n    }).pipe(\n      mergeMap(() => [refreshSelectedQueue()]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Move Experiment failed')])\n    ))\n  ));\n\n  moveExperimentToBottomOfQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentToBottomOfQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesMoveTaskToBack({\n      queue: queue.id,\n      task: action.task\n    }).pipe(\n      mergeMap(() => [refreshSelectedQueue()]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Move Experiment failed')])\n    ))\n  ));\n\n  moveExperimentInQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentInQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) =>\n      this.queuesApi.queuesMoveTaskBackward({\n        queue: queue.id,\n        task: action.task,\n        count: (action.count)\n      }).pipe(\n        mergeMap(() => [refreshSelectedQueue()]),\n        catchError(err => [refreshSelectedQueue(), deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Move Queue failed')])\n      )\n    ),\n  ));\n\n  removeExperimentFromQueue = createEffect(() => this.actions.pipe(\n    ofType(removeExperimentFromQueue),\n    switchMap((action) => this.tasksApi.tasksDequeue({task: action.task}).pipe(\n      mergeMap(() => [refreshSelectedQueue()]),\n      catchError(err => [deactivateLoader(action.type), requestFailed(err),\n        addMessage(MESSAGES_SEVERITY.ERROR, 'Remove Queue failed')])\n    ))\n  ));\n\n  moveExperimentToOtherQueue = createEffect(() => this.actions.pipe(\n    ofType(moveExperimentToOtherQueue),\n    withLatestFrom(this.store.select(selectSelectedQueue)),\n    switchMap(([action, queue]) => this.queuesApi.queuesRemoveTask({queue: queue.id, task: action.task}).pipe(\n        mergeMap(() => [addExperimentToQueue({task: action.task, queue: action.queue})]),\n        catchError(err => [deactivateLoader(action.type), requestFailed(err),\n          addMessage(MESSAGES_SEVERITY.ERROR, 'Move Queue to other queue failed')])\n      )\n    )\n  ));\n\n  addExperimentToQueue = createEffect(() => this.actions.pipe(\n    ofType(addExperimentToQueue),\n    switchMap((action) => this.queuesApi.queuesAddTask({queue: action.queue, task: action.task}).pipe(\n        mergeMap(() => [refreshSelectedQueue(), getQueues()]),\n        catchError(err => [deactivateLoader(action.type), requestFailed(err), addMessage(MESSAGES_SEVERITY.ERROR, 'Add experiment to queue failed')])\n      )\n    )\n  ));\n\n  getStats$ = createEffect(() => this.actions.pipe(\n    ofType(getStats),\n    withLatestFrom(this.store.select(selectQueueStats),\n      this.store.select(selectSelectedQueue),\n      this.store.select(selectQueuesStatsTimeFrame)\n    ),\n    switchMap(([action, currentStats, queue, selectedRange]: [ReturnType<typeof getStats>, any, Queue, string]) => {\n      const now = Math.floor((new Date()).getTime() / 1000);\n      const range = parseInt(selectedRange, 10);\n      const granularity = Math.max(Math.floor(range / action.maxPoints), queue ? 10 : 40);\n\n      const req: QueuesGetQueueMetricsRequest = {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        from_date: now - range,\n        to_date: now,\n        queue_ids: queue ? [queue.id] : undefined,\n        interval: granularity\n      };\n      /* eslint-enable @typescript-eslint/naming-convention */\n      return this.queuesApi.queuesGetQueueMetrics(req).pipe(\n        mergeMap((res: QueuesGetQueueMetricsResponse) => {\n          let newStats = {wait: null, length: null};\n          currentStats = cloneDeep(currentStats);\n          if (res && res.queues) {\n            if (Array.isArray(currentStats.wait) && currentStats.wait.some(topic => topic.dates.length > 1)) {\n              removeFullRangeMarkers(currentStats.wait);\n            }\n            if (Array.isArray(currentStats.length) && currentStats.length.some(topic => topic.dates.length > 1)) {\n              removeFullRangeMarkers(currentStats.length);\n            }\n            let newQueue: QueueMetrics;\n            if (res.queues.length) {\n              newQueue = res.queues[0];\n            } else {\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              newQueue = {dates: [], avg_waiting_times: [], queue_lengths: []};\n            }\n            const waitData = [{\n              wait: '',\n              metrics: [{\n                metric: 'queueAvgWait',\n                dates: newQueue.dates,\n                stats: [{\n                  aggregation: 'seconds',\n                  values: newQueue.avg_waiting_times\n                }]\n              }]\n            }];\n            const lenData = [{\n              length: '',\n              metrics: [{\n                metric: 'queueLen',\n                dates: newQueue.dates,\n                stats: [{\n                  aggregation: 'count',\n                  values: newQueue.queue_lengths\n                }]\n              }]\n            }];\n            newStats = {\n              wait: addStats(currentStats.wait, waitData, action.maxPoints,\n                [{key: 'queueAvgWait'}], 'wait', {queueAvgWait: {title: 'Queue Average Wait Time', multiply: 1}}),\n              length: addStats(currentStats.length, lenData, action.maxPoints,\n                [{key: 'queueLen'}], 'length', {queueLen: {title: 'Queues Average Length', multiply: 1}})\n            };\n            if (Array.isArray(newStats.wait) && newStats.wait.some(topic => topic.dates.length > 0)) {\n              addFullRangeMarkers(newStats.wait, now - range, now);\n            }\n            if (Array.isArray(newStats.length) && newStats.length.some(topic => topic.dates.length > 0)) {\n              addFullRangeMarkers(newStats.length, now - range, now);\n            }\n          }\n          return [deactivateLoader(action.type), setStats({data: newStats}), hideNoStatsNotice()];\n        }),\n        catchError(err => [deactivateLoader(action.type),\n          setStats({data: {wait: [], length: []}}),\n          requestFailed(err),\n          showStatsErrorNotice()\n        ])\n      );\n\n    })\n  ));\n\n  tableSortChange = createEffect(() => this.actions.pipe(\n    ofType(queuesTableSortChanged),\n    withLatestFrom(this.store.select(selectQueuesTableSortFields)),\n    switchMap(([action, oldOrders]) => {\n      const orders = addMultipleSortColumns(oldOrders, action.colId, action.isShift);\n      return [queuesTableSetSort({orders})];\n    })\n  ));\n\n  private sortQueues(sortFields, queues): Queue[] {\n    const srtByFields = sortFields.map(f => f.field);\n    const srtByOrders = sortFields.map(f => f.order > 0 ? 'asc' : 'desc');\n    return orderBy<Queue>(srtByFields, srtByOrders, queues) as any;\n  }\n}\n","import * as createNewQueueActions from './queue-create-dialog.actions';\nimport {CREATE_QUEUE_ACTIONS} from './queue-create-dialog.actions';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {Injectable} from '@angular/core';\nimport {CREATION_STATUS} from './queue-create-dialog.reducer';\nimport {catchError, mergeMap, map, switchMap} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {MESSAGES_SEVERITY} from '../../../app.constants';\nimport {activeLoader, addMessage, deactivateLoader} from '../../core/actions/layout.actions';\nimport {requestFailed} from '../../core/actions/http.actions';\nimport {ApiQueuesService} from '../../../business-logic/api-services/queues.service';\n\n@Injectable()\nexport class QueueCreateDialogEffects {\n  constructor(private actions: Actions, private queuesApiService: ApiQueuesService, private router: Router) {\n  }\n\n  @Effect()\n  activeLoader = this.actions.pipe(\n    ofType(CREATE_QUEUE_ACTIONS.CREATE_NEW_QUEUE),\n    map(action => activeLoader(action.type))\n  );\n\n  @Effect()\n  createQueue = this.actions.pipe(\n    ofType<createNewQueueActions.CreateNewQueue>(CREATE_QUEUE_ACTIONS.CREATE_NEW_QUEUE),\n    mergeMap((action) => this.queuesApiService.queuesCreate(action.payload)\n      .pipe(\n        mergeMap(res => [\n          deactivateLoader(action.type),\n          new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.SUCCESS),\n          addMessage(MESSAGES_SEVERITY.SUCCESS, 'Queue Created Successfully'),\n        ]),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error), addMessage(MESSAGES_SEVERITY.ERROR, 'Queue Created Failed'), new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.FAILED)])\n      )\n    )\n  );\n\n  @Effect()\n  updateQueue = this.actions.pipe(\n    ofType<createNewQueueActions.UpdateQueue>(CREATE_QUEUE_ACTIONS.UPDATE_QUEUE),\n    mergeMap((action) => this.queuesApiService.queuesUpdate(action.payload)\n      .pipe(\n        mergeMap(res => [\n          deactivateLoader(action.type),\n          new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.SUCCESS),\n          addMessage(MESSAGES_SEVERITY.SUCCESS, 'Queue Updated Successfully'),\n        ]),\n        catchError(error => [deactivateLoader(action.type), requestFailed(error), addMessage(MESSAGES_SEVERITY.ERROR, 'Queue Created Failed'), new createNewQueueActions.SetNewQueueCreationStatus(CREATION_STATUS.FAILED)])\n      )\n    )\n  );\n\n  @Effect()\n  getAllQueues = this.actions.pipe(\n    ofType<createNewQueueActions.GetQueues>(CREATE_QUEUE_ACTIONS.GET_QUEUES),\n    switchMap(action => this.queuesApiService.queuesGetAllEx({})\n      .pipe(\n        mergeMap(res => [new createNewQueueActions.SetQueues(res.queues)]),\n        catchError(error => [requestFailed(error)])\n      )\n    )\n  );\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {queueCreateDialogReducer} from './queue-create-dialog.reducer';\nimport {QueueCreateDialogEffects} from './queue-create-dialog.effects';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {QueueCreateDialogComponent} from './queue-create-dialog.component';\nimport {CreateNewQueueFormComponent} from './create-new-queue-form/create-new-queue-form.component';\nimport {UiComponentsModule} from '../ui-components/ui-components.module';\nimport {SMMaterialModule} from '../material/material.module';\n\n@NgModule({\n  imports        : [\n    UiComponentsModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SMMaterialModule,\n    StoreModule.forFeature('queueCreateDialog', queueCreateDialogReducer),\n    EffectsModule.forFeature([QueueCreateDialogEffects])\n  ],\n  declarations   : [QueueCreateDialogComponent, CreateNewQueueFormComponent]\n})\nexport class QueueCreateDialogModule {\n}\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {WorkersAndQueuesRoutingModule} from '../../webapp-common/workers-and-queues/workers-and-queues-routing.module';\nimport {WorkersAndQueuesComponent} from '../../webapp-common/workers-and-queues/workers-and-queues.component';\nimport {WorkersComponent} from '../../webapp-common/workers-and-queues/containers/workers/workers.component';\nimport {QueuesComponent} from '../../webapp-common/workers-and-queues/containers/queues/queues.component';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {WorkersTableComponent} from '../../webapp-common/workers-and-queues/dumb/workers-table/workers-table.component';\nimport {QueueTaskTableComponent} from '../../webapp-common/workers-and-queues/dumb/queue-task-table/queue-task-table.component';\nimport {reducers} from '../../webapp-common/workers-and-queues/reducers/index.reducer';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {WorkersEffects} from '../../webapp-common/workers-and-queues/effects/workers.effects';\nimport {WorkersStatsComponent} from '../../webapp-common/workers-and-queues/containers/workers-stats/workers-stats.component';\nimport {WorkerInfoComponent} from '../../webapp-common/workers-and-queues/dumb/worker-info/worker-info.component';\nimport {AngularSplitModule} from 'angular-split';\nimport {QueuesTableComponent} from '../../webapp-common/workers-and-queues/dumb/queues-table/queues-table.component';\nimport {QueueInfoComponent} from '../../webapp-common/workers-and-queues/dumb/queue-info/queue-info.component';\nimport {QueuesEffect} from '../../webapp-common/workers-and-queues/effects/queues.effects';\nimport {SharedPipesModule} from '../../webapp-common/shared/pipes/shared-pipes.module';\nimport {QueueStatsComponent} from '../../webapp-common/workers-and-queues/containers/queue-stats/queue-stats.component';\nimport {SharedModule} from '../../shared/shared.module';\nimport {ExperimentSharedModule} from '../experiments/shared/experiment-shared.module';\nimport {QueueCreateDialogModule} from '../../webapp-common/shared/queue-create-dialog/queue-create-dialog.module';\nimport {SelectQueueModule} from '../../webapp-common/experiments/shared/components/select-queue/select-queue.module';\nimport {QueuesMenuComponent} from '../../webapp-common/workers-and-queues/dumb/queues-menu/queues-menu.component';\nimport {QueuesMenuExtendedComponent} from './queues-menu-extended/queues-menu-extended.component';\n\n@NgModule({\n  imports: [\n    ExperimentSharedModule,\n    SharedPipesModule,\n    CommonModule,\n    WorkersAndQueuesRoutingModule,\n    SharedModule,\n    SMSharedModule,\n    QueueCreateDialogModule,\n    SelectQueueModule,\n    StoreModule.forFeature('workersAndQueues', reducers),\n    EffectsModule.forFeature([WorkersEffects, QueuesEffect]),\n    AngularSplitModule,\n    FormsModule,\n  ],\n  declarations: [\n    WorkersAndQueuesComponent,\n    WorkersComponent,\n    WorkersTableComponent,\n    WorkersStatsComponent,\n    WorkerInfoComponent,\n    QueuesTableComponent,\n    QueueTaskTableComponent,\n    QueuesComponent,\n    QueueInfoComponent,\n    QueueStatsComponent,\n    QueuesMenuComponent,\n    QueuesMenuExtendedComponent\n  ],\n\n})\nexport class WorkersAndQueuesModule {\n}\n"]}