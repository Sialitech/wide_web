{"version":3,"mappings":"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","names":["RECENT_TASKS_TABLE_COL_FIELDS","RESULT","COMMENT","ID","PROJECT","NAME","TYPE","STATUS","STARTED","LAST_UPDATE","USER","QUEUE","WORKER","RECENT_EXPERIMENTS_TABLE_COLS","id","headerType","ColHeaderTypeEnum","header","bodyStyleClass","disableDrag","disablePointerEvents","DASHBOARD_PREFIX","getRecentProjects","createAction","getRecentExperiments","setRecentProjects","props","setRecentExperiments","commonDashboardReducers","on","state","action","Object","recentProjects","projects","recentTasks","experiments","commonDashboardReducer","createReducer","selectDashboard","createFeatureSelector","selectRecentProjects","createSelector","selectRecentTasks","searchInitialState","term","forceSearch","users","models","resultsCounter","active","type","SEARCH_ACTIONS","searchSetTerm","act","force","payload","selectSearch","selectProjectsResults","selectExperimentsResults","selectModelsResults","selectActiveSearch","t","n","_a","query","_b","length","selectSearchTerm","selectResultsCounter","i0","s","ProjectsSearchResultsComponent","constructor","this","EventEmitter","projectCardClicked","project","projectClicked","emit","selectors","Le","ExperimentsSearchResultsComponent","experimentCardClicked","experiment","experimentClicked","ModelsSearchResultsComponent","modelCardClicked","model","modelClicked","SearchResultsPageComponent","projectSelected","experimentSelected","modelSelected","ctx","DashboardSearchComponent","store","router","super","allResultsJoin$","combineLatest","projectsResults$","experimentsResults$","modelsResults$","resultsCounter$","syncAppSearch","ngOnInit","allResultsSubscription","pipe","skip","filter","allResults","tabsIndexes","subscribe","setFirstActiveLink","ngOnDestroy","dispatch","SearchClear","searchTermChanged","stopSyncSearch","unsubscribe","searchQuery$","select","selectSearchQuery","activeSearch$","searchTerm$","ResetSearch","searchSubs","InitSearch","regExp","navigateByUrl","searchStart","activeLink","SearchDeactivate","setSelectedProjectId","projectId","example","isExample","taskSelected","task","activeLinkChanged","indexOf","firstTabIndex","findIndex","list","_class","DashboardProjectsComponent","matDialog","recentProjectsList$","resetSelectedProject","selectCurrentUser","user","take","ngAfterViewInit","width","nativeElement","getBoundingClientRect","window","setTimeout","sub","fromEvent","throttleTime","openCreateProjectDialog","dialog","open","ProjectDialogComponent","data","mode","afterClosed","projectHasBeenCreated","RecentExperimentTableComponent","TIME_FORMAT_STRING","cols","onExperimentSelected","event","getElapsedTime","started","arguments","completed","now","Date","startTime","completedTime","todayAtMidn","getFullYear","getMonth","getDate","yesterdayAtMidn","setDate","elapsedTimeString","convertMinsToHrsMins","getTime","toLocaleTimeString","toLocaleDateString","mins","h","Math","floor","m","DashboardExperimentsComponent","routes","path","component","activatedRoute","recentTasks$","showOnlyUserWorkSub","selectShowOnlyUserWork","welcomeSub","selectFirstLogin","first","showWelcome","redirectToWorkers","setDeep","deep","WelcomeMessageComponent","firstLogin","setWidth","DashboardComponent","DashboardRoutingModule","RouterModule","CommonDashboardEffects","actions","projectsApi","tasksApi","loginApi","errorService","createEffect","ofType","map","activeLoader","withLatestFrom","mergeMap","_ref3","showOnlyUserWork","projectsGetAllEx","stats_for_state","ProjectsGetAllExRequest","include_stats","order_by","page","page_size","active_users","only_fields","_ref4","deactivateLoader","catchError","error","requestFailed","switchMap","_ref6","tasksGetAllEx","status","system_tags","_ref7","tasks","err","factory","ɵfac","CommonDashboardModule","CommonModule","SMSharedModule","ExperimentsCommonModule","ExperimentSharedModule","CommonSearchModule","ProjectsSharedModule","CommonExperimentSharedModule","EffectsModule","CommonLayoutModule","CommonProjectsModule","SharedModule","C","modelsApi","experimentsApi","actionsToFire","push","SearchActivate","searchProjects","searchExperiments","searchModels","_any_","pattern","escapeRegex","fields","scroll_id","size","SEARCH_PAGE_SIZE","res","SetProjectsResults","modelsGetAllEx","SetModelsResults","EXPERIMENT_SEARCH_ONLY_FIELDS","SetExperimentsResults","DashboardSearchEffects","__decorate","Effect","x","DashboardSearchModule","StoreModule","dashboardSearchReducer","DashboardModule","ProjectDialogModule"],"sources":["webpack:///src/app/webapp-common/dashboard/common-dashboard.const.ts","webpack:///src/app/webapp-common/dashboard/common-dashboard.actions.ts","webpack:///src/app/webapp-common/dashboard/common-dashboard.reducer.ts","webpack:///src/app/webapp-common/dashboard-search/dashboard-search.reducer.ts","webpack:///src/app/webapp-common/dashboard-search/dumb/projects-search-results/projects-search-results.component.html","webpack:///src/app/webapp-common/dashboard-search/dumb/projects-search-results/projects-search-results.component.ts","webpack:///src/app/webapp-common/dashboard-search/dumb/experiments-search-results/experiments-search-results.component.html","webpack:///src/app/webapp-common/dashboard-search/dumb/experiments-search-results/experiments-search-results.component.ts","webpack:///src/app/webapp-common/dashboard-search/dumb/models-search-results/models-search-results.component.html","webpack:///src/app/webapp-common/dashboard-search/dumb/models-search-results/models-search-results.component.ts","webpack:///src/app/features/dashboard/dumb/search-results-page/search-results-page.component.html","webpack:///src/app/features/dashboard/dumb/search-results-page/search-results-page.component.ts","webpack:///src/app/features/dashboard/containers/dashboard-search/dashboard-search.component.html","webpack:///src/app/features/dashboard/containers/dashboard-search/dashboard-search.component.ts","webpack:///src/app/webapp-common/dashboard/dashboard-search.component.base.ts","webpack:///src/app/webapp-common/dashboard/containers/dashboard-projects/dashboard-projects.component.html","webpack:///src/app/webapp-common/dashboard/containers/dashboard-projects/dashboard-projects.component.ts","webpack:///src/app/webapp-common/dashboard/dumb/recent-experiment-table/recent-experiment-table.component.html","webpack:///src/app/webapp-common/dashboard/dumb/recent-experiment-table/recent-experiment-table.component.ts","webpack:///src/app/webapp-common/dashboard/containers/dashboard-experiments/dashboard-experiments.component.ts","webpack:///src/app/webapp-common/dashboard/containers/dashboard-experiments/dashboard-experiments.component.html","webpack:///src/app/features/dashboard/dashboard.component.html","webpack:///src/app/features/dashboard/dashboard-routing.module.ts","webpack:///src/app/features/dashboard/dashboard.component.ts","webpack:///src/app/webapp-common/dashboard/common-dashboard.effects.ts","webpack:///src/app/webapp-common/dashboard/common-dashboard.module.ts","webpack:///src/app/webapp-common/dashboard-search/dashboard-search.effects.ts","webpack:///src/app/features/dashboard/dashboard-search/dashboard-search.module.ts","webpack:///src/app/features/dashboard/dashboard.module.ts"],"sourcesContent":["import {ColHeaderTypeEnum, ISmCol} from '@common/shared/ui-components/data/table/table.consts';\n\nexport type TaskTableColFieldsEnum = 'output.result' | 'comment' | 'id' | 'project.name' | 'name' | 'type' | 'status' | 'started' | 'last_update' | 'user.name' | 'queue.name' | 'worker.name';\nexport const CARDS_IN_ROW                  = 6;\nexport const RECENT_TASKS_TABLE_COL_FIELDS = {\n  RESULT     : 'output.result' as TaskTableColFieldsEnum,\n  COMMENT    : 'comment' as TaskTableColFieldsEnum,\n  ID         : 'id' as TaskTableColFieldsEnum,\n  PROJECT    : 'project.name' as TaskTableColFieldsEnum,\n  NAME       : 'name' as TaskTableColFieldsEnum,\n  TYPE       : 'type' as TaskTableColFieldsEnum,\n  STATUS     : 'status' as TaskTableColFieldsEnum,\n  STARTED    : 'started' as TaskTableColFieldsEnum,\n  LAST_UPDATE: 'last_update' as TaskTableColFieldsEnum,\n  USER       : 'user.name' as TaskTableColFieldsEnum,\n  QUEUE      : 'queue.name' as TaskTableColFieldsEnum,\n  WORKER     : 'worker.name' as TaskTableColFieldsEnum\n};\n\nexport const RECENT_EXPERIMENTS_TABLE_COLS: ISmCol[] = [\n  {\n    id            : RECENT_TASKS_TABLE_COL_FIELDS.TYPE,\n    headerType    : ColHeaderTypeEnum.title,\n    header        : 'TYPE',\n    bodyStyleClass: 'type-col',\n    disableDrag   : true,\n    disablePointerEvents: true\n  },\n  {\n    id         : RECENT_TASKS_TABLE_COL_FIELDS.NAME,\n    headerType : ColHeaderTypeEnum.title,\n    header     : 'TITLE',\n    disableDrag: true,\n    disablePointerEvents: true\n\n  },\n  {\n    id         : RECENT_TASKS_TABLE_COL_FIELDS.PROJECT,\n    headerType : ColHeaderTypeEnum.title,\n    header     : 'PROJECT',\n    disableDrag: true,\n    disablePointerEvents: true\n\n  },\n  {\n    id         : RECENT_TASKS_TABLE_COL_FIELDS.STARTED,\n    headerType : ColHeaderTypeEnum.title,\n    header     : 'STARTED',\n    disableDrag: true,\n    disablePointerEvents: true\n\n  },\n  {\n    id         : RECENT_TASKS_TABLE_COL_FIELDS.LAST_UPDATE,\n    headerType : ColHeaderTypeEnum.title,\n    header     : 'UPDATED',\n    disableDrag: true,\n    disablePointerEvents: true\n\n  },\n  {\n    id            : RECENT_TASKS_TABLE_COL_FIELDS.STATUS,\n    headerType    : ColHeaderTypeEnum.title,\n    header        : 'STATUS',\n    bodyStyleClass: 'status-col',\n    disableDrag   : true,\n    disablePointerEvents: true\n\n  }\n];\nexport const DASHBOARD_PREFIX = 'DASHBOARD_';\n","import {DASHBOARD_PREFIX} from './common-dashboard.const';\nimport {Project} from '~/business-logic/model/projects/project';\nimport {IRecentTask} from './common-dashboard.reducer';\nimport {createAction, props} from '@ngrx/store';\n\nexport const getRecentProjects = createAction(DASHBOARD_PREFIX + '[get recent projects]');\nexport const getRecentExperiments = createAction(DASHBOARD_PREFIX + '[get recent experiments]');\n\nexport const setRecentProjects = createAction(\n  DASHBOARD_PREFIX + '[set recent projects]',\n  props<{projects: Project[]}>()\n);\n\nexport const setRecentExperiments = createAction(\n  DASHBOARD_PREFIX + '[set recent experiments]',\n  props<{experiments: IRecentTask[]}>()\n);\n","import {createFeatureSelector, createReducer, createSelector, on, ReducerTypes} from '@ngrx/store';\nimport {Project} from '~/business-logic/model/projects/project';\nimport {Task} from '~/business-logic/model/tasks/task';\nimport {User} from '~/business-logic/model/users/user';\nimport {setRecentExperiments, setRecentProjects} from './common-dashboard.actions';\n\nexport interface IRecentTask {\n  id?: Task['id'];\n  name?: Task['name'];\n  user?: User;\n  type?: Task['type'];\n  status?: Task['status'];\n  created?: Task['created'];\n  started?: Task['started'];\n  completed?: Task['completed'];\n  project?: Project;\n}\n\nexport interface DashboardState {\n  recentProjects: Array<Project>;\n  recentTasks: Array<IRecentTask>;\n}\n\n// Todo remove selectedProjectId\nexport const dashboardInitState: DashboardState = {\n  recentProjects: [],\n  recentTasks   : [],\n};\n\nexport const commonDashboardReducers = [\n  on(setRecentProjects, (state, action) => ({...state, recentProjects: action.projects})),\n  on(setRecentExperiments, (state, action) => ({...state, recentTasks: action.experiments})),\n] as ReducerTypes<DashboardState, any>[];\n\nexport const commonDashboardReducer = createReducer(\n  dashboardInitState,\n  ...commonDashboardReducers\n);\n\nexport const selectDashboard      = createFeatureSelector<DashboardState>('dashboard');\nexport const selectRecentProjects = createSelector(selectDashboard, (state: DashboardState): Array<Project> => state ? state.recentProjects : []);\nexport const selectRecentTasks    = createSelector(selectDashboard, (state: DashboardState): Array<IRecentTask> => state ? state.recentTasks : []);\n","import {Project} from '../../business-logic/model/projects/project';\nimport {User} from '../../business-logic/model/users/user';\nimport {Task} from '../../business-logic/model/tasks/task';\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {SEARCH_ACTIONS} from './dashboard-search.consts';\nimport {Model} from '../../business-logic/model/models/model';\nimport {searchSetTerm} from './dashboard-search.actions';\nimport {ICommonSearchState} from '../common-search/common-search.reducer';\n\nexport interface ISearchState {\n  projects: Project[];\n  experiments: Task[];\n  models: Model[];\n  users: User[];\n  resultsCounter: number;\n  term: ICommonSearchState['searchQuery'];\n  forceSearch: boolean;\n  active: boolean;\n}\n\n\nexport const searchInitialState: ISearchState = {\n  term          : null,\n  forceSearch: false,\n  projects      : [],\n  users         : [],\n  experiments   : [],\n  models        : [],\n  resultsCounter: 0,\n  active        : false\n};\n\nexport function dashboardSearchReducer<ActionReducer>(state: ISearchState = searchInitialState, action) {\n  switch (action.type) {\n    case SEARCH_ACTIONS.ACTIVATE:\n      return {...state, active: true};\n    case SEARCH_ACTIONS.DEACTIVATE:\n      return {...state, active: false, term: searchInitialState.term, forceSearch: false};\n    case searchSetTerm.type: {\n      const act = action as ReturnType<typeof searchSetTerm>;\n      return {...state, term: act, forceSearch: act.force};\n    }\n    case SEARCH_ACTIONS.SET_PROJECTS:\n      return {...state, projects: action.payload.projects, resultsCounter: state.resultsCounter + 1};\n    case SEARCH_ACTIONS.SET_EXPERIMENTS:\n      return {...state, experiments: action.payload.experiments, resultsCounter: state.resultsCounter + 1};\n    case SEARCH_ACTIONS.SET_MODELS:\n      return {...state, models: action.payload.models, resultsCounter: state.resultsCounter + 1};\n    case SEARCH_ACTIONS.SEARCH_START:\n      return {...state, resultsCounter: 0};\n    case SEARCH_ACTIONS.SEARCH_CLEAR:\n      return {\n        ...state,\n        ...searchInitialState\n      };\n    default: {\n      return state;\n    }\n  }\n}\n\n\nexport const selectSearch             = createFeatureSelector<ISearchState>('search');\nexport const selectProjectsResults    = createSelector(selectSearch, (state: ISearchState): Array<Project> => state.projects);\nexport const selectExperimentsResults = createSelector(selectSearch, (state: ISearchState): Array<Task> => state.experiments);\nexport const selectModelsResults      = createSelector(selectSearch, (state: ISearchState): Array<Model> => state.models);\nexport const selectActiveSearch       = createSelector(selectSearch, (state: ISearchState): boolean => state.term?.query?.length >= 3 || state.forceSearch);\nexport const selectSearchTerm         = createSelector(selectSearch, (state: ISearchState)  => state.term);\nexport const selectResultsCounter     = createSelector(selectSearch, (state: ISearchState): number => state.resultsCounter);\n","<div class=\"sm-card-list-layout\">\n  <sm-project-card\n    *ngFor=\"let project of projectsList\"\n    [project]=\"project\"\n    (projectCardClicked)=\"projectCardClicked($event)\"\n    [hideMenu]=\"true\"\n  ></sm-project-card>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Project} from '../../../../business-logic/model/projects/project';\n\n@Component({\n  selector   : 'sm-projects-search-results',\n  templateUrl: './projects-search-results.component.html',\n  styleUrls  : ['./projects-search-results.component.scss']\n})\nexport class ProjectsSearchResultsComponent {\n  @Input() projectsList: Array<Project>;\n  @Output() projectClicked = new EventEmitter<Project>();\n\n  public projectCardClicked(project: Project) {\n    this.projectClicked.emit(project);\n  }\n\n}\n","<div class=\"sm-card-list-layout\">\n  <sm-experiment-card\n    *ngFor=\"let experiment of experimentsList\"\n    [experiment]=\"experiment\"\n    (experimentCardClicked)=\"experimentCardClicked($event)\"\n  ></sm-experiment-card>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {ITask} from '../../../../business-logic/model/al-task';\n\n@Component({\n  selector   : 'sm-experiments-search-results',\n  templateUrl: './experiments-search-results.component.html',\n  styleUrls  : ['./experiments-search-results.component.scss']\n})\nexport class ExperimentsSearchResultsComponent {\n  @Input() experimentsList: Array<Task>;\n  @Output() experimentClicked = new EventEmitter<ITask>();\n\n  public experimentCardClicked(experiment: ITask) {\n    this.experimentClicked.emit(experiment);\n  }\n\n}\n","<div class=\"sm-card-list-layout\">\n  <sm-model-card\n    *ngFor=\"let model of modelsList\"\n    [model]=\"model\"\n    (modelCardClicked)=\"modelCardClicked($event)\"\n  ></sm-model-card>\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Model} from '../../../../business-logic/model/models/model';\n\n@Component({\n  selector   : 'sm-models-search-results',\n  templateUrl: './models-search-results.component.html',\n  styleUrls  : ['./models-search-results.component.scss']\n})\nexport class ModelsSearchResultsComponent {\n  @Input() modelsList: Array<Model>;\n  @Output() modelClicked = new EventEmitter<Model>();\n\n  public modelCardClicked(model: Model) {\n    this.modelClicked.emit(model);\n  }\n\n}\n","<div class=\"search-container\">\n  <div class=\"container\">\n    <div class=\"pl-3 py-3\">\n      <span [ngClass]=\"{'active': activeLink === 'projects'}\" class=\"pointer category-link\"\n            (click)=\"activeLinkChanged.emit('projects')\">PROJECTS {{'(' + projectsList.length + ')'}}  </span>\n      <span [ngClass]=\"{'active': activeLink === 'experiments'}\" class=\"pointer category-link\"\n            (click)=\"activeLinkChanged.emit('experiments')\">EXPERIMENTS {{'(' + experimentsList.length + ')'}}  </span>\n      <span [ngClass]=\"{'active': activeLink === 'models'}\" class=\"pointer category-link\"\n            (click)=\"activeLinkChanged.emit('models')\">MODELS {{'(' + modelsList.length + ')'}}  </span>\n    </div>\n  </div>\n  <div *ngIf=\"activeLink === 'projects'\"  class=\"page-container\">\n    <sm-projects-search-results [projectsList]=\"projectsList\"\n                                (projectClicked)=\"projectClicked($event)\"></sm-projects-search-results>\n  </div>\n\n\n  <div *ngIf=\"activeLink === 'experiments'\" class=\"page-container\">\n    <sm-experiments-search-results [experimentsList]=\"experimentsList\"\n                                   (experimentClicked)=\"experimentClicked($event)\"></sm-experiments-search-results>\n  </div>\n\n  <div *ngIf=\"activeLink === 'models'\" class=\"page-container\">\n    <sm-models-search-results [modelsList]=\"modelsList\"\n                              (modelClicked)=\"modelClicked($event)\"></sm-models-search-results>\n  </div>\n\n</div>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {Task} from '../../../../business-logic/model/tasks/task';\nimport {ITask} from '../../../../business-logic/model/al-task';\nimport {Model} from '../../../../business-logic/model/models/model';\n\n@Component({\n  selector   : 'sm-search-results-page',\n  templateUrl: './search-results-page.component.html',\n  styleUrls  : ['./search-results-page.component.scss']\n})\nexport class SearchResultsPageComponent {\n  @Input() projectsList: Array<Project> = [];\n  @Input() experimentsList: Array<Task> = [];\n  @Input() modelsList: Array<Model>     = [];\n  @Input() activeLink                   = 'projects';\n\n  @Output() projectSelected    = new EventEmitter<Project>();\n  @Output() activeLinkChanged  = new EventEmitter<string>();\n  @Output() experimentSelected = new EventEmitter<ITask>();\n  @Output() modelSelected      = new EventEmitter<Model>();\n\n  public projectClicked(project: Project) {\n    this.projectSelected.emit(project);\n  }\n\n  public experimentClicked(experiment: ITask) {\n    this.experimentSelected.emit(experiment);\n  }\n\n  public modelClicked(model: Model) {\n    this.modelSelected.emit(model);\n  }\n\n}\n","<sm-search-results-page\n  *ngIf=\"activeSearch$ | async\"\n  (projectSelected)=\"projectCardClicked($event)\"\n  (experimentSelected)=\"taskSelected($event)\"\n  (modelSelected)=\"modelSelected($event)\"\n  (activeLinkChanged)=\"activeLinkChanged($event)\"\n  [projectsList]=\"projectsResults$ | async\"\n  [experimentsList]=\"experimentsResults$ | async\"\n  [modelsList]=\"modelsResults$ | async\"\n  [activeLink]=\"activeLink\"></sm-search-results-page>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {combineLatest, Observable, ObservedValueOf, Subscription} from 'rxjs';\nimport {filter, skip} from 'rxjs/operators';\nimport {Store} from '@ngrx/store';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {Model} from '../../../../business-logic/model/models/model';\nimport {DashboardSearchComponentBase} from '../../../../webapp-common/dashboard/dashboard-search.component.base';\nimport {SearchClear} from '../../../../webapp-common/dashboard-search/dashboard-search.actions';\n\n@Component({\n  selector   : '  sm-dashboard-search',\n  templateUrl: './dashboard-search.component.html',\n  styleUrls  : ['./dashboard-search.component.scss']\n})\nexport class DashboardSearchComponent extends DashboardSearchComponentBase implements OnInit, OnDestroy {\n\n  readonly tabsIndexes      = ['projects', 'experiments', 'models'];\n  private allResultsJoin$: Observable<[ObservedValueOf<Observable<Array<Project>>>, ObservedValueOf<Observable<any>>, ObservedValueOf<Observable<Array<Model>>>, ObservedValueOf<Observable<number>>]>;\n  private allResultsSubscription: Subscription;\n\n  constructor(public store: Store<any>, public router: Router) {\n    super(store);\n    this.allResultsJoin$ = combineLatest([this.projectsResults$, this.experimentsResults$, this.modelsResults$, this.resultsCounter$]);\n    this.syncAppSearch();\n  }\n\n  public ngOnInit(): void {\n    this.allResultsSubscription = this.allResultsJoin$.pipe(\n      skip(1),\n      filter(allResults => allResults[this.tabsIndexes.length] === this.tabsIndexes.length)\n    ).subscribe(allResults =>  this.setFirstActiveLink(allResults, this.tabsIndexes));\n  }\n\n  ngOnDestroy(): void {\n    this.store.dispatch(new SearchClear());\n    this.searchTermChanged('');\n    this.stopSyncSearch();\n    this.allResultsSubscription.unsubscribe();\n  }\n\n}\n","import {InitSearch, ResetSearch} from '../common-search/common-search.actions';\nimport {skip} from 'rxjs/operators';\nimport {Model} from '../../business-logic/model/models/model';\nimport {SearchDeactivate, searchStart} from '../dashboard-search/dashboard-search.actions';\nimport {IRecentTask} from './common-dashboard.reducer';\nimport {ITask} from '../../business-logic/model/al-task';\nimport {Observable} from 'rxjs';\nimport {ICommonSearchState, selectSearchQuery} from '../common-search/common-search.reducer';\nimport {Store} from '@ngrx/store';\nimport {\n  selectActiveSearch, selectExperimentsResults, selectModelsResults, selectProjectsResults,\n  selectResultsCounter,\n  selectSearchTerm\n} from '../dashboard-search/dashboard-search.reducer';\nimport {Project} from '../../business-logic/model/projects/project';\nimport {setSelectedProjectId} from '../core/actions/projects.actions';\nimport {isExample} from '../shared/utils/shared-utils';\n\nexport abstract class DashboardSearchComponentBase {\n\n  abstract store;\n  abstract router;\n  public activeLink: string = 'projects';\n  private searchSubs;\n  public searchQuery$: Observable<ICommonSearchState['searchQuery']>;\n  public activeSearch$: Observable<boolean>;\n  protected readonly resultsCounter$: Observable<number>;\n  public modelsResults$: Observable<Array<Model>>;\n  public projectsResults$: Observable<Array<Project>>;\n  public experimentsResults$: Observable<any>;\n  public searchTerm$: Observable<ICommonSearchState['searchQuery']>;\n\n  constructor(store: Store<any>){\n    this.searchQuery$        = store.select(selectSearchQuery);\n    this.activeSearch$       = store.select(selectActiveSearch);\n    this.resultsCounter$     = store.select(selectResultsCounter);\n    this.modelsResults$      = store.select(selectModelsResults);\n    this.projectsResults$    = store.select(selectProjectsResults);\n    this.experimentsResults$ = store.select(selectExperimentsResults);\n    this.searchTerm$         = store.select(selectSearchTerm);\n\n  }\n\n  stopSyncSearch() {\n    this.store.dispatch(new ResetSearch());\n    this.searchSubs.unsubscribe();\n  }\n\n  syncAppSearch() {\n    this.store.dispatch(new InitSearch('Search for all'));\n\n    this.searchSubs = this.searchQuery$\n      .pipe(skip(1))\n      .subscribe(query => this.searchTermChanged(query?.query, query?.regExp));\n  }\n\n  public modelSelected(model: Model) {\n    // TODO ADD task.id to route\n    const projectId = model.project ? model.project : '*';\n    this.router.navigateByUrl('projects/' + projectId + '/models/' + model.id);\n  }\n\n  public searchTermChanged(term: string, regExp?: boolean) {\n    if (term && term.length > 0) {\n      this.store.dispatch(searchStart({query:term, regExp, force: term.length < 3}));\n    } else {\n      this.activeLink = 'projects';\n      this.store.dispatch(new SearchDeactivate());\n    }\n  }\n\n  public projectCardClicked(project: Project) {\n    this.router.navigateByUrl(`projects/${project.id}`);\n    this.store.dispatch(setSelectedProjectId({projectId: project.id, example: isExample(project)}));\n  }\n\n  public taskSelected(task: IRecentTask | ITask) {\n    // TODO ADD task.id to route\n    const projectId = task.project ? task.project.id : '*';\n    return this.router.navigateByUrl('projects/' + projectId + '/experiments/' + task.id);\n  }\n\n\n  public activeLinkChanged(activeLink) {\n    this.activeLink = activeLink;\n  }\n\n  setFirstActiveLink(allResults, tabsIndexes: string[]) {\n    if (!(allResults[tabsIndexes.indexOf(this.activeLink)].length > 0)) {\n      const firstTabIndex = allResults.findIndex(list => list.length > 0);\n      if (firstTabIndex > -1) {\n        this.activeLink = tabsIndexes[firstTabIndex];\n      }\n    }\n  }\n}\n","<div class=\"sm-card-list-layout\">\n  <div #header class=\"sm-card-list-header\">\n    <div class=\"recent-title\">RECENT PROJECTS\n      <button class=\"btn btn-link view-all\" (click)=\"router.navigateByUrl('/projects')\">VIEW ALL</button>\n    </div>\n    <div>\n      <button *ngIf=\"(recentProjectsList$ | async).length >= cardsInRow\"\n              class=\"btn btn-primary d-flex align-items-center\"\n              (click)=\"openCreateProjectDialog()\">\n        <i class=\"al-icon al-color sm blue-400 al-ico-add mr-2\"></i>NEW PROJECT\n      </button>\n    </div>\n  </div>\n  <sm-project-card\n    *ngFor=\"let project of recentProjectsList$ | async\"\n    [project]=\"project\" (projectCardClicked)=\"projectCardClicked($event)\"\n    [hideMenu]=\"true\"\n  ></sm-project-card>\n  <sm-plus-card\n    *ngIf=\"(recentProjectsList$ | async).length < cardsInRow\"\n    [folder]=\"true\"\n    (plusCardClick)=\"openCreateProjectDialog()\"\n  ></sm-plus-card>\n</div>\n","import {Component, OnInit, Output, EventEmitter, AfterViewInit, ViewChild, ElementRef, OnDestroy} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {fromEvent, Observable, Subscription} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {Project} from '../../../../business-logic/model/projects/project';\nimport {selectRecentProjects} from '../../common-dashboard.reducer';\nimport {getRecentProjects} from '../../common-dashboard.actions';\nimport {ProjectDialogComponent} from '../../../shared/project-dialog/project-dialog.component';\nimport {resetSelectedProject, setSelectedProjectId} from '../../../core/actions/projects.actions';\nimport {selectCurrentUser} from '../../../core/reducers/users-reducer';\nimport {filter, take, throttleTime} from 'rxjs/operators';\nimport {isExample} from '../../../shared/utils/shared-utils';\nimport { CARDS_IN_ROW } from '../../common-dashboard.const';\n\n@Component({\n  selector   : 'sm-dashboard-projects',\n  templateUrl: './dashboard-projects.component.html',\n  styleUrls  : ['./dashboard-projects.component.scss']\n})\nexport class DashboardProjectsComponent implements OnInit, AfterViewInit, OnDestroy {\n  public recentProjectsList$: Observable<Array<Project>>;\n  private dialog: MatDialogRef<ProjectDialogComponent>;\n  private sub: Subscription;\n  readonly cardsInRow = CARDS_IN_ROW;\n\n  @Output() width = new EventEmitter<number>();\n\n  constructor(\n    private store: Store<any>,\n    public router: Router,\n    private matDialog: MatDialog\n  ) {\n    this.recentProjectsList$ = this.store.select(selectRecentProjects);\n  }\n\n  @ViewChild('header') header: ElementRef<HTMLDivElement>;\n\n  ngOnInit() {\n    this.store.dispatch(resetSelectedProject());\n    this.store.select(selectCurrentUser)\n      .pipe(filter(user => !!user), take(1))\n      .subscribe(() => this.store.dispatch(getRecentProjects()));\n  }\n\n  ngAfterViewInit() {\n    this.width.emit(this.header.nativeElement.getBoundingClientRect().width);\n    window.setTimeout(() => this.width.emit(this.header.nativeElement.getBoundingClientRect().width));\n    this.sub = fromEvent(window, 'resize')\n      .pipe(throttleTime(50))\n      .subscribe(() => this.width.emit(this.header.nativeElement.getBoundingClientRect().width));\n  }\n  public projectCardClicked(project: Project) {\n    this.router.navigateByUrl(`projects/${project.id}`);\n    this.store.dispatch(setSelectedProjectId({projectId: project.id, example: isExample(project)}));\n  }\n\n  public openCreateProjectDialog() {\n    this.dialog = this.matDialog.open(ProjectDialogComponent, {\n      data: {\n        mode: 'create',\n      }\n    });\n    this.dialog.afterClosed().subscribe(projectHasBeenCreated => {\n      if (projectHasBeenCreated) {\n        this.store.dispatch(getRecentProjects());\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.sub?.unsubscribe();\n    this.header = null;\n  }\n}\n","<sm-table [tableData]=\"tasks\"\n          [columns]=\"cols\"\n          [rowHeight]=\"52\"\n          [selectionMode]=\"null\"\n          [scrollable]=\"true\"\n          (rowClicked)=\"onExperimentSelected($event)\"\n>\n  <ng-template let-col\n               let-experiment=\"rowData\"\n               pTemplate=\"body\">\n    <ng-container [ngSwitch]=\"col.id\">\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.TYPE\">\n        <sm-experiment-type-icon-label [type]=\"experiment?.type\"></sm-experiment-type-icon-label>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.NAME\">\n        {{experiment.name}}\n      </ng-container>\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.PROJECT\">\n        {{experiment.project?.name}}\n      </ng-container>\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.STARTED\">\n        {{experiment.started | date : TIME_FORMAT_STRING}}\n      </ng-container>\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.LAST_UPDATE\">\n        {{experiment.last_update | date : TIME_FORMAT_STRING}}\n      </ng-container>\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.USER\">\n        {{experiment.user?.name}}\n      </ng-container>\n      <ng-container *ngSwitchCase=\"RECENT_TASKS_TABLE_COL_FIELDS.STATUS\">\n        <sm-experiment-status-icon-label [status]=\"experiment?.status\"></sm-experiment-status-icon-label>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        {{experiment[col.id]}}\n      </ng-container>\n    </ng-container>\n  </ng-template>\n</sm-table>\n","import {Component, Input, EventEmitter, Output} from '@angular/core';\nimport {IRecentTask} from '../../common-dashboard.reducer';\nimport {RECENT_EXPERIMENTS_TABLE_COLS, RECENT_TASKS_TABLE_COL_FIELDS} from '../../common-dashboard.const';\nimport {ISmCol} from '../../../shared/ui-components/data/table/table.consts';\nimport {TIME_FORMAT_STRING} from '../../../constants';\n\n@Component({\n  selector   : 'sm-recent-tasks-table',\n  templateUrl: './recent-experiment-table.component.html',\n  styleUrls  : ['./recent-experiment-table.component.scss']\n})\nexport class RecentExperimentTableComponent {\n\n  public readonly RECENT_TASKS_TABLE_COL_FIELDS = RECENT_TASKS_TABLE_COL_FIELDS;\n\n  @Input() tasks: Array<IRecentTask> = [];\n  @Output() taskSelected = new EventEmitter();\n  public cols: Array<ISmCol>;\n  TIME_FORMAT_STRING = TIME_FORMAT_STRING;\n\n  constructor() {\n    this.cols = RECENT_EXPERIMENTS_TABLE_COLS;\n  }\n\n  onExperimentSelected(event) {\n    this.taskSelected.emit(event.data);\n  }\n\n  // TODO: move to utils file or pipe.\n\n  public getElapsedTime(started = null, completed = null) {\n    const now = new Date();\n    const startTime = new Date(started);\n    const completedTime = new Date(completed);\n    const todayAtMidn = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const yesterdayAtMidn = new Date(todayAtMidn);\n    yesterdayAtMidn.setDate(yesterdayAtMidn.getDate() - 1);\n\n    const hours = this.convertMinsToHrsMins(completedTime.getTime() - startTime.getTime());\n    let elapsedTimeString = hours;\n    if (completedTime.getTime() > todayAtMidn.getTime()) {\n      elapsedTimeString += ` Hrs (${completedTime.toLocaleTimeString()})`;\n    } else if (completedTime.getTime() > yesterdayAtMidn.getTime()) {\n      elapsedTimeString += ` Hrs (Yesterday)`;\n    } else {\n      elapsedTimeString += ` (${completedTime.toLocaleDateString('en-GB')})`;\n    }\n    return elapsedTimeString;\n  }\n\n  private convertMinsToHrsMins(mins) {\n    const h = Math.floor(mins / 60);\n    const m = mins % 60;\n    const H = h < 10 ? '0' + h : h;\n    const M = m < 10 ? '0' + m : m;\n    return `${H}:${M}`;\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { IRecentTask} from '../../common-dashboard.reducer';\nimport {getRecentExperiments} from '../../common-dashboard.actions';\nimport { ITask } from '../../../../business-logic/model/al-task';\nimport {selectCurrentUser} from '../../../core/reducers/users-reducer';\nimport {filter, take} from 'rxjs/operators';\n\n@Component({\n  selector: 'sm-dashboard-experiments',\n  templateUrl: './dashboard-experiments.component.html',\n  styleUrls: ['./dashboard-experiments.component.scss']\n})\nexport class DashboardExperimentsComponent implements OnInit {\n  @Input() recentTasks: IRecentTask[];\n\n  constructor(private store: Store<any>, private router: Router) {\n  }\n\n  ngOnInit() {\n    this.store.select(selectCurrentUser)\n      .pipe(filter(user => !!user), take(1))\n      .subscribe(() => this.store.dispatch((getRecentExperiments())));\n  }\n\n  public taskSelected(task: IRecentTask | ITask) {\n    // TODO ADD task.id to route\n    const projectId = task.project ? task.project.id : '*';\n    return this.router.navigateByUrl('projects/' + projectId + '/experiments/' + task.id);\n  }\n\n}\n","<div class=\"recent-header\">\n  <div class=\"recent-title\">RECENT EXPERIMENTS</div>\n  <ng-content select=\"[header-buttons]\"></ng-content>\n</div>\n<div class=\"table-container\">\n  <sm-recent-tasks-table [tasks]=\"recentTasks\"\n                         (taskSelected)=\"taskSelected($event)\">\n  </sm-recent-tasks-table>\n</div>\n","<sm-dashboard-search [class.dashboard-search]=\"activeSearch$ | async\"></sm-dashboard-search>\n<div *ngIf=\"(activeSearch$ | async) !== true\" class=\"dashboard-body\">\n  <div class=\"recent\">\n    <sm-dashboard-projects (width)=\"setWidth($event)\"></sm-dashboard-projects>\n    <sm-dashboard-experiments\n      [style.width]=\"width && width > 900 ? width + 'px' : '100%'\"\n      [recentTasks]=\"recentTasks$| async\"\n    >\n      <div header-buttons>\n        <button\n          *smCheckPermission=\"true\"\n          class=\"btn btn-primary d-flex align-items-center\"\n          (click)=\"redirectToWorkers()\"\n        ><i class=\"al-icon al-ico-queues al-color light-grey-blue sm mr-2\"></i>MANAGE WORKERS AND QUEUES</button>\n      </div>\n    </sm-dashboard-experiments>\n  </div>\n</div>\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {DashboardComponent} from './dashboard.component';\n\nexport const routes: Routes = [\n  {path: '', component: DashboardComponent}\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule {\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Observable, Subscription} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {selectShowOnlyUserWork} from '../../webapp-common/core/reducers/users-reducer';\nimport {GetCurrentUserResponseUserObjectCompany} from '../../business-logic/model/users/getCurrentUserResponseUserObjectCompany';\nimport {filter, skip, take} from 'rxjs/operators';\nimport {setDeep} from '../../webapp-common/core/actions/projects.actions';\nimport {getRecentProjects, getRecentExperiments} from '../../webapp-common/dashboard/common-dashboard.actions';\nimport {selectActiveSearch} from '../../webapp-common/common-search/common-search.reducer';\nimport {selectFirstLogin} from '../../webapp-common/core/reducers/view.reducer';\nimport {MatDialog} from '@angular/material/dialog';\nimport {WelcomeMessageComponent} from '../../webapp-common/dashboard/dumb/welcome-message/welcome-message.component';\nimport {firstLogin} from '../../webapp-common/core/actions/layout.actions';\nimport {IRecentTask, selectRecentTasks} from '../../webapp-common/dashboard/common-dashboard.reducer';\n\n\n@Component({\n  selector: 'sm-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  public activeSearch$: Observable<boolean>;\n  public recentTasks$: Observable<Array<IRecentTask>>;\n  public workspace: GetCurrentUserResponseUserObjectCompany;\n  public width: number;\n  private welcomeSub: Subscription;\n  private showOnlyUserWorkSub: Subscription;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dialog: MatDialog,\n  ) {\n    this.activeSearch$ = this.store.select(selectActiveSearch);\n    this.recentTasks$ = this.store.select(selectRecentTasks);\n\n    this.showOnlyUserWorkSub = this.store.select(selectShowOnlyUserWork).pipe(skip(1)).subscribe(() => {\n      this.store.dispatch(getRecentProjects());\n      this.store.dispatch(getRecentExperiments());\n    });\n\n    this.welcomeSub = this.store.select(selectFirstLogin)\n      .pipe(\n        filter(first => !!first),\n        take(1)\n      )\n      .subscribe(() => {\n        this.showWelcome();\n      });\n  }\n\n  public redirectToWorkers() {\n    this.router.navigateByUrl('/workers-and-queues');\n  }\n\n  public ngOnInit(): void {\n    this.store.dispatch(setDeep({deep: false}));\n  }\n\n  ngOnDestroy(): void {\n    this.welcomeSub?.unsubscribe();\n  }\n\n  private showWelcome() {\n    this.dialog.open(WelcomeMessageComponent).afterClosed()\n      .subscribe(() => this.store.dispatch(firstLogin({first: false})));\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ApiProjectsService} from '../../business-logic/api-services/projects.service';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {requestFailed} from '../core/actions/http.actions';\nimport {activeLoader, deactivateLoader} from '../core/actions/layout.actions';\nimport {\n  getRecentExperiments,\n  getRecentProjects,\n  setRecentExperiments,\n  setRecentProjects,\n} from './common-dashboard.actions';\nimport {CARDS_IN_ROW} from './common-dashboard.const';\nimport {ApiTasksService} from '../../business-logic/api-services/tasks.service';\nimport {ProjectsGetAllExRequest} from '../../business-logic/model/projects/projectsGetAllExRequest';\nimport {catchError, mergeMap, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {ApiLoginService} from '../../business-logic/api-services/login.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../shared/ui-components/overlay/confirm-dialog/confirm-dialog.component';\nimport {Store} from '@ngrx/store';\nimport {ErrorService} from '../shared/services/error.service';\nimport {selectCurrentUser, selectShowOnlyUserWork} from '../core/reducers/users-reducer';\n\n@Injectable()\nexport class CommonDashboardEffects {\n  constructor(private actions: Actions, private projectsApi: ApiProjectsService,\n              private tasksApi: ApiTasksService, private loginApi: ApiLoginService,\n              private errorService: ErrorService, private store: Store<any>,\n              private dialog: MatDialog) {\n  }\n  /* eslint-disable @typescript-eslint/naming-convention */\n  activeLoader = createEffect(() => this.actions.pipe(\n    ofType(getRecentProjects, getRecentExperiments),\n    map(action => activeLoader(action.type))\n  ));\n\n  getRecentProjects = createEffect(() => this.actions.pipe(\n    ofType(getRecentProjects),\n    withLatestFrom(this.store.select(selectCurrentUser), this.store.select(selectShowOnlyUserWork)),\n    mergeMap(([action, user, showOnlyUserWork]) =>\n      this.projectsApi.projectsGetAllEx({\n        stats_for_state: ProjectsGetAllExRequest.StatsForStateEnum.Active,\n        include_stats: true,\n        order_by: ['featured', '-last_update'],\n        page: 0,\n        page_size: CARDS_IN_ROW,\n        active_users: (showOnlyUserWork ? [user.id] : null),\n        only_fields: ['name', 'company', 'user', 'created', 'default_output_destination']\n      }).pipe(\n          mergeMap(({projects}) => [setRecentProjects({projects}), deactivateLoader(action.type)]),\n          catchError(error => [deactivateLoader(action.type), requestFailed(error)])\n        )\n    )\n  ));\n\n  getRecentTasks = createEffect(() => this.actions.pipe(\n    ofType(getRecentExperiments),\n    withLatestFrom(this.store.select(selectCurrentUser), this.store.select(selectShowOnlyUserWork)),\n    switchMap(([action, user, showOnlyUserWork]) => this.tasksApi.tasksGetAllEx({\n        page: 0,\n        page_size: 5,\n        order_by: ['-last_update'],\n        status: ['published', 'closed', 'failed', 'stopped', 'in_progress', 'completed'],\n        type: ['__$not', 'annotation_manual', '__$not', 'annotation', '__$not', 'dataset_import'],\n        only_fields: ['type', 'status', 'created', 'name', 'id', 'last_update', 'started', 'project.name'],\n        system_tags: ['-archived'],\n        user: showOnlyUserWork ? [user.id] : null,\n      })\n        .pipe(\n          mergeMap(({tasks: experiments}) => [setRecentExperiments({experiments}), deactivateLoader(action.type)]),\n          catchError(err => [requestFailed(err), deactivateLoader(action.type)])\n        )\n    )\n  ));\n\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DashboardProjectsComponent} from './containers/dashboard-projects/dashboard-projects.component';\nimport {SMSharedModule} from '../shared/shared.module';\nimport {DashboardExperimentsComponent} from './containers/dashboard-experiments/dashboard-experiments.component';\nimport {RecentExperimentTableComponent} from './dumb/recent-experiment-table/recent-experiment-table.component';\nimport {ExperimentSharedModule} from '../../features/experiments/shared/experiment-shared.module';\nimport {ExperimentsCommonModule} from '../experiments/common-experiments.module';\nimport {CommonDashboardEffects} from './common-dashboard.effects';\nimport {CommonSearchModule} from '../common-search/common-search.module';\nimport {CommonLayoutModule} from '../layout/layout.module';\nimport {EffectsModule} from '@ngrx/effects';\nimport {ProjectsSharedModule} from '../../features/projects/shared/projects-shared.module';\nimport {CommonExperimentSharedModule} from '../experiments/shared/common-experiment-shared.module';\nimport {CommonProjectsModule} from '../projects/common-projects.module';\nimport {SharedModule} from '../../shared/shared.module';\nimport { WelcomeMessageComponent } from './dumb/welcome-message/welcome-message.component';\n\n@NgModule({\n  declarations: [DashboardProjectsComponent, DashboardExperimentsComponent, RecentExperimentTableComponent, WelcomeMessageComponent],\n  exports     : [DashboardProjectsComponent, DashboardExperimentsComponent],\n  imports: [\n    CommonModule,\n    SMSharedModule,\n    ExperimentsCommonModule,\n    ExperimentSharedModule,\n    CommonSearchModule,\n    ProjectsSharedModule,\n    CommonExperimentSharedModule,\n    EffectsModule.forFeature([CommonDashboardEffects]),\n    CommonLayoutModule,\n    ExperimentSharedModule,\n    CommonProjectsModule,\n    SharedModule\n  ]\n})\nexport class CommonDashboardModule {\n}\n","import {Injectable} from '@angular/core';\nimport {act, Actions, Effect, ofType} from '@ngrx/effects';\nimport {activeLoader, deactivateLoader} from '../core/actions/layout.actions';\nimport {\n  SearchActivate, SearchClear, searchExperiments, searchModels, searchProjects, searchSetTerm, searchStart, SetExperimentsResults, SetModelsResults, SetProjectsResults\n} from './dashboard-search.actions';\nimport {EXPERIMENT_SEARCH_ONLY_FIELDS, SEARCH_ACTIONS, SEARCH_PAGE_SIZE} from './dashboard-search.consts';\nimport {ApiProjectsService} from '../../business-logic/api-services/projects.service';\nimport {requestFailed} from '../core/actions/http.actions';\nimport {Store} from '@ngrx/store';\nimport {selectActiveSearch} from './dashboard-search.reducer';\nimport {ProjectsGetAllExRequest} from '../../business-logic/model/projects/projectsGetAllExRequest';\nimport {ApiTasksService} from '../../business-logic/api-services/tasks.service';\nimport {ApiModelsService} from '../../business-logic/api-services/models.service';\nimport {catchError, mergeMap, map, switchMap, withLatestFrom} from 'rxjs/operators';\nimport {escapeRegex} from '../shared/utils/shared-utils';\n\n@Injectable()\nexport class DashboardSearchEffects {\n  constructor(\n    private actions: Actions,\n    public projectsApi: ApiProjectsService,\n    public modelsApi: ApiModelsService,\n    public experimentsApi: ApiTasksService,\n    private store: Store<any>\n  ) {\n  }\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  @Effect()\n  activeLoader = this.actions.pipe(\n    ofType(SEARCH_ACTIONS.SEARCH_PROJECTS, SEARCH_ACTIONS.SEARCH_MODELS, SEARCH_ACTIONS.SEARCH_EXPERIMENTS),\n    map(action => activeLoader(action.type))\n  );\n  // add actions for each search\n  @Effect()\n  startSearch = this.actions.pipe(\n    ofType(searchStart.type),\n    withLatestFrom(this.store.select(selectActiveSearch)),\n    mergeMap(([action, active]: [ReturnType<typeof searchStart>, boolean]) => {\n      const actionsToFire = [];\n      if (!active) {\n        actionsToFire.push(new SearchClear());\n        actionsToFire.push(new SearchActivate());\n      }\n      actionsToFire.push(searchSetTerm(action));\n      actionsToFire.push(searchProjects(action));\n      actionsToFire.push(searchExperiments(action));\n      actionsToFire.push(searchModels(action));\n      return actionsToFire;\n    })\n  );\n\n  @Effect()\n  searchProjects = this.actions.pipe(\n    ofType(searchProjects.type),\n    switchMap((action: ReturnType<typeof searchProjects>) => this.projectsApi.projectsGetAllEx({\n      _any_: {\n        ...(action.query && {pattern: action.regExp ? action.query : escapeRegex(action.query) + '[^/]*$'}),\n        fields: ['name', 'id']\n      },\n      stats_for_state: ProjectsGetAllExRequest.StatsForStateEnum.Active,\n      scroll_id: null,\n      size: SEARCH_PAGE_SIZE,\n      include_stats: true,\n      only_fields: ['name', 'company', 'user', 'created', 'default_output_destination']\n    }).pipe(\n      mergeMap(res => [new SetProjectsResults(res.projects), deactivateLoader(action.type)]),\n      catchError(error => [deactivateLoader(action.type), requestFailed(error)])))\n  );\n\n  @Effect()\n  searchModels = this.actions.pipe(\n    ofType(searchModels.type),\n    switchMap((action: ReturnType<typeof searchModels>) => this.modelsApi.modelsGetAllEx({\n      _any_: {\n        ...(action.query && {pattern: action.regExp ? action.query : escapeRegex(action.query)}),\n        fields: ['name', 'id']\n      },\n      scroll_id: null,\n      size: SEARCH_PAGE_SIZE,\n      system_tags: ['-archived'],\n      only_fields: ['labels', 'ready', 'created', 'framework', 'user.name', 'name', 'parent.name', 'task.name', 'id', 'company']\n    }).pipe(\n      mergeMap(res => [new SetModelsResults(res.models), deactivateLoader(action.type)]),\n      catchError(error => [deactivateLoader(action.type), requestFailed(error)])))\n  );\n\n  @Effect()\n  searchExperiments = this.actions.pipe(\n    ofType(searchExperiments.type),\n    switchMap((action: ReturnType<typeof searchExperiments>) => this.experimentsApi.tasksGetAllEx({\n      _any_: {\n        ...(action.query && {pattern: action.regExp ? action.query : escapeRegex(action.query)}),\n        fields: ['name', 'id']\n      },\n      scroll_id: null,\n      size: SEARCH_PAGE_SIZE,\n      only_fields: EXPERIMENT_SEARCH_ONLY_FIELDS,\n      type: ['__$not', 'annotation_manual', '__$not', 'annotation', '__$not', 'dataset_import'],\n      system_tags: ['-archived']\n    }).pipe(\n      mergeMap(res => [new SetExperimentsResults(res.tasks), deactivateLoader(action.type)]),\n      catchError(error => [deactivateLoader(action.type), requestFailed(error)])))\n  );\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SMSharedModule} from '../../../webapp-common/shared/shared.module';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {DashboardSearchEffects} from '../../../webapp-common/dashboard-search/dashboard-search.effects';\nimport {ExperimentsSearchResultsComponent} from '../../../webapp-common/dashboard-search/dumb/experiments-search-results/experiments-search-results.component';\nimport {ModelsSearchResultsComponent} from '../../../webapp-common/dashboard-search/dumb/models-search-results/models-search-results.component';\nimport {ProjectsSearchResultsComponent} from '../../../webapp-common/dashboard-search/dumb/projects-search-results/projects-search-results.component';\nimport {ProjectsSharedModule} from '../../projects/shared/projects-shared.module';\nimport {SharedModule} from '../../../shared/shared.module';\nimport {dashboardSearchReducer} from '../../../webapp-common/dashboard-search/dashboard-search.reducer';\n\nconst declarations = [\n  ModelsSearchResultsComponent,\n  ProjectsSearchResultsComponent,\n  ExperimentsSearchResultsComponent,\n];\n\n@NgModule({\n  imports     : [\n    CommonModule,\n    SMSharedModule,\n    ProjectsSharedModule,\n    StoreModule.forFeature('search', dashboardSearchReducer),\n    EffectsModule.forFeature([DashboardSearchEffects]),\n    SharedModule\n  ],\n  declarations: [declarations],\n  exports     : [...declarations]\n})\nexport class DashboardSearchModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {DashboardComponent} from './dashboard.component';\nimport {ExperimentSharedModule} from '../experiments/shared/experiment-shared.module';\nimport {DashboardRoutingModule} from './dashboard-routing.module';\nimport {StoreModule} from '@ngrx/store';\nimport {GettingStartedCardComponent} from './dumb/getting-started-card/getting-started-card.component';\nimport {SMSharedModule} from '../../webapp-common/shared/shared.module';\nimport {CommonDashboardModule} from '../../webapp-common/dashboard/common-dashboard.module';\nimport {commonDashboardReducer} from '../../webapp-common/dashboard/common-dashboard.reducer';\nimport {DashboardSearchComponent} from './containers/dashboard-search/dashboard-search.component';\nimport {SearchResultsPageComponent} from './dumb/search-results-page/search-results-page.component';\nimport {SharedModule} from '../../shared/shared.module';\nimport {DashboardSearchModule} from './dashboard-search/dashboard-search.module';\nimport {ProjectDialogModule} from '../../webapp-common/shared/project-dialog/project-dialog.module';\nimport {ProjectsSharedModule} from '../projects/shared/projects-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ProjectsSharedModule,\n    ProjectDialogModule,\n    SMSharedModule,\n    ExperimentSharedModule,\n    DashboardRoutingModule,\n    StoreModule.forFeature('dashboard', commonDashboardReducer),\n    CommonDashboardModule,\n    SharedModule,\n    DashboardSearchModule\n  ],\n  declarations   : [DashboardComponent, GettingStartedCardComponent, DashboardSearchComponent, SearchResultsPageComponent]\n})\nexport class DashboardModule {\n}\n"]}